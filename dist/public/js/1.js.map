{"version":3,"file":"1.js","sources":["webpack://uwhealth//Users/lee/Sites/Other/Front-End-Framework/@src/components/async/async.html","webpack://uwhealth//Users/lee/Sites/Other/Front-End-Framework/@src/components/button/button.demo.html","webpack://uwhealth//Users/lee/Sites/Other/Front-End-Framework/@src/components/button/index.html"],"sourcesContent":["/*Babel»*/\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nfunction _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}\n/* @src/components/async/async.html generated by Svelte v2.9.7 */\n\n\nimport { addLoc, appendNode, assign, assignTrue, callAll, children, claimElement, claimText, createComment, createElement, createText, detachNode, getSpreadUpdate, init, insertNode, protoDev } from \"svelte/shared.js\";\nimport findExport from '@/helpers/find-export.js';\n\nfunction SSRComponent(\n/*Babel»*/\n_ref) {\n  /*Babel»*/\n  var webpack = _ref.webpack;\n  var load = webpack(); // Find module in webpack cache\n\n  var mod = __webpack_modules__[load];\n  var component = requireModule(mod, load);\n  return component && component;\n}\n\nfunction data() {\n  return {\n    props: {},\n    component: null,\n    loadingComponent: null,\n    errorComponent: null,\n    loader: null,\n    webpack: null,\n    error: null,\n    loading: false\n  };\n}\n\n;\nvar methods = {\n  /*Babel»*/\n  getComponent: function getComponent() {\n    /*Babel»*/\n    var _this$get = this.get(),\n        loader = _this$get.loader;\n\n    try {\n      if (loader) {\n        return loader().then(function (Component)\n        /*Babel»*/\n        {\n          return findExport(Component);\n        });\n      }\n    } catch (err) {\n      this.set({\n        error: err\n      });\n      return err;\n    }\n  }\n};\n/*Babel»*/\n\nfunction oncreate() {\n  return _oncreate.apply(this, arguments);\n}\n/*Babel»*/\n\n\nfunction _oncreate() {\n  _oncreate = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function\n  /*Babel»*/\n  _callee()\n  /*Babel»*/\n  {\n    var component;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            this.set({\n              loading: true\n            });\n            _context.next = 3;\n            return this.getComponent();\n\n          case 3:\n            component = _context.sent;\n            this.set({\n              component: component,\n              loading: false\n            });\n\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, this);\n  }));\n  return _oncreate.apply(this, arguments);\n}\n\n;\n\nfunction requireModule(mod, load) {\n  // Reject any modules not found in webpack\n  if (typeof mod === 'undefined') {\n    return false;\n  } // We pass the id, name\n\n\n  return findExport(__webpack_require__(mod.name || mod.id || load));\n}\n\nvar file = \"src/components/async/async.html\";\n\nfunction create_main_fragment(component, ctx) {\n  var if_block_anchor;\n\n  function select_block_type_1(ctx) {\n    if (ctx.component) return create_if_block;\n    if (ctx.loading && ctx.loadingComponent) return create_if_block_3;\n    if (ctx.SSRComponent) return create_if_block_4;\n    if (ctx.error) return create_if_block_5;\n    return null;\n  }\n\n  var current_block_type = select_block_type_1(ctx);\n  var if_block = current_block_type && current_block_type(component, ctx);\n  return {\n    c: function create() {\n      if (if_block) if_block.c();\n      if_block_anchor = createComment();\n    },\n    l: function claim(nodes) {\n      if (if_block) if_block.l(nodes);\n      if_block_anchor = createComment();\n    },\n    m: function mount(target, anchor) {\n      if (if_block) if_block.m(target, anchor);\n      insertNode(if_block_anchor, target, anchor);\n    },\n    p: function update(changed, ctx) {\n      if (current_block_type === (current_block_type = select_block_type_1(ctx)) && if_block) {\n        if_block.p(changed, ctx);\n      } else {\n        if (if_block) if_block.d(1);\n        if_block = current_block_type && current_block_type(component, ctx);\n        if (if_block) if_block.c();\n        if (if_block) if_block.m(if_block_anchor.parentNode, if_block_anchor);\n      }\n    },\n    d: function destroy(detach) {\n      if (if_block) if_block.d(detach);\n\n      if (detach) {\n        detachNode(if_block_anchor);\n      }\n    }\n  };\n} // (2:4) {#if component && props}\n\n\nfunction create_if_block_1(component, ctx) {\n  var switch_instance_anchor;\n  var switch_instance_spread_levels = [ctx.props];\n  var switch_value = ctx.component;\n\n  function switch_props(ctx) {\n    var switch_instance_initial_data = {};\n\n    for (var i = 0; i < switch_instance_spread_levels.length; i += 1) {\n      switch_instance_initial_data = assign(switch_instance_initial_data, switch_instance_spread_levels[i]);\n    }\n\n    return {\n      root: component.root,\n      store: component.store,\n      data: switch_instance_initial_data\n    };\n  }\n\n  if (switch_value) {\n    var switch_instance = new switch_value(switch_props(ctx));\n  }\n\n  return {\n    c: function create() {\n      if (switch_instance) switch_instance._fragment.c();\n      switch_instance_anchor = createComment();\n    },\n    l: function claim(nodes) {\n      if (switch_instance) switch_instance._fragment.l(nodes);\n      switch_instance_anchor = createComment();\n    },\n    m: function mount(target, anchor) {\n      if (switch_instance) {\n        switch_instance._mount(target, anchor);\n      }\n\n      insertNode(switch_instance_anchor, target, anchor);\n    },\n    p: function update(changed, ctx) {\n      var switch_instance_changes = changed.props ? getSpreadUpdate(switch_instance_spread_levels, [ctx.props]) : {};\n\n      if (switch_value !== (switch_value = ctx.component)) {\n        if (switch_instance) {\n          switch_instance.destroy();\n        }\n\n        if (switch_value) {\n          switch_instance = new switch_value(switch_props(ctx));\n\n          switch_instance._fragment.c();\n\n          switch_instance._mount(switch_instance_anchor.parentNode, switch_instance_anchor);\n        } else {\n          switch_instance = null;\n        }\n      } else if (switch_value) {\n        switch_instance._set(switch_instance_changes);\n      }\n    },\n    d: function destroy(detach) {\n      if (detach) {\n        detachNode(switch_instance_anchor);\n      }\n\n      if (switch_instance) switch_instance.destroy(detach);\n    }\n  };\n} // (4:4) {:else}\n\n\nfunction create_if_block_2(component, ctx) {\n  var switch_instance_anchor;\n  var switch_value = ctx.component;\n\n  function switch_props(ctx) {\n    return {\n      root: component.root,\n      store: component.store\n    };\n  }\n\n  if (switch_value) {\n    var switch_instance = new switch_value(switch_props(ctx));\n  }\n\n  return {\n    c: function create() {\n      if (switch_instance) switch_instance._fragment.c();\n      switch_instance_anchor = createComment();\n    },\n    l: function claim(nodes) {\n      if (switch_instance) switch_instance._fragment.l(nodes);\n      switch_instance_anchor = createComment();\n    },\n    m: function mount(target, anchor) {\n      if (switch_instance) {\n        switch_instance._mount(target, anchor);\n      }\n\n      insertNode(switch_instance_anchor, target, anchor);\n    },\n    p: function update(changed, ctx) {\n      if (switch_value !== (switch_value = ctx.component)) {\n        if (switch_instance) {\n          switch_instance.destroy();\n        }\n\n        if (switch_value) {\n          switch_instance = new switch_value(switch_props(ctx));\n\n          switch_instance._fragment.c();\n\n          switch_instance._mount(switch_instance_anchor.parentNode, switch_instance_anchor);\n        } else {\n          switch_instance = null;\n        }\n      }\n    },\n    d: function destroy(detach) {\n      if (detach) {\n        detachNode(switch_instance_anchor);\n      }\n\n      if (switch_instance) switch_instance.destroy(detach);\n    }\n  };\n} // (1:0) {#if component}\n\n\nfunction create_if_block(component, ctx) {\n  var if_block_anchor;\n\n  function select_block_type(ctx) {\n    if (ctx.component && ctx.props) return create_if_block_1;\n    return create_if_block_2;\n  }\n\n  var current_block_type = select_block_type(ctx);\n  var if_block = current_block_type(component, ctx);\n  return {\n    c: function create() {\n      if_block.c();\n      if_block_anchor = createComment();\n    },\n    l: function claim(nodes) {\n      if_block.l(nodes);\n      if_block_anchor = createComment();\n    },\n    m: function mount(target, anchor) {\n      if_block.m(target, anchor);\n      insertNode(if_block_anchor, target, anchor);\n    },\n    p: function update(changed, ctx) {\n      if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block) {\n        if_block.p(changed, ctx);\n      } else {\n        if_block.d(1);\n        if_block = current_block_type(component, ctx);\n        if_block.c();\n        if_block.m(if_block_anchor.parentNode, if_block_anchor);\n      }\n    },\n    d: function destroy(detach) {\n      if_block.d(detach);\n\n      if (detach) {\n        detachNode(if_block_anchor);\n      }\n    }\n  };\n} // (7:37) \n\n\nfunction create_if_block_3(component, ctx) {\n  var switch_instance_anchor;\n  var switch_instance_spread_levels = [ctx.props];\n  var switch_value = ctx.loadingComponent;\n\n  function switch_props(ctx) {\n    var switch_instance_initial_data = {};\n\n    for (var i = 0; i < switch_instance_spread_levels.length; i += 1) {\n      switch_instance_initial_data = assign(switch_instance_initial_data, switch_instance_spread_levels[i]);\n    }\n\n    return {\n      root: component.root,\n      store: component.store,\n      data: switch_instance_initial_data\n    };\n  }\n\n  if (switch_value) {\n    var switch_instance = new switch_value(switch_props(ctx));\n  }\n\n  return {\n    c: function create() {\n      if (switch_instance) switch_instance._fragment.c();\n      switch_instance_anchor = createComment();\n    },\n    l: function claim(nodes) {\n      if (switch_instance) switch_instance._fragment.l(nodes);\n      switch_instance_anchor = createComment();\n    },\n    m: function mount(target, anchor) {\n      if (switch_instance) {\n        switch_instance._mount(target, anchor);\n      }\n\n      insertNode(switch_instance_anchor, target, anchor);\n    },\n    p: function update(changed, ctx) {\n      var switch_instance_changes = changed.props ? getSpreadUpdate(switch_instance_spread_levels, [ctx.props]) : {};\n\n      if (switch_value !== (switch_value = ctx.loadingComponent)) {\n        if (switch_instance) {\n          switch_instance.destroy();\n        }\n\n        if (switch_value) {\n          switch_instance = new switch_value(switch_props(ctx));\n\n          switch_instance._fragment.c();\n\n          switch_instance._mount(switch_instance_anchor.parentNode, switch_instance_anchor);\n        } else {\n          switch_instance = null;\n        }\n      } else if (switch_value) {\n        switch_instance._set(switch_instance_changes);\n      }\n    },\n    d: function destroy(detach) {\n      if (detach) {\n        detachNode(switch_instance_anchor);\n      }\n\n      if (switch_instance) switch_instance.destroy(detach);\n    }\n  };\n} // (9:22) \n\n\nfunction create_if_block_4(component, ctx) {\n  var switch_instance_anchor;\n  var switch_instance_spread_levels = [ctx.props];\n  var switch_value = ctx.SSRComponent;\n\n  function switch_props(ctx) {\n    var switch_instance_initial_data = {};\n\n    for (var i = 0; i < switch_instance_spread_levels.length; i += 1) {\n      switch_instance_initial_data = assign(switch_instance_initial_data, switch_instance_spread_levels[i]);\n    }\n\n    return {\n      root: component.root,\n      store: component.store,\n      data: switch_instance_initial_data\n    };\n  }\n\n  if (switch_value) {\n    var switch_instance = new switch_value(switch_props(ctx));\n  }\n\n  return {\n    c: function create() {\n      if (switch_instance) switch_instance._fragment.c();\n      switch_instance_anchor = createComment();\n    },\n    l: function claim(nodes) {\n      if (switch_instance) switch_instance._fragment.l(nodes);\n      switch_instance_anchor = createComment();\n    },\n    m: function mount(target, anchor) {\n      if (switch_instance) {\n        switch_instance._mount(target, anchor);\n      }\n\n      insertNode(switch_instance_anchor, target, anchor);\n    },\n    p: function update(changed, ctx) {\n      var switch_instance_changes = changed.props ? getSpreadUpdate(switch_instance_spread_levels, [ctx.props]) : {};\n\n      if (switch_value !== (switch_value = ctx.SSRComponent)) {\n        if (switch_instance) {\n          switch_instance.destroy();\n        }\n\n        if (switch_value) {\n          switch_instance = new switch_value(switch_props(ctx));\n\n          switch_instance._fragment.c();\n\n          switch_instance._mount(switch_instance_anchor.parentNode, switch_instance_anchor);\n        } else {\n          switch_instance = null;\n        }\n      } else if (switch_value) {\n        switch_instance._set(switch_instance_changes);\n      }\n    },\n    d: function destroy(detach) {\n      if (detach) {\n        detachNode(switch_instance_anchor);\n      }\n\n      if (switch_instance) switch_instance.destroy(detach);\n    }\n  };\n} // (11:15) \n\n\nfunction create_if_block_5(component, ctx) {\n  var div, text, text_1;\n  return {\n    c: function create() {\n      div = createElement(\"div\");\n      text = createText(\"Oh no: \");\n      text_1 = createText(ctx.error);\n      this.h();\n    },\n    l: function claim(nodes) {\n      div = claimElement(nodes, \"DIV\", {}, false);\n      var div_nodes = children(div);\n      text = claimText(div_nodes, \"Oh no: \");\n      text_1 = claimText(div_nodes, ctx.error);\n      div_nodes.forEach(detachNode);\n      this.h();\n    },\n    h: function hydrate() {\n      addLoc(div, file, 11, 4, 359);\n    },\n    m: function mount(target, anchor) {\n      insertNode(div, target, anchor);\n      appendNode(text, div);\n      appendNode(text_1, div);\n    },\n    p: function update(changed, ctx) {\n      if (changed.error) {\n        text_1.data = ctx.error;\n      }\n    },\n    d: function destroy(detach) {\n      if (detach) {\n        detachNode(div);\n      }\n    }\n  };\n}\n\nfunction Async(options) {\n  /*Babel»*/\n  var _this = this;\n\n  this._debugName = '<Async>';\n  if (!options || !options.target && !options.root) throw new Error(\"'target' is a required option\");\n  init(this, options);\n  this._state = assign(data(), options.data);\n\n  this._recompute({\n    webpack: 1\n  }, this._state);\n\n  if (!('webpack' in this._state)) console.warn(\"<Async> was created without expected data property 'webpack'\");\n  if (!('component' in this._state)) console.warn(\"<Async> was created without expected data property 'component'\");\n  if (!('props' in this._state)) console.warn(\"<Async> was created without expected data property 'props'\");\n  if (!('loading' in this._state)) console.warn(\"<Async> was created without expected data property 'loading'\");\n  if (!('loadingComponent' in this._state)) console.warn(\"<Async> was created without expected data property 'loadingComponent'\");\n  if (!('error' in this._state)) console.warn(\"<Async> was created without expected data property 'error'\");\n  this._intro = true;\n\n  if (!options.root) {\n    this._oncreate = [];\n    this._beforecreate = [];\n    this._aftercreate = [];\n  }\n\n  this._fragment = create_main_fragment(this, this._state);\n\n  this.root._oncreate.push(function () {\n    oncreate.call(_this);\n\n    _this.fire(\"update\", {\n      changed: assignTrue({}, _this._state),\n      current: _this._state\n    });\n  });\n\n  if (options.target) {\n    var nodes = children(options.target);\n    options.hydrate ? this._fragment.l(nodes) : this._fragment.c();\n    nodes.forEach(detachNode);\n\n    this._mount(options.target, options.anchor);\n\n    this._lock = true;\n    callAll(this._beforecreate);\n    callAll(this._oncreate);\n    callAll(this._aftercreate);\n    this._lock = false;\n  }\n}\n\nassign(Async.prototype, protoDev);\nassign(Async.prototype, methods);\n\nAsync.prototype._checkReadOnly = function _checkReadOnly(newState) {\n  if ('SSRComponent' in newState && !this._updatingReadonlyProperty) throw new Error(\"<Async>: Cannot set read-only property 'SSRComponent'\");\n};\n\nAsync.prototype._recompute = function _recompute(changed, state) {\n  if (changed.webpack) {\n    if (this._differs(state.SSRComponent, state.SSRComponent = SSRComponent(state))) changed.SSRComponent = true;\n  }\n};\n\nexport default Async;","/* @src/components/button/button.demo.html generated by Svelte v2.9.7 */\nimport { addLoc, appendNode, assign, callAll, children, claimElement, claimText, createElement, createFragment, createText, destroyEach, detachNode, getSpreadUpdate, init, insertNode, protoDev, setAttribute } from \"svelte/shared.js\";\nimport capitalize from '@/helpers/title-case';\nimport Button from \"./index.html\";\nimport Demo from \"@/modules/demo/index.html\";\nimport Async from \"@/components/async/async.html\";\n\nfunction data() {\n  return {\n    widths: ['normal', 'wide', 'compact'],\n    asyncButton: {\n      loader: function\n      /*Babel»*/\n      loader()\n      /*Babel»*/\n      {\n        return import('./index.html');\n      },\n      webpack: function\n      /*Babel»*/\n      webpack()\n      /*Babel»*/\n      {\n        return require.resolveWeak('./index.html');\n      },\n      props: {\n        width: ['wide'],\n        body: 'Async button'\n      }\n    }\n  };\n}\n\nvar file = \"src/components/button/button.demo.html\";\n\nfunction add_css() {\n  var style = createElement(\"style\");\n  style.id = 'svelte-1o0xyhp-style';\n  style.textContent = \".button-holder.svelte-1o0xyhp{display:inline-block;padding:1rem 1rem 1rem 0}.button-holder--wide.svelte-1o0xyhp{min-width:20%}.btn.svelte-1o0xyhp{margin-bottom:1rem;margin-right:1rem;vertical-align:middle}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnV0dG9uLmRlbW8uaHRtbCIsInNvdXJjZXMiOlsiYnV0dG9uLmRlbW8uaHRtbCJdLCJzb3VyY2VzQ29udGVudCI6WyI8c3R5bGU+XG4gICAgLmJ1dHRvbi1ob2xkZXIge1xuICAgICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gICAgICAgIHBhZGRpbmc6IDFyZW0gMXJlbSAxcmVtIDA7XG4gICAgfVxuICAgIC5idXR0b24taG9sZGVyLS13aWRlIHtcbiAgICAgICAgbWluLXdpZHRoOiAyMCU7XG4gICAgfVxuXG4gICAgLmJ0biB7XG4gICAgICAgIG1hcmdpbi1ib3R0b206IDFyZW07XG4gICAgICAgIG1hcmdpbi1yaWdodDogMXJlbTtcbiAgICAgICAgdmVydGljYWwtYWxpZ246IG1pZGRsZTtcbiAgICB9XG48L3N0eWxlPlxuXG48RGVtbyBkZW1vVGl0bGU9XCJCdXR0b25zXCIgdmFyaWFudHM9XCJ7dHJ1ZX1cIiBjdXJyZW50Um91dGU9XCJCdXR0b25cIj5cbiAgICA8ZGl2IHNsb3Q9XCJoZWFkZXJcIj5cbiAgICAgICAgPEJ1dHRvbj5XaGF0dXA8L0J1dHRvbj5cbiAgICA8L2Rpdj5cbiAgICA8ZGl2IHNsb3Q9XCJ2YXJpYW50c1wiPlxuICAgICAgICB7I2VhY2ggd2lkdGhzIGFzIGJ1dHRvblR5cGV9XG4gICAgICAgIDxkaXYgY2xhc3M9XCJidXR0b24taG9sZGVyIGJ1dHRvbi1ob2xkZXItLXtidXR0b25UeXBlfVwiPlxuICAgICAgICAgICAgPEJ1dHRvbiB0eXBlPVwie2J1dHRvblR5cGV9XCIgYm9keT1cIntjYXBpdGFsaXplKGJ1dHRvblR5cGUpfVwiLz5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIHsvZWFjaH1cbiAgICAgICAgPEFzeW5jIHsuLi5hc3luY0J1dHRvbn0gLz5cbiAgICA8L2Rpdj5cbjwvRGVtbz5cblxuPHNjcmlwdD5cbmltcG9ydCBjYXBpdGFsaXplIGZyb20gJ0AvaGVscGVycy90aXRsZS1jYXNlJztcblxuZXhwb3J0IGRlZmF1bHQge1xuICAgIGNvbXBvbmVudHM6IHtcbiAgICAgICAgQnV0dG9uOiAnLi9pbmRleC5odG1sJyxcbiAgICAgICAgRGVtbzogJ0AvbW9kdWxlcy9kZW1vL2luZGV4Lmh0bWwnLFxuICAgICAgICBBc3luYzogJ0AvY29tcG9uZW50cy9hc3luYy9hc3luYy5odG1sJyxcbiAgICB9LFxuICAgIGRhdGE6ICgpID0+ICh7XG4gICAgICAgIHdpZHRoczogWydub3JtYWwnLCAnd2lkZScsICdjb21wYWN0J10sXG4gICAgICAgIGFzeW5jQnV0dG9uOiB7XG4gICAgICAgICAgICBsb2FkZXI6ICgpID0+IGltcG9ydCgnLi9pbmRleC5odG1sJyksXG4gICAgICAgICAgICB3ZWJwYWNrOiAoKSA9PiByZXF1aXJlLnJlc29sdmVXZWFrKCcuL2luZGV4Lmh0bWwnKSxcbiAgICAgICAgICAgIHByb3BzOiB7XG4gICAgICAgICAgICAgICAgd2lkdGg6IFsnd2lkZSddLFxuICAgICAgICAgICAgICAgIGJvZHk6ICdBc3luYyBidXR0b24nLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICB9KSxcbiAgICBoZWxwZXJzOiB7IGNhcGl0YWxpemUgfSxcbn07XG48L3NjcmlwdD5cbiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDSSxjQUFjLGVBQUMsQ0FBQyxBQUNaLE9BQU8sQ0FBRSxZQUFZLENBQ3JCLE9BQU8sQ0FBRSxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLEFBQzdCLENBQUMsQUFDRCxvQkFBb0IsZUFBQyxDQUFDLEFBQ2xCLFNBQVMsQ0FBRSxHQUFHLEFBQ2xCLENBQUMsQUFFRCxJQUFJLGVBQUMsQ0FBQyxBQUNGLGFBQWEsQ0FBRSxJQUFJLENBQ25CLFlBQVksQ0FBRSxJQUFJLENBQ2xCLGNBQWMsQ0FBRSxNQUFNLEFBQzFCLENBQUMifQ== */\";\n  appendNode(style, document.head);\n}\n\nfunction create_main_fragment(component, ctx) {\n  var text, div, text_1, text_3, div_1, text_4, text_6;\n  var button = new Button({\n    root: component.root,\n    store: component.store,\n    slots: {\n      default: createFragment()\n    }\n  });\n  var each_value = ctx.widths;\n  var each_blocks = [];\n\n  for (var i = 0; i < each_value.length; i += 1) {\n    each_blocks[i] = create_each_block(component, get_each_context(ctx, each_value, i));\n  }\n\n  var async_spread_levels = [ctx.asyncButton];\n  var async_initial_data = {};\n\n  for (var i = 0; i < async_spread_levels.length; i += 1) {\n    async_initial_data = assign(async_initial_data, async_spread_levels[i]);\n  }\n\n  var async = new Async({\n    root: component.root,\n    store: component.store,\n    data: async_initial_data\n  });\n  var demo_initial_data = {\n    demoTitle: \"Buttons\",\n    variants: true,\n    currentRoute: \"Button\"\n  };\n  var demo = new Demo({\n    root: component.root,\n    store: component.store,\n    slots: {\n      default: createFragment(),\n      header: createFragment(),\n      variants: createFragment()\n    },\n    data: demo_initial_data\n  });\n  return {\n    c: function create() {\n      text = createText(\"\\n    \");\n      div = createElement(\"div\");\n      text_1 = createText(\"Whatup\");\n\n      button._fragment.c();\n\n      text_3 = createText(\"\\n    \");\n      div_1 = createElement(\"div\");\n\n      for (var i = 0; i < each_blocks.length; i += 1) {\n        each_blocks[i].c();\n      }\n\n      text_4 = createText(\"\\n        \");\n\n      async._fragment.c();\n\n      text_6 = createText(\"\\n\");\n\n      demo._fragment.c();\n\n      this.h();\n    },\n    l: function claim(nodes) {\n      text = claimText(nodes, \"\\n    \");\n      div = claimElement(nodes, \"DIV\", {\n        slot: true\n      }, false);\n      var div_nodes = children(div);\n      text_1 = claimText(nodes, \"Whatup\");\n\n      button._fragment.l(div_nodes);\n\n      div_nodes.forEach(detachNode);\n      text_3 = claimText(nodes, \"\\n    \");\n      div_1 = claimElement(nodes, \"DIV\", {\n        slot: true\n      }, false);\n      var div_1_nodes = children(div_1);\n\n      for (var i = 0; i < each_blocks.length; i += 1) {\n        each_blocks[i].l(div_1_nodes);\n      }\n\n      text_4 = claimText(div_1_nodes, \"\\n        \");\n\n      async._fragment.l(div_1_nodes);\n\n      div_1_nodes.forEach(detachNode);\n      text_6 = claimText(nodes, \"\\n\");\n\n      demo._fragment.l(nodes);\n\n      this.h();\n    },\n    h: function hydrate() {\n      setAttribute(div, \"slot\", \"header\");\n      addLoc(div, file, 17, 4, 346);\n      setAttribute(div_1, \"slot\", \"variants\");\n      addLoc(div_1, file, 20, 4, 413);\n    },\n    m: function mount(target, anchor) {\n      appendNode(text, demo._slotted.default);\n      appendNode(div, demo._slotted.header);\n      appendNode(text_1, button._slotted.default);\n\n      button._mount(div, null);\n\n      appendNode(text_3, demo._slotted.default);\n      appendNode(div_1, demo._slotted.variants);\n\n      for (var i = 0; i < each_blocks.length; i += 1) {\n        each_blocks[i].m(div_1, null);\n      }\n\n      appendNode(text_4, div_1);\n\n      async._mount(div_1, null);\n\n      appendNode(text_6, demo._slotted.default);\n\n      demo._mount(target, anchor);\n    },\n    p: function update(changed, ctx) {\n      if (changed.widths) {\n        each_value = ctx.widths;\n\n        for (var i = 0; i < each_value.length; i += 1) {\n          var child_ctx = get_each_context(ctx, each_value, i);\n\n          if (each_blocks[i]) {\n            each_blocks[i].p(changed, child_ctx);\n          } else {\n            each_blocks[i] = create_each_block(component, child_ctx);\n            each_blocks[i].c();\n            each_blocks[i].m(div_1, text_4);\n          }\n        }\n\n        for (; i < each_blocks.length; i += 1) {\n          each_blocks[i].d(1);\n        }\n\n        each_blocks.length = each_value.length;\n      }\n\n      var async_changes = changed.asyncButton ? getSpreadUpdate(async_spread_levels, [ctx.asyncButton]) : {};\n\n      async._set(async_changes);\n    },\n    d: function destroy(detach) {\n      button.destroy();\n      destroyEach(each_blocks, detach);\n      async.destroy();\n      demo.destroy(detach);\n    }\n  };\n} // (22:8) {#each widths as buttonType}\n\n\nfunction create_each_block(component, ctx) {\n  var div, div_class_value;\n  var button_initial_data = {\n    type: ctx.buttonType,\n    body: capitalize(ctx.buttonType)\n  };\n  var button = new Button({\n    root: component.root,\n    store: component.store,\n    data: button_initial_data\n  });\n  return {\n    c: function create() {\n      div = createElement(\"div\");\n\n      button._fragment.c();\n\n      this.h();\n    },\n    l: function claim(nodes) {\n      div = claimElement(nodes, \"DIV\", {\n        class: true\n      }, false);\n      var div_nodes = children(div);\n\n      button._fragment.l(div_nodes);\n\n      div_nodes.forEach(detachNode);\n      this.h();\n    },\n    h: function hydrate() {\n      div.className = div_class_value = \"button-holder button-holder--\" + ctx.buttonType + \" svelte-1o0xyhp\";\n      addLoc(div, file, 22, 8, 480);\n    },\n    m: function mount(target, anchor) {\n      insertNode(div, target, anchor);\n\n      button._mount(div, null);\n    },\n    p: function update(changed, ctx) {\n      var button_changes = {};\n      if (changed.widths) button_changes.type = ctx.buttonType;\n      if (changed.widths) button_changes.body = capitalize(ctx.buttonType);\n\n      button._set(button_changes);\n\n      if (changed.widths && div_class_value !== (div_class_value = \"button-holder button-holder--\" + ctx.buttonType + \" svelte-1o0xyhp\")) {\n        div.className = div_class_value;\n      }\n    },\n    d: function destroy(detach) {\n      if (detach) {\n        detachNode(div);\n      }\n\n      button.destroy();\n    }\n  };\n}\n\nfunction get_each_context(ctx, list, i) {\n  var child_ctx = Object.create(ctx);\n  child_ctx.buttonType = list[i];\n  child_ctx.each_value = list;\n  child_ctx.buttonType_index = i;\n  return child_ctx;\n}\n\nfunction Button_demo(options) {\n  this._debugName = '<Button_demo>';\n  if (!options || !options.target && !options.root) throw new Error(\"'target' is a required option\");\n  init(this, options);\n  this._state = assign(data(), options.data);\n  if (!('widths' in this._state)) console.warn(\"<Button_demo> was created without expected data property 'widths'\");\n  if (!('asyncButton' in this._state)) console.warn(\"<Button_demo> was created without expected data property 'asyncButton'\");\n  this._intro = true;\n  if (!document.getElementById(\"svelte-1o0xyhp-style\")) add_css();\n\n  if (!options.root) {\n    this._oncreate = [];\n    this._beforecreate = [];\n    this._aftercreate = [];\n  }\n\n  this._fragment = create_main_fragment(this, this._state);\n\n  if (options.target) {\n    var nodes = children(options.target);\n    options.hydrate ? this._fragment.l(nodes) : this._fragment.c();\n    nodes.forEach(detachNode);\n\n    this._mount(options.target, options.anchor);\n\n    this._lock = true;\n    callAll(this._beforecreate);\n    callAll(this._oncreate);\n    callAll(this._aftercreate);\n    this._lock = false;\n  }\n}\n\nassign(Button_demo.prototype, protoDev);\n\nButton_demo.prototype._checkReadOnly = function _checkReadOnly(newState) {};\n\nexport default Button_demo;","/* @src/components/button/index.html generated by Svelte v2.9.7 */\nimport { addLoc, appendNode, assign, children, claimElement, claimText, createElement, createText, detachNode, init, insertNode, protoDev, reinsertChildren } from \"svelte/shared.js\";\nimport modifiers from '@/helpers/class-modifiers';\nimport titleCase from '@/helpers/title-case.js';\n\nfunction data() {\n  return {\n    body: 'Button',\n    icon: false,\n    iconUrl: false,\n    attrs: false,\n    type: []\n  };\n}\n\nfunction setup(thisComponent) {\n  thisComponent.TYPES = ['wide', 'compact', ''];\n}\n\n;\nvar file = \"src/components/button/index.html\";\n\nfunction create_main_fragment(component, ctx) {\n  var button,\n      span,\n      slot_content_default = component._slotted.default,\n      text,\n      span_class_value,\n      text_3,\n      button_class_value;\n\n  function select_block_type(ctx) {\n    if (ctx.icon) return create_if_block;\n    if (ctx.iconUrl) return create_if_block_1;\n    return null;\n  }\n\n  var current_block_type = select_block_type(ctx);\n  var if_block = current_block_type && current_block_type(component, ctx);\n  return {\n    c: function create() {\n      button = createElement(\"button\");\n      span = createElement(\"span\");\n\n      if (!slot_content_default) {\n        text = createText(ctx.body);\n      }\n\n      text_3 = createText(\"\\n    \");\n      if (if_block) if_block.c();\n      this.h();\n    },\n    l: function claim(nodes) {\n      button = claimElement(nodes, \"BUTTON\", {\n        class: true\n      }, false);\n      var button_nodes = children(button);\n      span = claimElement(button_nodes, \"SPAN\", {\n        class: true\n      }, false);\n      var span_nodes = children(span);\n      text = claimText(span_nodes, ctx.body);\n      span_nodes.forEach(detachNode);\n      text_3 = claimText(button_nodes, \"\\n    \");\n      if (if_block) if_block.l(button_nodes);\n      button_nodes.forEach(detachNode);\n      this.h();\n    },\n    h: function hydrate() {\n      span.className = span_class_value = \"btn__body \" + modifiers(ctx.type, 'btn__body--');\n      addLoc(span, file, 1, 4, 52);\n      button.className = button_class_value = \"btn \" + modifiers(ctx.type, 'btn--');\n      addLoc(button, file, 0, 0, 0);\n    },\n    m: function mount(target, anchor) {\n      insertNode(button, target, anchor);\n      appendNode(span, button);\n\n      if (!slot_content_default) {\n        appendNode(text, span);\n      } else {\n        appendNode(slot_content_default, span);\n      }\n\n      appendNode(text_3, button);\n      if (if_block) if_block.m(button, null);\n    },\n    p: function update(changed, ctx) {\n      if (!slot_content_default) {\n        if (changed.body) {\n          text.data = ctx.body;\n        }\n      }\n\n      if (changed.type && span_class_value !== (span_class_value = \"btn__body \" + modifiers(ctx.type, 'btn__body--'))) {\n        span.className = span_class_value;\n      }\n\n      if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block) {\n        if_block.p(changed, ctx);\n      } else {\n        if (if_block) if_block.d(1);\n        if_block = current_block_type && current_block_type(component, ctx);\n        if (if_block) if_block.c();\n        if (if_block) if_block.m(button, null);\n      }\n\n      if (changed.type && button_class_value !== (button_class_value = \"btn \" + modifiers(ctx.type, 'btn--'))) {\n        button.className = button_class_value;\n      }\n    },\n    d: function destroy(detach) {\n      if (detach) {\n        detachNode(button);\n      }\n\n      if (slot_content_default) {\n        reinsertChildren(span, slot_content_default);\n      }\n\n      if (if_block) if_block.d();\n    }\n  };\n} // (7:4) {#if icon}\n\n\nfunction create_if_block(component, ctx) {\n  var span,\n      slot_content_icon = component._slotted.icon,\n      text,\n      span_class_value;\n  return {\n    c: function create() {\n      span = createElement(\"span\");\n\n      if (!slot_content_icon) {\n        text = createText(ctx.icon);\n      }\n\n      this.h();\n    },\n    l: function claim(nodes) {\n      span = claimElement(nodes, \"SPAN\", {\n        class: true\n      }, false);\n      var span_nodes = children(span);\n      text = claimText(span_nodes, ctx.icon);\n      span_nodes.forEach(detachNode);\n      this.h();\n    },\n    h: function hydrate() {\n      span.className = span_class_value = \"btn__icon \" + modifiers(ctx.type, 'btn__icon--');\n      addLoc(span, file, 7, 8, 195);\n    },\n    m: function mount(target, anchor) {\n      insertNode(span, target, anchor);\n\n      if (!slot_content_icon) {\n        appendNode(text, span);\n      } else {\n        appendNode(slot_content_icon, span);\n      }\n    },\n    p: function update(changed, ctx) {\n      if (!slot_content_icon) {\n        if (changed.icon) {\n          text.data = ctx.icon;\n        }\n      }\n\n      if (changed.type && span_class_value !== (span_class_value = \"btn__icon \" + modifiers(ctx.type, 'btn__icon--'))) {\n        span.className = span_class_value;\n      }\n    },\n    d: function destroy(detach) {\n      if (detach) {\n        detachNode(span);\n      }\n\n      if (slot_content_icon) {\n        reinsertChildren(span, slot_content_icon);\n      }\n    }\n  };\n} // (13:21) \n\n\nfunction create_if_block_1(component, ctx) {\n  var img, img_class_value, img_src_value;\n  return {\n    c: function create() {\n      img = createElement(\"img\");\n      this.h();\n    },\n    l: function claim(nodes) {\n      img = claimElement(nodes, \"IMG\", {\n        class: true,\n        src: true,\n        alt: true\n      }, false);\n      var img_nodes = children(img);\n      img_nodes.forEach(detachNode);\n      this.h();\n    },\n    h: function hydrate() {\n      img.className = img_class_value = \"btn__icon btn__icon--image \" + modifiers(ctx.type, 'btn__icon--');\n      img.src = img_src_value = {\n        iconUrl: ctx.iconUrl\n      };\n      img.alt = \"\";\n      addLoc(img, file, 13, 8, 373);\n    },\n    m: function mount(target, anchor) {\n      insertNode(img, target, anchor);\n    },\n    p: function update(changed, ctx) {\n      if (changed.type && img_class_value !== (img_class_value = \"btn__icon btn__icon--image \" + modifiers(ctx.type, 'btn__icon--'))) {\n        img.className = img_class_value;\n      }\n\n      if (changed.iconUrl && img_src_value !== (img_src_value = {\n        iconUrl: ctx.iconUrl\n      })) {\n        img.src = img_src_value;\n      }\n    },\n    d: function destroy(detach) {\n      if (detach) {\n        detachNode(img);\n      }\n    }\n  };\n}\n\nfunction Index(options) {\n  this._debugName = '<Index>';\n  if (!options || !options.target && !options.root) throw new Error(\"'target' is a required option\");\n  init(this, options);\n  this._state = assign(data(), options.data);\n  if (!('type' in this._state)) console.warn(\"<Index> was created without expected data property 'type'\");\n  if (!('body' in this._state)) console.warn(\"<Index> was created without expected data property 'body'\");\n  if (!('icon' in this._state)) console.warn(\"<Index> was created without expected data property 'icon'\");\n  if (!('iconUrl' in this._state)) console.warn(\"<Index> was created without expected data property 'iconUrl'\");\n  this._intro = true;\n  this._slotted = options.slots || {};\n  this.slots = {};\n  this._fragment = create_main_fragment(this, this._state);\n\n  if (options.target) {\n    var nodes = children(options.target);\n    options.hydrate ? this._fragment.l(nodes) : this._fragment.c();\n    nodes.forEach(detachNode);\n\n    this._mount(options.target, options.anchor);\n  }\n}\n\nassign(Index.prototype, protoDev);\n\nIndex.prototype._checkReadOnly = function _checkReadOnly(newState) {};\n\nsetup(Index);\nexport default Index;"],"mappingsmxsourceRoot":""}