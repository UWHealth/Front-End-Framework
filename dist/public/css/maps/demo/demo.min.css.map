{"version":3,"sources":["demo.css"],"names":[],"mappings":"AA4uCA,iBACE,oBAAc,AAAd,aAAc,AACd,kBAAmB,AACnB,UAAW,AACX,uCAA4C,AAC5C,sBAAuB,AACvB,UAAY,CACb,AAED,uBACE,kBAAe,AAAf,cAAe,AACf,oBAAsB,AACtB,wBAA0B,AAC1B,iBAAkB,AAClB,iBAAmB,CACpB,AAED,6BACE,yBAA0B,AAC1B,aAAe,CAChB,AAED,aACE,oBAAc,AAAd,aAAc,AACd,sBAAoB,AAApB,mBAAoB,AACpB,yBAA0B,AAC1B,sDAAgE,AAChE,WAAY,AACZ,YAAa,AACb,kBAAoB,CACrB,AAED,oBACE,sBAAuB,AACvB,qBAAsB,AACtB,uBAA4B,AAC5B,eAAoB,CACrB,AAED,WACE,kBAAoB,CACrB,AAED,gCAEE,eAAoB,CACrB,AAED,iBACE,oBAAqB,AACrB,oBAAqB,AACrB,uBAAwB,AACxB,6CAAkD,AAClD,kCAAoC,AACpC,aAAe,CAChB,AAED,eACE,kBAAmB,AACnB,oBAAqB,AACrB,mBAAqB,CACtB","file":"../../demo/demo.min.css","sourcesContent":["/* SG\n# Functions/General [[dev]]\n\n##### `safe-get-function()`\n###### function(`$function-name`)\nWrapper for Sass' internal `get-function` that allows for compatibility across Sass versions. If version is higher than 3.5, then the function is returned, otherwise, just the name.\n\n@returns function\n\n\n##### `cache()`\n###### function(`$function-name, $args...`)\nMemoize (cache) a function's return values and arguments. Speeds up processing on intensive functions that get called many times (with the same arguments).\n\n_NOTE: This can actually **increase** processing time if used too often or on simple functions as the lookup process isn't free. Every cached value is unique._\n\n@returns function result\n\n*/\n/* SG\n# Functions/Conversion [[dev]]\n\n##### `strip-units()`\n###### function(`$value`)\nRemove lengths (`px`, `em`, `rem`, etc.) from a value. Usually a variable. This is sometimes required because Sass cannot calculate incompatible units (`px * rem` for instance).\n[Reference](http://stackoverflow.com/questions/12328259/how-do-you-strip-the-unit-from-any-number-in-sass)\n\n##### `percentage-to-decimal()`\n###### function(`$percentage`)\nChanges percent value to decimal.\n@returns number\n\n##### `px-to-vw()`\n###### function(`$pixels`)\nConverts pixel dimensions to viewport width (vw) dimensions.\n@returns number (vw)\n\n##### `px-to-rems()`\n###### function(`$pixels, $base-font:` `$$base-font-size`)\nFunction for calculating `rem` values. Used by `@px-to-rems()`. The `$base-size` is used to calculate the value (e.g. if the body's font-size is `16px`, then the rem value of `24px` would be `1.5rem`).\n@returns number (rems)\n@alias rems()\n\n##### `px-to-ems()`\n###### function(`$pixels, $context:` `$base-font-size`)\nFunction for calculating `em` values. The `$context` is used to calculate the final value. Different from `px-to-rems()` by generating a value with an `em`. `$context` is often necessary based on the situation.\n@returns number(ems)\n@alias ems()\n\n##### `list-to-string()`\n###### function(`$list, $separator:','`)\nConverts a list to a string with an optional separator.\n@returns string\n@alias str-join()\n\n##### `str-to-number()`\n###### function(`$string, $unitless: false`)\nConverts a number-like string to a number. Since Sass accepts quoted and non-quoted values like `\"10px\"` and `10px`, but can only do math on the unquoted (number) value, it is sometimes necessary to convert/cast a string to a number.\n@returns number\n*/\n/* SG\n# Functions/Strings & Lists [[dev]]\n\n[Reference](https://github.com/devatrox/Sunglass)\n\n##### `contains()`\n###### function(`$data, $value`)\nGeneric `contains` function(similar to javascript's `indexOf`). Parses a variable(`$data`) for a `$value`. Returns boolean.\n@returns boolean\n@requires `str-contains()`, `list-contains()`\n\n##### `str-join()`\n###### function(`$list, $separator:','`)\nConverts a map or list to a string (`('this', 'and', 'this')` becomes `'this,and,this'`).\n@returns string\n\n##### `str-contains()`\n###### function(`$string, $value, $pos: 0`)\nChecks if a `$string` contains a `$value`. Optionally accepts a start positon.\n@returns boolean\n\n##### `str-append()`\n###### function(`$data, $separator:','`)\nAdds one string to another (e.g. `str-append('hello', 'world')` becomes `hello world`).\n@returns string\n\n##### `list-contains()`\n###### function(`$list, $value`)\nChecks whether a `$list` contains a `$value`.\n@returns boolean\n\n##### `list-print()`\n###### function(`$list, $depth: 1`)\nUsed to turn a list into a flat string. For debug purposes.\n@returns string\n\n##### `to-list()`\n###### function(`$string, $keep: 'both'`)\nConvert a value to a list. `$keep` accepts `'keys'`, `'values'`, or `'both'` for map conversion.\n@returns list\n\n*/\n/* SG\n# Functions/Maps [[dev]]\n\n@file globals/_gl-functions.scss\n\n[Reference](http://www.sitepoint.com/extra-map-functions-sass/)\n\n##### `map-deep-set()`\n###### function(`$map, $keys... [, $value]`)\nAdd to a deeply nested map key. Accepts any number of keys, but the final value is the new key.\n@returns map\n\n##### `map-depth()`\n###### function(`$map`)\nFind depth of a `$map`.\n@returns number\n\n##### `map-has-keys()`\n###### `[map], [key(s) to be checked ...]`\nDetermine whether a map contains certain keys.\n@returns boolean\n@alias map-contains-keys()\n\n##### `map-has-nested-keys()`\n###### function(`$map`, `$keys...`)\nCheck for the value of a nested key.\n@returns boolean\n@alias map-contains-nested-keys()\n\n##### `map-get-nested()`\n###### function(`$map`, `$keys...`)\nReturns nested map values. A deep version of Sass' `map-get()`.\n@returns string, boolean, list, or map\n\n##### `map-extend()`\n###### function(`$map`, `$maps...`(`$deep:true`))\nMerges multiple maps. Similar to jQuery's .extend().\n@returns map\n\n##### `map-add-depth()`\n###### function(`$map`, `$new-key:'base'`)\nAdds one level to a map using the new key to a map. Used by `generate_color_varations()`. (e.g. `(key: value, key: value)` becomes `(key:(new-key: value), key:(new-key: value))` )\n@returns map\n\n##### `map-print()`\n###### function(`$map`, `$level:1`)\nPrints map into a string (in a JSON-esque format). Useful for debugging.\n@returns string\n@alias map-inspect()\n\n*/\n/* SG\n# Typography/Sizing [[dev]]\n\n##### `modular-scale()`\n###### function(`$scale`, `$ratio:``$$scale-ratio`)\nGenerates a pixel value that is an exponent of a ratio (`$ratio` defaults to `$$scale-ratio` value).\n@requires `pow()`, `cache()`, `strip-units()`\n@returns number (pixels)\n\n*/\n/* SG\n# Typography/Line-height [[dev]]\n\n##### `baseline()`\n###### function(`$font-size`, `$baseline`, `$multiple:1`)\n\nAligns a font-size to a baseline (`$baseline`). Returns a unitless value relative to the font-size (equivilent to ems). An optional multiple can be used to make a variation on the given baseline (using decimals will divide the the baseline).\n@returns number (unitless)\n\n*/\n/* SG\n\n##### `baseline-curve()`\n###### function(`$x` , `$accel`: `1`)\n\nCalculates a where a number(`$x`) sits along a parabolic arc (curve). Change the curve's severity by changing its `$accel`.\nAn `$accel` of 1 is a smooth arc.\n`$accel` accepts any number between -2 and 2.35. A negative will invert the curve.\n\nThe formula: `y = (sqrt((x^1)+x) - sqrt(x^1)) / .4142135623730951`\n( [Visual](https://www.desmos.com/calculator/qswvc6q9kt) )\n\n@returns number\n@requires `sqrt()`, `pow()`\n\n*/\n/*SG\n\n##### `baseline-calc()`\n###### function(`$font-size: $base-font-size, $font-base: $base-font-size, $basline-slack: $font-looseness`)\n\nCreates unitless line-heights that align to the baseline grid with consideration to the aesthetics of a given font size. Essentially makes sure larger font-sizes have smaller line-heights, while smaller font-sizes have larger ones.\nUses constraints based on upper and lower limits of pleasing line-heights, and finds where a given font-size should sit within those constraints. `$$font-looseness` increases the upper constraints, allowing for taller line heights on larger font sizes.\nDepends on `baseline()` for calculation and `baseline-curve()` to determine the deviance from the upper and lower constraints.\n\n@returns number (unitless)\n@requires `baseline()`, `baseline-curve()`\n\n*/\n/* SG\n\n# Functions/Math [[dev]]\n\nMost functions taken from [Sassy Math](https://github.com/Team-Sass/Sassy-math/blob/master/sass/math.scss).\n\n*/\n/* SG\n\n##### `pow()`\n###### function(`$number`, `$exponent`, `$precision:12`)\n\nA more robust exponent multiplication which allows for decimal-based exponents. This **fully** replaces Compass' pow() function (allows for float-based exponents).\n\n[Reference](https://gist.github.com/nathancrank/7539155)\n\n@returns number\n@requires log()\n@alias exponent()\n\n*/\n/* SG\n\n##### `log()`\n###### function(`$x`)\nReturns the natural logarithm of a number.\n\n```scss\n$value:   log(2)  // 0.69315\n$value2:  log(10) // 2.30259\n```\n\n@returns number\n\n*/\n/* SG\n\n##### `frexp()`\n###### function(`$x`)\nReturns a two-element list containing the normalized fraction and exponent of number.\n\n@returns list (fraction, exponent)\n\n*/\n/* SG\n\n##### `ldexp()`\n###### function(`$x, $exp`)\n\nReturns $x * 2^$exp\n\n*/\n/* SG\n\n##### `exp()`\n###### function(`$x`)\n\nReturns E^x, where x is the argument, and E is Euler's constant, the base of the natural logarithms.\n\n```scss\n$value: exp(1)  // 2.71828\n$value2: exp(-1) // 0.36788\n```\n\n@returns Number\n\n*/\n/* SG\n\n##### `fact()`\n###### function(`$x`)\n\nReturns the factorial of a non-negative integer.\n\n```scss\n$value:  fact(0) // 1\n$value2: fact(8) // 40320\n```\n@return Number\n\n*/\n/* SG\n\n##### `gcd()`\n###### function(`$number-1`, `$number-2`)\n\nGreatest Common Divisor calculation (useful for calculating grids and widths).\n@returns number\n\n*/\n/* SG\n\n##### `lcm()`\n###### function(`$a`, `$b`)\n\nFinds the least common multiple. Use with caution...if there is no LCM, then you compilation will error out.\n\n@returns number\n\n*/\n/* SG\n\n##### `nth_root()`\n###### function(`$base`, `$n:2`, `$precision:12`)\n\nAdvanced calculation for square roots, cube roots, etc. of a value.\n[Reference](http://rosettacode.org/wiki/Nth_root#JavaScript)\n\n@returns number\n\n*/\n/* SG\n\n##### `sqrt()`\n###### function(`$base`, `$precision:12`)\n\nFind the square root of a value.\n\n@returns number\n@alias `sqroot()`\n\n*/\n/* SG\n\n##### `sin()`\n###### function(`$angle`)\n\nDetermines the Sine of an angle.\n[Reference](https://unindented.org/articles/trigonometry-in-sass/)\n\n@returns number\n*/\n/* SG\n\n##### `cos()`\n###### function(`$angle`)\n\nDetermines the Cosine of an angle.\n@returns number\n\n*/\n/* SG\n##### `tan()`\n###### function(`$angle`)\n\nDetermines the Tangent of an angle.\n@returns number\n\n*/\n/* SG\n\n##### `golden()`\n###### function(`$base: 1`)\n\nGet the golden ratio from `$base`.\n@returns number\n@alias `$$golden_ratio`\n\n*/\n/* SG\n# Colors/Lookup [[dev]]\n\n@file tools/_t-color-functions.scss\n\n@priority 99\n\n##### `colors()`\n###### function(`$color-name, $tone: 'base', $opacity: 1`)\nGet a color value from the global `$$base-colors` map. Darker and lighter tones are available by passing a second string.\n\n```scss\n.foo {\n    background-color: colors(links, light));\n}\n```\n\nPassing only a color name will default to the 'base' color.\n\n@alias color(), clr()\n@requires `$$base-colors`\n\n[Reference](http://blog.12spokes.com/web-design-development/simple-css-color-management-with-sass/)\n*/\n/* SG\n# Colors/Lookup [[dev]]\n\n##### `combine-color-maps()`\n###### function(`$map1 , $map2`)\nSpecialized function used by `generate-color-variations()` to merge two color maps.\n\n@returns map\n\n*/\n/* SG\n# Colors/Manipulation [[dev]]\n\n##### `generate-color-varations()`\n###### function( `$map: $colors, $functions: (tint, tint, tint, shade, shade, shade), $increments: (20%, 40%, 80%, 20%, 40%, 80%), $variations: (light, lighter, lightest, dark, darker, darkest), $blending-colors: null`)\n\nTakes base color values and generates a full color palette. Used by the `$$base-colors` map to create a project's palette, accessible via `colors()`.\n\n**Arguments:**\n* `$map`: Color map you want to create variations of. Defaults to `$$base-colors`.\n* `$functions`: color functions used to generate variations (e.g. lighten or darken). Can use any `blend` function, provided `$blending-colors` are provided.\n* `$increments`: percentage amount to apply `$function` to each `$variations`.\n* `$variations`: actual names for each color tone when `colors()` used.\n* `$blending-colors`: used when a function is a `blend`. Can be a list or a single color.\n\n@requires `combine-color-maps()`\n\n*/\n/* SG\n# Colors/Manipulation [[dev]]\n\n\n##### `black-or-white()`\n###### function(`$color`)\nChange text color based on background-color's darkness.\n\n```scss\ndiv {\n    background-color: #f8cd12;\n    color: set_text_color(#f8cd12);\n}\n// Your text color would be black because #f8cd12 and #00000 have more contrast.\n```\n@alias set-text-color()\n@requires `color-luminance`\n\n*/\n/* SG\n##### `pick-best-color()`\n###### function(`$base, $colors, $tolerance: 0`)\nCompares a set of colors against `$base` and returns the color with the most contrast. `$colors` should be a list.\n[Taken from here](https://gist.github.com/voxpelli/6304812)\n\n```scss\ndiv {\n    color: pick_best_color(#f8cd12, (#a0a0c0, #fff, #2c2c2c));\n}\n// The function would test the colors and find that #2c2c2c is the best.\n```\n@requires `color-contrast()`, `color-luminance()`\n@returns color\n*/\n/* SG\n##### `color-contrast()`\n###### function(`$color1, $color2`)\nFind contrast between two colors.\n[Adapted from color.js](https://github.com/LeaVerou/contrast-ratio/blob/gh-pages/color.js)\n\n@requires `color-luminance()`\n@returns number(0 - 1)\n*/\n/* SG\n##### `color-luminance()`\n###### function(`$color1`)\nFind the relative luminance of a color. Used by `color-contrast()`. [Adapted from color.js](https://github.com/LeaVerou/contrast-ratio/blob/gh-pages/color.js)\n@alias luma()\n@returns number(0 - 1)\n*/\n/* SG\n# Colors/Debugging [[dev]]\n\n@file tools/_t-color-functions.scss\n\n##### `@color-palette-output()`\n###### mixin(`$selector`, `$color-map:` `$$base-colors`)\nDebugging tool that creates a pretty color palette (in columns) using psuedo selectors (nth-child required). Used for \"color blocks\" output, in style guide.\n\n@requires `map-add-depth()`, `black-or-white()`\n\n*/\n/* SG\n\n# Colors/Blending Modes [[dev]]\n\n@file tools/_t-blend-modes.scss\n\n@priority 1\n\n[Taken from Sass Blend Modes](https://github.com/heygrady/scss-blend-modes/blob/master/stylesheets/_blend-modes.scss)\n\n##### `blend-normal()`\n###### function(`$forground, $background, $amount:0`)\n\n##### `blend-multiply()`\n###### function(`$forground, $background, $amount:0`)\n\n##### `blend-lighten()`\n###### function(`$forground, $background, $amount:0`)\n\n##### `blend-darken()`\n###### function(`$forground, $background, $amount:0`)\n\n##### `blend-lineardodge()`\n###### function(`$forground, $background, $amount:0`)\n\n##### `blend-linearburn()`\n###### function(`$forground, $background, $amount:0`)\n\n##### `blend-difference`\n###### function(`$forground, $background, $amount:0`)\n\n##### `blend-screen()`\n###### function(`$forground, $background, $amount:0`)\n\n##### `blend-exclusion()`\n###### function(`$forground, $background, $amount:0`)\n\n##### `blend-multiply()`\n###### function(`$forground, $background, $amount:0`)\n\n*/\n/* SG\n# Variables/Easing [[dev]]\n\nEach easing variable is a cubic-bezier value that specifies rate of change of an animation. [See easings for more](http://www.easings.net).\n\n[Reference](https://github.com/matthewlein/Ceaser/blob/master/developer/)\n\n*/\n/* SG\n# Config/Propagation [[dev]]\n\n#### `@globalize-config()`\nPulls together config variables and routes them into structures expected by the framework, then makes them global.\nFor instance, the `$$type-h1-size` variable is accepted as a list, but will be available as a single size, while making `$type-h1-lh` available.\n\n*/\n/* SG\n# Typography/Font Face [[dev]]\n\n##### `@fonts()`\n###### mixin(`$name`: `$$font-file-name`, `$path: $$font-file-location`, `$weights`: `$$font-weights`, `$italics`: `$$font-italics`)\nA wrapper function for `@font-face()`. Takes global configuration variables and passes them to `@font-face()`. Loops through each `$name` based on `$weights` and `$italics`. Uses `$path` and `$name` to point to font files. Formats these variables so they can be passed to `@font-face()`.\n\nFont file names must be the same as their CSS font-family values. Example: arial font, 400 weight would be arial400.ttf and the CSS value would be font-family: 'arial'; font-weight: 400.\n\n@requires `@font-face()`\n\n##### `@font-face()`\n###### mixin(`$name`, `$font-files`, `$weight:false`,` $style:false`, `$eot:false`)\nGenerates cross-browser font-face declarations when called.\n$name is required, arbitrary, and what you will use in font stacks.\n**Arguments:**\n* $font-files is required using font-files('relative/location', 'format'). For best results use this order: woff, opentype/truetype, svg\n* $eot is required by IE, and is a relative location of the eot file.\n* $weight shows if the font is bold, defaults to normal\n* $style defaults to normal, might be also italic\n\nBased on [Compass' font-face mixin](http://compass-style.org/reference/compass/css3/font_face/).\n\n*/\n/* SG\n# Mixins/Media Queries [[dev]]\n\n@file globals/tools/_t-media-queries.scss\n\n##### `@media-query()`\n###### mixin(`$media-queries...`)\nEnclose a block of code with a media query as named in `$breakpoints`. To create more consolodated code, most (if not all) media queries should be called through this mixin. Multiple media-queries can be defined, separated by a comma. This will place your content into multiple separate media-queries at once (useful if you need the same css at different breakpoints).\n\n**Alternative Uses:**\n\n* Passing multiple media queries separated by an `'and'` (quoted) to combine them, compiles to something like `@media screen and (min-width: 500px) and (max-width: 900px){}`.\n\n* Passing a value like `min-width 1200px` or `max-height 300px` allows for arbitrary breakpoints.\n\n* Passing `max 1200px 'and' smalls` will create a combined media-query with a predefined one from `$$breakpoints`.\n\n* Passing `height smalls` will replace `width` with `height` within the `smalls` breakpoint. Similarly, using `min smalls` would replace 'max' with 'min'.\n\n@requires `mq-arglist-to-map()`, `mq-parse-query-args()` `$$breakpoints`\n@alias @mq(), @breakpoint(), @bp()\n\n*/\n/* SG\n# Mixins/Overrides [[dev]]\n\n##### `@create-overrides()`\n###### mixin(`$map, $breakpoints, $namespace: \"\"`)\nTakes a map of class names and style properties and outputs utility (override) classes over a specified number of breakpoints. Useful for creating a number of single-use classes over multiple breakpoints. Always makes property declarations `!important`.\n\nExample:\n```scss\n//Input\n@include creat-overrides(\n    (\n        \"class-name\": (\n            \"property\": \"value\",\n        ),\n        \"float-right, align_right\": (\n            \"float\": \"right\"\n        )\n    ),\n    ('smalls', 'bigs')\n);\n\n//CSS-output\n.float-left {\n    float: left !important;\n}\n.float-right,\n.align_right {\n    float: right !important;\n}\n@media (max-width: 600px) {\n    .float-left {\n        float: left !important;\n    }\n    .float-right,\n    .align_right {\n        float: right !important;\n    }\n}\n@media (min-width: 601px) {\n    ...\n}\n```\n##### `@_override-output()`\n###### mixin(`$map, $namespace: \"\"`)\nUsed exclusively by `@create-overrides()` to iterate through a map of classes, properties, and values to create responsive classes.\n\n*/\n/* SG\n\n# Mixins/CSS Helpers [[dev]]\n\n##### `@specificity()`\n###### mixin(`$specificity: 1`)\nSpecificity increaser. Useful for increasing specificity of a selector instead of using `!important`.\n```scss\n.class {\n    @include specificity(2) {\n        color: red;\n    }\n}\n\n//css\n.class.class {\n    color: red;\n}\n\n```\n[Reference](http://www.sitepoint.com/selector-specificity-css-preprocessors/)\n\n*/\n/* SG\n##### `@opacity()`\n###### mixin(`$opacity`)\nCross-browser (including IE8-) opacity.\n[Reference](https://gist.github.com/jgv/745754)\n\n*/\n/* SG\n##### `@border()`\n###### mixin(`$border`)\nAllows creating many border properties at once. Works like the standard border shorthand style but allows varied styles on different border directions.\n\n```scss\n\t//scss\n\t.foo {\n\t\t@include border(2px 3px solid dashed dotted blue currentColor yellow);\n\t}\n\n\t//css\n\t.foo {\n\t\tborder-width: 2px 3px;\n\t\tborder-style: solid dashed dotted;\n\t\tborder-color: blue currentColor yellow;\n\t}\n```\n*/\n/* SG\n\n# Mixins/Buttons [[dev]]\n\n##### `@button()`\n###### mixin(`$bg-color`: `color('links')`, `$text-color`: `null`, `$border`: `null`, `$radius`: `null`, `$text-radius`: `null`, `$style`: `null`, `$inset`: `false`)\nGenerates common button styles, allowing for simple creation of more complex gradient styles. Intelligently excludes unnecessary styles from states like hover, focus, and active. _Does not generate hover, focus, or active psuedo selectors on its own._\n\n**Accepted arguments**\n* `$bg-color`: Color values. This cannot accept null.\n* `$text-color`: Color or null (null will let the mixin decide the best color based on contrast).\n* `$border`: Any border properties (colors, styles, widths) or `null`. Uses the `@border()` mixin.\n* `$radius`: `border-radius` values. `null` produces no border-radius property.\n* `$style`: `null`, `shiny` or `reflective`.\n   `shiny` creates a simple gradient backgroud based on the `$bg-color`.\n   `reflective` creates a stacked gradient based on the `$bg-color`.\n* `$inset`: Boolean. `True` adds a dark box-shadow inset.\n   If combined with 'shiny' or 'reflective' `$style`, background gradients are inverted.\n\n*/\n/* SG\n# Tools/Z-Index [[dev]]\n\n@file globals/tools/_t-zindex.scss\n\n##### `z()`\n###### function(`$layer`, `$modifier: false`)\nReturns a numeric value (used for z-index) from a named layer, stored in `$$z-index`. Changing the modifier to anything other than `false` will add 1 plus however many times the value has been called. So, if you've called `z(head, true)` 5 times, and `head`'s default value is 100, you would get a value of 105.\n\nThe `$modifier` is useful if you'd like to closely layer z-indexes within the same module. It is rarely necessary, though since z-indexes stack.\n\n*/\n/* SG\n# Tools/Display Utilities [[dev]]\n\n@file globals/tools/_t-display.scss\n\n##### `@display-utilities()`\n###### mixin(`$namespace:\"\", $silent:false, $important:true, $class-list:$display-classes`)\nGenerates classes with display properties defined in `$class-list`. Intelligently extends duplicated display properties.\n\n\n##### `@display-utilities-init()`\n###### mixin(`$breakpoints: $all-breakpoints, $namespace: '', $silent: true, $important: false`)\nThe responsive component to `@display-utilities()`. Invoke `@display-utilites()` with that loops through a set of media-queries defined in `$$breakpoints`. This is most useful for creating responsive display classes.\n\n*/\n/* SG\n# Grid System/Variables [[dev]]\n\n##### `$$human-readable-numerators`\n###### List (string)\nFirst words used to represent numbers in a fraction; Corresponds to grid interval names (one, two, three, etc.).\n\n\n##### `$$human-readable-denominators`\n###### List (string)\nSecond words used to represent numbers in a fraction; Corresponds to grid interval names (whole, half, third, etc.).\n*/\n/* SG\n# Grid System/Functions [[dev]]\n\n##### `grid-size()`\n###### function(`$size, $total:` `$$grid-columns`)\nCreates a percentage based on the `$size / $total`.\n@requires `$$grid-columns`\n\n*/\n/* SG\n# Grid System/Mixins [[dev]]\n\n##### `@grid-width()`\n###### mixin(`$columns, $total:` `$$grid-columns`)\nCreates a width property with a percentage based on the `$columns / $total`.\n@requires `grid-size()`, `$$grid-columns`\n@alias `@width()`\n\n*/\n/* SG\n\n\n##### `@width-setup()`\n###### mixin(`$namespace:\"\", $silent:` `$$grid-silent-classes`, $property:\"width\")\n Uses `$$human-readable-numerators` and `$$human-readable-denominators` to create percentages based on `$$grid-columns`. `$property` accepts any property, as well as lists of properties.\n\n@requires `grid-size()`, `$$human-readable-numerators`, `$$human-readable-denominators`\n\n*/\n/* SG\n# Grid System/Mixins [[dev]]\n\n##### `@grid-setup()`\n###### mixin(`$silent:` `$$grid-silent-classes`)\nCreates basic grid classes (listed below), called by `@grid-init()`.\n\n_Note: `[% || .]` denotes a class that is either silent(`%`) or standard CSS(`.`). Based on the `$$grid-silent-classes` setting._\n\n* ###### `%grid_reset`\n Useful for resetting the grid's effects without making full grid items.\n\n* ###### `[% || .]grid`\n Wrapper class for grid widths. Puts a negative left margin of one unit. When not using floats, adds appropriate letter-spacing (for inline-block-based grid).\n\n* ###### `[% || .]grid_item`\n Sets up a grid column. Uses column padding inherited from parent `%/.grid`.\n\n* ###### `[% || .]grid_rev`\n Makes grid columns start from the right.\n\n* ###### `[% || .]grid_right`\n Makes all grid columns align to the right.\n\n* ###### `[% || .]grid_center`\n Makes all grid columns align to the center.\n\n* ###### `[% || .]grid_middle`\n Makes all grid columns vertical align to the middle.\n\n* ###### `[% || .]grid_bottom`\n Makes all grid columns vertical align to the bottom.\n\n* ###### `[% || .]grid_full`\n Eliminates padding between grid columns.\n\n* ###### `[% || .]grid_narrow`\n Reduces the padding between grid columns.\n\n* ###### `[% || .]grid_wide`\n Increases the padding between grid columns.\n\n*/\n/* SG\n# Grid System/Mixins [[dev]]\n\n##### `@grid-row()`\n###### mixin()\nCreates a grid container (row) based on your grid configuration.\n@requires `@type-space()`\n\n##### `@grid-item()`\n###### mixin(`$columns: $grid-columns`)\nCreates a grid item (column) based on your grid configuration set to a width based on the `$columns` passed in.\n@requires `@type-space()`, `@grid-width()`\n*/\n/* SG\n##### `@grid-init()`\n###### mixin(`$silent:` `$$grid-silent-classes`, `$important:false`)\nCreates responsive grid classes by running through all the grid-setup mixins. Uses the media-queries defined in the `$breakpoint-has-` variables to create media-query-scoped classes.\n@requires `@grid-classes()`, `@width-classes()`, `@push-classes()`, `@pull-classes()`\n\n*/\n/* SG\n##### `@grid-classes()`\n###### mixin(`$silent:` `$$grid-silent-classes`)\nRuns `@grid-setup()`.\n@requires `@grid-setup()`\n\n##### `@width-classes()`\n###### mixin(`$silent:` `$$grid-silent-classes`, `$important: false`)\nRuns `@width-setup()`, looping across all breakpoints in `$$breakpoint-has-widths`. Creates classes with `width` property values (`flex-basis` and `max-width` for flex-based grids) based on the grid.\n@requires `@media-query()`, `@width-setup()`\n\n##### `@push-classes()`\n###### mixin(`$silent:` `$$grid-silent-classes`, `$important: false`)\nRuns `@width-setup()`, looping across all breakpoints in `$$breakpoint-has-push`. Creates classes with `push_` and `left` property values based on the grid.\n@requires `@media-query()`, `@width-setup()`\n\n##### `@pull-classes()`\n###### mixin(`$silent:` `$$grid-silent-classes`, `$important: false`)\nRuns `@pull-setup()`, looping across all breakpoints in `$$breakpoint-has-pull`. Creates classes with `pull_` and `right` property values based on the grid.\n@requires `@media-query()`, `@width-setup()`\n\n*/\n/* SG\n# Tools/Spacing Utilities [[dev]]\n\n##### `@spacing-utilities()`\n###### mixin(`$namespace:''`, `$config`)\nGenerates responsive spacing and padding classes. The `$namespace` argument is the media query's name, which will be appended to all generated classes. The `$config` argument is a map that allows JS-style arguments. Outputs class name as: `breakpoint_prefix_direction_amount`.\n\n**`$config` Keys:**\n* `silent:` boolean for outputting silent/non-silent classes.\n* `important:` whether to output !important after each declaration.\n* `directions:` names that get appended to class names.\n* `amounts:` how much to multiply spacing unit by `$$base-line-height`.\n* `names:` corresponding names for each `amounts` that gets appended to class names.\n* `prefixes:` first word in the class name. Must contain the words 'pad' and 'space'. Used by `layout-type()` to determine padding or margin.\n\n\n##### `@spacing-utilities-init()`\n###### mixin(`$breakpoints:` `$$all-breakpoints`, `$namespace:''`, `$config:(silent:true)`)\nThe responsive component to `@spacing-utilities()`. Invoke `@spacing-utilites()` with that loops through a set of media-queries defined in `$$breakpoints`. This is most useful for creating responsive spacing classes.\n\n*/\n/* SG\n# Typography/Conversion [[dev]]\n\n##### `@px-to-rems()`\n###### mixin(`$property`, `$sizes`, `$important`: `false`, `$base-font`: `$$base-font-size`)\nTakes a pixel value and creates a property with a `rem` value. If `$$rem-px-fallback` is `true`, a pixel fallback is also included. `$sizes` also accepts 'auto'.\n@alias `@rems()`\n@requires `px-to-rems()`\n\n*/\n/* SG\n\n# Typography/Sizing [[dev]]\n\n##### `@type-font-size()`\n###### mixin(`$font-size, $line-height: auto, $font-base:``$$base-font-size`)\nQuickly generate a font-size in rems, with a pixel fallback, based on the value we pass into the mixin. Optionally calculates line-height using `$$base-line-height`.\n\n_`$line-height` also accepts a pixel value and will be converted to a unitless one._\n\n@alias `@font-size()`\n@requires `@px-to-rems()`, `cache()`, `baseline-calc()`\n\n*/\n/* SG\n# Typography/Spacing [[dev]]\n\n##### `@type-space()`\n###### mixin(`$properties, $multipliers, $important: false`)\nOutput REM values using the typographic grid. This is the prefered method of adding padding and margins because it enforces consistent spacing around all elements.\n\n**Arguments:**\n* `$properties`: Can be any `CSS` property that accepts a length value (e.g. `rem`). Also accepts multiple properties as a nested list (e.g. `(padding-left, padding-right)`).\n* `$multipliers`: Accepts unitless values that get converted to `rem` units which are a multiple of the typographic grid. Can be multiple values, **separated by spaces**, in the case of `margin` or `padding`.\n* `$important`: Accepts `true` or `!important`.\n\n**Example**\n```scss\n// SCSS input\n.foo {\n    @include type-space(padding, 1 .25 .5 auto, '!important');\n}\n\n// CSS output\n.foo {\n    padding: 24px 8px 12px auto !important;\n    padding: 1.5rem .375rem .75rem auto !important;\n}\n```\n\n@requires `@px-to-rems()`, `str-contains()`\n@alias `@space()`\n\n*/\n/* SG\n# Config/Typography Settings [[dev]]\n\n##### `$$base-font-size`\n###### Pixel value\nFont size all other values will use for calculation. Will be converted to `rems`.\n\n##### `$$base-line-height`\n###### Pixel value\nLine-height for base font-size. Will be used to determine the vertical spacing values when `type-space()` is used.\n\n##### `$$font-looseness`\n###### Percentage\nWhat to base the tightness/looseness of automatically-generated `line-heights`.\n\n##### `$$auto-scale-type`\n###### Boolean\nUses `$$scale-ratio` to create font sizes for headings starting from the `$$base-font-size`. Overwrites `$$type-[h#]-size`.\n\n##### `$$scale-ratio`\n###### Numeric (float)\nUsed for `$$auto-scale-type` and for `modular-scale()`.\n\n##### `$$rem-px-fallback`\n###### Boolean\nDetermines whether `rems()` conversion includes a pixel-value fallback for older browsers like IE8.\n\n##### `$$indented-paragraphs`\n###### Boolean\nDetermines whether to generate css for paragraphs with a text indent, rather than paragraphs with margins between them.\n\n*/\n/* SG\n# Config/Typography Settings [[dev]]\n\n##### `$$type-[h#]-size`\n###### List (pixel value [, pixel or unitless value])\nVariables used to generate heading (and small) font-sizes and line-heights. A secondary value will force the line-height to that base-value.\n\n_NOTE: First value must be pixel values(or a function that generates a pixel value like `modular-scale()`), but the optional secondary value can be unitless._\n*/\n/* SG\n# Config/Typography Settings [[dev]]\n\n##### `$$primary-font-stack`, `$$secondary-font-stack`, `$$monospace-font-stack`, `$$icon-font-stack`\n###### String\nUsed wherever font-families are declared. Use `null` if nothing exists.\n\n##### `$$use-web-fonts`\n###### Boolean\nWhether to generate `@font-face` values based on `$$font-file-name` (and the other `$font-` variables).\n\n##### `$$font-file-name`\n###### List (string)\nUses for automatically generated `@font-face` declarations. Describes the filename as well as the font-family name reference. _File names and @font-face values must be the same (e.g. 'opensans' and 'opensans.ttf').**Casing matters**._\n\n##### `$$font-weights`\n###### List (nested)\nEach parenthesis corresponds to each name in `$$font-file-name`. Determines how many `@font-face` weights are generated per font.\n\n##### `$$font-italics`\n###### List (nested) (boolean)\nCorresponds to each value in `$$font-weights`. (e.g. if `$font-weights: (400,700),(200,400)` and `$font-italics: (true),(false,true)` then the first font will have italics in the 400 and 700 weights while second font will have italics in the 400 weight).\n\n##### `$$font-include-woff2`\n###### Boolean (list)\nDetermines whether woff2 formats be included in the `@font-face` generation. Can be a list if each font has different values (not recommended since woff2 is the most performant font-file format).\n\n##### `$$font-include-eot`\n###### Boolean (list)\nDetermines whether to generate `@font-face` values that point at an .eot file. Fallback for IE8.\n\n*/\n/* SG\n# Config/Responsive Settings [[dev]]\n\n##### `$$max-site-width`\n###### Pixel value\nMaximum desktop width for the site wrapper.\n_This value is also useful as a breakpoint, since this is the point at which your site is going to squish._\n\n##### `$$max-content-width`\n###### Pixel value\nMaximum width for content set at the `$$base-font-size`. This should be set to whatever creates the ideal line-length for standard content (Usually 45-75 characters).\n_Also useful as a breakpoint, since it is typical that your viewport is now smaller than your ideal line-length._\n\n##### `$$max-wide-content-width`\n###### Pixel value\nSimilar to `$$max-content-width`, but for type that might be a little larger, but smaller than your maximum site width(`$$max-site-width`). Useful for hero-style text treatments and content blocks that need a bit of constraint.\n\n*/\n/* SG\n# Config/Breakpoints [[dev]]\n\n##### `$$breakpoints`\n###### Map (`breakpoint-name: 'breakpoint-value'`)\nSets up variables for media-queries. Used in `@media-query()`.\n\n_Note: It's usually good to convert your pixel values to ems to ensure best browser behavior. Can be accomplished via `0.625em`_\n\n**Example**\n```scss\n$breakpoints: (\n  'small':'(min-width: 320px)',\n  'bigs':'(min-width: 850px)'\n);\n```\n*/\n/* SG\n# Config/Grid Settings [[dev]]\n\n##### `$$grid-columns`\n###### Number\nBase number of grid columns to be generated. Note that any column number will include all fractions of the fewer columns. For instance, a 12-column grid would also include all fractions of 1-12 (including things like three-sevenths).\n\n##### `$$grid-gutter`\n###### Pixel value\nSpace between grid items. Also used in `type-space()` for horizontal spacing units.\n\n##### `$$grid-silent-classes`\n###### Boolean\nIf set to false, actual grid classes will be output to CSS.\n\n##### `$$grid-push`, `$$grid-pull`\n###### Boolean\nDetermines whether to include extra grid classes for positional grid modifiers.\n*/\n/* SG\n##### `$$grid-inline-block`\n###### Boolean\nCreate grids using an inline-block-based layout.\n\n##### `$$grid-markup-fix`\n###### Boolean\n**Only applicable to inline-block grid.** If set to `true`, html must have no white space (or comments) between grid items. Almost always set to `false`.\n\n##### `$$grid-letter-space-fix`\n###### em value\n**Only applicable to inline-block grid.** If `$$grid-markup-fix` is not used, then a negative `em` value must be set to remove whitespace between columns. Usually, `-0.45em` works, but this should be adjusted based on the natural width of the font-family set on the body element.\n\n##### `$$grid-flex`\n###### Boolean\nIf set to `true`, the grid will add markup for a flexbox-based layout. Can be combined with an inline-block-based grid to provide an older browser fallback.\n\n##### `$$grid-floats`\n###### Boolean\nIf set to `true`, the grid uses floats-based layout. **This is usually not recommended since inline-block and flexbox are much are more flexible.**\n*/\n/* SG\n##### `$$breakpoints-has-widths`, `$$breakpoints-has-push`, `$$breakpoints-has-pull`\n###### List (string)\nDetermines what classes (widths, pushes, pulls) get generated at `$$breakpoints`. The list's order determines the output order. This is useful if you want one breakpoint to override another.\n*/\n/* SG\n# Config/Utility Class Settings [[dev]]\n\n##### `$$breakpoint-namespace-character`\n###### String\nUsed to define what character comes after an auto-generated responsive class. A setting of '_' would create classes like `smalls_space-v` whereas a '@' would create classes like `smalls@space-v`.\n*/\n/* SG\n# Config/Utility Class Settings [[dev]]\n\n##### `$$display-classes`\n###### Map (string: string)\nVariable used to generate display classes. Key value pairs determine the class name and the display value.\n\n**Example**\n```scss\n//SCSS input\n$display-classes: ('show':'block');\n\n//CSS output\n.show { display: block; }\n```\n\n##### `$$spacing-classes`\n###### Map (`string: string`)\nVariable used to generate utility (override) spacing classes. Classes are created via `@spacing-utilities()`.\n\n**Keys and Values**\n* 'directions': Direction class suffixes.\n* 'units': Numeric multiples (e.g. `2` or `-1`) of your spacing units (`$$horizontal-space` and `$$vertical-space`).\n* 'properties': Class name aliases for padding and margin.\n\n**Example**\n```scss\n//SCSS Input\n    $display-classes: (\n        'directions': (\n            '-t': 'top',\n            '-r': 'right',\n            '-v': 'top' 'bottom'\n        ),\n        'units': (\n            '-2': 2,\n            '-neg': -1\n        ),\n        'properties': (\n            'pad': 'padding',\n            'margin': 'space'\n        )\n    );\n\n//CSS output\n    // Assume spacing units are 1rem, for simplicity\n    .space-t-2, .space-v-2 { margin-top: 2rem; }\n    .space-v-2 { margin-bottom: 2rem; }\n    .space-r-2 { margin-right: 2rem; }\n    .space-t-neg { margin-top: -1rem; }\n    .space-r-neg { margin-right: -1rem; }\n\n    .pad-t-2 { padding-top: 2rem; }\n    .pad-r-2 { padding-right: 2rem;}\n    //--Negative padding classes filtered out since they are invalid---//\n\n    @media only screen and (min-width:300px){...}\n    //repeated for all media-queries defined by $breakpoints-has-spacing-classes...\n```\n*/\n/* SG\n# Config/Utility Class Settings [[dev]]\n\n##### `$$breakpoints-has-alignment-classes`, `$$breakpoints-has-spacing-classes`, `$breakpoints-has-display-classes`, `$breakpoint-has-type-classes`\n###### List (keys from `$$breakpoints`)\nDetermines what utility classes get generated at `$$breakpoints`. The list's order determines cascade The list's order determines the output order. This is useful if you want one breakpoint to override another.\nA `false` value will output no classes of that type.\n*/\n/* SG\n# Config/Color Settings [[dev]]\n\n##### `$$base-colors`\n###### Map (key : color value)\nSets up consistent color names to be used for color-palette. Dark and light values will be automatically generated. Key values should be accessed through `colors()`.\n`type`, `links`, and `bg` key values are required for some starter styles. If you choose not to use them, just replace their references in the appropriate files.\n\nSupports a nested map style like the following:\n```scss\n$base-colors: (\n  'type':(\n    'base':red,\n    'light': pink,\n    'dark':maroon\n  ),\n  'links':(\n    'base':blue,\n    'light': sky,\n    'dark': navy\n  ),\n  'bg': (\n    'base': #fff,\n    'dark': #ddd\n  )\n);\n```\n*/\n/* SG\n# Config/Debug Settings [[dev]]\n\n_NOTE: These settings, when set to `true`, will slow down compilation somewhat._\n\n##### `$$debug-fonts`\n###### Boolean\nWhether to include debug statements about font sizes and line-heights as they're generated. Useful if you're getting weird values on auto-generated line-heights.\n\n* %: Distance from the lowest font-size.\n* ub: Line-height upperbounds\n* lb: Line-height lowerbounds\n* lh: Final line-height (in pixels and unit-less).\n* loops: Number of times it took to process the line-height. High numbers can indicate font-sizes that are very difficult to process.\n\n##### `$$debug-baseline`\n###### Boolean\nAdds style for a `baseline-on` class that will show a grid of the baseline on any element (most useful on the `body` or `html` tag). Makes vertical alignment easier.\n\n\n##### `$$debug-silent-classes`\n###### Boolean\nStores all auto-generated silent classes into a map that is then output as a comment at the end of the final css. Useful for getting an overview of values that are stored by the framework.\n\n##### `$$debug-breakpoints`\n###### Boolean\nDisplays the current breakpoint (from `$$breakpoints`) name on a psuedo element on the body. Makes debugging media queries a little simpler.\n\n*/\n/* SG\n# Config/Slick Settings [[dev]]\n\n##### `$$slick-[]-[]`\nConfiguration for slick carousel jQuery plugin.\n[See Slick documentation for more](https://github.com/kenwheeler/slick/#sass-variables)\n\n*/\n/* SG\n# Variables/Globals [[dev]]\nThe variables here are created based on the config variables passed by the user. These are generally abstracted to make them a little easier to parse, programmatically.\n\n##### `$$type-[h1-6,p,small]-lh`\n###### boolean/unitless/pixel value\nParses `$$type-h[#]-size` for an optional line-height value, if none exists, pass it along to `baseline-calc()`.\n@alias `$$h[#]-lh`\n\n##### `$$type-[h1-6,p,small]-size`\n###### Number (pixel)\nFont sizes, as defined by the user or `$$auto-scale-type`.\n*/\n/* SG\n##### `$$type-base-unit`\n###### Number\nAbstraction of the base spacing unit used in any mixin or function that defines spacing units.\n\n##### `$$type-base-ratio`\n###### Number\nRatio used to calculate the difference between font sizes and spacing units.\n\n##### `$$type-headings`\n###### List (number)\nUsed for defining automatic headings functions.\n\n##### `$$type-modular-scale`\n###### Number\nAbstracts the `$$scale-ratio` and makes sure it's a positive number.\n*/\n/*\n##### `$$all-breakpoints`\n###### List\nStores all the names defined in `$$breakpoints` for use in abstract framework components so that if names are chagned, boilerplate media queries won't fail.\n\n##### `$$breakpoint-smallest`\n###### String\nGrabs the first `$$breakpoints` name.\n\n##### `$$breakpoint-largest`\n###### String\nGrabs the last `$$breakpoints` name.\n*/\n.demo-navigation {\n  display: flex;\n  position: relative;\n  z-index: 2;\n  box-shadow: 0 4px 6px rgba(10, 28, 43, 0.2);\n  background-color: #fff;\n  width: 100%;\n}\n\n.demo-navigation__link {\n  flex: 1 1 auto;\n  margin-left: 0.375rem;\n  padding: 1.125rem 0.75rem;\n  max-width: 7.5rem;\n  text-align: center;\n}\n\n.demo-navigation__link:hover {\n  background-color: #d3e2ed;\n  color: #4c95bd;\n}\n\n.demo-header {\n  display: flex;\n  align-items: center;\n  background-color: #e4eaf3;\n  background-image: linear-gradient(transparent 0%, #d3e2ed 100%);\n  width: 100%;\n  height: 70vh;\n  max-height: 37.5rem;\n}\n\n.demo-header__title {\n  padding-bottom: 1.5rem;\n  letter-spacing: .01em;\n  color: rgba(8, 44, 74, 0.6);\n  font-weight: normal;\n}\n\n.demo-body {\n  padding-top: 1.5rem;\n}\n\n.demo-body__head,\n.demo-category {\n  font-weight: normal;\n}\n\n.demo-body__head {\n  font-size: 1.8225rem;\n  line-height: 1.23457;\n  margin-bottom: 1.875rem;\n  border-bottom: 2px solid rgba(146, 182, 202, 0.7);\n  padding-bottom: calc(0.75rem - 1px);\n  color: #92b6ca;\n}\n\n.demo-category {\n  font-size: 1.35rem;\n  line-height: 1.11111;\n  padding-top: 2.25rem;\n}\n"]}