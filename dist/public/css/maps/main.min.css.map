{"version":3,"sources":["modules/base/_type.scss","modules/base/_reset.scss","../config/sass.config.scss","../node_modules/@uwhealth/sass-tools/colors/_blendmodes.scss","../node_modules/@uwhealth/sass-tools/typography/_conversion.scss","modules/base/_sanitize.scss","main.css","../node_modules/@uwhealth/sass-tools/colors/_colors.scss","../node_modules/@uwhealth/sass-tools/typography/_font-face.scss","../node_modules/@uwhealth/sass-tools/typography/_typography.scss","modules/base/_font.scss","modules/base/_form.scss","modules/base/_list.scss","modules/base/_table.scss","../node_modules/@uwhealth/sass-tools/_init.scss","../node_modules/@uwhealth/sass-tools/typography/_variables.scss","modules/_wrapper.scss","../node_modules/@uwhealth/sass-tools/overrides/_clearfix.scss","../node_modules/@uwhealth/sass-tools/media-queries/_media-queries.scss","../node_modules/@uwhealth/sass-tools/grid/_grid.scss","../node_modules/@uwhealth/sass-tools/grid/_widths.scss","modules/_media-object.scss","components/button/_button.scss","../node_modules/@uwhealth/sass-tools/overrides/_overrides.scss","helpers/_overrides/_ov-alignment.scss","../node_modules/@uwhealth/sass-tools/overrides/_display.scss","helpers/_overrides/_ov-display.scss","../node_modules/@uwhealth/sass-tools/overrides/_spacing.scss","helpers/_overrides/_ov-type.scss","helpers/_debug.scss"],"names":[],"mappings":"AAyJA,iBCvJA,ADiLC,UC/KG,eAAgB,CACnB,AAGD,uBAEI,WAAY,CACf,AAED,MAEC,oBAAqB,CACrB,AAED,IACI,uBAAwB,CAC3B,AAED,KACC,wBAAuD,CACvD,AAED,uFAaC,aAAc,CACd,AAED,EACC,eAAe,AACf,6BAA6B,AAC7B,cCyImB,ADxIhB,yBAA0B,CAqB7B,AAzBD,gBAQE,aEe2C,CFd3C,AATF,SAYE,aEW2C,CFV3C,AAbF,QAgBE,mBAAoB,CACpB,AAjBF,iBAuBE,SAAU,CACV,AAGF,GACI,0BELyC,AFMzC,SAAS,AGrBT,iBAAc,CHuBjB,AIhDD,iBAGC,mBAAmB,AAChB,mBAAmB,AACtB,cAAe,CACf,AAED,EACC,kBAAkB,AAClB,oBAAoB,AACjB,4BAhCyB,AAiC5B,SAAS,AACT,SAAU,CACV,AAED,eAEC,wBAAwB,AACxB,sBAAuB,CACvB,AAID,MACI,sBAAsB,AACtB,eAAe,AACf,cHgIe,AG/HlB,yBHmIgB,AGlIb,iCApDoC,CAqDvC,AAED,KACC,4CAA4C,AAC5C,kBAAkB,AAClB,8BAA8B,AAC9B,yBAA0B,CAC1B,AAED,sBACC,YAAa,CACb,AAED,OACC,iBAAiB,AACjB,0BAA0B,AACvB,mBAAoB,CACvB,AAED,MACC,uBAAwB,CAqBxB,AAtBD,wDAME,yBAA0B,CAC1B,AAPF,mBAUE,UAAW,CACX,AAXF,mBAcE,6BAA6B,AACvB,mBAAoB,CAM1B,AArBF,+FAmBG,uBAAwB,CACxB,AAIH,OACI,aAAa,AACb,cHgFe,AG/Ef,cAAc,AACd,2BAAmB,AAAnB,wBAAmB,AAAnB,mBAAmB,AACnB,OAAO,AACP,YAAY,AACZ,kBAAkB,AAClB,QAAQ,AACR,0BAAkB,AAAlB,uBAAkB,AAAlB,iBAAkB,CACrB,AAED,mBACI,YAAa,CAChB,AAMD,SACC,oBAAqB,CACrB,AAED,eACC,eAAgB,CAChB,ACkFD,kBD3EC,YAAa,CACb,AAID,6DAUE,yBAA0B,CAC3B,AAID,kCAMC,qBArJoC,CAsJpC,AAID,6BAIC,cAAc,AACd,oBAAoB,AACpB,mBAAmB,AACnB,mBAAoB,CACpB,AAID,kPD5HI,iBAAc,CCgJjB,AAID,kBAIC,4MAA6C,CAC7C,AAID,OACC,qBAAqB,AACrB,uBAAwB,CASxB,AAXD,mBAKE,YAAa,CACb,AANF,kBASE,kBAAmB,CACnB,AAKF,iBACC,yBArNiE,AAsNjE,WEvKmB,AFwKnB,gBArN2B,CAsN3B,AAED,YACC,yBA3NiE,AA4NjE,WE7KmB,AF8KnB,gBA3N2B,CA4N3B,AAED,4GAII,6BAA8B,CACjC,AAGD,mBACC,SAAS,AACT,SAAU,CACV,AAED,4BACI,uBAAwB,CAC3B,AAED,6BACI,0BAA0B,AAC1B,YAAa,CAChB,AAKD,4FAEC,WAAY,CACZ,AC4DD,iBDvDC,eAAgB,CAChB,AC0DD,gBDrDC,cAAe,CACf,ACwDD,2BDlDC,wBAA0B,CAC1B,ACsDD,4BDjDC,mBAAmB,AACnB,gBAAgB,AAChB,iBAAkB,CAKlB,ACgDD,kCDlDE,SAAU,CACV,AGhOE,WACI,qBNxBM,AM6BN,6LAAK,AAED,gBAAa,AAGb,iBAAY,CFkRvB,AE7RG,WACI,qBNxBM,AM6BN,6LAAK,AAED,gBAAa,AAGb,iBAAY,CFyRvB,AEpSG,WACI,qBNxBM,AM6BN,wNAAK,AAED,gBAAa,AAGb,iBAAY,CFgSvB,AE3SG,WACI,qBNxBM,AM6BN,wNAAK,AAED,gBAAa,AAGb,iBAAY,CFuSvB,AG/BW,kBC5UX,8DR4CqF,CQ3CrF,ACVD,OACC,cAAc,AACd,kBAAmB,CACnB,AAED,aAEI,gBFqWqD,AEpWrD,QAAS,CACZ,ANuFD,oCMjFC,qBAAsB,CNiFvB,AM3EC,OP2BG,cAAc,CO3BjB,AAGD,iFAKC,gBAAgB,AAChB,uBAAwB,CACxB,AAED,SACC,cAAc,AACd,eAAgB,CAChB,AClCD,cR8CI,wBAAc,CQzCjB,AAED,YAEI,eAAgB,CACnB,AAED,cAEI,aAAc,CACjB,AClBD,MACI,WAAW,AACX,6BAA6B,AAC7B,yBAAyB,AACzB,iBAAiB,AACjB,SAAS,AT4CT,oBAAc,CS1CjB,AAED,MTwCI,wBAAc,ASrCjB,gBAAgB,AAChB,mBAAkB,AAClB,SAAS,AACT,kBAAkB,AAClB,mBAAqB,AACrB,qBNwZsF,AMvZtF,kBAAmB,CACnB,AAED,GACC,eAAiB,CACjB,AAED,SACC,sBAAsB,ATuBnB,kBAAc,CSrBjB,Ab1BD,WAEI,eAA2C,AAC9C,gBcmBiE,AdlB9D,gGeqD8G,CfpDjH,AAED,KIwCI,eAAc,AKFV,eAP+C,CT7BtD,AS2UW,gCLrSR,oBAAc,CJ7BjB,AAED,GI2BI,qBAAc,AKFV,mBA4DqF,CTnF5F,AAED,GIuBI,qBAAc,AKFV,mBA4DqF,CT/E5F,AAED,GImBI,qBAAc,AKFV,mBA4DqF,CT3E5F,AAED,GIeI,qBAAc,AKFV,kBA4DqF,CTvE5F,AAED,GIWI,qBAAc,AKFV,mBA4DqF,CTnE5F,AAED,GIOI,mBAAc,AKFV,mBA4DqF,CT/D5F,AS0SW,8BLrSR,kBAAc,CJIb,AAmCL,MACC,qBAAqB,AIxClB,mBAAc,AKFV,eA4DqF,CThB5F,AASD,SAEC,eAAgB,CAChB,AKUD,ILNI,gBAAgB,AAChB,qBAAqB,AACrB,qBAAqB,AACrB,aAAc,CACjB,AAED,QAEC,cAAc,AACd,cAAc,AACd,kBAAkB,AAClB,uBAAwB,CACxB,AAED,IACC,SAAW,CACX,AAED,IACC,aAAe,CACf,AKsED,kBL5DI,mMElF8O,CIwgBhP,kCNrbwC,AACtC,aAAc,CACjB,AAYD,WACI,kBAAkB,AIxGlB,yBAAc,AJ6Gd,cAAQ,CAJX,AAED,oBAMY,YAAa,AACb,kBAAmB,CACtB,AART,mBAWY,WAAW,AACX,sBAAuB,CAC1B,AAbT,gCAgBY,YAAa,AACb,mBAAoB,CACvB,AAMT,GMwaE,YNvae,AACb,uBAAQ,AACR,gBAAiB,CA8BpB,AAjCD,SAMQ,YAAa,AACb,kBAAmB,CACtB,AARL,QAWQ,YAAa,AACb,mBAAoB,CACvB,AAbL,WAgBQ,YAAa,AACb,kBAAmB,CACtB,AAlBL,UAqBQ,YAAa,AACb,mBAAoB,CACvB,AAvBL,cA6BQ,qBAAqB,AACrB,kBAAoB,CACvB,AgBpNL,MACC,cAAc,AACd,iBd8D8B,Ac7D9B,wBAAyB,AACtB,WAAW,AZ8CX,iBAAc,AY5Cd,UAAU,CV4nBZ,MWjoBU,CDcX,ACZG,yBAEI,cAAc,AACd,WAAY,CACf,AACD,YACI,WAAW,AACX,SAAS,AACT,OAAQ,CACX,ACyDW,sEFrEhB,MAUQ,SAAU,CAKjB,CVkoBA,AY5kBe,6CFrEhB,MAaQ,SAAU,CAEjB,CVwoBA,AUtoBD,eZiCI,mBAAc,CY/BjB,AAED,oBZ6BI,mBAAc,CY3BjB,AGmDG,OAEI,sBAAsB,AACtB,mBAAoB,CACvB,AAWD,KAgLA,gBAAgB,AAChB,SAAS,AACT,UAAU,AfzNV,kBAAc,Ae6NV,sBjBnKwB,AiB6KxB,aAAa,AACb,cAAe,CA/LlB,AAuLG,6BAEI,mBjBxKoB,CiByKvB,AAxLL,Qf3CA,kBAAc,AeuQd,eAAe,AAGX,qBAAqB,AACrB,mBAAmB,AAIf,sBAAsB,AACtB,oBAAoB,AASxB,cAAgD,ACvRpD,WAAO,AAEH,gBAAY,AACZ,cAAW,CDwCd,AAmGD,WACI,aAAc,CAKjB,AAHG,mBACI,cAAe,CAClB,AAOL,af5JA,iBAAc,CekKb,AAHG,qBf/JJ,iBAAc,CeiKT,ACpFL,WAKoB,UAAgB,AAAhB,cAAgB,AAAhB,cAAgB,CAEvB,AAPb,QAKoB,UAAgB,AAAhB,cAAgB,AAAhB,cAAgB,CAEvB,ACvHjB,yCACI,gBAAgB,CfkuBlB,iBejuBmB,AACjB,MAAO,CACV,AAED,qBACI,UAAW,CACd,AAMD,gFACI,aAAc,CACjB,AAED,cACI,WAAW,Cf8tBb,OW/vBU,AbiDR,oBAAc,CiBIjB,AJnDG,yCAEI,cAAc,AACd,WAAY,CACf,AACD,oBACI,WAAW,AACX,SAAS,AACT,OAAQ,CACX,AIqCD,oBjBCA,mBAAc,CiBGb,AAuDL,SACI,kBAAkB,AAClB,eAAe,AACf,cAAc,AACd,WAAW,AjB9DX,oBAAc,CiBwGjB,AAvCG,8CAGI,kBAAmB,CACtB,AAED,oCAEI,UAAW,CACd,AAEA,4CAGO,cAAc,AACd,cAAe,CAClB,AAGL,mCjBpFA,mBAAc,CiBuFb,AAED,wEAII,qBAAsB,CAUzB,AARG,gIACI,kBAAmB,CACtB,AAED,4IACI,qBAAsB,CACzB,AAMT,gBACI,kBAAmB,CAMtB,AAPD,yEAKQ,QAAS,CACZ,ACrJL,KACI,8BAA8C,AAC9C,sCAAqC,AACrC,yBpBqKgB,AoBpKhB,wBlB4DsC,AkB3DtC,WAAY,AACZ,gBAAiB,AACjB,yFAA4F,CAgB/F,AAdG,sBAEI,aAAa,AACb,+CnBuCqC,AmBtCrC,wBnBsCqC,CmBrCxC,AAED,YACI,aAAa,AACb,4CnBiCqC,AmBhCrC,yBnBgCqC,AmB/BrC,anBwiBgC,CmBviBnC,AAIL,KAEI,oBAAoB,AACpB,8BAA8B,AAC9B,yBAAyB,AACzB,kBAAmB,CACtB,AAED,WACI,UAAW,CACd,AAED,cACI,gBlB0BsC,CkBzBzC,AAED,WACI,qBAAqB,AACrB,cAAc,AACd,gBlBoBsC,CkBfzC,AAHG,0BACI,QAAS,CACZ,AAGL,4BAEI,cAAc,AACd,alBUsC,AkBTtC,YAAY,AACZ,eAAe,AACf,iBAAkB,CACrB,AAED,WACI,qBAAqB,AACrB,cAAc,AACd,gBlBCsC,CkBAzC,ACZO,YAEQ,oBAAuD,CAE9D,AAJD,aAEQ,qBAAuD,CAE9D,AAJD,YAEQ,oBAAuD,CAE9D,AAJD,OAEQ,wBAAuD,CAE9D,AAJD,UAEQ,2BAAuD,CAE9D,ALDO,4CKHR,mBAEQ,oBAAuD,CAE9D,AAJD,oBAEQ,qBAAuD,CAE9D,AAJD,mBAEQ,oBAAuD,CAE9D,AAJD,cAEQ,wBAAuD,CAE9D,AAJD,iBAEQ,2BAAuD,CAE9D,CjBu5BR,AYx5Be,6CKHR,iBAEQ,oBAAuD,CAE9D,AAJD,kBAEQ,qBAAuD,CAE9D,AAJD,iBAEQ,oBAAuD,CAE9D,AAJD,YAEQ,wBAAuD,CAE9D,AAJD,eAEQ,2BAAuD,CAE9D,CjBy6BR,AY16Be,wCKHR,iBAEQ,oBAAuD,CAE9D,AAJD,kBAEQ,qBAAuD,CAE9D,AAJD,iBAEQ,oBAAuD,CAE9D,AAJD,YAEQ,wBAAuD,CAE9D,AAJD,eAEQ,2BAAuD,CAE9D,CjB27BR,AkB5+BD,eACI,MAAM,AACN,OAAO,AACP,SAAS,AACT,OAAQ,CACX,AC4BW,MACI,uBAAS,CACZ,AAFD,IACI,wBAAS,CACZ,AAFD,SACI,8BAAS,CACZ,AAFD,MACI,sBAAS,CACZ,AAFD,MACI,sBAAS,CACZ,APaG,4COfJ,aACI,uBAAS,CACZ,AAFD,WACI,wBAAS,CACZ,AAFD,gBACI,8BAAS,CACZ,AAFD,aACI,sBAAS,CACZ,AAFD,aACI,sBAAS,CACZ,CnBs/BZ,AYz+Be,6COfJ,WACI,uBAAS,CACZ,AAFD,SACI,wBAAS,CACZ,AAFD,cACI,8BAAS,CACZ,AAFD,WACI,sBAAS,CACZ,AAFD,WACI,sBAAS,CACZ,CnBwgCZ,AAED,SoBtjCQ,sBAAwB,CAC3B,AAED,WACI,2BAA6B,CAChC,ACmEe,KvBlChB,wBAAc,CuByDG,AAvBD,cvBlChB,4BAAc,CuByDG,AAvBD,cvBlChB,+BAAc,CuByDG,AAvBD,cvBlChB,6BAAc,CuByDG,AAvBD,cvBlChB,8BAAc,CuByDG,AAvBD,avBlChB,yBAAc,CuByDG,AAvBD,8BvBlChB,6BAAc,CuByDG,AAvBD,8BvBlChB,gCAAc,CuByDG,AAvBD,8BvBlChB,8BAAc,CuByDG,AAvBD,8BvBlChB,+BAAc,CuByDG,AAvBD,UvBlChB,wBAAc,CuByDG,AAvBD,wBvBlChB,4BAAc,CuByDG,AAvBD,wBvBlChB,+BAAc,CuByDG,AAvBD,wBvBlChB,6BAAc,CuByDG,AAvBD,wBvBlChB,8BAAc,CuByDG,AAvBD,OvBlChB,sBAAc,CuByDG,AAvBD,kBvBlChB,0BAAc,CuByDG,AAvBD,kBvBlChB,6BAAc,CuByDG,AAvBD,kBvBlChB,2BAAc,CuByDG,AAvBD,kBvBlChB,4BAAc,CuByDG,AAvBD,OvBlChB,mBAAc,CuByDG,AAvBD,kBvBlChB,uBAAc,CuByDG,AAvBD,kBvBlChB,0BAAc,CuByDG,AAvBD,kBvBlChB,wBAAc,CuByDG,AAvBD,kBvBlChB,yBAAc,CuByDG,AAvBD,OvBlChB,uBAAc,CuByDG,AAvBD,kBvBlChB,2BAAc,CuByDG,AAvBD,kBvBlChB,8BAAc,CuByDG,AAvBD,kBvBlChB,4BAAc,CuByDG,AAvBD,kBvBlChB,6BAAc,CuByDG,AAvBD,evBlChB,wBAAc,CuByDG,AAvBD,kCvBlChB,4BAAc,CuByDG,AAvBD,kCvBlChB,+BAAc,CuByDG,AAvBD,kCvBlChB,6BAAc,CuByDG,AAvBD,kCvBlChB,8BAAc,CuByDG,AAvBD,YvBlChB,uBAAc,CuByDG,AAvBD,4BvBlChB,2BAAc,CuByDG,AAvBD,4BvBlChB,8BAAc,CuByDG,AAvBD,4BvBlChB,4BAAc,CuByDG,AAvBD,4BvBlChB,6BAAc,CuByDG,AAvBD,SvBlChB,qBAAc,CuByDG,AAvBD,sBvBlChB,yBAAc,CuByDG,AAvBD,sBvBlChB,4BAAc,CuByDG,AAvBD,sBvBlChB,0BAAc,CuByDG,AAvBD,sBvBlChB,2BAAc,CuByDG,AAvBD,mBvBlChB,yBAAc,CuByDG,AAvBD,0CvBlChB,6BAAc,CuByDG,AAvBD,0CvBlChB,gCAAc,CuByDG,AAvBD,0CvBlChB,8BAAc,CuByDG,AAvBD,0CvBlChB,+BAAc,CuByDG,AAvBD,gBvBlChB,wBAAc,CuByDG,AAvBD,oCvBlChB,4BAAc,CuByDG,AAvBD,oCvBlChB,+BAAc,CuByDG,AAvBD,oCvBlChB,6BAAc,CuByDG,AAvBD,oCvBlChB,8BAAc,CuByDG,AAvBD,WvBlChB,wBAAc,CuByDG,AAvBD,0BvBlChB,4BAAc,CuByDG,AAvBD,0BvBlChB,+BAAc,CuByDG,AAvBD,0BvBlChB,6BAAc,CuByDG,AAvBD,0BvBlChB,8BAAc,CuByDG,AAvBD,avBlChB,sBAAc,CuByDG,AAvBD,8BvBlChB,0BAAc,CuByDG,AAvBD,8BvBlChB,6BAAc,CuByDG,AAvBD,8BvBlChB,2BAAc,CuByDG,AAvBD,8BvBlChB,4BAAc,CuByDG,AAvBD,SvBlChB,kBAAc,CuByDG,AAvBD,sBvBlChB,sBAAc,CuByDG,AAvBD,sBvBlChB,yBAAc,CuByDG,AAvBD,sBvBlChB,uBAAc,CuByDG,AAvBD,sBvBlChB,wBAAc,CuByDG,ATtCL,4CSeI,YvBlChB,wBAAc,CuByDG,AAvBD,4BvBlChB,4BAAc,CuByDG,AAvBD,4BvBlChB,+BAAc,CuByDG,AAvBD,4BvBlChB,6BAAc,CuByDG,AAvBD,4BvBlChB,8BAAc,CuByDG,AAvBD,oBvBlChB,yBAAc,CuByDG,AAvBD,4CvBlChB,6BAAc,CuByDG,AAvBD,4CvBlChB,gCAAc,CuByDG,AAvBD,4CvBlChB,8BAAc,CuByDG,AAvBD,4CvBlChB,+BAAc,CuByDG,AAvBD,iBvBlChB,wBAAc,CuByDG,AAvBD,sCvBlChB,4BAAc,CuByDG,AAvBD,sCvBlChB,+BAAc,CuByDG,AAvBD,sCvBlChB,6BAAc,CuByDG,AAvBD,sCvBlChB,8BAAc,CuByDG,AAvBD,cvBlChB,sBAAc,CuByDG,AAvBD,gCvBlChB,0BAAc,CuByDG,AAvBD,gCvBlChB,6BAAc,CuByDG,AAvBD,gCvBlChB,2BAAc,CuByDG,AAvBD,gCvBlChB,4BAAc,CuByDG,AAvBD,cvBlChB,mBAAc,CuByDG,AAvBD,gCvBlChB,uBAAc,CuByDG,AAvBD,gCvBlChB,0BAAc,CuByDG,AAvBD,gCvBlChB,wBAAc,CuByDG,AAvBD,gCvBlChB,yBAAc,CuByDG,AAvBD,cvBlChB,uBAAc,CuByDG,AAvBD,gCvBlChB,2BAAc,CuByDG,AAvBD,gCvBlChB,8BAAc,CuByDG,AAvBD,gCvBlChB,4BAAc,CuByDG,AAvBD,gCvBlChB,6BAAc,CuByDG,AAvBD,sBvBlChB,wBAAc,CuByDG,AAvBD,gDvBlChB,4BAAc,CuByDG,AAvBD,gDvBlChB,+BAAc,CuByDG,AAvBD,gDvBlChB,6BAAc,CuByDG,AAvBD,gDvBlChB,8BAAc,CuByDG,AAvBD,mBvBlChB,uBAAc,CuByDG,AAvBD,0CvBlChB,2BAAc,CuByDG,AAvBD,0CvBlChB,8BAAc,CuByDG,AAvBD,0CvBlChB,4BAAc,CuByDG,AAvBD,0CvBlChB,6BAAc,CuByDG,AAvBD,gBvBlChB,qBAAc,CuByDG,AAvBD,oCvBlChB,yBAAc,CuByDG,AAvBD,oCvBlChB,4BAAc,CuByDG,AAvBD,oCvBlChB,0BAAc,CuByDG,AAvBD,oCvBlChB,2BAAc,CuByDG,AAvBD,0BvBlChB,yBAAc,CuByDG,AAvBD,wDvBlChB,6BAAc,CuByDG,AAvBD,wDvBlChB,gCAAc,CuByDG,AAvBD,wDvBlChB,8BAAc,CuByDG,AAvBD,wDvBlChB,+BAAc,CuByDG,AAvBD,uBvBlChB,wBAAc,CuByDG,AAvBD,kDvBlChB,4BAAc,CuByDG,AAvBD,kDvBlChB,+BAAc,CuByDG,AAvBD,kDvBlChB,6BAAc,CuByDG,AAvBD,kDvBlChB,8BAAc,CuByDG,AAvBD,kBvBlChB,wBAAc,CuByDG,AAvBD,wCvBlChB,4BAAc,CuByDG,AAvBD,wCvBlChB,+BAAc,CuByDG,AAvBD,wCvBlChB,6BAAc,CuByDG,AAvBD,wCvBlChB,8BAAc,CuByDG,AAvBD,oBvBlChB,sBAAc,CuByDG,AAvBD,4CvBlChB,0BAAc,CuByDG,AAvBD,4CvBlChB,6BAAc,CuByDG,AAvBD,4CvBlChB,2BAAc,CuByDG,AAvBD,4CvBlChB,4BAAc,CuByDG,AAvBD,gBvBlChB,kBAAc,CuByDG,AAvBD,oCvBlChB,sBAAc,CuByDG,AAvBD,oCvBlChB,yBAAc,CuByDG,AAvBD,oCvBlChB,uBAAc,CuByDG,AAvBD,oCvBlChB,wBAAc,CuByDG,CrB08CpB,AYh/Ce,6CSeI,UvBlChB,wBAAc,CuByDG,AAvBD,wBvBlChB,4BAAc,CuByDG,AAvBD,wBvBlChB,+BAAc,CuByDG,AAvBD,wBvBlChB,6BAAc,CuByDG,AAvBD,wBvBlChB,8BAAc,CuByDG,AAvBD,kBvBlChB,yBAAc,CuByDG,AAvBD,wCvBlChB,6BAAc,CuByDG,AAvBD,wCvBlChB,gCAAc,CuByDG,AAvBD,wCvBlChB,8BAAc,CuByDG,AAvBD,wCvBlChB,+BAAc,CuByDG,AAvBD,evBlChB,wBAAc,CuByDG,AAvBD,kCvBlChB,4BAAc,CuByDG,AAvBD,kCvBlChB,+BAAc,CuByDG,AAvBD,kCvBlChB,6BAAc,CuByDG,AAvBD,kCvBlChB,8BAAc,CuByDG,AAvBD,YvBlChB,sBAAc,CuByDG,AAvBD,4BvBlChB,0BAAc,CuByDG,AAvBD,4BvBlChB,6BAAc,CuByDG,AAvBD,4BvBlChB,2BAAc,CuByDG,AAvBD,4BvBlChB,4BAAc,CuByDG,AAvBD,YvBlChB,mBAAc,CuByDG,AAvBD,4BvBlChB,uBAAc,CuByDG,AAvBD,4BvBlChB,0BAAc,CuByDG,AAvBD,4BvBlChB,wBAAc,CuByDG,AAvBD,4BvBlChB,yBAAc,CuByDG,AAvBD,YvBlChB,uBAAc,CuByDG,AAvBD,4BvBlChB,2BAAc,CuByDG,AAvBD,4BvBlChB,8BAAc,CuByDG,AAvBD,4BvBlChB,4BAAc,CuByDG,AAvBD,4BvBlChB,6BAAc,CuByDG,AAvBD,oBvBlChB,wBAAc,CuByDG,AAvBD,4CvBlChB,4BAAc,CuByDG,AAvBD,4CvBlChB,+BAAc,CuByDG,AAvBD,4CvBlChB,6BAAc,CuByDG,AAvBD,4CvBlChB,8BAAc,CuByDG,AAvBD,iBvBlChB,uBAAc,CuByDG,AAvBD,sCvBlChB,2BAAc,CuByDG,AAvBD,sCvBlChB,8BAAc,CuByDG,AAvBD,sCvBlChB,4BAAc,CuByDG,AAvBD,sCvBlChB,6BAAc,CuByDG,AAvBD,cvBlChB,qBAAc,CuByDG,AAvBD,gCvBlChB,yBAAc,CuByDG,AAvBD,gCvBlChB,4BAAc,CuByDG,AAvBD,gCvBlChB,0BAAc,CuByDG,AAvBD,gCvBlChB,2BAAc,CuByDG,AAvBD,wBvBlChB,yBAAc,CuByDG,AAvBD,oDvBlChB,6BAAc,CuByDG,AAvBD,oDvBlChB,gCAAc,CuByDG,AAvBD,oDvBlChB,8BAAc,CuByDG,AAvBD,oDvBlChB,+BAAc,CuByDG,AAvBD,qBvBlChB,wBAAc,CuByDG,AAvBD,8CvBlChB,4BAAc,CuByDG,AAvBD,8CvBlChB,+BAAc,CuByDG,AAvBD,8CvBlChB,6BAAc,CuByDG,AAvBD,8CvBlChB,8BAAc,CuByDG,AAvBD,gBvBlChB,wBAAc,CuByDG,AAvBD,oCvBlChB,4BAAc,CuByDG,AAvBD,oCvBlChB,+BAAc,CuByDG,AAvBD,oCvBlChB,6BAAc,CuByDG,AAvBD,oCvBlChB,8BAAc,CuByDG,AAvBD,kBvBlChB,sBAAc,CuByDG,AAvBD,wCvBlChB,0BAAc,CuByDG,AAvBD,wCvBlChB,6BAAc,CuByDG,AAvBD,wCvBlChB,2BAAc,CuByDG,AAvBD,wCvBlChB,4BAAc,CuByDG,AAvBD,cvBlChB,kBAAc,CuByDG,AAvBD,gCvBlChB,sBAAc,CuByDG,AAvBD,gCvBlChB,yBAAc,CuByDG,AAvBD,gCvBlChB,uBAAc,CuByDG,AAvBD,gCvBlChB,wBAAc,CuByDG,CrB+pDpB,AYrsDe,wCSeI,UvBlChB,wBAAc,CuByDG,AAvBD,wBvBlChB,4BAAc,CuByDG,AAvBD,wBvBlChB,+BAAc,CuByDG,AAvBD,wBvBlChB,6BAAc,CuByDG,AAvBD,wBvBlChB,8BAAc,CuByDG,AAvBD,kBvBlChB,yBAAc,CuByDG,AAvBD,wCvBlChB,6BAAc,CuByDG,AAvBD,wCvBlChB,gCAAc,CuByDG,AAvBD,wCvBlChB,8BAAc,CuByDG,AAvBD,wCvBlChB,+BAAc,CuByDG,AAvBD,evBlChB,wBAAc,CuByDG,AAvBD,kCvBlChB,4BAAc,CuByDG,AAvBD,kCvBlChB,+BAAc,CuByDG,AAvBD,kCvBlChB,6BAAc,CuByDG,AAvBD,kCvBlChB,8BAAc,CuByDG,AAvBD,YvBlChB,sBAAc,CuByDG,AAvBD,4BvBlChB,0BAAc,CuByDG,AAvBD,4BvBlChB,6BAAc,CuByDG,AAvBD,4BvBlChB,2BAAc,CuByDG,AAvBD,4BvBlChB,4BAAc,CuByDG,AAvBD,YvBlChB,mBAAc,CuByDG,AAvBD,4BvBlChB,uBAAc,CuByDG,AAvBD,4BvBlChB,0BAAc,CuByDG,AAvBD,4BvBlChB,wBAAc,CuByDG,AAvBD,4BvBlChB,yBAAc,CuByDG,AAvBD,YvBlChB,uBAAc,CuByDG,AAvBD,4BvBlChB,2BAAc,CuByDG,AAvBD,4BvBlChB,8BAAc,CuByDG,AAvBD,4BvBlChB,4BAAc,CuByDG,AAvBD,4BvBlChB,6BAAc,CuByDG,AAvBD,oBvBlChB,wBAAc,CuByDG,AAvBD,4CvBlChB,4BAAc,CuByDG,AAvBD,4CvBlChB,+BAAc,CuByDG,AAvBD,4CvBlChB,6BAAc,CuByDG,AAvBD,4CvBlChB,8BAAc,CuByDG,AAvBD,iBvBlChB,uBAAc,CuByDG,AAvBD,sCvBlChB,2BAAc,CuByDG,AAvBD,sCvBlChB,8BAAc,CuByDG,AAvBD,sCvBlChB,4BAAc,CuByDG,AAvBD,sCvBlChB,6BAAc,CuByDG,AAvBD,cvBlChB,qBAAc,CuByDG,AAvBD,gCvBlChB,yBAAc,CuByDG,AAvBD,gCvBlChB,4BAAc,CuByDG,AAvBD,gCvBlChB,0BAAc,CuByDG,AAvBD,gCvBlChB,2BAAc,CuByDG,AAvBD,wBvBlChB,yBAAc,CuByDG,AAvBD,oDvBlChB,6BAAc,CuByDG,AAvBD,oDvBlChB,gCAAc,CuByDG,AAvBD,oDvBlChB,8BAAc,CuByDG,AAvBD,oDvBlChB,+BAAc,CuByDG,AAvBD,qBvBlChB,wBAAc,CuByDG,AAvBD,8CvBlChB,4BAAc,CuByDG,AAvBD,8CvBlChB,+BAAc,CuByDG,AAvBD,8CvBlChB,6BAAc,CuByDG,AAvBD,8CvBlChB,8BAAc,CuByDG,AAvBD,gBvBlChB,wBAAc,CuByDG,AAvBD,oCvBlChB,4BAAc,CuByDG,AAvBD,oCvBlChB,+BAAc,CuByDG,AAvBD,oCvBlChB,6BAAc,CuByDG,AAvBD,oCvBlChB,8BAAc,CuByDG,AAvBD,kBvBlChB,sBAAc,CuByDG,AAvBD,wCvBlChB,0BAAc,CuByDG,AAvBD,wCvBlChB,6BAAc,CuByDG,AAvBD,wCvBlChB,2BAAc,CuByDG,AAvBD,wCvBlChB,4BAAc,CuByDG,AAvBD,cvBlChB,kBAAc,CuByDG,AAvBD,gCvBlChB,sBAAc,CuByDG,AAvBD,gCvBlChB,yBAAc,CuByDG,AAvBD,gCvBlChB,uBAAc,CuByDG,AAvBD,gCvBlChB,wBAAc,CuByDG,CrBo3DpB,AsB38DD,IxB8BI,+BAAc,AKFV,mBA4DqF,CmBtF5F,AACD,IxB2BI,+BAAc,AKFV,mBA4DqF,CmBnF5F,AACD,IxBwBI,+BAAc,AKFV,mBA4DqF,CmBhF5F,AACD,IxBqBI,+BAAc,AKFV,kBA4DqF,CmB7E5F,AACD,IxBkBI,+BAAc,AKFV,mBA4DqF,CmB1E5F,AACD,IxBeI,6BAAc,AKFV,mBA4DqF,CmBvE5F,AAED,mDAOE,wBAAyB,AACzB,8BAAgC,CAChC,ALkBM,WAEQ,8BAAuD,AAAvD,yBAAuD,CAE9D,AAJD,aAEQ,4BAAuD,CAE9D,AAJD,YAEQ,2BAAuD,CAE9D,AAJD,YAEQ,yBAAuD,CAE9D,AAJD,YAEQ,2BAAuD,CAE9D,AAJD,UAEQ,0BAAuD,AAAvD,4CAAuD,CAE9D,AAJD,WAEQ,mCAAuD,AAAvD,6BAAuD,CAE9D,AAJD,aAEQ,mCAAuD,CAE9D,AAJD,WAEQ,6BAAuD,CAE9D,AAJD,4BAEQ,+BAAuD,CAF/D,AAIC,iBAFO,6BAAuD,CAE9D,AAJD,aAEQ,0GAAuD,CAE9D,AAJD,eAEQ,wEAAuD,CAE9D,ALDO,4CKHR,kBAEQ,8BAAuD,AAAvD,yBAAuD,CAE9D,AAJD,oBAEQ,4BAAuD,CAE9D,AAJD,mBAEQ,2BAAuD,CAE9D,AAJD,mBAEQ,yBAAuD,CAE9D,AAJD,mBAEQ,2BAAuD,CAE9D,AAJD,iBAEQ,0BAAuD,AAAvD,4CAAuD,CAE9D,AAJD,kBAEQ,mCAAuD,AAAvD,6BAAuD,CAE9D,AAJD,oBAEQ,mCAAuD,CAE9D,AAJD,kBAEQ,8BAAuD,AAAvD,+BAAuD,CAE9D,AAJD,wBAEQ,gCAAuD,AAAvD,6BAAuD,CAE9D,AAJD,oBAEQ,0GAAuD,CAE9D,AAJD,sBAEQ,wEAAuD,CAE9D,CjBqjER,AYtjEe,6CKHR,gBAEQ,8BAAuD,AAAvD,yBAAuD,CAE9D,AAJD,kBAEQ,4BAAuD,CAE9D,AAJD,iBAEQ,2BAAuD,CAE9D,AAJD,iBAEQ,yBAAuD,CAE9D,AAJD,iBAEQ,2BAAuD,CAE9D,AAJD,eAEQ,0BAAuD,AAAvD,4CAAuD,CAE9D,AAJD,gBAEQ,mCAAuD,AAAvD,6BAAuD,CAE9D,AAJD,kBAEQ,mCAAuD,CAE9D,AAJD,gBAEQ,8BAAuD,AAAvD,+BAAuD,CAE9D,AAJD,sBAEQ,gCAAuD,AAAvD,6BAAuD,CAE9D,AAJD,kBAEQ,0GAAuD,CAE9D,AAJD,oBAEQ,wEAAuD,CAE9D,CjBimER,AuBlqEA,aACO,8CAA4C,AAC5C,iHAAkK,CACrK,AAED,cACI,qBAAsB,CACzB,AXyDW,4CW5CJ,qBACI,iBAAyB,AACzB,eAAe,AACf,MAAM,AACN,QAAQ,AACR,gBAAgB,AAChB,aAAa,AACb,cAAe,CAClB,CvB2pEZ,AYvnEe,4CW5CJ,qBACI,gBAAyB,AACzB,eAAe,AACf,MAAM,AACN,QAAQ,AACR,gBAAgB,AAChB,aAAa,AACb,cAAe,CAClB,CvBuqEZ,AYnoEe,sEW5CJ,qBACI,mBAAyB,AACzB,eAAe,AACf,MAAM,AACN,QAAQ,AACR,gBAAgB,AAChB,aAAa,AACb,cAAe,CAClB,CvBmrEZ,AY/oEe,6CW5CJ,qBACI,eAAyB,AACzB,eAAe,AACf,MAAM,AACN,QAAQ,AACR,gBAAgB,AAChB,aAAa,AACb,cAAe,CAClB,CvB+rEZ,AY3pEe,kEW5CJ,qBACI,cAAyB,AACzB,eAAe,AACf,MAAM,AACN,QAAQ,AACR,gBAAgB,AAChB,aAAa,AACb,cAAe,CAClB,CvB2sEZ,AYvqEe,wCW5CJ,qBACI,eAAyB,AACzB,eAAe,AACf,MAAM,AACN,QAAQ,AACR,gBAAgB,AAChB,aAAa,AACb,cAAe,CAClB,CvButEZ,AuBltED,SACI,4BAAqC,CACxC","file":"../main.min.css","sourcesContent":["//------------------------------------\n//    $BASE\n//------------------------------------\n:root,\nhtml {\n    font-size: percentage($base-font-size/16px);\n\tline-height: $type-base-ratio;\n    font-family: $primary-font-stack;\n}\n\nbody {\n\t@include font-size($base-font-size, $base-line-height);\n}\n\n//------------------------------------\n//    $HEADINGS\n//------------------------------------\n\n%base-heading-space,\n%type-vertical-rhythm {\n\t@include type-space(margin-bottom, 1);\n}\n\nh1 {\n    @include font-size($h1-fs, $h1-lh);\n}\n\nh2 {\n    @include font-size($h2-fs, $h2-lh);\n}\n\nh3 {\n    @include font-size($h3-fs, $h3-lh);\n}\n\nh4 {\n    @include font-size($h4-fs, $h4-lh);\n}\n\nh5 {\n    @include font-size($h5-fs, $h5-lh);\n}\n\nh6 {\n    @include font-size($h6-fs, $h6-lh);\n}\n\n\n@include headings(1, 6) {\n    @extend %base-heading-space;\n\t@extend %secondary_font_family;\n\n    & + p {\n        @include type-space(margin-top, -1);\n    }\n}\n\n/* SG\n# Typography/Body copy\n\nThe default font-size for all typography is **16px** with line-height of **24px** (1.5). This is applied to the `<body>` and inherited by paragraphs and lists. `<p>` tags all receive a bottom margin of 1rem.\n\nWhen a `<p>` follows a heading tag (`<h1>` for instance), the paragraph receives a negative top margin so it sits directly beneath the heading.\n\nThe default font-family is set in **Asap**.\n\n```html_example\n<p>Aenean lacinia bibendum nulla sed consectetur. Morbi leo risus, porta ac consectetur ac, vestibulum at eros. Sed posuere consectetur est at lobortis. </p>\n<p>Nullam quis risus eget urna mollis ornare vel eu leo. Nulla vitae elit libero, a pharetra augue.</p>\n\n<h5>A Heading...</h5>\n<p>...Followed by a paragraph. Notice how there's no margin between these two items.</p>\n```\n\n*/\n\np {\n\t@extend %type-vertical-rhythm;\n\n    @if $indented-paragraphs {\n\n        & + & {\n            @include type-space(text-indent, .5);\n            @include type-space(margin-top, -1);\n        }\n\n    }\n}\n\nsmall {\n\tdisplay: inline-block; //allows for own line-height\n\t@include font-size($small-fs, $small-lh);\n}\n\n//\n// Not strictly a paragraph, but probably doesn’t need its own section.\n//\naddress {\n    @extend %type-vertical-rhythm;\n}\n\nb,\nstrong {\n\tfont-weight: 700;\n}\n\npre {\n    @extend %type-vertical-rhythm;\n    white-space: pre;\n    white-space: pre-wrap;\n    word-wrap: break-word;\n    overflow: auto;\n}\n\nsub,\nsup {\n\tfont-size: 75%;\n\tline-height: 0;\n\tposition: relative;\n\tvertical-align: baseline;\n}\n\nsup {\n\ttop: -0.5ex;\n}\n\nsub {\n\tbottom: -0.25ex;\n}\n\n\n// 1. Fix an odd quirk whereby, without this, code blocks are rendered at a\n//    font-size smaller than 1em.\n\ncode,\nkbd,\npre,\nsamp {\n    font-family: $monospace-font-stack;\n    _font-family: 'courier new', monospace;\n    font-size: 1em; // [1]\n}\n\n//Address styling not present in IE 7/8/9, Safari 5, and Chrome.\n\n\n//-------------------------------\n//    $QUOTES\n//-------------------------------\n//\n// 1. Hang the opening quote of the blockquote.\n//\tUses ex length for font-relative spacing\n//\nblockquote {\n    text-indent: -.5ex; // [1]\n}\n\nblockquote {\n    @include type-space(margin, 0 0 1 1);\n    quotes: '“' '”';\n\n    p {\n        &:before {\n            content: \"“\";\n            content: open-quote;\n        }\n\n        &:after {\n            content: \"\";\n            content: no-close-quote;\n        }\n\n        &:last-of-type:after {\n            content: \"”\";\n            content: close-quote;\n        }\n\n    }\n\n}\n\nq {\n    *quotes: none;\n    quotes: \"‘\" \"’\" \"“\" \"”\";\n    overflow: visible;\n\n    &:before {\n        content: \"‘\";\n        content: open-quote;\n    }\n\n    &:after {\n        content: \"’\";\n        content: close-quote;\n    }\n\n    q:before {\n        content: \"“\";\n        content: open-quote;\n    }\n\n    q:after {\n        content: \"”\";\n        content: close-quote;\n    }\n\n    //\n    // If an element opens with an inline quote, let’s hang that.\n    //\n    &:first-child {\n        display: inline-block;\n        text-indent: -0.22em;\n    }\n\n}\n","\n//Useful for sticky footers and floats\nhtml,\nbody {\n    min-height: 100%;\n}\n\n\nabbr[title],\ndfn[title] {\n    cursor: help;\n}\n\nu,\nins {\n\ttext-decoration: none;\n}\n\nins {\n    border-bottom: 1px solid;\n}\n\nmark {\n\tbackground-color: mix(color('links'), color('bg'), 20%);\n}\n\narticle,\naside,\ndetails,\nfigcaption,\nfigure,\nfooter,\nheader,\nmain,\nmenu,\nnav,\nsection,\nsummary,\nhr {\n\tdisplay: block;\n}\n\na {\n\tcursor: pointer;\n\tbackground-color: transparent;\n\tcolor: color('links');\n    text-decoration: underline;\n\n\t&:hover,\n\t&:focus {\n\t\tcolor: color('links', light);\n\t}\n\n\t&:active{\n\t\tcolor: color('links', darker);\n\t}\n\n\t&:focus {\n\t\toutline: thin dotted; //normalize browser outlines\n\t}\n\n\t// Improve readability when focused and also mouse hovered in all browsers.\n\n\t&:active,\n\t&:hover {\n\t\toutline: 0;\n\t}\n}\n\nhr {\n    outline: 1px solid color('bg', darker);\n    height: 0;\n\t@include type-space(margin, 0 0 1);\n}\n","/* SG\n# Config [[dev]]\n\nSee [UWHealth sass tools documenation](https://uwhealth.github.io/sass-tools/) for configuration variable details.\nWhat is set here are **reasonable defaults**.\n\n*/\n\n// Import base sass toolset and default config variables\n@import \"NODE/@uwhealth/sass-tools/index.scss\";\n\n\n//------------------------------------------\n// 1.0 - Typography configration\n//------------------------------------------\n\n$base-font-size:       16px;\n$base-line-height:     24px;\n$font-looseness:       15%;\n$auto-scale-type:      false;\n$scale-ratio:          1.35;\n\n$vertical-space:       $base-line-height; // Maintains best vertical rhythm\n$horizontal-space:     $base-line-height; // Simplifies measurements\n\n$rem-px-fallback:      false;\n\n$indented-paragraphs:  false;\n\n$type-h1-size:         (modular-scale(6));\n$type-h2-size:         (modular-scale(5));\n$type-h3-size:         (modular-scale(4));\n$type-h4-size:         (modular-scale(3));\n$type-h5-size:         (modular-scale(2));\n$type-h6-size:         (modular-scale(1));\n$type-small-size: \t   (ceil(modular-scale(-1)));\n\n\n//------------------------------------------\n// 1.1 - Font configuration\n//------------------------------------------\n\n$use-web-fonts:         true;\n\n$web-fonts: (\n    'opensans': (\n        'weights': (400, 700),\n        'italics': (400, 700),\n        'formats': ('woff', 'svg', 'ttf')\n    )\n);\n\n$font-file-location: \t'/public/static/fonts'; //Paths are relative to CSS file\n\n$primary-font-stack:    $system-font-stack;\n$secondary-font-stack:  \"opensans\", \"Helvetica Neue\", \"Helvetica\", \"Arial\", sans-serif;\n$monospace-font-stack:  \"Consolas\", \"Andale Mono WT\", \"Andale Mono\", \"Lucida Console\", \"Lucida Sans Typewriter\", \"DejaVu Sans Mono\", \"Bitstream Vera Sans Mono\", \"Liberation Mono\", \"Nimbus Mono L\", \"Monaco\", \"Courier New\", \"Courier\", monospace;\n$icon-font-stack:       null;\n\n\n//------------------------------------------\n// 2.0 - Responsive configuration\n//------------------------------------------\n\n$max-site-width:         1360px;\n$max-content-width: \t 690px;\n$max-wide-content-width: 910px;\n\n$breakpoints: (\n    // Mostly phones\n    \"smalls\":\n        \"(max-width:#{ems($max-wide-content-width)})\",\n    // Small Phones\n    \"small\":\n        \"(max-width: #{ems($max-content-width)})\",\n    // Large (Modern) phones/phablets\n    \"smallish\":\n        \"(min-width: #{ems($max-content-width+1px)})\" +\n        \" and (max-width: #{ems($max-wide-content-width)})\",\n    // Tablets, Desktops and larger\n    \"bigs\":\n        \"(min-width: #{ems($max-wide-content-width+1px)})\",\n    // Mostly Tablets and small laptops. Overrides Bigs\n    \"lap\":\n        \"(min-width: #{ems($max-wide-content-width + 1px)})\" +\n        \" and (max-width: #{ems($max-site-width)})\",\n    // Large Tablets and Desktops. Overrides Bigs.\n    \"desk\":\n        \"(min-width: #{ems($max-site-width)})\"\n);\n\n$breakpoint-namespace-character: \"_\";\n\n\n//------------------------------------------\n// 2.1 - Grid configuration\n//------------------------------------------\n\n$grid-columns:           12;\n$grid-gutter:            32px;\n$grid-silent-classes:    true;\n$grid-push:              true;\n$grid-pull:              true;\n\n$grid-flex:              true;\n$grid-floats:            false;\n\n$grid-inline-block:      true; // Fallback for older browsers\n$grid-letter-space-fix:  -0.45em; // Should be based on $primary-font-stack\n\n$grid-bem-naming:        true; // Generated classes use BEM instead of snake_case\n\n// Include classes for each named breakpoint in $breakpoints\n$breakpoint-has-widths: ('smalls', 'small', 'smallish', 'bigs', 'lap', 'desk');\n$breakpoint-has-push:   ('smalls', 'small', 'smallish', 'bigs', 'lap', 'desk');\n$breakpoint-has-pull:   ('smalls', 'small', 'smallish', 'bigs', 'lap', 'desk');\n\n\n//------------------------------------------\n// 2.2 - Utility class configuration\n//------------------------------------------\n\n$display-classes: (\n    \"show\": block,\n    \"il\": inline,\n    \"i-block\": inline-block,\n    \"hide\": none,\n    \"flex\": flex,\n);\n\n// Determines what display utility classes get generated at `$breakpoints`\n// The list's order determines cascade (output order).\n$breakpoint-has-display-classes: (\"smalls\", \"bigs\");\n\n// If $breakpoint-has-spacing-classes is false, this can be ignored\n$spacing-classes: (\n    properties: (\n        \"pad\": padding,\n        \"space\": margin,\n    ),\n    directions: (\n        \"\": \"\",\n        \"-t\": \"top\",\n        \"-b\": \"bottom\",\n        \"-l\": \"left\",\n        \"-r\": \"right\",\n        \"-v\": \"top\" \"bottom\",\n        \"-h\": \"right\" \"left\",\n    ),\n    units: (\n        \"-0\": 0,\n        \"\": 1,\n        \"-quarter\": 0.25,\n        \"-half\": 0.5,\n        \"-2\": 2,\n        \"-neg-quarter\": -0.25,\n        \"-neg-half\": -0.5,\n        \"-neg\": -1,\n        \"-neg-2\": -2,\n    ),\n);\n\n// Determines what spacing utility classes get generated at `$breakpoints`\n// The list's order determines cascade (output order).\n$breakpoint-has-spacing-classes:   (\"smalls\", \"bigs\", \"desk\");\n\n// Alignment utility classes\n// See helpers/_overrides/_ov-alignment\n$breakpoint-has-alignment-classes: (\"smalls\", \"bigs\", \"desk\");\n\n// Typography utility classes\n// See helpers/_overrides/_ov-type\n$breakpoint-has-type-classes:      (\"smalls\", \"bigs\");\n\n\n//------------------------------------------\n// 3.0 - Color configuration\n//------------------------------------------\n\n$base-colors: (\n    'type': #0a1c2b, //Required\n\n    'links': #0d497b, //Required\n\n    'bg': #f6f8fb, //Required\n\n    //Change the following names and colors project-specific\n    'styleguide': (\n        'base': #5E839E,\n        'light': #CADDE2,\n        'lighter': #F5D1DD,\n        'lightest': #E0ECF0,\n        'highlight':#f60255,\n        'dark': #175CA2,\n        'darker': #114a84,\n        'darkest': #081D33\n    ),\n\n    'success': #bada55\n);\n\n// Create color variations based\n// NOTE: This is here as an example and can be removed from a real project.\n$base-colors: generate-color-variations(\n    $base-colors,\n    $variations: ( //Color variation names\n        'light', 'lighter', 'lightest',\n        'dark', 'darker', 'darkest'\n    ),\n    $functions: ( //functions to use when creating variations\n        'linearlight', 'lineardodge', 'tint',\n        'darken', 'linearburn', 'linearburn'\n    ),\n    $blending-colors: ( //Allows for more uniform colors\n        #bfccd6, #dee9ec, null,\n        null, #4c5a66, #323d42\n    ),\n    $increments: ( //How strongly each color should be blended\n        50%,   60%,   80%,\n        5%,   40%,   70%\n    )\n);\n\n\n//------------------------------------------\n// 4.0 - Debug configuration\n//------------------------------------------\n\n$debug-fonts: false;\n// Adds style for a `baseline-on` class that will show a grid of the baseline\n// on any element (most useful on the `body` or `html` tag).\n// Makes vertical alignment easier.\n$debug-baseline: true;\n// Displays the current breakpoint (from `$$breakpoints`) name\n// on a psuedo element on the body.\n// Makes debugging media queries a little simpler.\n$debug-breakpoints: true;\n // Stores all silent classes in $_silents-registry\n$debug-silent-classes: false;\n\n\n// Initialize and propogate framework variables\n@include init();\n","// /* SG\n//\n// # Colors/Blending Modes [[dev]]\n//\n// @file tools/_t-blend-modes.scss\n//\n// @priority 1\n//\n// [Taken from Sass Blend Modes](https://github.com/heygrady/scss-blend-modes/blob/master/stylesheets/_blend-modes.scss)\n//\n// ##### `blend-normal()`\n// ###### function(`$forground, $background, $amount:0`)\n//\n// ##### `blend-multiply()`\n// ###### function(`$forground, $background, $amount:0`)\n//\n// ##### `blend-lighten()`\n// ###### function(`$forground, $background, $amount:0`)\n//\n// ##### `blend-darken()`\n// ###### function(`$forground, $background, $amount:0`)\n//\n// ##### `blend-lineardodge()`\n// ###### function(`$forground, $background, $amount:0`)\n//\n// ##### `blend-linearburn()`\n// ###### function(`$forground, $background, $amount:0`)\n//\n// ##### `blend-difference`\n// ###### function(`$forground, $background, $amount:0`)\n//\n// ##### `blend-screen()`\n// ###### function(`$forground, $background, $amount:0`)\n//\n// ##### `blend-exclusion()`\n// ###### function(`$forground, $background, $amount:0`)\n//\n// ##### `blend-multiply()`\n// ###### function(`$forground, $background, $amount:0`)\n//\n// */\n\n//Taken from: https://github.com/heygrady/scss-blend-modes/blob/master/stylesheets/_blend-modes.scss\n\n//Mimic blending modes found in photoshop.\n\n@function _color-convert($color-input) {\n    $color-input: invert($color-input);\n    $color-input: invert($color-input);\n    @return $color-input;\n}\n\n//--------------------------------\n// Normal\n//--------------------------------\n@function blend-normal ($foreground, $background, $amount:0) {\n    $amount: $amount / 100;\n    $foreground: transparentize($foreground, $amount);\n    $opacity: opacity($foreground);\n    $background-opacity: opacity($background);\n\n    // calculate opacity\n    $bm-red: red($foreground) * $opacity + red($background) * $background-opacity * (1 - $opacity);\n    $bm-green: green($foreground) * $opacity + green($background) * $background-opacity * (1 - $opacity);\n    $bm-blue: blue($foreground) * $opacity + blue($background) * $background-opacity * (1 - $opacity);\n    @return rgb($bm-red, $bm-green, $bm-blue);\n}\n\n//--------------------------------\n// Multiply\n//--------------------------------\n@function blend-multiply ($foreground, $background, $amount:0) {\n    $amount: $amount / 100;\n    $foreground: transparentize($foreground, $amount);\n    $bm-red: red($background) * red($foreground) / 255;\n    $bm-green: green($background) * green($foreground) / 255;\n    $bm-blue: blue($background) * blue($foreground) / 255;\n\n    @return blend-normal(rgba($bm-red, $bm-green, $bm-blue, opacity($foreground)), $background);\n}\n\n//--------------------------------\n// Lighten\n//--------------------------------\n@function blend-lighten ($foreground, $background, $amount:0) {\n    $amount: $amount / 100;\n    $foreground: transparentize($foreground, $amount);\n    $bm-red: blend-lighten-color(red($foreground), red($background));\n    $bm-green: blend-lighten-color(green($foreground), green($background));\n    $bm-blue: blend-lighten-color(blue($foreground), blue($background));\n\n    @return blend-normal(rgba($bm-red, $bm-green, $bm-blue, opacity($foreground)), $background);\n}\n@function blend-lighten-color($foreground, $background) {\n    @if $background > $foreground {\n        $foreground: $background;\n    }\n    @return $foreground;\n}\n\n//--------------------------------\n// Darken\n//--------------------------------\n@function blend-darken ($foreground, $background, $amount:0) {\n    $amount: $amount / 100;\n    $foreground: transparentize($foreground, $amount);\n    $bm-red: blend-darken-color(red($foreground), red($background));\n    $bm-green: blend-darken-color(green($foreground), green($background));\n    $bm-blue: blend-darken-color(blue($foreground), blue($background));\n\n    @return blend-normal(rgba($bm-red, $bm-green, $bm-blue, opacity($foreground)), $background);\n}\n@function blend-darken-color($foreground, $background) {\n    @if $background < $foreground {\n        $foreground: $background;\n    }\n    @return $foreground;\n}\n\n//--------------------------------\n// Darker Color\n//--------------------------------\n@function blend-darkercolor ($foreground, $background, $amount:0) {\n    $amount: $amount / 100;\n    $foreground: transparentize($foreground, $amount);\n    $bm-red: red($foreground);\n    $bm-green: green($foreground);\n    $bm-blue: blue($foreground);\n    $background-red: red($background);\n    $background-green: green($background);\n    $background-blue: blue($background);\n\n    @if $background-red * 0.3 + $background-green * 0.59 + $background-blue * 0.11 <= $bm-red * 0.3 + $bm-green * 0.59 + $bm-blue * 0.11 {\n        $bm-red: $background-red;\n        $bm-green: $background-green;\n        $bm-blue: $background-blue;\n    }\n    @return blend-normal(rgba($bm-red, $bm-green, $bm-blue, opacity($foreground)), $background);\n}\n\n//--------------------------------\n// Lighter Color\n//--------------------------------\n@function blend-lightercolor ($foreground, $background, $amount:0) {\n    $amount: $amount / 100;\n    $foreground: transparentize($foreground, $amount);\n    $bm-red: red($foreground);\n    $bm-green: green($foreground);\n    $bm-blue: blue($foreground);\n    $background-red: red($background);\n    $background-green: green($background);\n    $background-blue: blue($background);\n\n    @if $background-red * 0.3 + $background-green * 0.59 + $background-blue * 0.11 > $bm-red * 0.3 + $bm-green * 0.59 + $bm-blue * 0.11 {\n        $bm-red: $background-red;\n        $bm-green: $background-green;\n        $bm-blue: $background-blue;\n    }\n    @return blend-normal(rgba($bm-red, $bm-green, $bm-blue, opacity($foreground)), $background);\n}\n\n//--------------------------------\n// Linear Dodge\n//--------------------------------\n@function blend-lineardodge ($foreground, $background, $amount:0) {\n    $amount: $amount / 100;\n    $foreground: transparentize($foreground, $amount);\n    $bm-red: blend-lineardodge-color(red($foreground), red($background));\n    $bm-green: blend-lineardodge-color(green($foreground), green($background));\n    $bm-blue: blend-lineardodge-color(blue($foreground), blue($background));\n\n    @return blend-normal(rgba($bm-red, $bm-green, $bm-blue, opacity($foreground)), $background);\n}\n@function blend-lineardodge-color($foreground, $background) {\n    @if $background + $foreground > 255 {\n        $foreground: 255;\n    }\n    @else {\n        $foreground: $background + $foreground;\n    }\n    @return $foreground;\n}\n\n//--------------------------------\n// Linear Burn\n//--------------------------------\n@function blend-linearburn-color($foreground, $background) {\n    @if $background + $foreground < 255 {\n        $foreground: 0;\n    }\n    @else {\n        $foreground: $background + $foreground - 255;\n    }\n    @return $foreground;\n}\n\n@function blend-linearburn ($foreground, $background, $amount:0) {\n    $amount: $amount / 100;\n    $foreground: transparentize($foreground, $amount);\n    $bm-red: blend-linearburn-color(red($foreground), red($background));\n    $bm-green: blend-linearburn-color(green($foreground), green($background));\n    $bm-blue: blend-linearburn-color(blue($foreground), blue($background));\n\n    @return blend-normal(rgba($bm-red, $bm-green, $bm-blue, opacity($foreground)), $background);\n}\n\n\n//--------------------------------\n// Difference\n//--------------------------------\n@function blend-difference ($foreground, $background, $amount:0) {\n    $amount: $amount / 100;\n    $foreground: transparentize($foreground, $amount);\n    $bm-red: abs(red($background) - red($foreground));\n    $bm-green: abs(green($background) - green($foreground));\n    $bm-blue: abs(blue($background) - blue($foreground));\n\n    @return blend-normal(rgba($bm-red, $bm-green, $bm-blue, opacity($foreground)), $background);\n}\n\n//--------------------------------\n// Screen\n//--------------------------------\n@function blend-screen-color($foreground, $background) {\n    @return (255 - ( ( (255 - $foreground) * (255 - $background)) / 256));\n}\n\n@function blend-screen ($foreground, $background, $amount:0) {\n    $amount: $amount / 100;\n    $foreground: transparentize($foreground, $amount);\n    $bm-red: blend-screen-color(red($foreground), red($background));\n    $bm-green: blend-screen-color(green($foreground), green($background));\n    $bm-blue: blend-screen-color(blue($foreground), blue($background));\n\n    @return blend-normal(rgba($bm-red, $bm-green, $bm-blue, opacity($foreground)), $background);\n}\n\n\n//--------------------------------\n// Exclusion\n//--------------------------------\n@function blend-exclusion ($foreground, $background, $amount:0 ) {\n    $amount: $amount / 100;\n    $foreground: transparentize($foreground, $amount);\n    $bm-red: blend-exclusion-color(red($foreground), red($background));\n    $bm-green: blend-exclusion-color(green($foreground), green($background));\n    $bm-blue: blend-exclusion-color(blue($foreground), blue($background));\n\n    @return blend-normal(rgba($bm-red, $bm-green, $bm-blue, opacity($foreground)), $background);\n}\n\n@function blend-exclusion-color($foreground, $background) {\n    @return $background - ($background * (2 / 255) - 1) * $foreground;\n}\n\n//--------------------------------\n// Overlay\n//--------------------------------\n@function blend-overlay-color($foreground, $background) {\n        $comparison: 255 / 2;\n        @if $background <= $comparison {\n            $foreground: (2 * $background * $foreground) / 255;\n        } @else {\n            $foreground: 255 - (255 - 2 * ($background - (255 / 2))) * (255 - $foreground) / 255;\n        }\n        @return $foreground;\n}\n\n@function blend-overlay($foreground, $background, $amount:0) {\n        $amount: $amount / 100;\n        $foreground: transparentize($foreground, $amount);\n\n    $bm-red: blend-overlay-color(\n        red($foreground),\n        red($background)\n    );\n    $bm-green: blend-overlay-color(green($foreground), green($background));\n    $bm-blue: blend-overlay-color(blue($foreground), blue($background));\n\n    @return blend-normal(rgba($bm-red, $bm-green, $bm-blue, opacity($foreground)), $background);\n}\n\n\n//--------------------------------\n// Soft Light\n//--------------------------------\n@function blend-softlight-color($foreground, $background) {\n    @if $background < 128 {\n        $foreground: (($foreground / 2) + 64) * $background * (2 / 255);\n    } @else {\n        $foreground: 255 - (191 - ($foreground / 2)) * (255 - $background) * (2 / 255);\n    }\n    @return $foreground;\n}\n\n@function blend-softlight ($foreground, $background, $amount:0) {\n        $amount: $amount / 100;\n        $foreground: transparentize($foreground, $amount);\n    $bm-red: blend-softlight-color(red($foreground), red($background));\n    $bm-green: blend-softlight-color(green($foreground), green($background));\n    $bm-blue: blend-softlight-color(blue($foreground), blue($background));\n\n    @return blend-normal(rgba($bm-red, $bm-green, $bm-blue, opacity($foreground)), $background);\n}\n\n\n//--------------------------------\n// Hard Light\n//--------------------------------\n@function blend-hardlight-color($foreground, $background) {\n    $tmp-blend: $foreground;\n    @if $tmp-blend < 128 {\n        $foreground: $background * $tmp-blend * (2 / 255);\n    } @else {\n        $foreground: 255 - (255-$background) * (255-$tmp-blend) * (2 / 255);\n    }\n    @return $foreground;\n}\n\n@function blend-hardlight ($foreground, $background, $amount:0) {\n    $amount: $amount / 100;\n    $foreground: transparentize($foreground, $amount);\n    $bm-red: blend-hardlight-color(red($foreground), red($background));\n    $bm-green: blend-hardlight-color(green($foreground), green($background));\n    $bm-blue: blend-hardlight-color(blue($foreground), blue($background));\n\n    @return blend-normal(rgba($bm-red, $bm-green, $bm-blue, opacity($foreground)), $background);\n}\n\n\n//--------------------------------\n// Color Dodge\n//--------------------------------\n@function blend-colordodge-color($foreground, $background) {\n\n    $comparison: 256 / (255 - $foreground);\n    @if $comparison == Infinity {\n        $comparison: 255;\n    }\n    $tmp: $background * $comparison;\n    @if $tmp > 255 or $foreground == 255 {\n        $foreground: 255;\n    } @else {\n        $foreground: $tmp;\n    }\n    @return $foreground;\n}\n\n@function blend-colordodge ($foreground, $background, $amount:0) {\n    $amount: $amount / 100;\n    $foreground: transparentize($foreground, $amount);\n    $bm-red: blend-colordodge-color(red($foreground), red($background));\n    $bm-green: blend-colordodge-color(green($foreground), green($background));\n    $bm-blue: blend-colordodge-color(blue($foreground), blue($background));\n\n    @return blend-normal(rgba($bm-red, $bm-green, $bm-blue, opacity($foreground)), $background);\n}\n\n\n//--------------------------------\n// Color Burn\n//--------------------------------\n@function blend-colorburn-color($foreground, $background) {\n    $tmp: (255 - ((255 - $background) * 255) / $foreground);\n\n    @if $foreground == 0 {\n        $foreground: 255;\n    } @elseif $tmp < 0 {\n        $foreground: 0;\n    } @else {\n        $foreground: $tmp;\n    }\n    @return $foreground;\n}\n\n@function blend-colorburn ($foreground, $background, $amount:0) {\n    $amount: $amount / 100;\n    $foreground: transparentize($foreground, $amount);\n    $bm-red: blend-colorburn-color(red($foreground), red($background));\n    $bm-green: blend-colorburn-color(green($foreground), green($background));\n    $bm-blue: blend-colorburn-color(blue($foreground), blue($background));\n\n    @return blend-normal(rgba($bm-red, $bm-green, $bm-blue, opacity($foreground)), $background);\n}\n\n\n//--------------------------------\n// Linear Light\n//--------------------------------\n@function blend-linearlight ($foreground, $background, $amount:0) {\n    $amount: $amount / 100;\n    $foreground: transparentize($foreground, $amount);\n    $bm-red: blend-linearlight-color(red($foreground), red($background));\n    $bm-green: blend-linearlight-color(green($foreground), green($background));\n    $bm-blue: blend-linearlight-color(blue($foreground), blue($background));\n\n    @return blend-normal(rgba($bm-red, $bm-green, $bm-blue, opacity($foreground)), $background);\n}\n@function blend-linearlight-color($foreground, $background) {\n    @if $foreground < 128 {\n        $foreground: blend-linearburn-color($background, 2 * $foreground);\n    } @else {\n        $foreground: blend-lineardodge-color($background, 2 * ($foreground - 128));\n    }\n    @return $foreground;\n}\n\n//--------------------------------\n// Vivid Light\n//--------------------------------\n@function blend-vividlight ($foreground, $background, $amount:0) {\n    $amount: $amount / 100;\n    $foreground: transparentize($foreground, $amount);\n    $bm-red: blend-vividlight-color(red($foreground), red($background));\n    $bm-green: blend-vividlight-color(green($foreground), green($background));\n    $bm-blue: blend-vividlight-color(blue($foreground), blue($background));\n\n    @return blend-normal(rgba($bm-red, $bm-green, $bm-blue, opacity($foreground)), $background);\n}\n\n@function blend-vividlight-color($foreground, $background) {\n    @if $foreground < 128 {\n        $foreground: blend-colorburn-color(2 * $foreground, $background);\n    } @else {\n        $foreground: blend-colordodge-color(2 * ($foreground - 128), $background);\n    }\n    @return $foreground;\n}\n\n//--------------------------------\n// Pin Light\n//--------------------------------\n@function blend-pinlight ($foreground, $background, $amount:0) {\n    $amount: $amount / 100;\n    $foreground: transparentize($foreground, $amount);\n    $bm-red:   blend-pinlight-color(red($foreground), red($background));\n    $bm-green: blend-pinlight-color(green($foreground), green($background));\n    $bm-blue:  blend-pinlight-color(blue($foreground), blue($background));\n\n    @return blend-normal(rgba($bm-red, $bm-green, $bm-blue, opacity($foreground)), $background);\n}\n\n@function blend-pinlight-color($foreground, $background) {\n    @if $foreground < 128 {\n        $foreground: blend-darken-color($background, 2 * $foreground);\n    } @else {\n        $foreground: blend-lighten-color($background, 2 * ($foreground - 128));\n    }\n    @return $foreground;\n}\n\n//--------------------------------\n// Hard Mix\n//--------------------------------\n@function blend-hardmix ($foreground, $background, $amount:0 ) {\n    $amount: $amount / 100;\n    $foreground: transparentize($foreground, $amount);\n    $bm-red: blend-hardmix-color(red($foreground), red($background));\n    $bm-green: blend-hardmix-color(green($foreground), green($background));\n    $bm-blue: blend-hardmix-color(blue($foreground), blue($background));\n\n    @return blend-normal(rgba($bm-red, $bm-green, $bm-blue, opacity($foreground)), $background);\n}\n\n@function blend-hardmix-color($foreground, $background) {\n    $tmp: blend-vividlight-color($foreground, $background);\n    @if $tmp < 128 {\n        $foreground: 0;\n    } @else {\n        $foreground: 255;\n    }\n    @return $foreground;\n}\n\n\n// Unique to Photoshop\n\n//--------------------------------\n// Color Blend\n//--------------------------------\n@function blend-colorblend ($foreground, $background, $amount:0 ) {\n    $amount: $amount / 100;\n    $foreground: transparentize($foreground, $amount);\n    $foreground-hsv: color-to-hsv($foreground);\n    $background-hsv: color-to-hsv($background);\n\n    $bm-hsv: nth($foreground-hsv, 1), nth($foreground-hsv, 2), nth($background-hsv, 3);\n    $bm-color: hsv-to-color($bm-hsv);\n\n    @return blend-normal(rgba(red($bm-color), green($bm-color), blue($bm-color), opacity($foreground)), $background);\n}\n\n//--------------------------------\n// Dissolve\n//--------------------------------\n@function blend-dissolve ($foreground, $background, $amount:0 ) {\n    // The Dissolve blend mode acts on transparent and partially transparent pixels\n    // it treats transparency as a pixel pattern and applies a diffusion dither pattern.\n    // @see http://photoblogstop.com/photoshop/photoshop-blend-modes-explained\n    @return $foreground;\n}\n\n//--------------------------------\n// Divide\n//--------------------------------\n@function blend-divide ($foreground, $background, $amount:0 ) {\n    $amount: $amount / 100;\n    $foreground: transparentize($foreground, $amount);\n    $bm-red: blend-divide-colors(red($foreground), red($background));\n    $bm-green: blend-divide-colors(green($foreground), green($background));\n    $bm-blue:blend-divide-colors(blue($foreground), blue($background));\n\n    @return blend-normal(rgba($bm-red, $bm-green, $bm-blue, opacity($foreground)), $background);\n}\n@function blend-divide-colors($foreground, $background) {\n    @return min((($background / 255) / ($foreground / 255)) * 255, 255);\n}\n\n//--------------------------------\n// Hue\n//--------------------------------\n@function blend-hue ($foreground, $background, $amount:0 ) {\n        $amount: $amount / 100;\n        $foreground: transparentize($foreground, $amount);\n    $foreground-hsv: color-to-hsv($foreground);\n    $background-hsv: color-to-hsv($background);\n\n    $bm-hsv: nth($foreground-hsv, 1), nth($background-hsv, 2), nth($background-hsv, 3);\n    $bm-color: hsv-to-color($bm-hsv);\n\n    @return blend-normal(rgba(red($bm-color), green($bm-color), blue($bm-color), opacity($foreground)), $background);\n}\n\n//--------------------------------\n// Luminosity\n//--------------------------------\n@function blend-luminosity ($foreground, $background, $amount: 0) {\n    $amount: $amount / 100;\n    $foreground: transparentize($foreground, $amount);\n    $foreground-hsv: color-to-hsv($foreground);\n    $background-hsv: color-to-hsv($background);\n\n    $bm-hsv: nth($background-hsv, 1), nth($background-hsv, 2), nth($foreground-hsv, 3);\n    $bm-color: hsv-to-color($bm-hsv);\n\n    @return blend-normal(rgba(red($bm-color), green($bm-color), blue($bm-color), opacity($foreground)), $background);\n}\n\n//--------------------------------\n// Saturation\n//--------------------------------\n@function blend-saturation ($foreground, $background, $amount:0 ) {\n    $amount: $amount / 100;\n    $foreground: transparentize($foreground, $amount);\n    $foreground-hsv: color-to-hsv($foreground);\n    $background-hsv: color-to-hsv($background);\n\n    $bm-hsv: nth($background-hsv, 1), nth($foreground-hsv, 2), nth($background-hsv, 3);\n    $bm-color: hsv-to-color($bm-hsv);\n\n    @return blend-normal(rgba(red($bm-color), green($bm-color), blue($bm-color), opacity($foreground)), $background);\n}\n\n//--------------------------------\n// Subtract\n//--------------------------------\n@function blend-subtract ($foreground, $background, $amount:0 ) {\n    $amount: $amount / 100;\n    $foreground: transparentize($foreground, $amount);\n    $bm-red: max(red($background) - red($foreground), 0);\n    $bm-green: max(green($background) - green($foreground), 0);\n    $bm-blue: max(blue($background) - blue($foreground), 0);\n\n    @return blend-normal(rgba($bm-red, $bm-green, $bm-blue, opacity($foreground)), $background);\n}\n\n//--------------------------------\n// Tints and Shades (adding black or white to a color)\n//--------------------------------\n// Adapted from: https://gist.github.com/benfrain/7545629\n\n// Add percentage of white to a color\n@function blend-tint($color, $percent){\n    @return mix(white, $color, $percent);\n}\n@function tint($color, $percent){\n    @return mix(white, $color, $percent);\n}\n\n// Add percentage of black to a color\n@function shade($color, $percent){\n    @return mix(black, $color, $percent);\n}\n@function blend-shade($color, $percent){\n    @return mix(black, $color, $percent);\n}\n\n//Shortcut function for blendmodes\n@function blend($mode, $foreground, $background, $amount: 0) {\n\n        $mode: unquote($mode);\n        $blended-color: null;\n\n        $blended-color: call(\n            safe-get-function(blend-#{$mode}),\n            $foreground, $background, $amount\n        );\n\n        @return $blended-color;\n}\n\n//--------------------------------\n// HSL and HSV\n//--------------------------------\n// @see https://gist.github.com/1069204\n@function hsv-to-hsl($h, $s: 0, $v: 0) {\n    @if type-of($h) == 'list' {\n        $v: nth($h, 3);\n        $s: nth($h, 2);\n        $h: nth($h, 1);\n    }\n\n    @if unit($h) == 'deg' {\n        $h: 3.1415 * 2 * ($h / 360deg);\n    }\n    @if unit($s) == '%' {\n        $s: 0 + ($s / 100%);\n    }\n    @if unit($v) == '%' {\n        $v: 0 + ($v / 100%);\n    }\n\n    $ss: $s * $v;\n    $ll: (2 - $s) * $v;\n\n    @if $ll <= 1 {\n        $ss: $ss / $ll;\n    } @else if ($ll == 2) {\n        $ss: 0;\n    } @else {\n        $ss: $ss / (2 - $ll);\n    }\n\n    $ll: $ll / 2;\n\n    @return 360deg * $h / (3.1415 * 2), percentage(max(0, min(1, $ss))), percentage(max(0, min(1, $ll)));\n}\n\n@function hsl-to-hsv($h, $ss: 0, $ll: 0) {\n    @if type-of($h) == 'list' {\n        $ll: nth($h, 3);\n        $ss: nth($h, 2);\n        $h: nth($h, 1);\n    } @else if type-of($h) == 'color' {\n        $ll: lightness($h);\n        $ss: saturation($h);\n        $h: hue($h);\n    }\n\n    @if unit($h) == 'deg' {\n        $h: 3.1415 * 2 * ($h / 360deg);\n    }\n    @if unit($ss) == '%' {\n        $ss: 0 + ($ss / 100%);\n    }\n    @if unit($ll) == '%' {\n        $ll: 0 + ($ll / 100%);\n    }\n\n    $ll: $ll * 2;\n\n    @if $ll <= 1 {\n        $ss: $ss * $ll;\n    } @else {\n        $ss: $ss * (2 - $ll);\n    }\n\n    $v: ($ll + $ss) / 2;\n    $s: (2 * $ss) / ($ll + $ss);\n\n    @return 360deg * $h / (3.1415 * 2), percentage(max(0, min(1, $s))), percentage(max(0, min(1, $v)));\n}\n\n@function color-to-hsv($color) {\n    @return hsl-to-hsv($color);\n}\n\n@function hsv-to-color($h, $s: 0, $v: 0) {\n    $hsl: hsv-to-hsl($h, $s, $v);\n    @return hsl(nth($hsl, 1), nth($hsl, 2), nth($hsl, 3));\n}\n","/// Takes a pixel value and creates a property with a `rem` value. If `$rem-px-fallback` is `true`, a pixel fallback is also included.\n/// @group core\n/// @param {Property} $property - CSS property value to output\n/// @param {List | Pixel} $sizes - Pixel value(s) to be converted. A list results in a each value being processed. Can also be 'auto' or 'normal' (which avoid conversion).\n/// @param {Boolean} $important [false] - Whether to add `!important` to the end of the output.\n/// @param {Pixel} $base-font [$base-font-size] - The base value at which the pixels should be calculated against. Usually not necessary to change.\n///\n@mixin px-to-rems(\n    $property,\n    $sizes,\n    $important: false,\n    $base-font: $base-font-size\n) {\n    $important-val: if($important, ' !important', '');\n    $rem-sizes: ();\n    $px-sizes: ();\n    $is-all-zero: true;\n\n    //Loop through sizes, combining them into single lists\n    @each $size in $sizes {\n        // Remove units from 0 values\n        @if $size == 0px {\n            $size: 0;\n        }\n        @else {\n            $is-all-zero: false;\n        }\n        // Allow for blank values\n        @if $size == '' or $size == null {\n            $size: null;\n            $px-sizes: join($px-sizes, $size, space);\n        }\n        @else if $size == 'auto' or $size == 'normal' {\n            // Do not conver auto or normal values\n            $px-sizes: join($px-sizes, $size, space);\n        }\n        @else {\n            // Store px values\n            $px-sizes: join($px-sizes, $size, space);\n            // Convert size to rem\n            $size: if($size, px-to-rems($size, $base-font), '');\n        }\n\n        $rem-sizes: join($rem-sizes, $size, space);\n    }\n\n    @if $is-all-zero == false and $rem-px-fallback {\n        #{$property}: #{$px-sizes}#{$important-val};\n    }\n\n    #{$property}: #{$rem-sizes}#{$important-val};\n\n}\n\n/// @alias px-to-rems\n///\n@mixin rems($property, $sizes, $important: false, $base-font: $base-font-size) {\n    @include px-to-rems($property, $sizes, $important, $base-font);\n}\n\n/// Calculates `rem` values. Used by `px-to-rems` mixin. The `$base-size` is used to calculate the value (e.g. if the body's font-size is `16px`, then the rem value of `24px` would be `1.5rem`).\n/// @group core\n/// @param {Number} $pixels\n///\n@function px-to-rems($pixels, $base-size: $base-font-size) {\n    @if $pixels == 'auto' or $pixels == 'normal' {\n        @return $pixels;\n    }\n\n    @if (unitless($pixels)) {\n        $pixels: $pixels * 1px;\n    }\n\n    //If 0, don't include units\n    @if $pixels == 0px {\n        @return 0;\n    }\n\n    $pixels: ($pixels / $base-size) * 1rem;\n\n    @return $pixels;\n\n}\n\n/// @alias px-to-rems\n///\n@function rems($pixels, $base-size: $base-font-size){\n    @return px-to-rems($pixels, $base-size);\n}\n\n/// Function for calculating `em` values. The `$context` is used to calculate the final value. Different from `px-to-rems()` by generating a value with an `em`. `$context` is often necessary based on the situation.\n/// @group core\n/// @param {Number} $pixels\n/// @param {Number} $context [$base-font-size]\n///\n@function px-to-ems($pixels, $context: $base-font-size) {\n    @if (unitless($pixels)){\n        $pixels: $pixels * 1px;\n    }\n\n    //If 0, don't include rems\n    @if $pixels == 0px {\n        @return 0;\n    }\n\n    $pixels: ($pixels / $context) * 1em;\n\n    @return $pixels;\n}\n\n/// @alias px-to-ems\n///\n@function ems($pixels, $context: $base-font-size) {\n    @return px-to-ems($pixels, $context);\n}\n","/* sanitize.css v6.0.0 | CC0 1.0 Public Domain | github.com/csstools/sanitize.css */\n\n$root-text-rendering: optimizeLegibility;\n\n$background-repeat: no-repeat;\n\n$form-element-background-color: transparent;\n$form-element-min-height: $base-line-height;\n$media-element-vertical-align: middle;\n\n$selection-background-color: mix(color('links'), color('bg'), 80%);\n$selection-color: black-or-white($selection-background-color);\n$selection-text-shadow: none;\n\n$table-border-collapse: collapse;\n$table-border-spacing: 0;\n$textarea-resize: vertical;\n\n/*\n * Normalization\n*/\n\n// specify universal inheritance\n// specify the border style and width of all elements\n\n*,\n::before,\n::after {\n\tbox-sizing: inherit;\n    border-style: solid;\n\tborder-width: 0;\n}\n\n* {\n\tfont-size: inherit;\n\tline-height: inherit;\n    background-repeat: $background-repeat;\n\tmargin: 0;\n\tpadding: 0;\n}\n\n::before,\n::after {\n\ttext-decoration: inherit;\n\tvertical-align: inherit;\n}\n\n// specify the root styles of the document\n\n:root {\n    box-sizing: border-box;\n    cursor: inherit;\n    color: color('type');\n\tbackground-color: color('bg');\n    text-rendering: $root-text-rendering;\n}\n\nhtml {\n\t-ms-overflow-style: -ms-autohiding-scrollbar; // Edge 12+, Internet Explorer 11-\n\toverflow-y: scroll; // All browsers without overlaying scrollbars\n\t-webkit-text-size-adjust: 100%; // iOS 8+\n\t-ms-text-size-adjust: 100%;\n}\n\naudio:not([controls]) {\n\tdisplay: none; // Chrome 44-, iOS 8+, Safari 9+\n}\n\nbutton {\n\toverflow: visible; // Internet Explorer 11-\n\t-webkit-appearance: button; // iOS 8+\n    text-transform: none;\n}\n\ninput {\n\t-webkit-border-radius: 0; // iOS 8+\n\n\t&[type=\"button\"],\n    &[type=\"reset\"],\n    &[type=\"submit\"] {\n\t\t-webkit-appearance: button; // iOS 8+\n\t}\n\n\t&[type=\"number\"] {\n\t\twidth: auto; // Firefox 36+\n\t}\n\n\t&[type=\"search\"] {\n\t\t-webkit-appearance: textfield; // Chrome 45+, Safari 9+\n        outline-offset: -2px;\n\n\t\t&::-webkit-search-cancel-button,\n\t\t&::-webkit-search-decoration {\n\t\t\t-webkit-appearance: none; // Chrome 45+, Safari 9+\n\t\t}\n\t}\n}\n\ndialog {\n    border: solid;\n    color: colors('type');\n    display: block;\n    height: fit-content;\n    left: 0;\n    margin: auto;\n    position: absolute;\n    right: 0;\n    width: fit-content;\n}\n\ndialog:not([open]) {\n    display: none;\n}\n\npre {\n\toverflow: auto; // Internet Explorer 11-\n}\n\nprogress {\n\tdisplay: inline-block; // Internet Explorer 11-, Windows Phone 8.1+\n}\n\nsvg:not(:root) {\n\toverflow: hidden; // Internet Explorer 11-\n}\n\ntemplate {\n\tdisplay: none; // Android 4.3-, Internet Explorer 11-, iOS 7-, Safari 7-, Windows Phone 8.1+\n}\n\n[hidden] {\n\tdisplay: none; // Internet Explorer 10-\n}\n\n// Remove the tapping delay on clickable elements in all browsers\n\na,\narea,\nbutton,\ninput,\nlabel,\nselect,\nsummary,\ntextarea,\n[tabindex] {\n  -ms-touch-action: manipulation;\n  touch-action: manipulation;\n}\n\n// specify the alignment of media elements\n\naudio,\ncanvas,\niframe,\nimg,\nsvg,\nvideo {\n\tvertical-align: $media-element-vertical-align;\n}\n\n// specify the inherited color and font of form elements\n\nbutton,\ninput,\nselect,\ntextarea {\n\tcolor: inherit;\n\tfont-family: inherit;\n\tfont-style: inherit;\n\tfont-weight: inherit;\n}\n\n// specify the minimum height of form elements\n\nbutton,\n[type=\"button\"],\n[type=\"date\"],\n[type=\"datetime\"],\n[type=\"datetime-local\"],\n[type=\"email\"],\n[type=\"month\"],\n[type=\"number\"],\n[type=\"password\"],\n[type=\"reset\"],\n[type=\"search\"],\n[type=\"submit\"],\n[type=\"tel\"],\n[type=\"text\"],\n[type=\"time\"],\n[type=\"url\"],\n[type=\"week\"],\nselect,\ntextarea {\n\t@include px-to-rems('min-height', $form-element-min-height);\n}\n\n// specify the font family of code elements\n\ncode,\nkbd,\npre,\nsamp {\n\tfont-family: $monospace-font-stack, monospace;\n}\n\n// specify the standard appearance of selects\n\nselect {\n\t-moz-appearance: none;    // Firefox 40+\n\t-webkit-appearance: none; // Chrome 45+\n\n\t&::-ms-expand {\n\t\tdisplay: none;        // Edge 12+, Internet Explorer 11-\n\t}\n\n\t&::-ms-value {\n\t\tcolor: currentColor;  // Edge 12+, Internet Explorer 11-\n\t}\n}\n\n// specify the background color, font color and drop shadow of text selections\n\n::-moz-selection {\n\tbackground-color: $selection-background-color; // required when declaring ::selection\n\tcolor: $selection-color;\n\ttext-shadow: $selection-text-shadow;\n}\n\n::selection {\n\tbackground-color: $selection-background-color; // required when declaring ::selection\n\tcolor: $selection-color;\n\ttext-shadow: $selection-text-shadow;\n}\n\nbutton:-moz-focusring,\n[type=\"button\"]:-moz-focusring,\n[type=\"reset\"]:-moz-focusring,\n[type=\"submit\"]:-moz-focusring {\n    outline: 1px dotted ButtonText;\n}\n\n// Remove inner padding and border in Firefox 3+.\n::-moz-focus-inner {\n\tborder: 0;\n\tpadding: 0;\n}\n\n::-webkit-search-decoration {\n    -webkit-appearance: none;\n}\n\n::-webkit-file-upload-button {\n    -webkit-appearance: button;\n    font: inherit;\n}\n\n// Fix the cursor style for Chrome's increment/decrement buttons. For certain\n// `font-size` values of the `input`, it causes the cursor style of the\n// decrement button to change from `default` to `text`.\ninput[type=\"number\"]::-webkit-inner-spin-button,\ninput[type=\"number\"]::-webkit-outer-spin-button {\n\theight: auto;\n}\n\n// specify the progress cursor of updating elements\n\n[aria-busy=\"true\"] {\n\tcursor: progress;\n}\n\n// specify the pointer cursor of trigger elements\n\n[aria-controls] {\n\tcursor: pointer;\n}\n\n// specify the unstyled cursor of disabled, not-editable, or otherwise inoperable elements\n\n[aria-disabled],\n[disabled] {\n\tcursor: default !important;\n}\n\n// specify the style of visually hidden yet accessible elements\n\n[hidden][aria-hidden=\"false\"] {\n\tclip: rect(0 0 0 0);\n\tdisplay: inherit;\n\tposition: absolute;\n\n\t&:focus {\n\t\tclip: auto;\n\t}\n}\n","@charset \"UTF-8\";\n/* SG\n# Imports [[dev]]\n\n@priority 0\n@file main.scss\n\nSass files are imported in order from lowest specificity to highest.\n1. `/helpers/tools`\n  * Functions\n  * System variables and defaults\n  * General-use mixins and sass utilities\n2. `config`\n  * Project-specific configuration\n3. `/base`\n  * Resets and normalization (sanitize and normalize)\n  * Element styles (unclassed)\n4. `/layout`\n  * Basic layout and object styles (single-class)\n5. `/components`\n  * Module and component styles (single- and child-classes)\n6. `/modules/`\n  * View- and page-specific and scoped styles (typically `parent > child` classes).\n7. `/helpers/overrides`\n  * Utility styles, usually end in `!important`.\n\n*/\n/* SG\n# Config [[dev]]\n\nSee [UWHealth sass tools documenation](https://uwhealth.github.io/sass-tools/) for configuration variable details.\nWhat is set here are **reasonable defaults**.\n\n*/\nhtml,\nbody {\n  min-height: 100%;\n}\n\nabbr[title],\ndfn[title] {\n  cursor: help;\n}\n\nu,\nins {\n  text-decoration: none;\n}\n\nins {\n  border-bottom: 1px solid;\n}\n\nmark {\n  background-color: #c7d5e1;\n}\n\narticle,\naside,\ndetails,\nfigcaption,\nfigure,\nfooter,\nheader,\nmain,\nmenu,\nnav,\nsection,\nsummary,\nhr {\n  display: block;\n}\n\na {\n  cursor: pointer;\n  background-color: transparent;\n  color: #0d497b;\n  text-decoration: underline;\n}\n\na:hover, a:focus {\n  color: #4c95bd;\n}\n\na:active {\n  color: #082c4a;\n}\n\na:focus {\n  outline: thin dotted;\n}\n\na:active, a:hover {\n  outline: 0;\n}\n\nhr {\n  outline: 1px solid #aeb6be;\n  height: 0;\n  margin: 0 0 1.5rem;\n}\n\n/* sanitize.css v6.0.0 | CC0 1.0 Public Domain | github.com/csstools/sanitize.css */\n/*\n * Normalization\n*/\n*,\n::before,\n::after {\n  box-sizing: inherit;\n  border-style: solid;\n  border-width: 0;\n}\n\n* {\n  font-size: inherit;\n  line-height: inherit;\n  background-repeat: no-repeat;\n  margin: 0;\n  padding: 0;\n}\n\n::before,\n::after {\n  text-decoration: inherit;\n  vertical-align: inherit;\n}\n\n:root {\n  box-sizing: border-box;\n  cursor: inherit;\n  color: #0a1c2b;\n  background-color: #f6f8fb;\n  text-rendering: optimizeLegibility;\n}\n\nhtml {\n  -ms-overflow-style: -ms-autohiding-scrollbar;\n  overflow-y: scroll;\n  -webkit-text-size-adjust: 100%;\n  -ms-text-size-adjust: 100%;\n}\n\naudio:not([controls]) {\n  display: none;\n}\n\nbutton {\n  overflow: visible;\n  -webkit-appearance: button;\n  text-transform: none;\n}\n\ninput {\n  -webkit-border-radius: 0;\n}\n\ninput[type=\"button\"], input[type=\"reset\"], input[type=\"submit\"] {\n  -webkit-appearance: button;\n}\n\ninput[type=\"number\"] {\n  width: auto;\n}\n\ninput[type=\"search\"] {\n  -webkit-appearance: textfield;\n  outline-offset: -2px;\n}\n\ninput[type=\"search\"]::-webkit-search-cancel-button, input[type=\"search\"]::-webkit-search-decoration {\n  -webkit-appearance: none;\n}\n\ndialog {\n  border: solid;\n  color: #0a1c2b;\n  display: block;\n  height: fit-content;\n  left: 0;\n  margin: auto;\n  position: absolute;\n  right: 0;\n  width: fit-content;\n}\n\ndialog:not([open]) {\n  display: none;\n}\n\npre {\n  overflow: auto;\n}\n\nprogress {\n  display: inline-block;\n}\n\nsvg:not(:root) {\n  overflow: hidden;\n}\n\ntemplate {\n  display: none;\n}\n\n[hidden] {\n  display: none;\n}\n\na,\narea,\nbutton,\ninput,\nlabel,\nselect,\nsummary,\ntextarea,\n[tabindex] {\n  -ms-touch-action: manipulation;\n  touch-action: manipulation;\n}\n\naudio,\ncanvas,\niframe,\nimg,\nsvg,\nvideo {\n  vertical-align: middle;\n}\n\nbutton,\ninput,\nselect,\ntextarea {\n  color: inherit;\n  font-family: inherit;\n  font-style: inherit;\n  font-weight: inherit;\n}\n\nbutton,\n[type=\"button\"],\n[type=\"date\"],\n[type=\"datetime\"],\n[type=\"datetime-local\"],\n[type=\"email\"],\n[type=\"month\"],\n[type=\"number\"],\n[type=\"password\"],\n[type=\"reset\"],\n[type=\"search\"],\n[type=\"submit\"],\n[type=\"tel\"],\n[type=\"text\"],\n[type=\"time\"],\n[type=\"url\"],\n[type=\"week\"],\nselect,\ntextarea {\n  min-height: 1.5rem;\n}\n\ncode,\nkbd,\npre,\nsamp {\n  font-family: \"Consolas\", \"Andale Mono WT\", \"Andale Mono\", \"Lucida Console\", \"Lucida Sans Typewriter\", \"DejaVu Sans Mono\", \"Bitstream Vera Sans Mono\", \"Liberation Mono\", \"Nimbus Mono L\", \"Monaco\", \"Courier New\", \"Courier\", monospace, monospace;\n}\n\nselect {\n  -moz-appearance: none;\n  -webkit-appearance: none;\n}\n\nselect::-ms-expand {\n  display: none;\n}\n\nselect::-ms-value {\n  color: currentColor;\n}\n\n::-moz-selection {\n  background-color: #3c6c95;\n  color: #fff;\n  text-shadow: none;\n}\n\n::selection {\n  background-color: #3c6c95;\n  color: #fff;\n  text-shadow: none;\n}\n\nbutton:-moz-focusring,\n[type=\"button\"]:-moz-focusring,\n[type=\"reset\"]:-moz-focusring,\n[type=\"submit\"]:-moz-focusring {\n  outline: 1px dotted ButtonText;\n}\n\n::-moz-focus-inner {\n  border: 0;\n  padding: 0;\n}\n\n::-webkit-search-decoration {\n  -webkit-appearance: none;\n}\n\n::-webkit-file-upload-button {\n  -webkit-appearance: button;\n  font: inherit;\n}\n\ninput[type=\"number\"]::-webkit-inner-spin-button,\ninput[type=\"number\"]::-webkit-outer-spin-button {\n  height: auto;\n}\n\n[aria-busy=\"true\"] {\n  cursor: progress;\n}\n\n[aria-controls] {\n  cursor: pointer;\n}\n\n[aria-disabled],\n[disabled] {\n  cursor: default !important;\n}\n\n[hidden][aria-hidden=\"false\"] {\n  clip: rect(0 0 0 0);\n  display: inherit;\n  position: absolute;\n}\n\n[hidden][aria-hidden=\"false\"]:focus {\n  clip: auto;\n}\n\n/*\n * Generate font-face declarations based on web-font config\n */\n@font-face {\n  font-family: \"opensans\";\n  src: url(\"/public/static/fonts/opensans-400.ttf\") format(\"ttf\"), url(\"/public/static/fonts/opensans-400.svg#opensans400\") format(\"svg\"), url(\"/public/static/fonts/opensans-400.woff\") format(\"woff\");\n  font-weight: 400;\n  font-style: normal;\n}\n\n@font-face {\n  font-family: \"opensans\";\n  src: url(\"/public/static/fonts/opensans-700.ttf\") format(\"ttf\"), url(\"/public/static/fonts/opensans-700.svg#opensans700\") format(\"svg\"), url(\"/public/static/fonts/opensans-700.woff\") format(\"woff\");\n  font-weight: 700;\n  font-style: normal;\n}\n\n@font-face {\n  font-family: \"opensans\";\n  src: url(\"/public/static/fonts/opensans-400-italic.ttf\") format(\"ttf\"), url(\"/public/static/fonts/opensans-400-italic.svg#opensans400italic\") format(\"svg\"), url(\"/public/static/fonts/opensans-400-italic.woff\") format(\"woff\");\n  font-weight: 400;\n  font-style: italic;\n}\n\n@font-face {\n  font-family: \"opensans\";\n  src: url(\"/public/static/fonts/opensans-700-italic.ttf\") format(\"ttf\"), url(\"/public/static/fonts/opensans-700-italic.svg#opensans700italic\") format(\"svg\"), url(\"/public/static/fonts/opensans-700-italic.woff\") format(\"woff\");\n  font-weight: 700;\n  font-style: italic;\n}\n\nh1, h2, h3, h4, h5, h6 {\n  font-family: \"opensans\", \"Helvetica Neue\", \"Helvetica\", \"Arial\", sans-serif;\n}\n\nlegend {\n  display: table;\n  white-space: normal;\n}\n\nbutton,\ninput {\n  line-height: 1.5;\n  border: 0;\n}\n\nbutton,\ninput,\nselect,\ntextarea {\n  background-color: #fff;\n}\n\ndialog {\n  background-color: #fff;\n  padding: 1.5rem;\n}\n\nselect input[type=\"submit\"],\ninput[type=\"button\"],\ninput[type=\"image\"],\ninput[type=\"reset\"] {\n  border-radius: 0;\n  -webkit-border-radius: 0;\n}\n\ntextarea {\n  overflow: auto;\n  resize: vertical;\n}\n\nul,\nol,\ndl,\nmenu {\n  margin: 0 0 1.5rem 1.5rem;\n}\n\nli > ul,\nli > ol {\n  margin-bottom: 0;\n}\n\nnav ol,\nnav ul {\n  margin-left: 0;\n}\n\ntable {\n  width: 100%;\n  background-color: transparent;\n  border-collapse: collapse;\n  border-spacing: 0;\n  margin: 0;\n  margin-bottom: 1.5rem;\n}\n\nth,\ntd {\n  padding: 1.5rem 0 0.75rem;\n  text-align: left;\n  vertical-align: top;\n  border: 0;\n  border-bottom: 1px;\n  border-top-width: 0px;\n  border-color: #e4eaf3;\n  border-style: solid;\n}\n\nth {\n  font-weight: bold;\n}\n\nthead th {\n  vertical-align: bottom;\n  padding: 1.5rem 0 0;\n}\n\n:root,\nhtml {\n  font-size: 100%;\n  line-height: 1.5;\n  font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", system-ui, Roboto, \"Helvetica Neue\", sans-serif;\n}\n\nbody {\n  font-size: 1rem;\n  line-height: 1.5;\n}\n\nh1, h2, h3, h4, h5, h6,\np,\naddress,\npre {\n  margin-bottom: 1.5rem;\n}\n\nh1 {\n  font-size: 2.02729rem;\n  line-height: 1.47981;\n}\n\nh2 {\n  font-size: 1.80203rem;\n  line-height: 1.24859;\n}\n\nh3 {\n  font-size: 1.60181rem;\n  line-height: 1.40466;\n}\n\nh4 {\n  font-size: 1.42383rem;\n  line-height: 1.0535;\n}\n\nh5 {\n  font-size: 1.26562rem;\n  line-height: 1.18519;\n}\n\nh6 {\n  font-size: 1.125rem;\n  line-height: 1.33333;\n}\n\nh1 + p, h2 + p, h3 + p, h4 + p, h5 + p, h6 + p {\n  margin-top: -1.5rem;\n}\n\n/* SG\n# Typography/Body copy\n\nThe default font-size for all typography is **16px** with line-height of **24px** (1.5). This is applied to the `<body>` and inherited by paragraphs and lists. `<p>` tags all receive a bottom margin of 1rem.\n\nWhen a `<p>` follows a heading tag (`<h1>` for instance), the paragraph receives a negative top margin so it sits directly beneath the heading.\n\nThe default font-family is set in **Asap**.\n\n```html_example\n<p>Aenean lacinia bibendum nulla sed consectetur. Morbi leo risus, porta ac consectetur ac, vestibulum at eros. Sed posuere consectetur est at lobortis. </p>\n<p>Nullam quis risus eget urna mollis ornare vel eu leo. Nulla vitae elit libero, a pharetra augue.</p>\n\n<h5>A Heading...</h5>\n<p>...Followed by a paragraph. Notice how there's no margin between these two items.</p>\n```\n\n*/\nsmall {\n  display: inline-block;\n  font-size: 0.9375rem;\n  line-height: 1.6;\n}\n\nb,\nstrong {\n  font-weight: 700;\n}\n\npre {\n  white-space: pre;\n  white-space: pre-wrap;\n  word-wrap: break-word;\n  overflow: auto;\n}\n\nsub,\nsup {\n  font-size: 75%;\n  line-height: 0;\n  position: relative;\n  vertical-align: baseline;\n}\n\nsup {\n  top: -0.5ex;\n}\n\nsub {\n  bottom: -0.25ex;\n}\n\ncode,\nkbd,\npre,\nsamp {\n  font-family: \"Consolas\", \"Andale Mono WT\", \"Andale Mono\", \"Lucida Console\", \"Lucida Sans Typewriter\", \"DejaVu Sans Mono\", \"Bitstream Vera Sans Mono\", \"Liberation Mono\", \"Nimbus Mono L\", \"Monaco\", \"Courier New\", \"Courier\", monospace;\n  _font-family: 'courier new', monospace;\n  font-size: 1em;\n}\n\nblockquote {\n  text-indent: -.5ex;\n}\n\nblockquote {\n  margin: 0 0 1.5rem 1.5rem;\n  quotes: '“' '”';\n}\n\nblockquote p:before {\n  content: \"“\";\n  content: open-quote;\n}\n\nblockquote p:after {\n  content: \"\";\n  content: no-close-quote;\n}\n\nblockquote p:last-of-type:after {\n  content: \"”\";\n  content: close-quote;\n}\n\nq {\n  *quotes: none;\n  quotes: \"‘\" \"’\" \"“\" \"”\";\n  overflow: visible;\n}\n\nq:before {\n  content: \"‘\";\n  content: open-quote;\n}\n\nq:after {\n  content: \"’\";\n  content: close-quote;\n}\n\nq q:before {\n  content: \"“\";\n  content: open-quote;\n}\n\nq q:after {\n  content: \"”\";\n  content: close-quote;\n}\n\nq:first-child {\n  display: inline-block;\n  text-indent: -0.22em;\n}\n\n.wrap {\n  margin: 0 auto;\n  max-width: 1360px;\n  display: block !important;\n  float: none;\n  padding: 1.5rem 0;\n  width: 95%;\n  *zoom: 1;\n}\n\n.wrap:before, .wrap:after {\n  display: table;\n  content: \" \";\n}\n\n.wrap:after {\n  clear: both;\n  height: 0;\n  width: 0;\n}\n\n@media only screen and (min-width: 43.1875em) and (max-width: 56.875em) {\n  .wrap {\n    width: 93%;\n  }\n}\n\n@media only screen and (min-width: 56.9375em) {\n  .wrap {\n    width: 90%;\n  }\n}\n\n.wrap--content {\n  max-width: 43.125rem;\n}\n\n.wrap--wide-content {\n  max-width: 56.875rem;\n}\n\n\n.row > * {\n  letter-spacing: normal;\n  word-spacing: normal;\n}\n\n.row {\n  list-style: none;\n  margin: 0;\n  padding: 0;\n  margin-left: -2rem;\n  letter-spacing: -0.45em;\n  display: flex;\n  flex-wrap: wrap;\n}\n\n.row .opera:-o-prefocus, .row {\n  word-spacing: -0.45em;\n}\n\n.column {\n  padding-left: 2rem;\n  width: 100%;\n  min-height: 1px;\n  display: inline-block;\n  vertical-align: top;\n  letter-spacing: normal;\n  word-spacing: normal;\n  flex: 0 0 100%;\n  width: 100%;\n  flex-basis: 100%;\n  max-width: 100%;\n}\n\n.row--full {\n  margin-left: 0;\n}\n\n.row--full > .column {\n  padding-left: 0;\n}\n\n.row--narrow {\n  margin-left: -1rem;\n}\n\n.row--narrow > .column {\n  padding-left: 1rem;\n}\n\n.w-quarter {\n  width: 25% ;\n  max-width: 25% ;\n  flex-basis: 25% ;\n}\n\n.w-half {\n  width: 50% ;\n  max-width: 50% ;\n  flex-basis: 50% ;\n}\n\n/* SG\n\n# Layout/Media object\n\nIsolates an image from text wrapping underneath. Useful for creating an association between an image and text. Often used with an icon or avatar. Adding other classes to the `media-object__body` can create a more stylized version.\n\n```html_example\n<img class=\"media-object__media\" src=\"http://placehold.it/300x48\" alt=\"placeholder image\">\n<p class=\"media-object__body\">\n    Content that sits to the right of the image but will never wrap underneath the image to the left. Etiam porta sem malesuada magna mollis euismod. Cras justo odio, dapibus ac facilisis in, egestas eget quam.\n</p>\n\n```\n*/\n.media-object__media, .media-object__body {\n  overflow: hidden;\n  _overflow: visible;\n  zoom: 1;\n}\n\n.media-object__media {\n  float: left;\n}\n\n.media-object, .media-object__media, .media-object__media img, .media-object__body {\n  display: block;\n}\n\n.media-object {\n  width: 100%;\n  *zoom: 1;\n  margin-bottom: 1.5rem;\n}\n\n.media-object:before, .media-object:after {\n  display: table;\n  content: \" \";\n}\n\n.media-object:after {\n  clear: both;\n  height: 0;\n  width: 0;\n}\n\n.media-object__body {\n  padding-left: 0.75rem;\n}\n\n/* SG\n\n# Layout/Arrangement object\n\nCreates an image-content block that vertically aligns images and text (centered, bottom, or top).\nChildren can be named four things:\n* `arrange__item--fit` or `arrange__media` will create a block that fits the width of its content (useful for images).\n* `arrange__item--fill` will fill the remaining space.\n* `arrange__body` is similar to 'arrange__item--fill' but has some default styling.\n\nYou may also combine this with grid items like `row` and `column` if you wish to add gutters between elements.\n\n_NOTE: Do not mistake this for true grid items. This should only be used for the arrangement of a few items. It is \"squishy\", but not technically responsive._\n\n```html_example\n<div class=\"arrange\">\n    <div class=\"arrange__media\">\n        <img src=\"http://placehold.it/60x48\" alt=\"placeholder image\">\n    </div>\n    <div class=\"arrange__body\">\n        Content that is vertically (middle) aligned with the image.\n    </div>\n</div>\n\n<!-- Bottom Arrangement -->\n<div class=\"arrange arrange--bottom\">\n    <div class=\"arrange__media\">\n        <img src=\"http://placehold.it/60x48\" alt=\"placeholder image\">\n    </div>\n    <div class=\"arrange__body\">\n        Content that is bottom aligned to the image.\n    </div>\n</div>\n\n<!-- Equal width arrangement-->\n<div class=\"arrange arrange--equal\">\n    <div class=\"arrange__item arrange__item--fill\">\n        Equal width columns.\n    </div>\n    <div class=\"arrange__item arrange__item--fill\">\n        <img class=\"show\" src=\"http://placehold.it/120x72\" alt=\"placeholder image\" style=\"margin: auto;\">\n    </div>\n    <div class=\"arrange__item arrange__item--fill\">\n        Can be as many columns as you want.\n    </div>\n</div>\n\n```\n*/\n.arrange {\n  table-layout: auto;\n  min-width: 100%;\n  display: table;\n  width: 100%;\n  margin-bottom: 1.5rem;\n}\n\n.arrange__item, .arrange__media, .arrange__body {\n  display: table-cell;\n}\n\n.arrange__item--fill, .arrange__body {\n  width: 100%;\n}\n\n.arrange__item--fit img, .arrange__media img {\n  display: block;\n  max-width: none;\n}\n\n.arrange__item--pad, .arrange__body {\n  padding-left: 0.75rem;\n}\n\n.arrange__item--fill, .arrange__item--fit, .arrange__media, .arrange__body {\n  vertical-align: middle;\n}\n\n.arrange--top > .arrange__item--fill, .arrange--top > .arrange__item--fit, .arrange--top > .arrange__media, .arrange--top > .arrange__body {\n  vertical-align: top;\n}\n\n.arrange--bottom > .arrange__item--fill, .arrange--bottom > .arrange__item--fit, .arrange--bottom > .arrange__media, .arrange--bottom > .arrange__body {\n  vertical-align: bottom;\n}\n\n.arrange--equal {\n  table-layout: fixed;\n}\n\n.arrange--equal > .arrange__item--fill,\n.arrange--equal > .arrange__item--fit {\n  width: 1%;\n}\n\n/* SG\n# Buttons\nApplying the `btn` class to anything will make it look like a button. Always declare `type=\"button\"` on `<button>` elements for proper accessibility.\n\n```html_example\n<button type=\"button\" class=\"btn\">Button</button>\n\n<a href=\"\" class=\"btn\">Faux Button</a>\n```\n\n*/\n.btn {\n  border-radius: 1.275rem/1.5rem;\n  box-shadow: 0 3px 4px -2px transparent;\n  background-color: #0d497b;\n  padding: 0.75rem 0.5625rem;\n  color: white;\n  font-weight: bold;\n  transition: background-color .1s ease-in-out, box-shadow .2s ease-out, color .1s ease-in-out;\n}\n\n.btn:focus, .btn:hover {\n  outline: none;\n  box-shadow: 0 3px 8px -2px rgba(76, 149, 189, 0.65);\n  background-color: #4c95bd;\n}\n\n.btn:active {\n  outline: none;\n  box-shadow: 0 0 4px 1px rgba(146, 182, 202, 0.5);\n  background-color: #92b6ca;\n  color: #cfdbe5;\n}\n\n.btn {\n  display: inline-flex;\n  justify-content: space-between;\n  align-content: flex-start;\n  align-items: center;\n}\n\n.btn--wide {\n  width: 100%;\n}\n\n.btn--compact {\n  padding: 0.1875rem;\n}\n\n.btn__icon {\n  display: inline-block;\n  flex: 0 1 auto;\n  margin: 0 0.375rem 0 0.375rem;\n}\n\n.btn--reversed .btn__icon {\n  order: -1;\n}\n\n.btn__svg,\n.btn__icon--image {\n  display: block;\n  width: 1.5rem;\n  height: auto;\n  min-height: 1px;\n  fill: currentColor;\n}\n\n.btn__body {\n  display: inline-block;\n  flex: 1 1 auto;\n  padding: 0 0.75rem;\n}\n\n.float-left {\n  float: left !important;\n}\n\n.float-right {\n  float: right !important;\n}\n\n.float-none {\n  float: none !important;\n}\n\n.fixed {\n  position: fixed !important;\n}\n\n.absolute {\n  position: absolute !important;\n}\n\n@media only screen and (max-width: 56.875em) {\n  .smalls_float-left {\n    float: left !important;\n  }\n  .smalls_float-right {\n    float: right !important;\n  }\n  .smalls_float-none {\n    float: none !important;\n  }\n  .smalls_fixed {\n    position: fixed !important;\n  }\n  .smalls_absolute {\n    position: absolute !important;\n  }\n}\n\n@media only screen and (min-width: 56.9375em) {\n  .bigs_float-left {\n    float: left !important;\n  }\n  .bigs_float-right {\n    float: right !important;\n  }\n  .bigs_float-none {\n    float: none !important;\n  }\n  .bigs_fixed {\n    position: fixed !important;\n  }\n  .bigs_absolute {\n    position: absolute !important;\n  }\n}\n\n@media only screen and (min-width: 85em) {\n  .desk_float-left {\n    float: left !important;\n  }\n  .desk_float-right {\n    float: right !important;\n  }\n  .desk_float-none {\n    float: none !important;\n  }\n  .desk_fixed {\n    position: fixed !important;\n  }\n  .desk_absolute {\n    position: absolute !important;\n  }\n}\n\n.absolute-fill {\n  top: 0;\n  left: 0;\n  bottom: 0;\n  right: 0;\n}\n\n.show {\n  display: block !important;\n}\n\n.il {\n  display: inline !important;\n}\n\n.i-block {\n  display: inline-block !important;\n}\n\n.hide {\n  display: none !important;\n}\n\n.flex {\n  display: flex !important;\n}\n\n@media only screen and (max-width: 56.875em) {\n  .smalls_show {\n    display: block !important;\n  }\n  .smalls_il {\n    display: inline !important;\n  }\n  .smalls_i-block {\n    display: inline-block !important;\n  }\n  .smalls_hide {\n    display: none !important;\n  }\n  .smalls_flex {\n    display: flex !important;\n  }\n}\n\n@media only screen and (min-width: 56.9375em) {\n  .bigs_show {\n    display: block !important;\n  }\n  .bigs_il {\n    display: inline !important;\n  }\n  .bigs_i-block {\n    display: inline-block !important;\n  }\n  .bigs_hide {\n    display: none !important;\n  }\n  .bigs_flex {\n    display: flex !important;\n  }\n}\n\n[hidden] {\n  display: none !important;\n}\n\n.invisible {\n  visibility: hidden !important;\n}\n\n.pad {\n  padding: 1.5rem !important;\n}\n\n.pad-v, .pad-t {\n  padding-top: 1.5rem !important;\n}\n\n.pad-v, .pad-b {\n  padding-bottom: 1.5rem !important;\n}\n\n.pad-h, .pad-l {\n  padding-left: 1.5rem !important;\n}\n\n.pad-h, .pad-r {\n  padding-right: 1.5rem !important;\n}\n\n.pad-quarter {\n  padding: 0.375rem !important;\n}\n\n.pad-t-quarter, .pad-v-quarter {\n  padding-top: 0.375rem !important;\n}\n\n.pad-b-quarter, .pad-v-quarter {\n  padding-bottom: 0.375rem !important;\n}\n\n.pad-l-quarter, .pad-h-quarter {\n  padding-left: 0.375rem !important;\n}\n\n.pad-r-quarter, .pad-h-quarter {\n  padding-right: 0.375rem !important;\n}\n\n.pad-half {\n  padding: 0.75rem !important;\n}\n\n.pad-t-half, .pad-v-half {\n  padding-top: 0.75rem !important;\n}\n\n.pad-b-half, .pad-v-half {\n  padding-bottom: 0.75rem !important;\n}\n\n.pad-l-half, .pad-h-half {\n  padding-left: 0.75rem !important;\n}\n\n.pad-r-half, .pad-h-half {\n  padding-right: 0.75rem !important;\n}\n\n.pad-2 {\n  padding: 3rem !important;\n}\n\n.pad-t-2, .pad-v-2 {\n  padding-top: 3rem !important;\n}\n\n.pad-b-2, .pad-v-2 {\n  padding-bottom: 3rem !important;\n}\n\n.pad-l-2, .pad-h-2 {\n  padding-left: 3rem !important;\n}\n\n.pad-r-2, .pad-h-2 {\n  padding-right: 3rem !important;\n}\n\n.pad-0 {\n  padding: 0 !important;\n}\n\n.pad-t-0, .pad-v-0 {\n  padding-top: 0 !important;\n}\n\n.pad-b-0, .pad-v-0 {\n  padding-bottom: 0 !important;\n}\n\n.pad-l-0, .pad-h-0 {\n  padding-left: 0 !important;\n}\n\n.pad-r-0, .pad-h-0 {\n  padding-right: 0 !important;\n}\n\n.space {\n  margin: 1.5rem !important;\n}\n\n.space-v, .space-t {\n  margin-top: 1.5rem !important;\n}\n\n.space-v, .space-b {\n  margin-bottom: 1.5rem !important;\n}\n\n.space-h, .space-l {\n  margin-left: 1.5rem !important;\n}\n\n.space-h, .space-r {\n  margin-right: 1.5rem !important;\n}\n\n.space-quarter {\n  margin: 0.375rem !important;\n}\n\n.space-t-quarter, .space-v-quarter {\n  margin-top: 0.375rem !important;\n}\n\n.space-b-quarter, .space-v-quarter {\n  margin-bottom: 0.375rem !important;\n}\n\n.space-l-quarter, .space-h-quarter {\n  margin-left: 0.375rem !important;\n}\n\n.space-r-quarter, .space-h-quarter {\n  margin-right: 0.375rem !important;\n}\n\n.space-half {\n  margin: 0.75rem !important;\n}\n\n.space-t-half, .space-v-half {\n  margin-top: 0.75rem !important;\n}\n\n.space-b-half, .space-v-half {\n  margin-bottom: 0.75rem !important;\n}\n\n.space-l-half, .space-h-half {\n  margin-left: 0.75rem !important;\n}\n\n.space-r-half, .space-h-half {\n  margin-right: 0.75rem !important;\n}\n\n.space-2 {\n  margin: 3rem !important;\n}\n\n.space-t-2, .space-v-2 {\n  margin-top: 3rem !important;\n}\n\n.space-b-2, .space-v-2 {\n  margin-bottom: 3rem !important;\n}\n\n.space-l-2, .space-h-2 {\n  margin-left: 3rem !important;\n}\n\n.space-r-2, .space-h-2 {\n  margin-right: 3rem !important;\n}\n\n.space-neg-quarter {\n  margin: -0.375rem !important;\n}\n\n.space-t-neg-quarter, .space-v-neg-quarter {\n  margin-top: -0.375rem !important;\n}\n\n.space-b-neg-quarter, .space-v-neg-quarter {\n  margin-bottom: -0.375rem !important;\n}\n\n.space-l-neg-quarter, .space-h-neg-quarter {\n  margin-left: -0.375rem !important;\n}\n\n.space-r-neg-quarter, .space-h-neg-quarter {\n  margin-right: -0.375rem !important;\n}\n\n.space-neg-half {\n  margin: -0.75rem !important;\n}\n\n.space-t-neg-half, .space-v-neg-half {\n  margin-top: -0.75rem !important;\n}\n\n.space-b-neg-half, .space-v-neg-half {\n  margin-bottom: -0.75rem !important;\n}\n\n.space-l-neg-half, .space-h-neg-half {\n  margin-left: -0.75rem !important;\n}\n\n.space-r-neg-half, .space-h-neg-half {\n  margin-right: -0.75rem !important;\n}\n\n.space-neg {\n  margin: -1.5rem !important;\n}\n\n.space-t-neg, .space-v-neg {\n  margin-top: -1.5rem !important;\n}\n\n.space-b-neg, .space-v-neg {\n  margin-bottom: -1.5rem !important;\n}\n\n.space-l-neg, .space-h-neg {\n  margin-left: -1.5rem !important;\n}\n\n.space-r-neg, .space-h-neg {\n  margin-right: -1.5rem !important;\n}\n\n.space-neg-2 {\n  margin: -3rem !important;\n}\n\n.space-t-neg-2, .space-v-neg-2 {\n  margin-top: -3rem !important;\n}\n\n.space-b-neg-2, .space-v-neg-2 {\n  margin-bottom: -3rem !important;\n}\n\n.space-l-neg-2, .space-h-neg-2 {\n  margin-left: -3rem !important;\n}\n\n.space-r-neg-2, .space-h-neg-2 {\n  margin-right: -3rem !important;\n}\n\n.space-0 {\n  margin: 0 !important;\n}\n\n.space-t-0, .space-v-0 {\n  margin-top: 0 !important;\n}\n\n.space-b-0, .space-v-0 {\n  margin-bottom: 0 !important;\n}\n\n.space-l-0, .space-h-0 {\n  margin-left: 0 !important;\n}\n\n.space-r-0, .space-h-0 {\n  margin-right: 0 !important;\n}\n\n@media only screen and (max-width: 56.875em) {\n  .smalls_pad {\n    padding: 1.5rem !important;\n  }\n  .smalls_pad-v, .smalls_pad-t {\n    padding-top: 1.5rem !important;\n  }\n  .smalls_pad-v, .smalls_pad-b {\n    padding-bottom: 1.5rem !important;\n  }\n  .smalls_pad-h, .smalls_pad-l {\n    padding-left: 1.5rem !important;\n  }\n  .smalls_pad-h, .smalls_pad-r {\n    padding-right: 1.5rem !important;\n  }\n  .smalls_pad-quarter {\n    padding: 0.375rem !important;\n  }\n  .smalls_pad-t-quarter, .smalls_pad-v-quarter {\n    padding-top: 0.375rem !important;\n  }\n  .smalls_pad-b-quarter, .smalls_pad-v-quarter {\n    padding-bottom: 0.375rem !important;\n  }\n  .smalls_pad-l-quarter, .smalls_pad-h-quarter {\n    padding-left: 0.375rem !important;\n  }\n  .smalls_pad-r-quarter, .smalls_pad-h-quarter {\n    padding-right: 0.375rem !important;\n  }\n  .smalls_pad-half {\n    padding: 0.75rem !important;\n  }\n  .smalls_pad-t-half, .smalls_pad-v-half {\n    padding-top: 0.75rem !important;\n  }\n  .smalls_pad-b-half, .smalls_pad-v-half {\n    padding-bottom: 0.75rem !important;\n  }\n  .smalls_pad-l-half, .smalls_pad-h-half {\n    padding-left: 0.75rem !important;\n  }\n  .smalls_pad-r-half, .smalls_pad-h-half {\n    padding-right: 0.75rem !important;\n  }\n  .smalls_pad-2 {\n    padding: 3rem !important;\n  }\n  .smalls_pad-t-2, .smalls_pad-v-2 {\n    padding-top: 3rem !important;\n  }\n  .smalls_pad-b-2, .smalls_pad-v-2 {\n    padding-bottom: 3rem !important;\n  }\n  .smalls_pad-l-2, .smalls_pad-h-2 {\n    padding-left: 3rem !important;\n  }\n  .smalls_pad-r-2, .smalls_pad-h-2 {\n    padding-right: 3rem !important;\n  }\n  .smalls_pad-0 {\n    padding: 0 !important;\n  }\n  .smalls_pad-t-0, .smalls_pad-v-0 {\n    padding-top: 0 !important;\n  }\n  .smalls_pad-b-0, .smalls_pad-v-0 {\n    padding-bottom: 0 !important;\n  }\n  .smalls_pad-l-0, .smalls_pad-h-0 {\n    padding-left: 0 !important;\n  }\n  .smalls_pad-r-0, .smalls_pad-h-0 {\n    padding-right: 0 !important;\n  }\n  .smalls_space {\n    margin: 1.5rem !important;\n  }\n  .smalls_space-v, .smalls_space-t {\n    margin-top: 1.5rem !important;\n  }\n  .smalls_space-v, .smalls_space-b {\n    margin-bottom: 1.5rem !important;\n  }\n  .smalls_space-h, .smalls_space-l {\n    margin-left: 1.5rem !important;\n  }\n  .smalls_space-h, .smalls_space-r {\n    margin-right: 1.5rem !important;\n  }\n  .smalls_space-quarter {\n    margin: 0.375rem !important;\n  }\n  .smalls_space-t-quarter, .smalls_space-v-quarter {\n    margin-top: 0.375rem !important;\n  }\n  .smalls_space-b-quarter, .smalls_space-v-quarter {\n    margin-bottom: 0.375rem !important;\n  }\n  .smalls_space-l-quarter, .smalls_space-h-quarter {\n    margin-left: 0.375rem !important;\n  }\n  .smalls_space-r-quarter, .smalls_space-h-quarter {\n    margin-right: 0.375rem !important;\n  }\n  .smalls_space-half {\n    margin: 0.75rem !important;\n  }\n  .smalls_space-t-half, .smalls_space-v-half {\n    margin-top: 0.75rem !important;\n  }\n  .smalls_space-b-half, .smalls_space-v-half {\n    margin-bottom: 0.75rem !important;\n  }\n  .smalls_space-l-half, .smalls_space-h-half {\n    margin-left: 0.75rem !important;\n  }\n  .smalls_space-r-half, .smalls_space-h-half {\n    margin-right: 0.75rem !important;\n  }\n  .smalls_space-2 {\n    margin: 3rem !important;\n  }\n  .smalls_space-t-2, .smalls_space-v-2 {\n    margin-top: 3rem !important;\n  }\n  .smalls_space-b-2, .smalls_space-v-2 {\n    margin-bottom: 3rem !important;\n  }\n  .smalls_space-l-2, .smalls_space-h-2 {\n    margin-left: 3rem !important;\n  }\n  .smalls_space-r-2, .smalls_space-h-2 {\n    margin-right: 3rem !important;\n  }\n  .smalls_space-neg-quarter {\n    margin: -0.375rem !important;\n  }\n  .smalls_space-t-neg-quarter, .smalls_space-v-neg-quarter {\n    margin-top: -0.375rem !important;\n  }\n  .smalls_space-b-neg-quarter, .smalls_space-v-neg-quarter {\n    margin-bottom: -0.375rem !important;\n  }\n  .smalls_space-l-neg-quarter, .smalls_space-h-neg-quarter {\n    margin-left: -0.375rem !important;\n  }\n  .smalls_space-r-neg-quarter, .smalls_space-h-neg-quarter {\n    margin-right: -0.375rem !important;\n  }\n  .smalls_space-neg-half {\n    margin: -0.75rem !important;\n  }\n  .smalls_space-t-neg-half, .smalls_space-v-neg-half {\n    margin-top: -0.75rem !important;\n  }\n  .smalls_space-b-neg-half, .smalls_space-v-neg-half {\n    margin-bottom: -0.75rem !important;\n  }\n  .smalls_space-l-neg-half, .smalls_space-h-neg-half {\n    margin-left: -0.75rem !important;\n  }\n  .smalls_space-r-neg-half, .smalls_space-h-neg-half {\n    margin-right: -0.75rem !important;\n  }\n  .smalls_space-neg {\n    margin: -1.5rem !important;\n  }\n  .smalls_space-t-neg, .smalls_space-v-neg {\n    margin-top: -1.5rem !important;\n  }\n  .smalls_space-b-neg, .smalls_space-v-neg {\n    margin-bottom: -1.5rem !important;\n  }\n  .smalls_space-l-neg, .smalls_space-h-neg {\n    margin-left: -1.5rem !important;\n  }\n  .smalls_space-r-neg, .smalls_space-h-neg {\n    margin-right: -1.5rem !important;\n  }\n  .smalls_space-neg-2 {\n    margin: -3rem !important;\n  }\n  .smalls_space-t-neg-2, .smalls_space-v-neg-2 {\n    margin-top: -3rem !important;\n  }\n  .smalls_space-b-neg-2, .smalls_space-v-neg-2 {\n    margin-bottom: -3rem !important;\n  }\n  .smalls_space-l-neg-2, .smalls_space-h-neg-2 {\n    margin-left: -3rem !important;\n  }\n  .smalls_space-r-neg-2, .smalls_space-h-neg-2 {\n    margin-right: -3rem !important;\n  }\n  .smalls_space-0 {\n    margin: 0 !important;\n  }\n  .smalls_space-t-0, .smalls_space-v-0 {\n    margin-top: 0 !important;\n  }\n  .smalls_space-b-0, .smalls_space-v-0 {\n    margin-bottom: 0 !important;\n  }\n  .smalls_space-l-0, .smalls_space-h-0 {\n    margin-left: 0 !important;\n  }\n  .smalls_space-r-0, .smalls_space-h-0 {\n    margin-right: 0 !important;\n  }\n}\n\n@media only screen and (min-width: 56.9375em) {\n  .bigs_pad {\n    padding: 1.5rem !important;\n  }\n  .bigs_pad-v, .bigs_pad-t {\n    padding-top: 1.5rem !important;\n  }\n  .bigs_pad-v, .bigs_pad-b {\n    padding-bottom: 1.5rem !important;\n  }\n  .bigs_pad-h, .bigs_pad-l {\n    padding-left: 1.5rem !important;\n  }\n  .bigs_pad-h, .bigs_pad-r {\n    padding-right: 1.5rem !important;\n  }\n  .bigs_pad-quarter {\n    padding: 0.375rem !important;\n  }\n  .bigs_pad-t-quarter, .bigs_pad-v-quarter {\n    padding-top: 0.375rem !important;\n  }\n  .bigs_pad-b-quarter, .bigs_pad-v-quarter {\n    padding-bottom: 0.375rem !important;\n  }\n  .bigs_pad-l-quarter, .bigs_pad-h-quarter {\n    padding-left: 0.375rem !important;\n  }\n  .bigs_pad-r-quarter, .bigs_pad-h-quarter {\n    padding-right: 0.375rem !important;\n  }\n  .bigs_pad-half {\n    padding: 0.75rem !important;\n  }\n  .bigs_pad-t-half, .bigs_pad-v-half {\n    padding-top: 0.75rem !important;\n  }\n  .bigs_pad-b-half, .bigs_pad-v-half {\n    padding-bottom: 0.75rem !important;\n  }\n  .bigs_pad-l-half, .bigs_pad-h-half {\n    padding-left: 0.75rem !important;\n  }\n  .bigs_pad-r-half, .bigs_pad-h-half {\n    padding-right: 0.75rem !important;\n  }\n  .bigs_pad-2 {\n    padding: 3rem !important;\n  }\n  .bigs_pad-t-2, .bigs_pad-v-2 {\n    padding-top: 3rem !important;\n  }\n  .bigs_pad-b-2, .bigs_pad-v-2 {\n    padding-bottom: 3rem !important;\n  }\n  .bigs_pad-l-2, .bigs_pad-h-2 {\n    padding-left: 3rem !important;\n  }\n  .bigs_pad-r-2, .bigs_pad-h-2 {\n    padding-right: 3rem !important;\n  }\n  .bigs_pad-0 {\n    padding: 0 !important;\n  }\n  .bigs_pad-t-0, .bigs_pad-v-0 {\n    padding-top: 0 !important;\n  }\n  .bigs_pad-b-0, .bigs_pad-v-0 {\n    padding-bottom: 0 !important;\n  }\n  .bigs_pad-l-0, .bigs_pad-h-0 {\n    padding-left: 0 !important;\n  }\n  .bigs_pad-r-0, .bigs_pad-h-0 {\n    padding-right: 0 !important;\n  }\n  .bigs_space {\n    margin: 1.5rem !important;\n  }\n  .bigs_space-v, .bigs_space-t {\n    margin-top: 1.5rem !important;\n  }\n  .bigs_space-v, .bigs_space-b {\n    margin-bottom: 1.5rem !important;\n  }\n  .bigs_space-h, .bigs_space-l {\n    margin-left: 1.5rem !important;\n  }\n  .bigs_space-h, .bigs_space-r {\n    margin-right: 1.5rem !important;\n  }\n  .bigs_space-quarter {\n    margin: 0.375rem !important;\n  }\n  .bigs_space-t-quarter, .bigs_space-v-quarter {\n    margin-top: 0.375rem !important;\n  }\n  .bigs_space-b-quarter, .bigs_space-v-quarter {\n    margin-bottom: 0.375rem !important;\n  }\n  .bigs_space-l-quarter, .bigs_space-h-quarter {\n    margin-left: 0.375rem !important;\n  }\n  .bigs_space-r-quarter, .bigs_space-h-quarter {\n    margin-right: 0.375rem !important;\n  }\n  .bigs_space-half {\n    margin: 0.75rem !important;\n  }\n  .bigs_space-t-half, .bigs_space-v-half {\n    margin-top: 0.75rem !important;\n  }\n  .bigs_space-b-half, .bigs_space-v-half {\n    margin-bottom: 0.75rem !important;\n  }\n  .bigs_space-l-half, .bigs_space-h-half {\n    margin-left: 0.75rem !important;\n  }\n  .bigs_space-r-half, .bigs_space-h-half {\n    margin-right: 0.75rem !important;\n  }\n  .bigs_space-2 {\n    margin: 3rem !important;\n  }\n  .bigs_space-t-2, .bigs_space-v-2 {\n    margin-top: 3rem !important;\n  }\n  .bigs_space-b-2, .bigs_space-v-2 {\n    margin-bottom: 3rem !important;\n  }\n  .bigs_space-l-2, .bigs_space-h-2 {\n    margin-left: 3rem !important;\n  }\n  .bigs_space-r-2, .bigs_space-h-2 {\n    margin-right: 3rem !important;\n  }\n  .bigs_space-neg-quarter {\n    margin: -0.375rem !important;\n  }\n  .bigs_space-t-neg-quarter, .bigs_space-v-neg-quarter {\n    margin-top: -0.375rem !important;\n  }\n  .bigs_space-b-neg-quarter, .bigs_space-v-neg-quarter {\n    margin-bottom: -0.375rem !important;\n  }\n  .bigs_space-l-neg-quarter, .bigs_space-h-neg-quarter {\n    margin-left: -0.375rem !important;\n  }\n  .bigs_space-r-neg-quarter, .bigs_space-h-neg-quarter {\n    margin-right: -0.375rem !important;\n  }\n  .bigs_space-neg-half {\n    margin: -0.75rem !important;\n  }\n  .bigs_space-t-neg-half, .bigs_space-v-neg-half {\n    margin-top: -0.75rem !important;\n  }\n  .bigs_space-b-neg-half, .bigs_space-v-neg-half {\n    margin-bottom: -0.75rem !important;\n  }\n  .bigs_space-l-neg-half, .bigs_space-h-neg-half {\n    margin-left: -0.75rem !important;\n  }\n  .bigs_space-r-neg-half, .bigs_space-h-neg-half {\n    margin-right: -0.75rem !important;\n  }\n  .bigs_space-neg {\n    margin: -1.5rem !important;\n  }\n  .bigs_space-t-neg, .bigs_space-v-neg {\n    margin-top: -1.5rem !important;\n  }\n  .bigs_space-b-neg, .bigs_space-v-neg {\n    margin-bottom: -1.5rem !important;\n  }\n  .bigs_space-l-neg, .bigs_space-h-neg {\n    margin-left: -1.5rem !important;\n  }\n  .bigs_space-r-neg, .bigs_space-h-neg {\n    margin-right: -1.5rem !important;\n  }\n  .bigs_space-neg-2 {\n    margin: -3rem !important;\n  }\n  .bigs_space-t-neg-2, .bigs_space-v-neg-2 {\n    margin-top: -3rem !important;\n  }\n  .bigs_space-b-neg-2, .bigs_space-v-neg-2 {\n    margin-bottom: -3rem !important;\n  }\n  .bigs_space-l-neg-2, .bigs_space-h-neg-2 {\n    margin-left: -3rem !important;\n  }\n  .bigs_space-r-neg-2, .bigs_space-h-neg-2 {\n    margin-right: -3rem !important;\n  }\n  .bigs_space-0 {\n    margin: 0 !important;\n  }\n  .bigs_space-t-0, .bigs_space-v-0 {\n    margin-top: 0 !important;\n  }\n  .bigs_space-b-0, .bigs_space-v-0 {\n    margin-bottom: 0 !important;\n  }\n  .bigs_space-l-0, .bigs_space-h-0 {\n    margin-left: 0 !important;\n  }\n  .bigs_space-r-0, .bigs_space-h-0 {\n    margin-right: 0 !important;\n  }\n}\n\n@media only screen and (min-width: 85em) {\n  .desk_pad {\n    padding: 1.5rem !important;\n  }\n  .desk_pad-v, .desk_pad-t {\n    padding-top: 1.5rem !important;\n  }\n  .desk_pad-v, .desk_pad-b {\n    padding-bottom: 1.5rem !important;\n  }\n  .desk_pad-h, .desk_pad-l {\n    padding-left: 1.5rem !important;\n  }\n  .desk_pad-h, .desk_pad-r {\n    padding-right: 1.5rem !important;\n  }\n  .desk_pad-quarter {\n    padding: 0.375rem !important;\n  }\n  .desk_pad-t-quarter, .desk_pad-v-quarter {\n    padding-top: 0.375rem !important;\n  }\n  .desk_pad-b-quarter, .desk_pad-v-quarter {\n    padding-bottom: 0.375rem !important;\n  }\n  .desk_pad-l-quarter, .desk_pad-h-quarter {\n    padding-left: 0.375rem !important;\n  }\n  .desk_pad-r-quarter, .desk_pad-h-quarter {\n    padding-right: 0.375rem !important;\n  }\n  .desk_pad-half {\n    padding: 0.75rem !important;\n  }\n  .desk_pad-t-half, .desk_pad-v-half {\n    padding-top: 0.75rem !important;\n  }\n  .desk_pad-b-half, .desk_pad-v-half {\n    padding-bottom: 0.75rem !important;\n  }\n  .desk_pad-l-half, .desk_pad-h-half {\n    padding-left: 0.75rem !important;\n  }\n  .desk_pad-r-half, .desk_pad-h-half {\n    padding-right: 0.75rem !important;\n  }\n  .desk_pad-2 {\n    padding: 3rem !important;\n  }\n  .desk_pad-t-2, .desk_pad-v-2 {\n    padding-top: 3rem !important;\n  }\n  .desk_pad-b-2, .desk_pad-v-2 {\n    padding-bottom: 3rem !important;\n  }\n  .desk_pad-l-2, .desk_pad-h-2 {\n    padding-left: 3rem !important;\n  }\n  .desk_pad-r-2, .desk_pad-h-2 {\n    padding-right: 3rem !important;\n  }\n  .desk_pad-0 {\n    padding: 0 !important;\n  }\n  .desk_pad-t-0, .desk_pad-v-0 {\n    padding-top: 0 !important;\n  }\n  .desk_pad-b-0, .desk_pad-v-0 {\n    padding-bottom: 0 !important;\n  }\n  .desk_pad-l-0, .desk_pad-h-0 {\n    padding-left: 0 !important;\n  }\n  .desk_pad-r-0, .desk_pad-h-0 {\n    padding-right: 0 !important;\n  }\n  .desk_space {\n    margin: 1.5rem !important;\n  }\n  .desk_space-v, .desk_space-t {\n    margin-top: 1.5rem !important;\n  }\n  .desk_space-v, .desk_space-b {\n    margin-bottom: 1.5rem !important;\n  }\n  .desk_space-h, .desk_space-l {\n    margin-left: 1.5rem !important;\n  }\n  .desk_space-h, .desk_space-r {\n    margin-right: 1.5rem !important;\n  }\n  .desk_space-quarter {\n    margin: 0.375rem !important;\n  }\n  .desk_space-t-quarter, .desk_space-v-quarter {\n    margin-top: 0.375rem !important;\n  }\n  .desk_space-b-quarter, .desk_space-v-quarter {\n    margin-bottom: 0.375rem !important;\n  }\n  .desk_space-l-quarter, .desk_space-h-quarter {\n    margin-left: 0.375rem !important;\n  }\n  .desk_space-r-quarter, .desk_space-h-quarter {\n    margin-right: 0.375rem !important;\n  }\n  .desk_space-half {\n    margin: 0.75rem !important;\n  }\n  .desk_space-t-half, .desk_space-v-half {\n    margin-top: 0.75rem !important;\n  }\n  .desk_space-b-half, .desk_space-v-half {\n    margin-bottom: 0.75rem !important;\n  }\n  .desk_space-l-half, .desk_space-h-half {\n    margin-left: 0.75rem !important;\n  }\n  .desk_space-r-half, .desk_space-h-half {\n    margin-right: 0.75rem !important;\n  }\n  .desk_space-2 {\n    margin: 3rem !important;\n  }\n  .desk_space-t-2, .desk_space-v-2 {\n    margin-top: 3rem !important;\n  }\n  .desk_space-b-2, .desk_space-v-2 {\n    margin-bottom: 3rem !important;\n  }\n  .desk_space-l-2, .desk_space-h-2 {\n    margin-left: 3rem !important;\n  }\n  .desk_space-r-2, .desk_space-h-2 {\n    margin-right: 3rem !important;\n  }\n  .desk_space-neg-quarter {\n    margin: -0.375rem !important;\n  }\n  .desk_space-t-neg-quarter, .desk_space-v-neg-quarter {\n    margin-top: -0.375rem !important;\n  }\n  .desk_space-b-neg-quarter, .desk_space-v-neg-quarter {\n    margin-bottom: -0.375rem !important;\n  }\n  .desk_space-l-neg-quarter, .desk_space-h-neg-quarter {\n    margin-left: -0.375rem !important;\n  }\n  .desk_space-r-neg-quarter, .desk_space-h-neg-quarter {\n    margin-right: -0.375rem !important;\n  }\n  .desk_space-neg-half {\n    margin: -0.75rem !important;\n  }\n  .desk_space-t-neg-half, .desk_space-v-neg-half {\n    margin-top: -0.75rem !important;\n  }\n  .desk_space-b-neg-half, .desk_space-v-neg-half {\n    margin-bottom: -0.75rem !important;\n  }\n  .desk_space-l-neg-half, .desk_space-h-neg-half {\n    margin-left: -0.75rem !important;\n  }\n  .desk_space-r-neg-half, .desk_space-h-neg-half {\n    margin-right: -0.75rem !important;\n  }\n  .desk_space-neg {\n    margin: -1.5rem !important;\n  }\n  .desk_space-t-neg, .desk_space-v-neg {\n    margin-top: -1.5rem !important;\n  }\n  .desk_space-b-neg, .desk_space-v-neg {\n    margin-bottom: -1.5rem !important;\n  }\n  .desk_space-l-neg, .desk_space-h-neg {\n    margin-left: -1.5rem !important;\n  }\n  .desk_space-r-neg, .desk_space-h-neg {\n    margin-right: -1.5rem !important;\n  }\n  .desk_space-neg-2 {\n    margin: -3rem !important;\n  }\n  .desk_space-t-neg-2, .desk_space-v-neg-2 {\n    margin-top: -3rem !important;\n  }\n  .desk_space-b-neg-2, .desk_space-v-neg-2 {\n    margin-bottom: -3rem !important;\n  }\n  .desk_space-l-neg-2, .desk_space-h-neg-2 {\n    margin-left: -3rem !important;\n  }\n  .desk_space-r-neg-2, .desk_space-h-neg-2 {\n    margin-right: -3rem !important;\n  }\n  .desk_space-0 {\n    margin: 0 !important;\n  }\n  .desk_space-t-0, .desk_space-v-0 {\n    margin-top: 0 !important;\n  }\n  .desk_space-b-0, .desk_space-v-0 {\n    margin-bottom: 0 !important;\n  }\n  .desk_space-l-0, .desk_space-h-0 {\n    margin-left: 0 !important;\n  }\n  .desk_space-r-0, .desk_space-h-0 {\n    margin-right: 0 !important;\n  }\n}\n\n/* SG\n# Typography/Heading sizes\n\nMoving from `h6` up to `h1`, the heading font sizes get larger on a scale. For instance, `h6` is 1.35 times larger than the base font size of 16px. Headings have a default bottom margin of 24px.\n\n**Heading tags should be used in a hierarchical manner**, appropriate for the page, and not used for their size. To override a heading size, use a class with the corresponding heading name. See the example below.\n\n```html_example\n<h1>Heading 1</h1>\n<h2>Heading 2</h2>\n<h3>Heading 3</h3>\n<h4>Heading 4</h4>\n<h5>Heading 5</h5>\n<h6>Heading 6</h6>\n\n<h1 class=\"h4\">Heading 1 with an h4 class</h1>\n\n```\n*/\n.h1 {\n  font-size: 2.02729rem !important;\n  line-height: 1.47981;\n}\n\n.h2 {\n  font-size: 1.80203rem !important;\n  line-height: 1.24859;\n}\n\n.h3 {\n  font-size: 1.60181rem !important;\n  line-height: 1.40466;\n}\n\n.h4 {\n  font-size: 1.42383rem !important;\n  line-height: 1.0535;\n}\n\n.h5 {\n  font-size: 1.26562rem !important;\n  line-height: 1.18519;\n}\n\n.h6 {\n  font-size: 1.125rem !important;\n  line-height: 1.33333;\n}\n\n.link--naked {\n  color: inherit !important;\n  text-decoration: none !important;\n}\n\n.link--naked:hover, .link--naked:focus {\n  color: inherit !important;\n  text-decoration: none !important;\n}\n\n.txt-small {\n  font-size: 0.74074rem !important;\n  line-height: 1.6 !important;\n}\n\n.txt-smaller {\n  font-size: 0.74074em !important;\n}\n\n.txt-center {\n  text-align: center !important;\n}\n\n.txt-normal {\n  font-weight: 400 !important;\n}\n\n.txt-italic {\n  font-style: italic !important;\n}\n\n.txt-bold {\n  font-weight: 700 !important;\n  -webkit-font-smoothing: antialiased !important;\n}\n\n.txt-upper {\n  text-transform: uppercase !important;\n  letter-spacing: 0.1em !important;\n}\n\n.txt-capital {\n  text-transform: capitalize !important;\n}\n\n.txt-lower {\n  text-transform: none !important;\n  letter-spacing: normal !important;\n}\n\n.txt-space-reset {\n  letter-spacing: normal !important;\n  word-spacing: normal !important;\n}\n\n.txt-primary {\n  font-family: -apple-system, BlinkMacSystemFont, Segoe UI, system-ui, Roboto, Helvetica Neue, sans-serif !important;\n}\n\n.txt-secondary {\n  font-family: opensans, Helvetica Neue, Helvetica, Arial, sans-serif !important;\n}\n\n@media only screen and (max-width: 56.875em) {\n  .smalls_txt-small {\n    font-size: 0.74074rem !important;\n    line-height: 1.6 !important;\n  }\n  .smalls_txt-smaller {\n    font-size: 0.74074em !important;\n  }\n  .smalls_txt-center {\n    text-align: center !important;\n  }\n  .smalls_txt-normal {\n    font-weight: 400 !important;\n  }\n  .smalls_txt-italic {\n    font-style: italic !important;\n  }\n  .smalls_txt-bold {\n    font-weight: 700 !important;\n    -webkit-font-smoothing: antialiased !important;\n  }\n  .smalls_txt-upper {\n    text-transform: uppercase !important;\n    letter-spacing: 0.1em !important;\n  }\n  .smalls_txt-capital {\n    text-transform: capitalize !important;\n  }\n  .smalls_txt-lower {\n    text-transform: none !important;\n    letter-spacing: normal !important;\n  }\n  .smalls_txt-space-reset {\n    letter-spacing: normal !important;\n    word-spacing: normal !important;\n  }\n  .smalls_txt-primary {\n    font-family: -apple-system, BlinkMacSystemFont, Segoe UI, system-ui, Roboto, Helvetica Neue, sans-serif !important;\n  }\n  .smalls_txt-secondary {\n    font-family: opensans, Helvetica Neue, Helvetica, Arial, sans-serif !important;\n  }\n}\n\n@media only screen and (min-width: 56.9375em) {\n  .bigs_txt-small {\n    font-size: 0.74074rem !important;\n    line-height: 1.6 !important;\n  }\n  .bigs_txt-smaller {\n    font-size: 0.74074em !important;\n  }\n  .bigs_txt-center {\n    text-align: center !important;\n  }\n  .bigs_txt-normal {\n    font-weight: 400 !important;\n  }\n  .bigs_txt-italic {\n    font-style: italic !important;\n  }\n  .bigs_txt-bold {\n    font-weight: 700 !important;\n    -webkit-font-smoothing: antialiased !important;\n  }\n  .bigs_txt-upper {\n    text-transform: uppercase !important;\n    letter-spacing: 0.1em !important;\n  }\n  .bigs_txt-capital {\n    text-transform: capitalize !important;\n  }\n  .bigs_txt-lower {\n    text-transform: none !important;\n    letter-spacing: normal !important;\n  }\n  .bigs_txt-space-reset {\n    letter-spacing: normal !important;\n    word-spacing: normal !important;\n  }\n  .bigs_txt-primary {\n    font-family: -apple-system, BlinkMacSystemFont, Segoe UI, system-ui, Roboto, Helvetica Neue, sans-serif !important;\n  }\n  .bigs_txt-secondary {\n    font-family: opensans, Helvetica Neue, Helvetica, Arial, sans-serif !important;\n  }\n}\n\n.baseline-on {\n  background-image: url(http://basehold.it/i/24);\n  background: linear-gradient(to top, rgba(0, 0, 0, 0.15) 1px, transparent 1px, rgba(0, 0, 0, 0.15) 1px, transparent 1px) top left/auto 0.75em;\n}\n\n.baseline-off {\n  background-image: none;\n}\n\n@media only screen and (max-width: 56.875em) {\n  .breakpoint-on:after {\n    content: \"smalls\";\n    position: fixed;\n    top: 0;\n    right: 0;\n    background: #fff;\n    padding: 10px;\n    z-index: 999999;\n  }\n}\n\n@media only screen and (max-width: 43.125em) {\n  .breakpoint-on:after {\n    content: \"small\";\n    position: fixed;\n    top: 0;\n    right: 0;\n    background: #fff;\n    padding: 10px;\n    z-index: 999999;\n  }\n}\n\n@media only screen and (min-width: 43.1875em) and (max-width: 56.875em) {\n  .breakpoint-on:after {\n    content: \"smallish\";\n    position: fixed;\n    top: 0;\n    right: 0;\n    background: #fff;\n    padding: 10px;\n    z-index: 999999;\n  }\n}\n\n@media only screen and (min-width: 56.9375em) {\n  .breakpoint-on:after {\n    content: \"bigs\";\n    position: fixed;\n    top: 0;\n    right: 0;\n    background: #fff;\n    padding: 10px;\n    z-index: 999999;\n  }\n}\n\n@media only screen and (min-width: 56.9375em) and (max-width: 85em) {\n  .breakpoint-on:after {\n    content: \"lap\";\n    position: fixed;\n    top: 0;\n    right: 0;\n    background: #fff;\n    padding: 10px;\n    z-index: 999999;\n  }\n}\n\n@media only screen and (min-width: 85em) {\n  .breakpoint-on:after {\n    content: \"desk\";\n    position: fixed;\n    top: 0;\n    right: 0;\n    background: #fff;\n    padding: 10px;\n    z-index: 999999;\n  }\n}\n\n#testing {\n  padding: auto 15rem auto auto;\n}\n","//------------------------------------*\\\n//    $COLOR FUNCTIONS\n//------------------------------------*/\n\n@import 'blendmodes';\n\n\n/// Get a color value from the global `$base-colors` map. Darker and lighter tones are available by passing a second string.\n/// @example\n///   .foo {\n///      background-color: colors(links, light));\n///   }\n/// @param {string} $color-name - The color you\n/// @param {string} $tone ['base']\n/// @param {number} $opacity [1]\n/// @returns {color}\n/// @link http://blog.12spokes.com/web-design-development/simple-css-color-management-with-sass/\n/// @see $base-colors\n@function colors($color-name, $tone: 'base', $opacity: 1) {\n\n    @if not map-has-key($base-colors, $color-name) {\n        @warn \"Color '#{$color-name}' not found in $base-colors map. Returning #f00 instead\";\n        @return red;\n    }@else if not map-has-key(map-get($base-colors, $color-name), $tone) {\n        @warn \"Tone '#{$tone}' not found in #{$color-name}. Returning #f00 instead.\";\n        @return red;\n    }\n\n    @if $opacity < 1 {\n        @return rgba(map-get(map-get($base-colors, $color-name), $tone), $opacity);\n    }\n\n    @return map-get(map-get($base-colors, $color-name), $tone);\n}\n/// @alias colors\n@function color($color, $tone: 'base', $opacity: 1) {\n    @return colors($color, $tone, $opacity);\n}\n/// @alias colors\n@function clr($color, $tone: 'base', $opacity: 1) {\n    @return colors($color, $tone, $opacity);\n}\n\n/// Change text color based on background-color's darkness.\n/// @param {color} $color\n/// @returns {color}\n/// @example\n///    div {\n///        background-color: #f8cd12;\n///        color: black-or-white(#f8cd12);\n///    }\n///    // Your text color would be black because #f8cd12 and #00000 have more contrast.\n@function black-or-white($color) {\n    @if (color-luminance($color) > .45) {\n        @return #000;\n    }\n    @else {\n        @return #fff;\n    }\n}\n\n/// @alias black-or-white\n@function set-text-color($color){ @return black-or-white($color); }\n\n// /* SG\n// ##### `pick-best-color()`\n// ###### function(`$base, $colors, $tolerance: 0`)\n// Compares a set of colors against `$base` and returns the color with the most contrast. `$colors` should be a list.\n// [Taken from here](https://gist.github.com/voxpelli/6304812)\n//\n// ```scss\n// div {\n//     color: pick_best_color(#f8cd12, (#a0a0c0, #fff, #2c2c2c));\n// }\n// // The function would test the colors and find that #2c2c2c is the best.\n// ```\n// @requires `color-contrast()`, `color-luminance()`\n// @returns color\n// */\n\n@function pick-best-color($base, $colors, $tolerance: 0) {\n    $contrast: color-contrast($base, nth($colors, 1));\n    $best: nth($colors, 1);\n\n    @for $i from 2 through length($colors) {\n        $current_contrast: color-contrast($base, nth($colors, $i));\n\n        @if ($current_contrast - $contrast > $tolerance) {\n            $contrast: color-contrast($base, nth($colors, $i));\n            $best: nth($colors, $i);\n        }\n    }\n    @return $best;\n}\n\n\n/// Find the relative luminance of a color. Used by `color-contrast()`. [Adapted from color.js](https://github.com/LeaVerou/contrast-ratio/blob/gh-pages/color.js)\n/// @param $color\n/// @returns {number} 0 - 1\n@function color-luminance($color) {\n\n    $rgba: red($color), green($color), blue($color);\n    $rgba2: ();\n\n    @for $i from 1 through 3 {\n        $rgb: nth($rgba, $i);\n        $rgb: $rgb / 255;\n\n        $rgb: if($rgb < .03928, $rgb / 12.92, pow(($rgb + .055) / 1.055, 2.4));\n\n        $rgba2: append($rgba2, $rgb);\n    }\n    @return (.2126 * nth($rgba2, 1)) + (.7152 * nth($rgba2, 2)) + (0.0722 * nth($rgba2, 3));\n}\n\n/// @alias color-luminance\n@function luma($color){ @return color-luminance($color); }\n\n\n/// Find contrast between two colors.\n/// [Adapted from color.js](https://github.com/LeaVerou/contrast-ratio/blob/gh-pages/color.js)\n/// @requires color-luminance\n/// @returns {number} 0 - 1\n@function color-contrast($color1, $color2) {\n    $luminance1: color-luminance($color1) + .05;\n    $luminance2: color-luminance($color2) + .05;\n    $ratio: $luminance1 / $luminance2;\n\n    @if $luminance2 > $luminance1 {\n        $ratio: 1 / $ratio;\n    }\n\n    $ratio: round($ratio * 10) / 10;\n\n    @return $ratio;\n}\n\n// /* SG\n// # Colors/Debugging [[dev]]\n//\n// @file tools/_t-color-functions.scss\n//\n// ##### `@color-palette-output()`\n// ###### mixin(`$selector`, `$color-map:` `$$base-colors`)\n// Debugging tool that creates a pretty color palette (in columns) using psuedo selectors (nth-child required). Used for \"color blocks\" output, in style guide.\n//\n// @requires `map-add-depth()`, `black-or-white()`\n//\n// */\n\n@mixin color-palette-output($selector, $color-map: $base-colors) {\n    $color-names: \t  ( );\n    $color-subnames:  ( );\n    $color-fullnames: ( );\n    $color-values: \t  ( );\n\n    //Loop through the color map,\n    // adding all names, variants, and values to individual lists\n    @each $color, $color-variants in $color-map {\n        //Put color names into a list\n        $color-names: append($color-names, nth($color, 1));\n\n        //Put 'base' at beginning of list\n        @if index(map-keys($color-variants), base) == length(map-keys($color-variants)) {\n            $color-variants: list-reverse($color-variants);\n        }\n\n        //Loop through color variants (light, dark, etc.)\n        @each $color-variant in $color-variants {\n\n            //Add a non-breaking space before the color name\n            $subname-temp: unquote(' ' + nth($color-variant, 1));\n\n            //Remove 'base' from titles for nicer output\n            @if $subname-temp == ' base' {\n                $subname-temp: unquote('');\n            }\n\n            //Create name by adding the color and color-subname (e.g. blue dark)\n            $fullname-temp: unquote($color + $subname-temp);\n\n            //Add names to lists for later use\n            $color-fullnames: append($color-fullnames, $fullname-temp);\n            $color-subnames:\n                append($color-subnames, unquote(nth($color-variant, 1)));\n            $color-values:\n                append($color-values, nth($color-variant, 2));\n        }\n    }\n\n    //Store color lengths for selector loop\n    $top-colors-len: length($color-names);\n    $sub-colors-len: length($color-subnames) / $top-colors-len;\n    $color-index: 1;\n    $color-loop: 1;\n\n    //Loop through all colors\n    @for $i from 1 through length($color-fullnames){\n\n        //Grab the current color value and name\n        $current-color-value: nth($color-values, $color-index);\n        $current-color-name: nth($color-fullnames, $color-index);\n\n        //Apply it to the selection based on nth-child (using $i)\n        #{$selector}:nth-child(#{$i}){\n            background-color: #{$current-color-value};\n            //Determine if black or white should be used for text color\n            color: #{black-or-white( $current-color-value )};\n\n            //Make first row of colors a little larger\n            @if $i <= $top-colors-len {\n                padding: 2% 1% 2.5%;\n            }\n\n            //Describe the color and show its hex value\n            &:before {\n                content: \"#{$current-color-name}\";\n            }\n            &:after {\n                content: \"#{$current-color-value}\";\n            }\n        }\n\n        //Determine the index of the color to use\n        // This essentially makes the color chosen 1 loop ahead of $i\n        // E.G. if there are 9 top-level colors, $color-index will be 9 ahead of the current $i value\n        $color-index: ($color-index - $color-loop) + ($sub-colors-len + $color-loop);\n\n        // Increase the loop when we've reached the highest value\n        // And reset the color index.\n        @if $color-index > length($color-fullnames) {\n            $color-loop: $color-loop + 1;\n            $color-index: $color-loop;\n        }\n\n    }\n\n    //Base styles\n    #{$selector} {\n        //Width is a percentage of the total top-level colors (minus 1% for margin)\n        width: percentage(1 / $top-colors-len) - 1%;\n        padding: 1%;\n        margin-right: .95%;\n        float: left;\n        overflow: hidden;\n\n        &:before{\n            @include rems(font-size, modular-scale(-1));\n            display: block;\n            white-space: nowrap;\n        }\n\n        &:after{\n            @include rems(font-size, modular-scale(-2));\n            display: block;\n        }\n    }\n\n}\n\n/// Takes all colors in a map and blends them with a secondary color to even them out.\n/// * Should only be used as a tool to create color palletes.\n/// * Shouldn't be used on every compilation since it can make development fairly abstract.\n/// @param {map} $color-list -\n/// @param {string} $blending-mode ['overlay'] - blending mode to use over each color\n/// @param {color} $blending-color [blue] - color to blend with.\n/// @param {percent} $amount [0%] - amount to blend.\n\n@function harmonize-colors(\n    $color-list,\n    $blending-mode: 'overlay',\n    $blending-color: blue,\n    $amount: 0%\n) {\n    $temp-name-map: ();\n    $temp-top-map: ();\n    $temp-list: ();\n    $return: null;\n\n    //Make sure non-prefixed blending modes\n    // are appended with the correct function namespace\n    $blending-mode:\n        if(\n            str-contains($blending-mode, 'blend'),\n            $blending-mode,\n            'blend-' + $blending-mode\n        );\n\n    @if type-of($color-list) == 'map' {\n        $color-list: map-add-depth($color-list);\n\n        @each $color, $name in $color-list {\n            @each $key, $value in $name {\n                $value: call(safe-get-function($blending-mode), $blending-color, $value, $amount);\n                $temp-key: ($key: $value);\n                $temp-color: ($color: ($temp-key));\n                $temp-name-map: map-merge($temp-name-map, $temp-color);\n                @debug $temp-name-map;\n            }\n            $temp-top-map: map-merge($temp-top-map, $temp-name-map);\n        }\n\n        $return: map-merge($color-list, $temp-top-map);\n\n    }@else {\n        @each $value in $color-list {\n            $value: call(safe-get-function($blending-mode), $blending-color, $value, $amount);\n            $temp-list: append($temp-list, $value);\n        }\n        $return: $temp-list;\n    }\n\n    @return $return;\n}\n\n// /* SG\n// # Colors/Manipulation [[dev]]\n//\n// ##### `generate-color-varations()`\n// ###### function(\n//  `$map: $colors,\n//  $functions: (tint, tint, tint, shade, shade, shade),\n//  $increments: (20%, 40%, 80%, 20%, 40%, 80%),\n//  $variations: (light, lighter, lightest, dark, darker, darkest),\n//  $blending-colors: null`\n//  )\n//\n// Takes base color values and generates a full color palette. Used by the `$$base-colors` map to create a project's palette, accessible via `colors()`.\n//\n// **Arguments:**\n// * `$map`: Color map you want to create variations of. Defaults to `$$base-colors`.\n// * `$functions`: color functions used to generate variations (e.g. lighten or darken). Can use any `blend` function, provided `$blending-colors` are provided.\n// * `$increments`: percentage amount to apply `$function` to each `$variations`.\n// * `$variations`: actual names for each color tone when `colors()` used.\n// * `$blending-colors`: used when a function is a `blend`. Can be a list or a single color.\n//\n// @requires `_combine-color-maps()`\n//\n// */\n\n// Adds color variations to a color map\n// 1a. Color functions.\n// 1b. Function percentages (e.g. lighten($foo, [percentages])).\n// 1c. Variation names (output to map).\n// 1d. Blending color. Only used when a blending mode is used (e.g. blend-colordodge)\n// 2a. Determine how often to switch functions.\n// 2b. Make sure map is properly formatted.\n// 2c. Define new map (for easier to understand return value).\n// 3a. Loop through the pallets and colors of the map input.\n// 3b. Store $color map in a list\n//     (this is required to prevent bugs on colors with names of real colors).\n// 3c. Define color function increment.\n// 4a. Loop through the variation names.\n// 4b. Get index and find the amount to use with the current color function.\n// 5a. Divide the loop increment by the number of color functions.\n// 5b. If the loop is larger than the variation frequency,\n//\t   move to the next color function.\n// 6a. Get the current color function and current color.\n// 6b. Add blending mode color if necessary (useful for mixing colors).\n// 6c. If blending-color is defined, use it to blend colors (use list-value if exists)\n// 7a. Call the color function, the color(s), and the amount and store that value.\n// 7b. Create the variation and color definition in map format (\"name\": color).\n// 7c. Merge the current base color map with the new variant map.\n// 8a. Format the previous loop results into a nested map.\n// 8b. Merge the input map with itself and the new nested map.\n// 9. Return the map with the new values.\n\n@function generate-color-variations(\n    $map: $base-colors,\n    $functions: (tint, tint, tint, shade, shade, shade),\t\t\t//[1a]\n    $increments: (20%,  40%,   80%,   20%,   40%,   80%), \t\t\t//[1b]\n    $variations: (light, lighter, lightest, dark, darker, darkest), //[1c]\n    $blending-colors: null \t\t\t\t\t\t\t\t\t\t\t//[1d]\n){\n        $variation-frequency:\n            length($variations) / length($functions); //[2a]\n\n        $map: map-add-depth($map, 'base');\t\t\t\t\t\t //[2b]\n        $new-map: $map;\t\t\t\t\t\t\t \t     \t\t //[2c]\n        $blend-value: '';\n\n        @each $palette, $color in $map { \t\t\t\t\t\t //[3a]\n            $values-list: $color;\t\t\t\t\t\t\t\t //[3b]\n            $color_fn-i: 1;\t\t\t\t\t\t\t\t\t\t //[3c]\n\n            @each $variant in $variations {        \t        //[4a]\n                @if not map-has-key($color, $variant) {\n                    $i: index($variations, $variant);\t    //[4b]\n                    $amount: nth($increments, $i);\t\t\t//[4b]\n\n                    $color_fn_place: $i/$variation-frequency;\t//[5a]\n\n                    @if $color_fn_place > $color_fn-i{ \t\t\t//[5b]\n                        $color_fn-i: $color_fn-i + 1;\t\t\t//[5b]\n                    }\n\n                    $curr_fn: nth($functions, $color_fn-i); \t\t//[6a]\n                    $curr_color: map-get($color, base);\t\t\t\t\t//[6b]\n\n                    @if $blending-colors != null\n                        or type-of($blending-colors) == 'list'{\t\t\t//[6c]\n\n                        @if type-of($blending-colors) == 'list' {\n                            $blend-value: nth($blending-colors, $color_fn-i);\n                        }@else {\n                            $blend-value: $blending-colors;\n                        }\n\n                        @if $blend-value == 'self' {\n                            $blend-value: $curr_color;\n                        }\n\n                        @if $blend-value != null {\n                            $amount: 1 - ($amount / 100%); //Invert the amount\n                            $temp-color: $curr_color;\n                            //Use amount to transparency of blending color\n                            $curr_color: transparentize($blend-value, $amount);\n                            //$amount becomes 'background' color we're blending\n                            $amount: $temp-color;\n                        }\n                    }\n                    //Try to add \"blend\" to the current function if it's not valid\n                    @if not function-exists($curr_fn){\n                        $curr_fn: unquote('blend-') + $curr_fn;\n                    }\n\n                    $new-color: call(safe-get-function($curr_fn), $curr_color, $amount); \t//[7a]\n                    $value: ($variant: $new-color); \t\t\t\t\t//[7b]\n\n                    $values-list: map-merge($value, $values-list);\t\t//[7c]\n                }\n            }\n\n            // This is required because sass maps are formatted\n            // with double parenthesis as they get more nested.\n            // (first-level: ( (second-level: value) ) )\n            $inner-map: ($palette:($values-list));\t\t\t\t//[8a]\n            $new-map: _combine-color-maps($new-map, $inner-map); \t//[8b]\n\n        }\n\n        @return $new-map; \t\t\t\t\t\t\t\t//[9]\n}\n\n/// Combines two color maps (or really any double-nested map)\n@function _combine-color-maps($map1, $map2) {\n\n    @each $pal, $color in $map2 {\n        $value: ($pal: $color);\n        $map1: map-merge($map1, $value);\n    }\n\n    @return $map1;\n}\n","//------------------------------------\n//      $FONT FACE TOOL\n//------------------------------------\n\n/// A wrapper function for `@font-face()`. Takes a configuration map and passes the keys to `@font-face()`. Loops through each font-name's (root map keys) weight and style.\n///\n/// Font file names must be the same as their CSS font-family values. Example: arial font, 400 weight would be arial-400.ttf and the CSS value would be font-family: 'arial'; font-weight: 400.\n/// @group core\n/// @param {map} $font-map [$web-fonts]\n/// @see $web-fonts\n@mixin web-fonts($font-map: $web-fonts) {\n    @each $name in map-keys($font-map) {\n        $inner-map: map-get($font-map, $name);\n\n        $weights: map-get($inner-map, 'weights');\n        $italics: map-get($inner-map, 'italics');\n        $formats: map-get($inner-map, 'formats');\n        $path: map-get($inner-map, 'path') or $font-file-location;\n\n        @each $weight in $weights {\n            @include _font-weights($name, $path, $weight, $formats);\n        }\n        @each $weight in $italics {\n            @include _font-weights($name, $path, $weight, $formats, italic);\n        }\n    }\n}\n/// @alias web-fonts\n/// @deprecated\n@mixin include-web-fonts($font-map: $web-fonts) {@include web-fonts($font-map);}\n\n/// Formats fonts taken from `$web-fonts` and creates their equivilent weight (with correct font-style) output.\n@mixin _font-weights($name, $path, $weight, $formats, $style: '') {\n    $style-string: if($style != '', '-#{$style}', '');\n    $svg-id: ('##{$name}#{$weight}#{$style}');\n    $font-name: #{$path}/#{unquote('#{$name}-#{$weight}#{$style-string}')};\n    $style: if($style == '', 'normal', $style);\n\n    $fonts: _join-font-formats($font-name, $formats, $svg-id);\n\n    $eot: map-get($fonts, 'eot');\n    $font-files: map-get($fonts, 'font-files');\n\n    @include font-face(\n        $name,\n        $font-files,\n        $weight,\n        $style,\n        $eot\n    );\n}\n\n/// Generates cross-browser font-face declarations when called.\n/// `$name` is required, arbitrary, and what you will use in font stacks.\n/// @param {} $name\n/// @param {} $font-files is required using font-files('relative/location', 'format'). For best results use this order: woff, opentype/truetype, svg\n/// @param {} $eot is required by IE, and is a relative location of the eot file.\n/// @param {} $weight shows if the font is bold, defaults to normal\n/// @param {} $style defaults to normal, might be also italic\n@mixin font-face(\n    $name,\n    $font-files,\n    $weight: false,\n    $style: false,\n    $eot: null\n){\n\n    $iefont: unquote(\"'#{$eot}?#iefix'\");\n    @font-face {\n        font-family: quote($name);\n        @if $eot {\n            src: unquote(\"'#{$eot}'\");\n            $font-files: url($iefont) unquote(\"format('embedded-opentype')\"), $font-files;\n        }\n        src: #{$font-files};\n        @if $weight {\n            font-weight: #{$weight};\n        }\n        @if $style {\n            font-style: #{$style};\n        }\n    }\n}\n\n@function _join-font-formats($font-name, $formats, $svg-id) {\n    $font-files: ();\n    $eot: null;\n\n    @each $format in $formats {\n        $extension: if($format == 'svg', 'svg#{$svg-id}', $format);\n\n        @if $format == 'eot' {\n            $eot: '#{$font-name}.eot';\n        }\n        @else {\n            $font-files: join(\n                unquote('url(\"#{$font-name}.#{$extension}\") format(\"#{$format}\")'),\n                $font-files,\n                comma\n            );\n        }\n    }\n\n    @return (\n        'font-files': $font-files,\n        'eot': $eot\n    );\n}\n","@import 'variables';\n@import 'conversion';\n@import 'font-face';\n@import 'type-space';\n\n/// Quickly generate a font-size in rems (with a pixel fallback if `$rem-px-fallback = true`). Optionally calculates baseline-aligned line-height a using `$base-line-height` and the `baseline-calc` function.\n/// @param {Pixel} $font-size - Pixel value to be converted.\n/// @param {Boolean | String | Number} $line-height ['auto'] -\n/// * `'auto'` or `true` will automatically create a line-height that is aligned to the `$base-line-height`.\n/// * Pixel values will be converted to a unitless value.\n/// * Unitless numbers will be passed straight through.\n/// * `false` will result in no line-height declaration.\n/// @group core\n/// @param {Boolean} $important [false] - Whether to add `!important` after the font-size.\n/// @param {Pixel} $base-font [$base-font-size]\n/// @requires {function} baseline-calc\n/// @requires {function} cache\n\n@mixin font-size (\n    $font-size,\n    $line-height: 'auto',\n    $important: false,\n    $base-font: $base-font-size,\n) {\n    @if type-of($important) == 'number' {\n        $base-font: $important;\n        $important: false;\n    }\n    //Create REM-based font-size\n    @include px-to-rems('font-size', $font-size, $important, $base-font);\n\n    @if $line-height == true or $line-height == 'auto' {\n\n        line-height: #{cache(baseline-calc, $font-size)};\n\n    }\n    @else if type-of($line-height) == 'number' {\n\n        //Convert to unitless\n        @if not unitless($line-height) {\n            @if unit($line-height) == 'px' {\n                $line-height: $line-height / $font-size;\n            }\n            @else {\n                @warn 'Line-height for #{$font-size} must be unitless or in pixel values';\n            }\n        }\n\n        line-height: $line-height;\n\n    }\n    @else if $line-height == 'inherit' or $line-height == 'normal' {\n        line-height: $line-height;\n    }\n}\n\n/// @alias font-size\n@mixin type-font-size(\n    $font-size,\n    $line-height: 'auto',\n    $important: false,\n    $base-font: $base-font-size\n    ) {\n    @include font-size($font-size, $line-height, $important, $base-font);\n}\n\n/// @alias font-size\n@mixin fs(\n    $font-size,\n    $line-height: 'auto',\n    $important: false,\n    $base-font: $base-font-size\n    ) {\n    @include font-size($font-size, $line-height, $important, $base-font);\n}\n\n\n/// Generates a pixel value that is an exponent of a ratio (`$ratio` defaults to `$scale-ratio` value)\n/// @param {number} $scale\n@function modular-scale($scale, $ratio: $scale-ratio) {\n\n    $modular-scale: $ratio;\n\n    @if $ratio == $scale-ratio {\n        $modular-scale: $_type-modular-scale;\n    }\n\n    $font-size: strip-units($base-font-size);\n    $pow: cache(pow, $modular-scale, $scale);\n    @return $pow * ($font-size) * 1px;\n}\n\n\n/// Aligns a font-size to a baseline (`$baseline`). Returns a unitless value relative to the font-size (equivilent to ems). An optional multiple can be used to make a variation on the given baseline (using decimals will divide the the baseline).\n/// @param {number} $font-size - Font size to calculate against.\n/// @param {number} $baseline [$base-line-height] - Pixel value of the base line-height.\n/// @param {number} $multiple [1]\n/// @param {boolean} $floor [false] - Calculate the lowest possible number? Rarely useful.\n/// @returns {number} -\n@function baseline(\n    $font-size,\n    $baseline: $base-line-height,\n    $multiple: 1,\n    $floor: false\n    ) {\n    @if ($floor) {\n        @return floor($font-size / ($baseline * $multiple)) * ($baseline * $multiple) / $font-size;\n    }\n    @return ceil($font-size / ($baseline * $multiple)) * ($baseline * $multiple) / $font-size;\n}\n\n\n/// Calculates a where a number(`$x`) sits along a parabolic arc (curve). Change the curve's severity by changing its `$accel`.\n/// An `$accel` of 1 is a smooth arc.\n/// Uses this formula: ` y = (sqrt((x^1)+x) - sqrt(x^1)) / .4142135623730951 `\n///  ( [Visual](https://www.desmos.com/calculator/qswvc6q9kt) )\n///\n/// @group utils\n/// @param {number} $x - Find the equivilent number on the curve.\n/// @param {number} $accel [1] - Accepts any number between -2 and 2.35. A negative will invert the curve. 1 is a smooth curve.\n@function _baseline-curve($x, $accel: 1) {\n    //Cache this exponent since it uses a decimal and requires a lot of computation\n    $x2: cache(pow, $x, $accel);\n    $x3: $x2 + $x;\n    $x3-root: sqrt($x3);\n    $x2-root: sqrt($x2);\n    $const: $SQRT2 - 1; // value used by logarithm (.4142135623730951)\n\n    $curve: ($x3-root - $x2-root) / $const;\n\n    @return min(1, $curve);\n}\n\n$__font-index: ();\n$__font-warn: false;\n\n/// **TL;DR:** Automatically calculate the baseline of any particular font-size.\n///\n/// Creates unitless line-heights that align to the baseline grid with consideration to the aesthetics of a given font size. Essentially makes sure larger font-sizes have smaller line-heights, while smaller font-sizes have larger ones.\n/// Uses constraints based on upper and lower limits of pleasing line-heights, and finds where a given font-size should sit within those constraints. `$font-looseness` increases the upper constraints, allowing for taller line heights on larger font sizes.\n/// Depends on `baseline()` for calculation and `_baseline-curve()` to determine the deviance from the upper and lower constraints.\n/// @group core\n/// @param {number} $font-size [$base-font-size] - font-size in need of a baseline\n/// @param {number} $baseline-slack [$font-looseness] - Percentage.\n/// @returns {number}\n///\n@function baseline-calc(\n    $font-size: $base-font-size,\n    $baseline-slack: $font-looseness\n){\n    $smallest-size: if(\n        length($type-small-size) > 1,\n        nth($type-small-size, 1),\n            $type-small-size\n        );\n    $smallest-size: 10px;\n    $largest-size: if(\n        length($type-h1-size) > 1,\n        nth($type-h1-size, 1),\n            $type-h1-size\n        );\n    $i: 0;\n\n    //Make sure baseline-slack is a percentage\n    @if unit($baseline-slack) != \"%\" {\n        @warn \"Baseline-slack/font-looseness should be a percentage.\";\n        $basline-slack: strip-units($baseline-slack);\n        $baseline-slack: percentage($baseline-slack);\n    }\n\n    $slack: ($baseline-slack / 100%);\n\n    //Base Highest and lowest line-height multiples\n    $base-lh-upper-bound: 1.9;\n    $base-lh-lower-bound: 1.1;\n\n    //smallest font-size's highest/lowest line-height multiple\n    // Use global settings to help determine, where possible\n    $sm-lh-upper-bound: 2 + ($slack / 2);\n    $sm-lh-lower-bound: 1 + ($slack / 2);\n\n    //Largest font-size's highest/lowest line-height multiple\n    // Use baseline slack to determine constraints\n    $lg-lh-upper-bound: 1.02 + ($slack / 2);\n    $lg-lh-lower-bound: 0.91 + ($slack / 2);\n\n    //Smallest/Largest font sizes to calculate against\n    $sm-font-size: 9 + ($slack * 10);\n    $lg-font-size: 95 + ($slack * 50);\n\n    //_baseline-curve progress percentages\n    $percent-along-current: 0;\n    $percent-along-upper: 0;\n    $percent-along-lower: 0;\n\n    //Non-adjusted placement of the font-size between largest and smallest font sizes\n    $true-percent-along: strip-units(\n        ($font-size - $sm-font-size) / ($lg-font-size - $sm-font-size)\n    );\n\n    //Make sure handle fonts larger than our initial assumptions\n    @if $font-size <= $sm-font-size {\n        //Set progress to 0%\n        $base-lh-lower-bound: 1;\n        $base-lh-upper-bound: $sm-lh-upper-bound;\n\n        @if $font-size > $smallest-size {\n            $true-percent-along: ($slack / 10);\n        }@else {\n            $true-percent-along: .001;\n        }\n    }\n    @else if $font-size >= $lg-font-size {\n        //Set progress to 100%\n        $percent-along-current: 1;\n        $percent-along-lower: 1;\n        $percent-along-upper: 1;\n        $base-lh-lower-bound: $lg-lh-lower-bound;\n        $base-lh-upper-bound: $lg-lh-upper-bound;\n        $lg-font-size: $font-size + ($slack * 50);\n    }\n    // Determine where we're at on the curve\n    @else {\n        //Standard curve\n        $percent-along-current:cache(_baseline-curve, $true-percent-along, 1);\n        //Upper boundary curve\n        $percent-along-upper:  cache(_baseline-curve, $true-percent-along, 1.3);\n        //Lower boundary curve\n        $percent-along-lower:  cache(_baseline-curve, $true-percent-along, 1.9);\n    }\n\n    $upper-boundary: ($sm-lh-upper-bound - $lg-lh-upper-bound);\n    $lower-boundary: ($sm-lh-lower-bound - $lg-lh-lower-bound);\n\n    //Adjust percentages to line-height values\n    $base-lh-upper-bound: $sm-lh-upper-bound - ($percent-along-upper * $upper-boundary);\n    $base-lh-lower-bound: $sm-lh-lower-bound - ($percent-along-lower * $lower-boundary);\n\n    @if $debug-fonts {\n        @if index($__font-index, $font-size) == null {\n            @debug \"font-size: #{$font-size}\";\n            @debug \"%: #{percentage($true-percent-along)}\";\n            @debug \"%u: #{percentage($percent-along-upper)}, \" +\n                \"%l: #{percentage($percent-along-lower)}\";\n            @debug \"ub: #{$base-lh-upper-bound}\" +\n                \" (#{$font-size * $base-lh-upper-bound}),\" +\n                \" lb: #{$base-lh-lower-bound} (#{$font-size * $base-lh-lower-bound})\";\n            @debug \"sm-lh-ub: #{$sm-lh-upper-bound}, sm-lh-lb: #{$sm-lh-lower-bound}\";\n            @debug \"lg-lh-ub: #{$lg-lh-upper-bound}, lg-lh-lb: #{$lg-lh-lower-bound}\";\n            @debug \"slack: #{$slack}\";\n        }\n    }\n\n    //If the lower bound is somehow higher than the upper bound,\n    // let's just reset the bounds to simple values\n    @if $base-lh-lower-bound > $base-lh-upper-bound {\n        $base-lh-lower-bound: 1;\n        $base-lh-upper-bound: 2;\n    }\n\n    //First attempt\n    $baseline: $base-line-height;\n    $line-height: baseline($font-size, $baseline);\n\n    //Second attempt\n    @if ($line-height < $base-lh-lower-bound)\n        or ($line-height > $base-lh-upper-bound) {\n\n        //Attempt using a negative line-height for very large sizes\n        @if ($true-percent-along > .9) {\n            $line-height: baseline($font-size, $baseline, .5, $floor: true);\n        }\n        @else if $font-size < $base-font-size {\n            $line-height: baseline($font-size, $baseline, 1.5);\n        }\n        @else {\n            $line-height: baseline($font-size, $baseline, .5);\n        }\n    }\n\n    //Set up while loop\n    $quit: false;\n\n    //Test baselines until we find a match\n    @while(($line-height < $base-lh-lower-bound or $line-height > $base-lh-upper-bound)\n        and not $quit //allows for infinite loop bailout\n    ){\n        $i: $i + .5;\n        //Try baselines in half increments\n        $line-height: baseline($font-size, $baseline, $i);\n\n        //Bail-out function to prevent infinite loops\n        // Set quit to true so we can escape this hellish loop\n        @if $i > (($font-size / 1px) / 2)  {\n            @if (not $__font-warn) and ($debug-fonts) {\n                @warn \"\n                Your font-looseness might be too high or low,\" +\n                    \" watch for weird baselines and slow compile times.\n                FS: #{$font-size} / LH: #{$line-height}\n                Tolerances: #{$base-lh-upper-bound} / #{$base-lh-lower-bound}\n                loops: #{$i * 2}\";\n                $__font-warn: true !global; //Prevent seeing this warning multiple times\n            }\n\n            //default to normal calculated line-height\n            $line-height: baseline($font-size, $baseline);\n            $quit: true;\n        }\n    }\n\n    @if $debug-fonts {\n        @if index($__font-index, $font-size) == null {\n            $__font-index: append($__font-index, $font-size) !global;\n            @debug \"lh: #{$line-height * $font-size} / #{$line-height} \";\n            @debug \"loops: #{$i * 2}\";\n            @debug \"-----\";\n        }\n    }\n\n    @return $line-height;\n}\n\n\n/// Style any number of headings all at once.\n/// @param {Number} $from [1] - Starting heading number\n/// @param {Number} $to [6] - Ending heading number\n/// @example\n///    @include headings(1, 3){color:#BADA55;}\n///    // outputs:\n///    h1, h2, h3 {color:#BADA55;}\n@mixin headings($from: 1, $to: 6, $class-type: null) {\n    //Used for multiple calls to this mixin.\n    // Ensures no double extends.\n    $_headings-use: $_headings-use + 1 !global;\n\n    %base-headings#{$_headings-use} {\n        @content;\n    }\n\n    @if $from >= 1 and $to <= 6 {\n\n        @for $i from $from through $to {\n            $selector: '#{$class-type}h#{$i}';\n            #{$selector} {\n                @extend %base-headings#{$_headings-use};\n            }\n        }\n    }\n    @else {\n        @warn 'You need to supply numbers between 1 and 6' +\n            ' for headings mixin to work';\n    }\n}\n\n\n/// Checks if a type-size is declared as larger than 1, then either extracts the second value or calculates a line-height.\n/// @param {List|Number} $type-size\n/// @returns {number} The line-height\n///\n@function _extract-line-height($type-size) {\n    $line-height: if(length($type-size) > 1,\n        nth($type-size, 2),\n        baseline-calc(nth($type-size, 1))\n    );\n\n    @if not unitless($line-height) {\n        $line-height: ($line-height / nth($type-size, 1));\n    }\n\n    @return $line-height;\n}\n","/*\n * Generate font-face declarations based on web-font config\n */\n@if $use-web-fonts {\n    @include web-fonts($web-fonts);\n}\n\n%primary_font_family {\n\tfont-family: $primary-font-stack;\n}\n%secondary_font_family {\n\tfont-family: $secondary-font-stack;\n}\n","// 1. Enable line-wrapping in IE8+.\n// 2. Enable line-wrapping in old versions of some other browsers.\nlegend {\n\tdisplay: table; // [1]\n\twhite-space: normal; // [2]\n}\n\nbutton,\ninput {\n    line-height: $type-p-lh;\n    border: 0;\n}\n\nbutton,\ninput,\nselect,\ntextarea {\n\tbackground-color: #fff;\n}\n\ndialog {\n    background-color: #fff;\n    @include type-space(padding, 1);\n}\n\n//Allow styling of particularly annoying inputs\nselect\ninput[type=\"submit\"],\ninput[type=\"button\"],\ninput[type=\"image\"],\ninput[type=\"reset\"] {\n\tborder-radius: 0;\n\t-webkit-border-radius: 0; //Mobile Safari\n}\n\ntextarea {\n\toverflow: auto; // Edge 12+, Internet Explorer 11-\n\tresize: vertical;\n}\n","//-------------------------------\n//   $LISTS\n//-------------------------------\n\nul,\nol,\ndl,\nmenu {\n    @include type-space(margin, 0 0 1 1);\n}\n\nli > ul,\nli > ol {\n    margin-bottom: 0;\n}\n\nnav ol,\nnav ul {\n    margin-left: 0;\n}\n","//Base table styles\ntable {\n    width: 100%;\n    background-color: transparent;\n    border-collapse: collapse;\n    border-spacing: 0;\n    margin: 0;\n    @include type-space(margin-bottom, 1);\n}\n\nth,\ntd {\n\t@include type-space(padding, 1 0 .5);\n\ttext-align: left;\n\tvertical-align:top;\n\tborder: 0;\n\tborder-bottom: 1px;\n\tborder-top-width: 0px;\n\tborder-color: color(bg, dark);\n\tborder-style: solid;\n}\n\nth {\n\tfont-weight: bold;\n}\n\nthead th {\n\tvertical-align: bottom;\n\t@include type-space(padding, 1 0 0 );\n}\n","/// **Important: This must be called in order to use any of the tools.**\n/// ---\n/// Pulls together config variables and routes them into structures expected by the framework, then makes them global.\n/// For instance, the `$type-h1-size` variable is accepted as a list, but will be available as a single size, while making `$type-h1-lh` available.\n/// @group core\n///\n@mixin init {\n\n    @include _set-global-typography-variables();\n\n    //Expand color map if necessary\n    $base-colors:           _verify-color-map-depth($base-colors) !global;\n\n    /// Abstraction of the base spacing unit used in any mixin or function that defines spacing units.\n    /// @type Number\n    /// @group core\n    $type-base-unit:           $base-line-height !global;\n\n    @if $base-font-size >= $type-base-unit {\n        $type-base-unit: baseline-calc($base-font-size) * $base-font-size !global;\n    }\n\n    /// Ratio used to calculate the difference between font sizes and spacing units.\n    /// @type Number\n    /// @group core\n    $type-base-ratio:          ($type-base-unit / $base-font-size) !global;\n\n    /// Used for defining automatic headings functions.\n    /// @type List | Number\n    $type-headings:            6, 5, 4, 3, 2, 1 !global;\n\n    /// Spacing variable for simple inclusion.\n    $type-space:               2 * $type-base-ratio !global;\n\n    /// Used for easier math\n    /// @type Number\n    $_stripped-base-font-size:  strip-units($base-font-size) !global;\n\n    /// Abstracts the `$$scale-ratio` and makes sure it's a positive number.\n    /// @type Number\n    $_type-modular-scale:       $scale-ratio !global;\n\n    //Checking for floats in $scale-ratio\n    @if length($scale-ratio) == 2 {\n        // Making sure we don't have a ratio below 1.\n        @if nth($scale-ratio,1) < nth($scale-ratio,2) {\n            $_type-modular-scale: nth($scale-ratio, 2)/nth($scale-ratio, 1) !global;\n        } @else {\n            $_type-modular-scale: nth($scale-ratio, 1)/nth($scale-ratio, 2) !global;\n        }\n    }\n\n    /// Silent class registry.\n    /// Holds all auto-generated silent classes for debugging.\n    $_silent-class-registry: () !global;\n\n    /// Stores all the names defined in `$$breakpoints` for use in abstract framework components so that if names are chagned, boilerplate media queries won't fail.\n    $_all-breakpoints: () !global;\n\n    //Grab all breakpoint names\n    @each $breakpoint in $breakpoints {\n        $temp-bp: nth($breakpoint, 1) !global;\n\n        @if $temp-bp != ' ' {\n            $_all-breakpoints: append($_all-breakpoints, $temp-bp, comma) !global;\n        }\n    }\n\n    /// Grabs the first `$_all-breakpoints` name, allowing for abstraction.\n    $breakpoint-smallest: nth($_all-breakpoints, 1) !global;\n\n    /// Grabs the last `$_all-breakpoints` name, allowing for abstraction.\n    $breakpoint-largest:  nth($_all-breakpoints, length($_all-breakpoints)) !global;\n\n    //------------------------------------\n    //\t\t$SANITIZE\n    //------------------------------------\n\n    $root-background-color: color('bg') !global;\n    $root-color: color('type') !global;\n    $root-font-family: $primary-font-stack !global;\n    $root-font-size: percentage($base-font-size/16px) !global;\n    $root-line-height: $type-base-ratio !global;\n    $root-text-rendering: optimizeLegibility !global;\n    $root-cursor: inherit !global;\n\n    $anchor-text-decoration: none !global;\n    $background-repeat: no-repeat !global;\n    $form-element-min-height: $base-line-height !global;\n    $textarea-resize: vertical !global;\n    $media-element-vertical-align: middle !global;\n    $monospace-font-family: $monospace-font-stack !global;\n    $nav-list-style: none !global;\n    $selection-background-color: mix(color('links'), color('bg'), 80%) !global;\n    $selection-color: black-or-white($selection-background-color) !global;\n    $selection-text-shadow: none !global;\n    $table-border-collapse: collapse !global;\n    $table-border-spacing: 0 !global;\n}\n\n/// Makes sure color map contains the necessary depth to be used by `colors` function\n/// @param $color-map\n///\n@function _verify-color-map-depth($color-map) {\n    $is-deep-enough: true;\n\n    @if map-depth($color-map) {\n        $is-deep-enough: false;\n    }\n    @else {\n        $i: 1;\n        $map-length: length($color-map);\n\n        @while ($i <= $map-length and $is-deep-enough) {\n            $name: nth(nth($color-map, $i), 1);\n\n            @if (type-of(map-get($color-map, $name) != 'map')) {\n                $is-deep-enough: false;\n            }\n\n            $i: $i + 1;\n        }\n    }\n\n    @if ($is-deep-enough == false) {\n        $color-map: generate-color-variations($color-map);\n    }\n\n    @return $color-map;\n}\n\n\n/// Pulls typography variables apart and puts them into easier to use pieces.\n/// For instance `$type-h1-size` starts as a list and becomes a single value, while adding `$type-h1-lh` (line-height) to the global scope for use.\n@mixin _set-global-typography-variables() {\n    @if $auto-scale-type {\n        $type-h1-size:          modular-scale(7) !global;\n        $type-h2-size:          modular-scale(5) !global;\n        $type-h3-size:          modular-scale(4) !global;\n        $type-h4-size:          modular-scale(3) !global;\n        $type-h5-size:          modular-scale(2) !global;\n        $type-h6-size:\t\t\tmodular-scale(1) !global;\n        $type-p-size:           modular-scale(0) !global;\n        $type-small-size:\t\tmodular-scale(-1) !global;\n    }\n\n    //Check for existence of line-height override, and store it\n\n    /// @group core\n    $h1-fs: nth($type-h1-size, 1) !global;\n    /// @group core\n    $h1-lh: _extract-line-height($type-h1-size) !global;\n    /// @group core\n    $h2-fs: nth($type-h2-size, 1) !global;\n    /// @group core\n    $h2-lh: _extract-line-height($type-h2-size) !global;\n    /// @group core\n    $h3-fs: nth($type-h3-size, 1) !global;\n    /// @group core\n    $h3-lh: _extract-line-height($type-h3-size)!global;\n    /// @group core\n    $h4-fs: nth($type-h4-size, 1) !global;\n    /// @group core\n    $h4-lh: _extract-line-height($type-h4-size)!global;\n    /// @group core\n    $h5-fs: nth($type-h5-size, 1) !global;\n    /// @group core\n    $h5-lh: _extract-line-height($type-h5-size)!global;\n    /// @type Number (pixel)\n    $h6-fs: nth($type-h6-size, 1) !global;\n    /// @group core\n    $h6-lh: _extract-line-height($type-h6-size)!global;\n    /// @group core\n    $p-fs: nth($type-p-size, 1) !global;\n    /// @group core\n    $p-lh: _extract-line-height($type-p-size) !global;\n    /// @group core\n    $small-fs: nth($type-small-size, 1) !global;\n    /// @group core\n    $small-lh: _extract-line-height($type-small-size) !global;\n\n    /// @alias h1-lh\n    $type-h1-lh: $h1-lh !global;\n    $type-h1-size: $h1-fs !global;\n    /// @alias h2-lh\n    $type-h2-lh: $h2-lh !global;\n    $type-h2-size: $h2-fs !global;\n    /// @alias h3-lh\n    $type-h3-lh: $h3-lh !global;\n    $type-h3-size: $h3-fs !global;\n    /// @alias h4-lh\n    $type-h4-lh: $h4-lh !global;\n    $type-h4-size: $h4-fs !global;\n    /// @alias h5-lh\n    $type-h5-lh: $h5-lh !global;\n    $type-h5-size: $h5-fs !global;\n    /// @alias h6-lh\n    $type-h6-lh: $h6-lh !global;\n    $type-h6-size: $h6-fs !global;\n    /// @alias p-lh\n    $type-p-lh: $p-lh !global;\n    $type-p-size: $p-fs !global;\n    /// @alias small-lh\n    $type-small-lh: $small-lh !global;\n    $type-small-size: $small-fs !global;\n}\n\n/// @alias init\n/// @group core\n///\n@mixin globalize-config {\n    @include init;\n}\n","/// Font size all other values will use for calculation. Will be converted to `rems`.\n/// @group config\n$base-font-size:        16px !default;\n/// Line-height for base font-size. Essentially determines the baseline grid for alignment.\n/// @see {function} type-space\n/// @group config\n$base-line-height:      24px !default;\n\n/// A rough estimate of how loose line-heights should be calculated against their font-sizes (when automatically generated).\n/// @group config\n$font-looseness: 15% !default;\n\n/// @group config\n/// @type {List | Number} - Should be pixel values. A single value is the font-size, while a secondary (optional) value is the line-height.\n$type-h1-size:          modular-scale(7) !default;\n/// @group config\n/// @type {List | Number} - Should be pixel values. A single value is the font-size, while a secondary (optional) value is the line-height.\n$type-h2-size:          modular-scale(5) !default;\n/// @group config\n/// @type {List | Number} - Should be pixel values. A single value is the font-size, while a secondary (optional) value is the line-height.\n$type-h3-size:          modular-scale(4) !default;\n/// @group config\n/// @type {List | Number} - Should be pixel values. A single value is the font-size, while a secondary (optional) value is the line-height.\n$type-h4-size:          modular-scale(3) !default;\n/// @group config\n/// @type {List | Number} - Should be pixel values. A single value is the font-size, while a secondary (optional) value is the line-height.\n$type-h5-size:          modular-scale(2) !default;\n/// @group config\n/// @type {List | Number} - Should be pixel values. A single value is the font-size, while a secondary (optional) value is the line-height.\n$type-h6-size:\t\t\tmodular-scale(1) !default;\n/// @group config\n/// @type {List | Number} - Should be pixel values. A single value is the font-size, while a secondary (optional) value is the line-height.\n$type-p-size:           ($base-font-size, $base-line-height) !default;\n/// @group config\n/// @type {List | Number} - Should be pixel values. A single value is the font-size, while a secondary (optional) value is the line-height.\n$type-small-size:\t\tmodular-scale(-1) !default;\n\n/// @group config\n/// @type List | Number - Should be pixel values. A single value is the font-size, while a secondary (optional) value is the line-height.\n$auto-scale-type:       false !default;\n\n/// Modular scale ratio\n/// @group config\n/// @type number\n$scale-ratio: 1.125 !default;\n\n/// Index of all colors used in the project. This is the one place colors should be used from. Accessing them should be done via the colors function.\n/// @see {function} colors\n/// @group config\n$base-colors: (\n    'type': (\n        'base': #0a1c2b //Required\n    ),\n    'links':    #0d497b, //Required\n\n    'bg':       #f6f8fb, //Required\n) !default;\n\n/// Font-stack for using the user's operating system's native font.\n/// @group core\n$system-font-stack: -apple-system, BlinkMacSystemFont, 'Segoe UI', system-ui, Roboto, 'Helvetica Neue', sans-serif;\n\n/// Reference for the project's main font-stack.\n/// @group config\n$primary-font-stack: $system-font-stack !default;\n\n/// Reference for the project's monospaced font-stack.\n/// @group config\n$monospace-font-stack: 'SFMono-Regular', 'SF Mono', 'Ubuntu Mono', Consolas, 'DejaVu Sans Mono', Menlo, monospace !default;\n\n/// Determines whether `rems()` conversion includes a pixel-value fallback for older browsers like IE8.\n/// @group config\n$rem-px-fallback: false !default;\n\n/// Description of weights, styles and formats for the project's web fonts. The root key value determines the name, while each inner key determines the weights, styles, and formats.\n/// @type map\n/// @prop font-name - name of the font family\n/// @prop {list|number} font-name.weights - font-weights to include\n/// @prop {list|number} font-name.italics - include italics for weights\n/// @prop {list|string} font-name.formats - file formats to include\n/// @group config\n$web-fonts: (\n    'system': (\n        'weights': (400, 700),\n        'italics': (400, 700),\n        'formats': ('woff')\n    )\n) !default;\n\n/// Relative path to fonts from CSS file\n/// @type String\n/// @group config\n$font-file-location: '' !default;\n\n$_type-modular-scale: $scale-ratio;\n$_headings-use: 0;\n",".wrap {\n\tmargin: 0 auto;\n\tmax-width: $max-site-width;\n\tdisplay: block !important;\n    float: none;\n\t@include type-space(padding, 1 0);\n    width: 95%;\n    @include clearfix;\n\n    @include mq(smallish) {\n        width: 93%;\n    }\n    @include mq(bigs) {\n        width: 90%;\n    }\n}\n\n.wrap--content {\n    @include rems(max-width, $max-content-width);\n}\n\n.wrap--wide-content {\n    @include rems(max-width, $max-wide-content-width);\n}\n","@mixin clearfix {\n    *zoom: 1;\n\n    &:before,\n    &:after {\n        display: table;\n        content: \" \";\n    }\n    &:after {\n        clear: both;\n        height: 0;\n        width: 0;\n    }\n}\n","//------------------------------------\n//\t$MEDIA QUERIES\n//------------------------------------\n\n@import 'variables';\n\n/// Enclose a block of code with a media query as named in `$breakpoints`. To create more consolodated code, most (if not all) media queries should be called through this mixin. Multiple media-queries can be defined, separated by a comma. This will place your content into multiple separate media-queries at once (useful if you need the same css at different breakpoints).\n/// **Alternative Uses:**\n/// * Passing multiple media queries separated by an `'and'` (quoted) to combine them, compiles to something like `@media screen and (min-width: 500px) and (max-width: 900px){}`.\n/// * Passing a value like `min-width 1200px` or `max-height 300px` allows for arbitrary breakpoints.\n/// * Passing `max 1200px 'and' smalls` will create a combined media-query with a predefined one from `$$breakpoints`.\n/// * Passing `height smalls` will replace `width` with `height` within the `smalls` breakpoint. Similarly, using `min smalls` would replace 'max' with 'min'.\n/// @group core\n/// @param {List} $mq... - Can be a reference to a `$breakpoints` key, a pixel value, or a media value.\n@mixin media-query($mq...) {\n\n    //Stored for switching on and off\n    $rem-px-default: $rem-px-fallback;\n\n    //format arglist into maps with key-value pairs\n    //Should return (1:(operator:...,value:...,'device':...), 2:(...));\n    $arguments-map: _mq-arglist-to-map($mq);\n\n    //Use a string storage for multiple media-queries\n    $media-query-string: '';\n\n    //Turn off px-fallback inside media-queries\n    // since 99% of mobile browsers support rems\n    $rem-px-fallback: false !global;\n\n    @each $mq-id, $mq-group in $arguments-map {\n\n        //Extract each value from the arguments map\n        $operator: map-get($mq-group, 'operator');\n\n        $value: map-get($mq-group, 'value');\n\n        $device: map-get($mq-group, 'device');\n\n        $device: if($device, $device, 'screen'); //Default to screen if no device specified\n\n        $logical-operator: unquote('#{$operator}#{$value}');\n\n        //Multiple media-queries in the map indicates an 'or' media-query\n        // So let's concatenate those media-queries together\n        @if length($arguments-map) > 1 {\n\n            $media-query-string: $media-query-string + '#{$device} and #{$logical-operator}';\n\n            //Use the IDs assigned to each media-query as a way to compare length\n            // (Libsass has an issue with indexes in maps)\n            @if $mq-id != length($arguments-map) {\n\n                //Add a comma to the end of all but the last query\n                $media-query-string: $media-query-string + ', ';\n\n            }@else {\n\n                @media only #{$media-query-string}  {\n                    @content;\n                }\n\n            }\n\n        }\n        @else {\n\n            @if $operator { //Only output media-queries with operators\n\n                @media only #{$device} and #{$logical-operator} {\n                    @content;\n                }\n\n            }@else {\n                @warn \"the media-query mixin requires a logical-operator\" +\n                \" and a value (min-width 2px). You will have to write\" +\n                \" your own media query if you'd like something else\";\n            }\n\n        }\n\n    }\n\n    //Change back to user setting\n    $rem-px-fallback: $rem-px-default !global;\n\n}\n\n//Aliases: Same as above, but shorter\n/// @alias media-query\n@mixin media        ($mq...)\t{ @include media-query($mq...) { @content; } }\n/// @alias media-query\n@mixin mq           ($mq...)    { @include media-query($mq...) { @content; } }\n/// @alias media-query\n@mixin breakpoint   ($mq...)\t{ @include media-query($mq...) { @content; } }\n/// @alias media-query\n@mixin bp           ($mq...)\t{ @include media-query($mq...) { @content; } }\n\n//-------------------------\n// Private media-query functions\n//-------------------------\n\n//Check for proper media-query arguments\n// Converting them to proper CSS values\n@function _mq-arglist-to-map($arguments-list) {\n    $stored: ();\n    $arg-map: ();\n    $structure: ();\n\n    //For loop used because each loops produce different results in Ruby and LibSass\n    @for $i from 1 through length($arguments-list) {\n        $argument: nth($arguments-list, $i);\n\n        //Check all values in the argument for valid media-query arguments\n        $structure: map-merge($structure, _mq-parse-query-args($argument));\n\n        //Since value should be last, we can assume the grouping is done\n        @if (map-get($structure, 'value')) {\n            //Wrap arguments into an array-object-like structure (1:(key:value, key:value))\n            $key: $i * 1; //Fixes a libSass error.\n            $arg-map: map-merge($arg-map, ($key: ($structure)));\n            //Empty the map so we can rewrite it\n            $structure: ();\n        }\n    }\n\n    @return $arg-map;\n}\n\n// Test each argument for its type and match it up to a proper map key\n@function _mq-parse-query-args($argument, $call: 0, $check: null){\n    $query-map: ();\n    //Check global $breakpoints config variable for matches\n    @if\t(map-get($breakpoints, $argument)){\n        $query-map: map-merge($query-map, ('operator': map-get($breakpoints, $argument)));\n        //Also set value to nothing since we already have it\n        $query-map: map-merge($query-map, ('value': ''));\n    }\n    //Check operators for matches\n    @elseif (index($media-query-operators, $argument)) {\n        //Format operator as the beginning of a parenthesis\n        $query-map: map-merge($query-map, ('operator': \"(#{$argument}\"));\n    }\n    //If its a number, assume its a value\n    @elseif(type-of($argument) == number){\n        //Format value with a colon and closing parenthesis\n        $query-map: map-merge($query-map, ('value': \":#{$argument})\"));\n    }\n    //Check devices for matches\n    @elseif(index($media-query-devices, $argument)) {\n        $query-map: map-merge($query-map, ('device': $argument));\n    }\n    @else {\n        //if not a device, $breakpoint, value, or operator, it's probably a nested list\n        //We'll need to loop through that list and re-call this function until we get to the bottom\n        @for $i from 1 through length($argument) {\n            $arg: nth($argument, $i);\n            //Set a reasonable number so we don't loop forever\n            //Only set if nothing has been set before\n            $check: if($check, $check, length($argument));\n            //If we've looped through this more times than the length of the argument,\n            //we can assume an error and return nothing.\n            @if $call > ($check + 1) {\n                @warn \"#{$arg} is not valid argument for media-query mixin\";\n                @return ();\n            }\n            //Add to the loop count\n            $call: $call + 1;\n            //Re-run this function through all arguments\n            $query-map: map-merge($query-map, _mq-parse-query-args($arg, $call, $check));\n        }\n    }\n\n    @return $query-map;\n}\n","//------------------------------------\n//      $GRID SYSTEM\n//------------------------------------\n\n//\n// _Note: `[% || .]` denotes a class that is either silent(`%`) or standard CSS(`.`). Based on the `$$grid-silent-classes` setting._\n//\n// * `%grid_reset`\n//  Useful for resetting the grid's effects without making full grid items.\n//\n// * `[% || .]grid`\n//  Wrapper class for grid widths. Puts a negative left margin of one unit. When not using floats, adds appropriate letter-spacing (for inline-block-based grid).\n//\n// * `[% || .]grid_item`\n//  Sets up a grid column. Uses column padding inherited from parent `%/.grid`.\n//\n// * `[% || .]grid_reverse`\n//  Makes grid columns start from the right.\n//\n// * `[% || .]grid_right`\n//  Makes all grid columns align to the right.\n//\n// * `[% || .]grid_center`\n//  Makes all grid columns align to the center.\n//\n// * `[% || .]grid_middle`\n//  Makes all grid columns vertical align to the middle.\n//\n// * `[% || .]grid_bottom`\n//  Makes all grid columns vertical align to the bottom.\n//\n// * `[% || .]grid_full`\n//  Eliminates padding between grid columns.\n//\n// * `[% || .]grid_narrow`\n//  Reduces the padding between grid columns.\n//\n// * `[% || .]grid_wide`\n//  Increases the padding between grid columns.\n//\n//\n\n@import 'variables';\n@import 'widths';\n@import '../overrides/clearfix';\n\n/// Generates basic grid classes based on passed in options.\n/// @group grid\n/// @param {boolean} $silent  [$grid-silent-classes] - Make all classes silent?\n/// @param {number}  $gutter  [$grid-gutter] - Gutter size between grid items.\n/// @param {boolean} $flex    [$grid-flex] - Use flexbox?\n/// @param {boolean} $inline-block  [$grid-inline-block] - Use inline-block?\n/// @param {boolean} $floats  [$grid-floats] - Use floats?\n/// @param {boolean} $bem     [$grid-bem-naming] - Use BEM naming? `false` will result in snake-case names.\n@mixin grid-setup(\n    $silent: $grid-silent-classes,\n    $gutter: $grid-gutter,\n    $flex: $grid-flex,\n    $inline-block: $grid-inline-block,\n    $floats: $grid-floats,\n    $bem: $grid-bem-naming\n    ) {\n\n    // Allow for BEM naming instead of snake-case\n    $child: '_';\n    $mod: '_';\n\n    @if $bem {\n        $child: '__';\n        $mod: '--';\n    }\n\n    $class-type: if($silent, \"%\", \".\");\n\n    %grid_reset,\n    %grid--reset {\n        letter-spacing: normal;\n        word-spacing: normal;\n    }\n\n    %grid_clearfix,\n    %grid--clearfix {\n        @include clearfix;\n    }\n\n    //*------------------------------------\n    //    $GRID SETUP\n    //*------------------------------------\n\n    #{$class-type}grid {\n        @include grid-row();\n    }\n\n    #{$class-type}grid#{$child}item {\n        @include grid-item(12, 12);\n    }\n\n    // Special class for grid items that need to behave like both grids and grid__items.\n    #{$class-type}grid#{$child}item#{$mod}reset,\n    #{$class-type}grid#{$mod}reset#{$child}item {\n        @include grid-row();\n        margin-left: 0;\n        width: 100%;\n        @include type-space(padding-left, 1, $unit: $gutter);\n    }\n\n    //\n    // Reversed grids allow you to structure your source in the opposite order to\n    // how your rendered layout will appear. Extends `.grid`.\n    //\n    #{$class-type}grid#{$mod}reverse {\n        @if $floats {\n            @extend %grid--clearfix;\n\n            & > #{$class-type}grid#{$child}item{\n                float: right;\n            }\n        }\n        @if $inline-block or\n            $flex\n        {\n            direction: rtl;\n            text-align: left;\n\n            & > #{$class-type}grid#{$child}item{\n                direction: ltr;\n                text-align: left;\n            }\n        }\n    }\n\n\n    //\n    // Align the entire grid to the right. Extends `.grid`.\n    //\n    #{$class-type}grid#{$mod}right {\n        @if $inline-block {\n            text-align: right;\n\n            & > #{$class-type}grid#{$child}item {\n                text-align: left;\n            }\n        }\n        @if $flex {\n            justify-content: flex-end;\n        }\n    }\n    //\n    // Centered grids align grid items centrally without needing to use push or pull\n    // classes. Extends `.grid`.\n    //\n    #{$class-type}grid#{$mod}center{\n\n        @if $flex {\n            justify-content: center;\n        }\n\n        @if $inline-block {\n            text-align: center;\n\n            & > #{$class-type}grid#{$child}item {\n                text-align: left;\n            }\n        }\n    }\n    //\n    //\n    // Align grid cells vertically (`.grid--middle` or `.grid--bottom`). Extends\n    // `.grid`.\n    //\n    #{$class-type}grid#{$mod}middle {\n\n        & > #{$class-type}grid#{$child}item {\n            @if $flex {\n                align-self: center;\n            }\n            vertical-align: middle;\n        }\n    }\n\n    #{$class-type}grid#{$mod}bottom {\n\n        & > #{$class-type}grid#{$child}item {\n            @if $flex {\n                align-self: flex-end;\n            }\n            vertical-align: bottom;\n        }\n    }\n\n\n    // Gutterless grids have all the properties of regular grids, minus any spacing.\n    // Extends `.grid`.\n\n    #{$class-type}grid#{$mod}full{\n        margin-left: 0;\n\n        > #{$class-type}grid#{$child}item {\n            padding-left: 0;\n        }\n    }\n\n\n    //\n    // Create grids with narrower gutters. Extends `.grid`.\n    //\n    #{$class-type}grid#{$mod}narrow {\n        @include type-space(margin-left, -.5, $unit: $gutter);\n\n        > #{$class-type}grid#{$child}item {\n            @include type-space(padding-left, .5, $unit: $gutter);\n        }\n    }\n\n\n    //\n    // Create grids with wider gutters. Extends `.grid`.\n    //\n    #{$class-type}grid#{$mod}wide {\n        @include type-space(margin-left, -2, $unit: $gutter);\n\n        > #{$class-type}grid#{$child}item {\n            @include type-space(padding-left, 2, $unit: $gutter);\n        }\n    }\n\n    //\n    // Cause layout items to take up a non-explicit amount of width.\n    //\n    #{$class-type}grid#{$mod}auto {\n\n        @if $inline-block {\n            text-align: justify;\n\n            &:after {\n                content: \" \";\n                display: inline-block;\n                width: 100%;\n                height: 1px;\n            }\n        }\n\n        & > #{$class-type}grid#{$child}item,\n        #{$class-type}grid#{$child}item#{$mod}auto {\n            width: auto;\n\n            @if $inline-block {\n                text-align: left;\n            }\n\n            @if $flex {\n                flex-grow: 1;\n                flex-basis: auto;\n            }\n        }\n    }\n}\n\n/// Creates a grid container (row) based on your grid configuration.\n/// @group grid\n@mixin grid-row($gutter: $grid-gutter, $letter-spacing: $grid-letter-space-fix) {\n    // 1. Allow the grid system to be used on lists.\n    // 2. Remove any margins and paddings that might affect the grid system.\n    // 3. Apply a negative `margin-left` to negate the columns’ gutters.\n\n    list-style: none;                // [1]\n    margin: 0;                       // [2]\n    padding: 0;                      // [2]\n    @include type-space(margin-left, -1, $unit: $gutter);\n\n    @if $grid-inline-block and $letter-spacing {\n        letter-spacing: $letter-spacing;\n\n        // Opera hack\n        .opera:-o-prefocus,\n        & {\n            word-spacing: $letter-spacing;\n        }\n    }\n\n    @if $grid-flex {\n        display: flex;\n        flex-wrap: wrap;\n    }\n\n    @if $grid-floats {\n        @include clearfix;\n    }\n}\n\n\n/// Creates a grid item (column) based on your grid configuration set to a width based on the `$columns` passed in.\n/// @group grid\n/// @param {number} $columns [$grid-columns] - Number of columns the item should span.\n/// @param {number} $total-columns [$grid-columns] - Number of columns in total grid space. Only necessary to change if you are nesting grids within grids.\n/// @see grid-width\n@mixin grid-item(\n    $columns: $grid-columns,\n    $total-columns: $grid-columns,\n    $gutter: $grid-gutter,\n    $inline-block: $grid-inline-block,\n    $flex: $grid-flex,\n    $floats: $grid-floats,\n    $markup-fix: $grid-markup-fix,\n    $letter-spacing: $grid-letter-space-fix\n    ) {\n    // 1. Space columns apart.\n    // 2. Cause columns to stack side-by-side.\n    // 3. Align columns to the tops of each other.\n    // 4. Required to combine fluid widths and fixed gutters.\n\n    @include type-space(padding-left, 1, $unit: $gutter); // [1]\n    width: 100%;\n    min-height: 1px; // IE 11 fix\n\n    @if $inline-block {\n        display: inline-block;            // [2]\n        vertical-align: top;              // [3]\n\n        @if $markup-fix != true\n          and $letter-spacing {    // [5]\n            letter-spacing: normal;\n            word-spacing: normal;\n        }\n    }\n\n    @if $floats {\n        float: left;                     // [2]\n    }\n\n    @if $flex {\n        flex: 0 0 #{percentage($columns/$total-columns)};\n\n        //Forces flex grid to behave like inline-block\n        @if $inline-block != true {\n            flex-grow: 1;\n        }\n    }\n\n    @include grid-width($columns, $total-columns);\n}\n\n\n\n/// Creates responsive grid classes by running through all the grid-setup mixins. Uses the media-queries defined in the `$breakpoint-has-` variables to create media-query-scoped classes.\n/// @group grid\n/// @param {boolean} $silent [$grid-silent-classes] - generate silent classes?\n/// @param {boolean} $important [false] - make them `!important`?\n@mixin grid-init($silent: $grid-silent-classes, $important: false) {\n\n    @if ($grid-inline-block != true and $grid-floats != true and $grid-flex != true) {\n        @warn 'No grid type selected. Please make sure to set $grid-inline-block, -floats, or -flex to true.';\n    }\n\n    @include grid-classes($silent);\n\n    @include width-classes($silent, $important);\n\n    @if $grid-push {\n        @include push-classes($silent, $important);\n    }\n\n    @if $grid-pull {\n        @include pull-classes($silent, $important);\n    }\n}\n\n/// @alias grid-setup\n/// @group grid\n@mixin grid-classes($silent: $grid-silent-classes) {\n    @include grid-setup($silent);\n}\n\n/// Creates responsive width classes (using `width-setup` mixin). Loops across all breakpoints in `$breakpoint-has-widths`. Creates classes with `width` property values (`flex-basis` and `max-width` for flex-based grids) based on the grid.\n/// @group grid\n/// @param {boolean} $silent [$grid-silent-classes] - generate silent classes?\n/// @param {boolean} $important [false] - make them `!important`?\n@mixin width-classes($silent: $grid-silent-classes, $important: false) {\n    //Include flex-basis (and max-width) for flex-box grids\n\n    $column-props: if($grid-flex, (\"width\" \"max-width\" \"flex-basis\"), \"width\");\n\n    @include width-setup(\"\", $silent, $column-props, $important);\n\n    // Our responsive classes, if we have enabled them.\n    @each $name in $breakpoint-has-widths {\n        @include media-query($name) {\n            @include width-setup(\n                \"#{$name}#{$breakpoint-namespace-character}\",\n                $silent,\n                $column-props,\n                $important\n            );\n        }\n    }\n}\n\n/// Creates responsive grid-push classes. Loops across all breakpoints in breakpoints in `$breakpoint-has-push`. Creates classes with `left` property values based on the grid.\n/// @group grid\n/// @param {boolean} $silent [$grid-silent-classes] - generate silent classes?\n/// @param {boolean} $important [false] - make them `!important`?\n@mixin push-classes($silent: $grid-silent-classes, $important: false) {\n    @include width-setup($grid-push-namespace, $silent, \"left\", $important);\n\n    @each $name in $breakpoint-has-push {\n        @include media-query($name) {\n            @include width-setup(\n                \"#{$name}#{$breakpoint-namespace-character}#{$grid-push-namespace}\",\n                $silent,\n                \"left\",\n                $important\n            );\n        }\n    }\n}\n\n/// Creates responsive grid-pull classes. Loops across all breakpoints in `$breakpoint-has-pull`. Creates classes with `right` property values based on the grid.\n/// @group grid\n/// @param {boolean} $silent [$grid-silent-classes] - generate silent classes?\n/// @param {boolean} $important [false] - make them `!important`?\n@mixin pull-classes($silent: $grid-silent-classes, $important: false) {\n\n    @include width-setup($grid-pull-namespace, $silent, \"right\", $important);\n\n    @each $name in $breakpoint-has-pull {\n        @include media-query($name) {\n            @include width-setup(\n                \"#{$name}#{$breakpoint-namespace-character}#{$grid-pull-namespace}\",\n                $silent,\n                \"right\",\n                $important\n            );\n        }\n    }\n}\n","//------------------------------------\n//      $WIDTHS\n//------------------------------------\n\n/// Second words used to represent numbers in a fraction; Corresponds to grid interval names (whole, half, third, etc.).\n$_human-readable-numerators: one, two, three, four, five, six, seven, eight, nine, ten, eleven, twelve, thirteen, fourteen, fifteen, sixteen, seventeen, eighteen, nineteen, twenty;\n\n/// First words used to represent numbers in a fraction; Corresponds to grid interval names (one, two, three, etc.).\n$_human-readable-denominators: whole, half, third, quarter, fifth, sixth, seventh, eighth, ninth, tenth, eleventh, twelfth, thirteenth, fourteenth, fifteenth, sixteenth, seventeenth, eighteenth, nineteenth, twentieth, twentyfirst, twentysecond, twentythird, twentyfourth, twentyfifth, twentysixth, twentyseventh,twentyeigth, twentyninth;\n\n\n/// Creates a percentage based on the `$size / $context` while allowing for a contextual calculations (`($total/$context) * ($columns/$total)`).\n///\n/// For instance, if you have a grid of 12 columns and you've created an item that is 7 columns wide, its children would then be in a 7/12 context. In order to maintain the grid and calculate the width of a child that spans 4 columns, it would have to be 1 quarter of 7/12.\n/// @example\n///    .parent {\n///       width: grid-size(7, 12);\n///    }\n///    .child {\n///       width: grid-size(4, 7, 12);\n///    }\n/// @group grid\n/// @param {number} $columns - Column span\n/// @param {number} $context [$grid-columns] - Out of how many columns?\n/// @param {number} $total-columns [$grid-columns] -\n/// @returns {number} percentage\n///\n@function grid-size($columns, $context: $grid-columns, $total-columns: $grid-columns) {\n    //Correct for nested columns() calls\n    @if (unit($context) == \"%\") {\n        $context: ($context / ($context * 0 + 1) ) / 100;\n        $context: $total-columns * $context;\n    }\n    $context: ($total-columns / $context);\n    $columns: ($columns / $total-columns);\n\n    @return percentage($context * $columns);\n}\n\n/// @alias grid-size\n/// @group grid\n@function columns($columns, $context: $grid-columns, $total-columns: $grid-columns) {\n    @return grid-size($columns, $context, $total-columns);\n}\n\n\n/// Creates a width property with a percentage based on the `$columns / $total`. Also includes flex-based properties if `$grid-flex` is enabled.\n/// @group grid\n/// @param {number} $columns - Column span.\n/// @param {number} $total [$grid-columns]\n///\n@mixin grid-width($columns, $total: $grid-columns) {\n    width: #{grid-size($columns, $total)};\n    @if $grid-flex {\n        flex-basis: #{grid-size($columns, $grid-columns)};\n        max-width: #{grid-size($columns, $grid-columns)};\n    }\n}\n\n/// @alias grid-width\n/// @group grid\n///\n@mixin width($columns, $total:$grid-columns) {\n    @include grid-width($columns, $total);\n}\n\n/// Uses `$_human-readable-numerators` and `$_human-readable-denominators` to create percentages based on `$grid-columns`. `$property` accepts any property, as well as lists of properties.\n/// @group grid\n/// @param {string} $namespace [\"\"] - String to put before grid classes.\n/// @param {boolean} $silent [$grid-silent-classes] - Use silent classes?\n/// @param {string} $property [\"width\"] - What property should these widths applied to?\n/// @param {boolean} $important [false] - Should `!important` be applied to properties?\n/// @param {string} $property [\"width\"] - What property should these widths applied to?\n\n@mixin width-setup(\n    $namespace: '',\n    $silent: $grid-silent-classes,\n    $property: 'width',\n    $important: false,\n    $columns: $grid-columns,\n    $space: if($grid-bem-naming, '-', '_')\n) {\n\n    // [1] Loop through the $grid-columns.\n    // [2] Loop through $divisor (same number as $grid-columns). This acts as the second number in our column fraction.\n    // [3a]Loop through $divisor before it decreases by 1 from the previous loop.\n    // [3b]After widths are defined, subtract 1 from $divisor.\n    // [4] Assign the numerator and denominator of our fraction to human-readable versions (e.g. three, four, third, quarter, etc.).\n    // [5] Check if the numerator equals 1 (one). If so, we keep our singular human-readable numerators and denominators (e.g. one_twelfth).\n    // [6] If the numerator is larger than 1(one), add an 's' to our selector (e.g. two_eighths).\n    //\n    // Same system used for pushes and pulls.\n    $class-type: if($silent, '%', '.');\n    $divisor: $columns;\n\t$class-name-list: ();\n    $prefix: '#{$class-type}#{$namespace}';\n    $important: if($important, '!important', '');\n\n    //To prevent stuff like 12/12 (five-fifths, etc.), we need to declare 1/1 here\n    #{$prefix}one#{$space}whole {\n        @each $type in $property {\n            #{$type}: 100% #{$important};\n        }\n    }\n\n    @for $i from 1 through $columns {                                         // [1]\n\n        @while $divisor > 0 {                                                // [2]\n\n            @for $dividen from 1 to $divisor {                              // [3a]\n\t\t\t\t//Create numerator (first number, e.g. 'two').\n                $numerator: nth($_human-readable-numerators, $dividen);      // [4]\n\n\t\t\t\t//Create denominator (second number, e.g. 'thirds').\n                $denominator: nth($_human-readable-denominators, $divisor);\n\n\t\t\t\t//Divide first number(numerator) by second number(denominator).\n                $size: grid-size($dividen, $divisor);\n\n                //Create class name\n                $class-name: \"#{$prefix}#{$numerator}#{$space}#{$denominator}\";\n\n                //Pluralize anything other than ratios with a numerator of 1\n                @if $numerator != \"one\" {                                    // [5]\n\t\t\t\t\t$class-name: \"#{$class-name}s\";                          // [6]\n                }\n\n\t\t\t\t#{$class-name} {\n                    @each $type in $property {\n                        @if index(\"top\" \"right\" \"bottom\" \"left\", $type) != null {\n                            position: relative;\n                        }\n                        #{$type}: $size #{$important};\n                    }\n                }\n\n\t\t\t\t@if $grid-silent-classes and $debug-silent-classes {\n\t\t\t\t\t$class-name-list: map-merge($class-name-list, ($class-name: $size));\n\t\t\t\t}\n\n            }\n\n            $divisor: $divisor - 1; //[3b]\n        }\n    }\n\n    //Allow for fourths as an alias to quarters\n    #{$prefix}one#{$space}fourth {\n\t\t@extend #{$prefix}one#{$space}quarter;\n    }\n\n    #{$prefix}two#{$space}fourths {\n\t\t@extend #{$prefix}two#{$space}quarters;\n    }\n\n    #{$prefix}three#{$space}fourths {\n\t\t@extend #{$prefix}three#{$space}quarters;\n    }\n\n\n\t@if $silent and $debug-silent-classes {\n\t\t$class-name-list: map-merge($class-name-list,(\n\t\t\t#{$prefix}one#{$space}whole: 100%\n\t\t));\n\t\t$_silent-class-registry: silents-register($class-name-list, $type) !global;\n\t}\n}\n","/* SG\n\n# Layout/Media object\n\nIsolates an image from text wrapping underneath. Useful for creating an association between an image and text. Often used with an icon or avatar. Adding other classes to the `media-object__body` can create a more stylized version.\n\n```html_example\n<img class=\"media-object__media\" src=\"http://placehold.it/300x48\" alt=\"placeholder image\">\n<p class=\"media-object__body\">\n    Content that sits to the right of the image but will never wrap underneath the image to the left. Etiam porta sem malesuada magna mollis euismod. Cras justo odio, dapibus ac facilisis in, egestas eget quam.\n</p>\n\n```\n*/\n\n%media_overflow {\n    overflow: hidden;\n    _overflow:visible;\n    zoom: 1;\n}\n\n%media_left {\n    float: left;\n}\n\n%media_right {\n    float: right;\n}\n\n%media_block {\n    display: block;\n}\n\n.media-object {\n    width: 100%;\n    @extend %media_block;\n    @include clearfix;\n    @include type-space(margin-bottom, 1);\n\n    &__media {\n        @extend %media_left;\n        @extend %media_block;\n        @extend %media_overflow;\n\n        img {\n            @extend %media_block;\n        }\n    }\n\n    &__body {\n        @extend %media_block;\n        @extend %media_overflow;\n        @include type-space(padding-left, .5);\n    }\n}\n\n\n/* SG\n\n# Layout/Arrangement object\n\nCreates an image-content block that vertically aligns images and text (centered, bottom, or top).\nChildren can be named four things:\n* `arrange__item--fit` or `arrange__media` will create a block that fits the width of its content (useful for images).\n* `arrange__item--fill` will fill the remaining space.\n* `arrange__body` is similar to 'arrange__item--fill' but has some default styling.\n\nYou may also combine this with grid items like `row` and `column` if you wish to add gutters between elements.\n\n_NOTE: Do not mistake this for true grid items. This should only be used for the arrangement of a few items. It is \"squishy\", but not technically responsive._\n\n```html_example\n<div class=\"arrange\">\n    <div class=\"arrange__media\">\n        <img src=\"http://placehold.it/60x48\" alt=\"placeholder image\">\n    </div>\n    <div class=\"arrange__body\">\n        Content that is vertically (middle) aligned with the image.\n    </div>\n</div>\n\n<!-- Bottom Arrangement -->\n<div class=\"arrange arrange--bottom\">\n    <div class=\"arrange__media\">\n        <img src=\"http://placehold.it/60x48\" alt=\"placeholder image\">\n    </div>\n    <div class=\"arrange__body\">\n        Content that is bottom aligned to the image.\n    </div>\n</div>\n\n<!-- Equal width arrangement-->\n<div class=\"arrange arrange--equal\">\n    <div class=\"arrange__item arrange__item--fill\">\n        Equal width columns.\n    </div>\n    <div class=\"arrange__item arrange__item--fill\">\n        <img class=\"show\" src=\"http://placehold.it/120x72\" alt=\"placeholder image\" style=\"margin: auto;\">\n    </div>\n    <div class=\"arrange__item arrange__item--fill\">\n        Can be as many columns as you want.\n    </div>\n</div>\n\n```\n*/\n\n\n.arrange {\n    table-layout: auto;\n    min-width: 100%;\n    display: table;\n    width: 100%;\n    @include type-space(margin-bottom, 1);\n\n    &__item,\n    &__media,\n    &__body {\n        display: table-cell;\n    }\n\n    &__item--fill,\n    &__body {\n        width: 100%;\n    }\n\n    &__item--fit,\n    &__media {\n        img {\n            display: block;\n            max-width: none;\n        }\n    }\n\n    &__item--pad,\n    &__body {\n        @include type-space(padding-left, .5);\n    }\n\n    &__item--fill,\n    &__item--fit,\n    &__media,\n    &__body {\n        vertical-align: middle;\n\n        .arrange--top > & {\n            vertical-align: top;\n        }\n\n        .arrange--bottom > & {\n            vertical-align: bottom;\n        }\n\n    }\n}\n\n//Forces equal-width columns\n.arrange--equal {\n    table-layout: fixed;\n\n    & > .arrange__item--fill,\n    & > .arrange__item--fit {\n        width: 1%;\n    }\n}\n","/* SG\n# Buttons\nApplying the `btn` class to anything will make it look like a button. Always declare `type=\"button\"` on `<button>` elements for proper accessibility.\n\n```html_example\n<button type=\"button\" class=\"btn\">Button</button>\n\n<a href=\"\" class=\"btn\">Faux Button</a>\n```\n\n*/\n\n//Useful placeholder selector for button creation\n\n%button {\n    border-radius: type-space(.85) / type-space(1);\n    box-shadow: 0 3px 4px -2px rgba(black, 0);\n    background-color: color('links');\n    padding: type-space(.5 .375);\n    color: white;\n    font-weight: bold;\n    transition: background-color .1s ease-in-out, box-shadow .2s ease-out, color .1s ease-in-out;\n\n    &:focus,\n    &:hover {\n        outline: none;\n        box-shadow: 0 3px 8px -2px rgba(colors('links', 'light'), .65);\n        background-color: color('links', 'light');\n    }\n\n    &:active {\n        outline: none;\n        box-shadow: 0 0 4px 1px rgba(colors('links', 'lighter'), .5);\n        background-color: color('links', 'lighter');\n        color: color('links', 'lightest');\n    }\n\n}\n\n.btn {\n    @extend %button;\n    display: inline-flex;\n    justify-content: space-between;\n    align-content: flex-start;\n    align-items: center;\n}\n\n.btn--wide {\n    width: 100%;\n}\n\n.btn--compact {\n    padding: type-space(.125);\n}\n\n.btn__icon {\n    display: inline-block;\n    flex: 0 1 auto;\n    margin: type-space(0 .25 0 .25);\n\n    .btn--reversed & {\n        order: -1;\n    }\n}\n\n.btn__svg,\n.btn__icon--image {\n    display: block;\n    width: type-space(1);\n    height: auto;\n    min-height: 1px;\n    fill: currentColor;\n}\n\n.btn__body {\n    display: inline-block;\n    flex: 1 1 auto;\n    padding: type-space(0 .5);\n}\n","@import 'debug';\n@import 'display';\n@import 'spacing';\n@import 'clearfix';\n\n///Takes a map of class names and style properties and outputs utility (override) classes over a specified number of breakpoints. Useful for creating a number of single-use classes over multiple breakpoints. Always makes property declarations `!important`.\n/// @group core\n/// @example\n///  //scss\n///     @include creat-overrides(\n///         (\"class-name\": (\n///            \"property\": \"value\",\n///            ),\n///            \"float-right, align_right\": (\n///                \"float\": \"right\"\n///            )\n///          ),\n///          ('smalls', 'bigs')\n///    );\n///\n///    //CSS\n///    .float-left {\n///        float: left !important;\n///    }\n///    .float-right,\n///    .align_right {\n///        float: right !important;\n///    }\n///    @media (max-width: 600px) {\n///        .float-left {\n///            float: left !important;\n///        }\n///        .float-right,\n///        .align_right {\n///            float: right !important;\n///        }\n///    }\n///    @media (min-width: 601px) {\n///        ...\n///    }\n@mixin create-overrides($map, $breakpoints, $namespace: \"\", $separator: $breakpoint-namespace-character) {\n\n    //create non-responsive classes first\n    @include _override-output($map, $namespace);\n\n    //create responsive classes\n    @each $breakpoint-name in $breakpoints {\n\n        @include media-query($breakpoint-name) {\n\n\t\t\t$name: $namespace + $breakpoint-name + $separator;\n        \t@include _override-output($map, $name);\n\n\t\t}\n    }\n}\n\n///Used exclusively by `create-overrides` to iterate through a map of classes, properties, and values to create responsive classes.\n@mixin _override-output($map, $namespace) {\n\n    @each $class-name in map-keys($map) {\n        $properties: map-keys(map-get($map, $class-name));\n        $values: map-values(map-get($map, $class-name));\n        $class-name: str-replace($class-name, ',', ', .#{$namespace}');\n        $class-name: str-replace($class-name, ' ', '');\n\n        .#{$namespace}#{$class-name} {\n            @for $i from 1 through length($properties) {\n                #{nth($properties, $i)}: #{nth($values, $i)} !important;\n            }\n        }\n    }\n}\n","@include create-overrides(\n    (\n        'float-left': (\n            float: left\n        ),\n        'float-right': (\n            float: right\n        ),\n        'float-none': (\n            float: none\n        ),\n        'fixed': (\n            position: fixed\n        ),\n        'absolute': (\n            position: absolute\n        ),\n    ),\n    $breakpoint-has-alignment-classes\n);\n\n.absolute-fill {\n    top: 0;\n    left: 0;\n    bottom: 0;\n    right: 0;\n}\n","//------------------------------------*\\\n//    $DISPLAY UTILITIES\n//------------------------------------*/\n\n$display-classes: (\n    'show': 'block',\n    'hide': 'none'\n) !default;\n\n$default-display-classes: (\n    'show': 'block',\n    'bl': 'block',\n    'il_bl': 'inline-block',\n    'tbl': 'table',\n    'tbl_cl': 'table-cell',\n    'hide': 'none',\n    'block': 'block',\n    'inline_block': 'inline-block',\n    'table_cell': 'table-cell',\n    'table': 'table'\n);\n\n/// Generates classes with display properties defined in `$class-list`. Intelligently extends duplicated display properties.\n/// @param $namespace\n/// @param $silent\n/// @param $important\n/// @param $class-list\n\n@mixin display-utilities(\n    $namespace: \"\",\n    $silent: false,\n    $important: true,\n    $class-list: $display-classes) {\n\n    $classtype: if($silent, unquote('%'), unquote(\".\"));\n    $important_str: if($important, ' !important', '');\n    $display-lookup: null;\n    $display-registry: ();\n    $class-name-list: ();\n\n    @each $name, $display in $class-list {\n\n        $display-class: #{$classtype}#{$namespace}#{$name};\n        //Check for existence of a previous class using the same display\n        $display-lookup: index($display-registry, $display);\n        //If it exists, look it up in the map and extend that value.\n        @if $display-lookup != null {\n            $extender: nth(nth($class-list, $display-lookup), 1);\n\n            #{$display-class} {\n                @extend #{$classtype}#{$namespace}#{$extender};\n            }\n\n        } @else {\n            #{$display-class} {\n                display: #{$display}#{$important_str};\n            }\n\n        }\n\n        //Keep track of display values so we can extend if necessary\n        @if index($display-registry, \"#{$display}\") != null {\n            @if $silent and $debug-silent-classes {\n                $class-name-list:map-merge($class-name-list,($display-class:$display));\n            }\n\n            //Make sure duplicate values get a uniqueID so it's not extended\n            $display: $display + '' + length($display-registry);\n        }\n        $display-registry: append($display-registry, \"#{$display}\", comma);\n    }\n\n    //Register silent class names for debugging\n    @if $silent and $debug-silent-classes {\n        $_silent-class-registry: silents-register($class-name-list, 'display') !global;\n    }\n}\n\n\n///The responsive component to `display-utilities`. Invoke `display-utilites` with that loops through a set of media-queries defined in `$$breakpoints`. This is most useful for creating responsive display classes.\n/// @group core\n/// @param {list} $breakpoints [$_all-breakpoints] - list of breakpoint names to loop over\n/// @param {string} $namespace [''] - String to prepend to classes.\n/// @param {boolean} $silent [false] - Generate silent classes?\n/// @param {boolean} $important [false] - Add `!important` to declarations?\n@mixin display-utilities-init(\n    $breakpoints: $_all-breakpoints,\n    $namespace: '',\n    $silent: false,\n    $important: false\n){\n    //Merge user-defined classes with defaults (so we have a wide-array of silent classes)\n    $silent-display-classes: map-extend($display-classes, $default-display-classes, true);\n\n    $classes: if($silent, $silent-display-classes, $display-classes);\n\n    @include display-utilities($namespace, $silent, $important, $classes);\n\n    @each $name in $breakpoints {\n        @include media-query($name) {\n\n            $name: $namespace + $name;\n\n            @include display-utilities(\n                '#{$name}#{$breakpoint-namespace-character}', $silent, $important, $classes\n            );\n        }\n    }\n}\n","// sass-lint:disable no-important\n\n@if $breakpoint-has-display-classes != false {\n\n    @include display-utilities-init(\n        $breakpoints: $breakpoint-has-display-classes,\n        $namespace: '',\n        $silent: false,\n        $important: true\n    );\n\n    [hidden] {\n        display: none !important;\n    }\n\n    .invisible {\n        visibility: hidden !important;\n    }\n}\n","//------------------------------------\n//      $SPACING UTILITIES\n//------------------------------------\n\n/// The base vertical unit. Used in `type-space` and grid functions.\n/// @see type-space\n/// @group config\n$vertical-space: $base-line-height !default;\n\n/// The base horizontal unit. Used in `type-space` and grid functions.\n/// @group config\n/// @see type-space\n$horizontal-space: $base-line-height !default;\n\n/// Generates responsive spacing and padding classes. The `$namespace` argument is the media query's name, which will be appended to all generated classes. The `$config` argument is a map that allows JS-style arguments. Outputs class name as: `breakpoint_prefix_direction_amount`.\n///\n/// **`$config` Keys:**\n/// * `silent:` boolean for outputting silent/non-silent classes.\n/// * `important:` whether to output !important after each declaration.\n/// * `directions:` names that get appended to class names.\n/// * `amounts:` how much to multiply spacing unit by `$$base-line-height`.\n/// * `names:` corresponding names for each `amounts` that gets appended to class names.\n/// * `prefixes:` first word in the class name. Must contain the words 'pad' and 'space'. Used by `layout-type()` to determine padding or margin.\n/// @param {string} $namespace [\"\"] - a string to prepend to all spacing classes. Usually used for the media query's name that is calling this mixin.\n/// @param {map} $config [()]\n\n@mixin spacing-utilities ($namespace: \"\", $config: ()){\n\n    //Merge the passed map with some default values\n    $config: map-extend((\n        silent: true,\n        important: false,\n        directions: (\n            null: null,\n            '-t':'top',\n            '-b':'bottom',\n            '-l':'left',\n            '-r':'right',\n            '-v':'top' 'bottom',\n            '-h': 'right' 'left'\n        ),\n        units: (\n            null: 1,\n            '-quarter':.25,\n            '-half':.5,\n            '-2': 2,\n            '-neg-quarter': -.25,\n            '-neg-half': -.5,\n            '-neg': -1,\n            '-neg-2': -2,\n            '-0': 0\n        ),\n        properties: (\n            'pad': 'padding',\n            'space': 'margin'\n        ),\n        unit: 'auto'\n\n    ), $config, true);\n\n\n    //Convert map values to variables for simpler parsing\n    $classtype: if(map-get($config, silent), unquote('%'),unquote(\".\"));\n    $properties: map-get($config, properties);\n    $directions: map-get($config, directions);\n    $units: map-get($config, units);\n    $important: map-get($config, important);\n    $unit: map-get($config, unit);\n\n    $class-name-list: ();\n    $class-cache: ();\n\n    //Loop through base names, then amounts, then directions.\n    @each $given_name, $base_property in $properties {\n\n        @each $amount_name, $amount in $units {\n\n            @each $direction_name, $property_directions in $directions {\n\n                $class_name: #{$classtype}#{$namespace}#{$given_name}#{$direction_name}#{$amount_name};\n\n                //Skip if the padding is a negative value.\n                @if not (($base_property == 'padding') and ($amount < 0)) {\n\n                    #{$class_name} {\n\n                        @each $direction in $property_directions { //multi-direction\n\n                            $property: $base_property;\n\n                            @if ($direction) and ($direction != '') {\n                                $property: $property + '-' + $direction;\n                            }\n\n                            $property-amount: '#{$property+$amount}';\n\n                            @if map-get($class-cache, $property-amount) {\n                                @extend #{map-get($class-cache, $property-amount)};\n                            }\n                            @else {\n                                //Using type-space mixin, output the REM-based value\n                                @include type-space($property, $amount, $important, $unit);\n\n                                $class-cache: map-merge($class-cache, ($property-amount: $class_name));\n                            }\n\n                        }\n                    }\n\n                    $class-name-list: map-merge($class-name-list, ($class_name: $amount));\n\n                }\n\n            }\n        }\n    }\n\n    //Register silent classes for debugging.\n    @if map-get($config, silent) {\n        $_silent-class-registry: silents-register($class-name-list, 'spacing') !global;\n    }\n}\n\n\n\n/// The responsive component to `spacing-utilities`. Invoke `spacing-utilites` with that loops through a set of media-queries defined in `$breakpoints`. This is most useful for creating responsive spacing classes.\n/// @param {map} $breakpoints [$_all-breakpoints] - breakpoints to loop over.\n/// @param {string} $namespace [\"\"] - string to prepend to all classes.\n/// @param {map} $config [(silent: false)] - Passed to `spacing-utilities` mixin.\n@mixin spacing-utilities-init(\n    $breakpoints: $_all-breakpoints,\n    $namespace: '',\n    $config: (silent: false)\n){\n\n    @include spacing-utilities($namespace, $config);\n\n    @each $name in $breakpoints {\n\n        @include media-query($name) {\n\n            $name: $namespace+$name;\n            @include spacing-utilities('#{$name}#{$breakpoint-namespace-character}', $config);\n\n        }\n    }\n\n}\n","/* SG\n# Typography/Heading sizes\n\nMoving from `h6` up to `h1`, the heading font sizes get larger on a scale. For instance, `h6` is 1.35 times larger than the base font size of 16px. Headings have a default bottom margin of 24px.\n\n**Heading tags should be used in a hierarchical manner**, appropriate for the page, and not used for their size. To override a heading size, use a class with the corresponding heading name. See the example below.\n\n```html_example\n<h1>Heading 1</h1>\n<h2>Heading 2</h2>\n<h3>Heading 3</h3>\n<h4>Heading 4</h4>\n<h5>Heading 5</h5>\n<h6>Heading 6</h6>\n\n<h1 class=\"h4\">Heading 1 with an h4 class</h1>\n\n```\n*/\n\n.h1 {\n    @include type-font-size($type-h1-size, $h1-lh, $important:true);\n}\n.h2 {\n    @include type-font-size($type-h2-size, $h2-lh, $important:true);\n}\n.h3 {\n    @include type-font-size($type-h3-size, $h3-lh, $important:true);\n}\n.h4 {\n    @include type-font-size($type-h4-size, $h4-lh, $important:true);\n}\n.h5 {\n    @include type-font-size($type-h5-size, $h5-lh, $important:true);\n}\n.h6 {\n    @include type-font-size($type-h6-size, $h6-lh, $important:true);\n}\n\n.link--naked,\n%link_naked {\n\tcolor: inherit !important;\n\ttext-decoration: none !important;\n\n\t&:hover,\n    &:focus {\n\t\tcolor: inherit !important;\n\t\ttext-decoration: none !important;\n\t}\n}\n\n@include create-overrides(\n    (\n        'txt-small': (\n            font-size: rems(modular-scale(-1)),\n            line-height: $type-small-lh\n        ),\n        'txt-smaller': (\n            font-size: ems(modular-scale(-1))\n        ),\n        'txt-center': (\n            text-align: center\n        ),\n        'txt-normal': (\n            font-weight: 400\n        ),\n        'txt-italic': (\n            font-style: italic\n        ),\n        'txt-bold': (\n            font-weight: 700,\n            -webkit-font-smoothing: antialiased\n        ),\n        'txt-upper': (\n            text-transform: uppercase,\n            letter-spacing: .1em\n        ),\n        'txt-capital': (\n            text-transform: capitalize\n        ),\n        'txt-lower': (\n            text-transform: none,\n            letter-spacing: normal\n        ),\n        'txt-space-reset': (\n            letter-spacing: normal,\n            word-spacing: normal\n        ),\n        'txt-primary': (\n            font-family: $primary-font-stack,\n        ),\n        'txt-secondary': (\n            font-family: $secondary-font-stack\n        )\n\n    ),\n    $breakpoint-has-type-classes\n);\n","//Allow a toggle for baseline image\n@if $debug-baseline == true {\n\n    $type-baseline-size: strip-units($type-base-unit);\n\n\t.baseline-on {\n        background-image: url(http://basehold.it/i/#{$type-baseline-size});\n        background: linear-gradient(to top, rgba(0, 0, 0, .15) 1px, transparent 1px, rgba(black, .15) 1px, transparent 1px) top left / auto (($type-base-ratio / 2) * 1em);\n    }\n\n    .baseline-off {\n        background-image: none;\n    }\n}\n\n\n//Output all silent classes and values at the end of the CSS file if silent-class debugging is enabled. Will not show up in minified output\n\n@if $debug-silent-classes {\n    @include output-silent-classes;\n}\n\n@if $debug-breakpoints {\n    @each $breakpoint, $bp in $breakpoints {\n        @include mq($breakpoint) {\n            .breakpoint-on:after {\n                content: \"#{$breakpoint}\";\n                position: fixed;\n                top: 0;\n                right: 0;\n                background: #fff;\n                padding: 10px;\n                z-index: 999999;\n            }\n        }\n    }\n}\n\n#testing {\n    padding: type-space(auto 10 auto auto)\n}\n"]}