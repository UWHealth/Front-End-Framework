{"version":3,"sources":["base/_b-type.scss","base/generic/_gn-resets.scss","tools/_t-type.scss","tools/_t-functions.scss","../../config/sass.config.scss","tools/_t-blendmodes.scss","tools/_t-color-functions.scss","base/generic/_gn-sanitize.scss","tools/_t-variables.scss","main.css","tools/_t-fontface.scss","base/_b-silent.scss","base/_b-form.scss","base/_b-list.scss","base/_b-table.scss","layout/_l-wrapper.scss","tools/_t-media-queries.scss","tools/_t-grid-system.scss","tools/_t-widths.scss","layout/_l-media-object.scss","../components/button/_button.scss","../components/hero/_hero.scss","sections/_s-editor.example.scss","sections/_s-page.example.scss","tools/_t-zindex.scss","tools/_t-overrides.scss","tools/_t-display.scss","overrides/_ov-display.scss","tools/_t-spacing.scss","overrides/_ov-type.scss","overrides/_ov-overrides.example.scss","overrides/_ov-debug.scss"],"names":[],"mappings":"AAqIA,iBCnIA,AD6JC,UC3JG,eAAgB,CACnB,AAED,KCwCI,eAAc,AAqCV,eC6lBqF,CFxqB5F,AAED,uBAEI,WAAY,CACf,AAED,MAEC,oBAAqB,CACrB,AAED,IACI,uBAAwB,CAC3B,AAED,KACC,wBAAuD,CACvD,AAED,uFAaC,aAAc,CACd,AAED,EACC,eAAe,AACf,6BAA6B,AAC7B,aG4WuB,CHvVvB,AAxBD,gBAOE,aIawC,CJZxC,AARF,SAWE,aISwC,CJRxC,AAZF,QAeE,mBAAoB,CACpB,AAhBF,iBAsBE,SAAU,CACV,AAGF,GACI,WAAW,AACX,6BK0GmF,AJpInF,eAAc,CD4BjB,AM7CD,sBACC,YAAa,CACb,AAED,OACC,iBAAiB,AACjB,yBAA0B,CAC1B,AAMD,KACC,4CAA4C,AAC5C,kBAAkB,AAClB,8BAA8B,AAC9B,yBAA0B,CAC1B,AAED,MACC,uBAAwB,CAkBxB,AAnBD,wDAIE,yBAA0B,CAC1B,AALF,mBAQE,UAAW,CACX,AATF,mBAYE,4BAA6B,CAM7B,AAlBF,+FAgBG,uBAAwB,CACxB,AAYH,SACC,oBAAqB,CACrB,AAUD,eACC,eAAgB,CAChB,AAED,SACC,YAAa,CACb,AAED,SACC,cAAc,AACd,eCsG6B,CDrG7B,AEsyCD,SFnyCC,YAAa,CACb,AAMD,iBAGC,kBAAmB,CACnB,AAED,EACC,kBAAkB,AAClB,mBAAoB,CACpB,AAED,eAEC,wBAAwB,AACxB,sBAAuB,CACvB,AAfD,iBA4BC,mBAAmB,AACnB,cAAe,CACf,AAxBD,EA6BC,4BCqDgC,ADpDhC,SAAS,AACT,SAAU,CACV,AA3DE,MAgEF,yBHmQoB,AGlQpB,sBAzJ2B,AA0J3B,cH6PsB,AG5PtB,eCuCwB,ADtCxB,iEHzDwF,AG0DxF,iCCoC2C,CDnC3C,ANpHD,EMyHC,oBCiCgC,CDhChC,AAID,kCAMC,qBC4BwC,CD3BxC,AAaD,6BAIC,cAAc,AACd,oBAAoB,AACpB,mBAAmB,AACnB,mBAAoB,CACpB,AAID,kPL5JI,iBAAc,CKgLjB,AAID,kBAIC,4MAA8C,CAC9C,AAID,cAEC,eC7BwB,CD8BxB,AAID,OACC,qBAAqB,AACrB,uBAAwB,CASxB,AAXD,mBAKE,YAAa,CACb,AANF,kBASE,kBAAmB,CACnB,AAYF,iBACC,yBCvDqE,ADwDrE,WD5CmB,AC6CnB,gBCvD+B,CDwD/B,AAED,YACC,yBC7DqE,AD8DrE,WDlDmB,ACmDnB,gBC7D+B,CD8D/B,AEiwCD,iBF5vCC,eAAgB,CAChB,AE+vCD,gBF1vCC,cAAe,CACf,AE6vCD,gBFxvCC,cAAe,CACf,AE2vCD,4BFtvCC,mBAAmB,AACnB,gBAAgB,AAChB,iBAAkB,CAKlB,AEqvCD,kCFvvCE,SAAU,CACV,AG3OE,WACI,iBN4CuB,AMvCvB,6JAAK,AAED,gBNsCgB,AMnChB,iBA+CkD,CDg7C7D,AC1+CG,WACI,iBN4CuB,AMvCvB,wLAAK,AAED,gBNsCgB,AMnChB,iBA8EsD,CDw5CjE,ACj/CG,WACI,iBN4CuB,AMvCvB,6JAAK,AAED,gBNsCsB,AMnCtB,iBA+CkD,CD87C7D,ACx/CG,WACI,iBN4CuB,AMvCvB,wLAAK,AAED,gBNsCsB,AMnCtB,iBA8EsD,CDs6CjE,AC//CG,WACI,qBN4CmC,AMvCnC,6KAAK,AAED,gBNsC+B,AMnC/B,iBA+CkD,CD48C7D,ACtgDG,WACI,qBN4CmC,AMvCnC,wMAAK,AAED,gBNsC+B,AMnC/B,iBA8EsD,CDo7CjE,AC7gDG,WACI,qBN4CmC,AMvCnC,6KAAK,AAED,gBNsCqC,AMnCrC,iBA+CkD,CD09C7D,ACphDG,WACI,qBN4CmC,AMvCnC,wMAAK,AAED,gBNsCqC,AMnCrC,iBA8EsD,CDk8CjE,AC3hDG,WACI,qBN4CmC,AMvCnC,6KAAK,AAED,gBNsC2C,AMnC3C,iBA+CkD,CDw+C7D,ACliDG,WACI,qBN4CmC,AMvCnC,wMAAK,AAED,gBNsC2C,AMnC3C,iBA8EsD,CDg9CjE,AP73CW,kBSrOX,6FP4F6H,CO3F7H,AAED,oBTgCI,iBAAc,CS9BjB,ACdD,OACC,cAAc,AACd,kBAAmB,CACnB,AAKD,aAEI,kBAAmB,CACtB,AAED,+DAII,oBAAoB,AACpB,kBAAkB,AAClB,oBAAoB,AACpB,SAAS,AACT,0BAA0B,AAC1B,eAAe,CHqnDjB,gBGpnDoB,CACrB,ALoKD,6BK9JC,qBAAsB,CACtB,AAGD,iDAEC,SAAS,AACT,SAAU,CACV,AAMD,uCAEC,sBAAsB,AACtB,UAAU,CHinDT,YGhnDY,CHinDZ,UGhnDW,CACZ,AAGD,iCAEC,wBAA0B,CAC1B,AAMD,4FAEC,WAAY,CACZ,ALlBD,mBKuBC,wBAAgB,AAAhB,qBAAgB,AAAhB,gBAAgB,AAChB,qBAAsB,CACtB,AAGD,iFAKC,gBAAgB,AAChB,uBAAwB,CACxB,ACjFD,cX2CI,wBAAc,CWtCjB,AAED,YAEI,eAAgB,CACnB,AN8ND,cM1NI,aAAc,CACjB,AN+OD,MO/PI,WAAW,AACX,6BAA6B,AAC7B,yBAAyB,AACzB,gBAAiB,CACpB,AAED,MZsCI,wBAAc,AYnCjB,gBAAgB,AAChB,mBAAkB,AAClB,SAAS,AACT,kBAAkB,AAClB,mBAAqB,AACrB,qBRkKsF,AQjKtF,kBAAmB,CACnB,AAED,GACC,eAAiB,CACjB,AAED,SACC,sBAAsB,AZqBnB,kBAAc,CYnBjB,AZqNW,kBAlMR,oBAAc,CFzCjB,AAED,GEuCI,qBAAc,AAoDV,kBC4kB0F,CHrqBjG,AACD,GEoCI,qBAAc,AAoDV,mBC8kBqF,CHpqB5F,AACD,GEiCI,qBAAc,AAoDV,mBC8kBqF,CHjqB5F,AACD,GE8BI,qBAAc,AAoDV,mBC8kBqF,CH9pB5F,AACD,GE2BI,oBAAc,AAoDV,mBC8kBqF,CH3pB5F,AACD,GEwBI,kBAAc,AAoDV,mBC8kBqF,CHxpB5F,AEwNW,8BAlMR,kBAAc,CFbb,AAmCL,MACC,qBAAqB,AEvBlB,iBAAc,AAoDV,aC8kBqF,CHzmB5F,AASD,SAEC,eAAgB,CAChB,AOTD,IPaI,gBAAgB,AAChB,qBAAqB,AACrB,qBAAqB,AACrB,aAAc,CACjB,AAED,QAEC,cAAc,AACd,cAAc,AACd,kBAAkB,AAClB,uBAAwB,CACxB,AAED,IACC,SAAW,CACX,AAED,IACC,aAAe,CACf,AOuHD,kBP7GI,mMIZ+O,CKmuDjP,kCTttDwC,AACtC,aAAc,CACjB,AAYD,WACI,kBAAkB,AEvFlB,yBAAc,AF4Fd,cAAQ,CAJX,AAED,oBAMY,YAAa,AACb,kBAAmB,CACtB,AART,mBAWY,WAAW,AACX,sBAAuB,CAC1B,AAbT,gCAgBY,YAAa,AACb,mBAAoB,CACvB,AAMT,GSysDE,YTxsDe,AACb,uBAAQ,AACR,gBAAiB,CA8BpB,AAjCD,SAMQ,YAAa,AACb,kBAAmB,CACtB,AARL,QAWQ,YAAa,AACb,mBAAoB,CACvB,AAbL,WAgBQ,YAAa,AACb,kBAAmB,CACtB,AAlBL,UAqBQ,YAAa,AACb,mBAAoB,CACvB,AAvBL,cA6BQ,qBAAqB,AACrB,kBAAoB,CACvB,AehML,MACC,cAAc,AACd,iBX2I8B,AW1I9B,wBAAyB,AACtB,WAAW,Ab2CX,iBAAc,AaxCd,SAAU,CAQb,ACkHG,sEDjIJ,MAUQ,SAAU,CAKjB,CNg4DA,AO9wDG,6CDjIJ,MAaQ,SAAU,CAEjB,CNs4DA,AMp4DD,eb8BI,mBAAc,Ca5BjB,AAED,oBb0BI,mBAAc,CaxBjB,AAED,+BNg5DE,MM94DO,CAYR,AAdD,mGAME,cAAc,AACd,WAAY,CACZ,AARF,gDAUE,WAAW,AACX,SAAS,AACT,OAAQ,CACR,AEWE,OACI,sBAAsB,AACtB,mBAAoB,CACvB,AAMD,KA0MA,gBAAgB,AAChB,SAAS,AACT,UAAU,AfvNV,kBAAc,Ae2NV,sBb5BwB,AasCxB,oBAAa,AAAb,aAAa,AACb,mBAAe,AAAf,cAAe,CAzNlB,AAiNG,6BAEI,mBbjCoB,CakCvB,AAlNL,QffA,kBAAc,AeuPd,eAAe,AAGX,qBAAqB,AACrB,mBAAmB,AAGf,sBAAsB,AACtB,oBAAoB,AASxB,kBAA+C,AAA/C,cAA+C,ACvQnD,WAAO,AAEH,6BAAY,AAAZ,gBAAY,AACZ,cAAW,CDad,AAiGD,WACI,aAAc,CAKjB,AAHG,mBACI,cAAe,CAClB,AAOL,af9HA,iBAAc,CeoIb,AAHG,qBfjIJ,iBAAc,CemIT,ACtDL,WAKoB,UAAgB,AAAhB,cAAgB,AAAhB,4BAAgB,AAAhB,cAAgB,CAEvB,AAPb,QAKoB,UAAgB,AAAhB,cAAgB,AAAhB,4BAAgB,AAAhB,cAAgB,CAEvB,ACpHjB,yCACI,gBAAgB,CVqgElB,iBUpgEmB,AACjB,MAAO,CACV,AAED,qBACI,UAAW,CACd,AAMD,gFACI,aAAc,CACjB,AAED,cACI,WAAW,AjBaX,oBAAc,CiBOjB,AALG,oBjBFA,mBAAc,CiBMb,AAuDL,SACI,kBAAkB,AAClB,eAAe,AACf,cAAc,AACd,WAAW,AjBjEX,oBAAc,CiB2GjB,AAvCG,8CAGI,kBAAmB,CACtB,AAED,oCAEI,UAAW,CACd,AAEA,4CAGO,cAAc,AACd,cAAe,CAClB,AAGL,mCjBvFA,mBAAc,CiB0Fb,AAED,wEAII,qBAAsB,CAUzB,AARG,gIACI,kBAAmB,CACtB,AAED,4IACI,qBAAsB,CACzB,AAMT,gBACI,kBAAmB,CAMtB,AAPD,yEAKQ,QAAS,CACZ,ACrJL,KACI,8BAA8C,AAC9C,sCAAqC,AACrC,yBhB2YoB,AgB1YpB,wBjBoGsC,AiBnGtC,WAAY,AACZ,gBAAiB,AACjB,yFAA4F,CAgB/F,AAdG,sBAEI,aAAa,AACb,+CfuCkC,AetClC,wBfsCkC,CerCrC,AAED,YACI,aAAa,AACb,4CfiCkC,AehClC,yBfgCkC,Ae/BlC,afwiB6B,CeviBhC,AAIL,KAEI,2BAAoB,AAApB,oBAAoB,AACpB,sBAA8B,AAA9B,8BAA8B,AAC9B,yBAAyB,AAAzB,yBAAyB,AACzB,sBAAmB,AAAnB,kBAAmB,CACtB,AAED,WACI,UAAW,CACd,AAED,cACI,gBjBkEsC,CiBjEzC,AAED,WACI,qBAAqB,AACrB,kBAAc,AAAd,cAAc,AACd,gBjB4DsC,CiBvDzC,AAHG,0BACI,kBAAS,AAAT,QAAS,CACZ,AAGL,4BAEI,cAAc,AACd,ajBkDsC,AiBjDtC,YAAY,AACZ,eAAe,AACf,iBAAkB,CACrB,AAED,WACI,qBAAqB,AACrB,kBAAc,AAAd,cAAc,AACd,gBjByCsC,CiBxCzC,AC9ED,MACC,cAAc,AACd,WAAW,AACX,YAAY,AnB4CT,oBAAc,AmB1CjB,sBAAsB,AACtB,WAAW,AACX,kBAAkB,AAClB,yCAA2C,AnBuCxC,iBAAc,AmBrCd,2BAA4B,CAC/B,AAED,YACC,mBAAmB,AACnB,sBAAsB,AACtB,aAAc,CACd,ACTD,mBAGE,oBAAoB,ApBoClB,kBAAc,CoBlChB,ACbF,MACC,YAAY,AACZ,kBAAkB,AAClB,qBAAqB,AACrB,iBAAkB,CAClB,AAED,UACC,kBAAmB,CACnB,Ad+tED,0Bc5tEC,qBAAqB,AACrB,eAAgB,CAUhB,AdstED,sCc7tEE,wBjBmKqF,CiBlKrF,AdguEF,qCc7tEE,gCjB+JqF,AiB9JrF,iBAAkB,CAClB,AAGF,iBAEC,yBAAyB,AACzB,oBAAoB,AACpB,gBAAiB,ArBkBd,iBAAc,AAoDV,cC8kBqF,AoBlpB5F,oBAAqB,CACrB,AAED,SACI,eAAe,AACf,SAAS,AACT,WAAW,AACX,YCfO,ADgBP,sBAAsB,AACtB,sBAAsB,AACtB,iBAAiB,AACjB,uBAA8B,CACjC,AE+BO,YAEQ,oBAAuD,CAE9D,AAJD,aAEQ,qBAAuD,CAE9D,AAJD,YAEQ,oBAAuD,CAE9D,AAJD,OAEQ,wBAAuD,CAE9D,AAJD,UAEQ,2BAAuD,CAE9D,AAJD,eAEQ,gBAAuD,AAAvD,iBAAuD,AAAvD,mBAAuD,AAAvD,iBAAuD,CAE9D,ATmDL,4CSvDI,mBAEQ,oBAAuD,CAE9D,AAJD,oBAEQ,qBAAuD,CAE9D,AAJD,mBAEQ,oBAAuD,CAE9D,AAJD,cAEQ,wBAAuD,CAE9D,AAJD,iBAEQ,2BAAuD,CAE9D,AAJD,sBAEQ,gBAAuD,AAAvD,iBAAuD,AAAvD,mBAAuD,AAAvD,iBAAuD,CAE9D,ChB8uER,AO3rEG,6CSvDI,iBAEQ,oBAAuD,CAE9D,AAJD,kBAEQ,qBAAuD,CAE9D,AAJD,iBAEQ,oBAAuD,CAE9D,AAJD,YAEQ,wBAAuD,CAE9D,AAJD,eAEQ,2BAAuD,CAE9D,AAJD,oBAEQ,gBAAuD,AAAvD,iBAAuD,AAAvD,mBAAuD,AAAvD,iBAAuD,CAE9D,ChBswER,AOntEG,wCSvDI,iBAEQ,oBAAuD,CAE9D,AAJD,kBAEQ,qBAAuD,CAE9D,AAJD,iBAEQ,oBAAuD,CAE9D,AAJD,YAEQ,wBAAuD,CAE9D,AAJD,eAEQ,2BAAuD,CAE9D,AAJD,oBAEQ,gBAAuD,AAAvD,iBAAuD,AAAvD,mBAAuD,AAAvD,iBAAuD,CAE9D,ChB8xER,AiB9yEW,MACI,uBAAS,CACZ,AAFD,IACI,wBAAS,CACZ,AAFD,SACI,8BAAS,CACZ,AAFD,MACI,sBAAS,CACZ,AAFD,MACI,8BAAS,AAAT,sBAAS,CACZ,AViET,4CUnEQ,aACI,uBAAS,CACZ,AAFD,WACI,wBAAS,CACZ,AAFD,gBACI,8BAAS,CACZ,AAFD,aACI,sBAAS,CACZ,AAFD,aACI,8BAAS,AAAT,sBAAS,CACZ,CjBk1EZ,AOjxEG,6CUnEQ,WACI,uBAAS,CACZ,AAFD,SACI,wBAAS,CACZ,AAFD,cACI,8BAAS,CACZ,AAFD,WACI,sBAAS,CACZ,AAFD,WACI,8BAAS,AAAT,sBAAS,CACZ,CjBo2EZ,AAED,SkB15EQ,sBAAwB,CAC3B,AAED,WACI,2BAA6B,CAChC,ACwEA,K1B1CD,wBAAc,C0BiEG,AAvBhB,c1B1CD,4BAAc,C0BiEG,AAvBhB,c1B1CD,+BAAc,C0BiEG,AAvBhB,c1B1CD,6BAAc,C0BiEG,AAvBhB,c1B1CD,8BAAc,C0BiEG,AAvBhB,a1B1CD,yBAAc,C0BiEG,AAvBhB,8B1B1CD,6BAAc,C0BiEG,AAvBhB,8B1B1CD,gCAAc,C0BiEG,AAvBhB,8B1B1CD,8BAAc,C0BiEG,AAvBhB,8B1B1CD,+BAAc,C0BiEG,AAvBhB,U1B1CD,wBAAc,C0BiEG,AAvBhB,wB1B1CD,4BAAc,C0BiEG,AAvBhB,wB1B1CD,+BAAc,C0BiEG,AAvBhB,wB1B1CD,6BAAc,C0BiEG,AAvBhB,wB1B1CD,8BAAc,C0BiEG,AAvBhB,O1B1CD,sBAAc,C0BiEG,AAvBhB,kB1B1CD,0BAAc,C0BiEG,AAvBhB,kB1B1CD,6BAAc,C0BiEG,AAvBhB,kB1B1CD,2BAAc,C0BiEG,AAvBhB,kB1B1CD,4BAAc,C0BiEG,AAvBhB,O1B1CD,mBAAc,C0BiEG,AAvBhB,kB1B1CD,uBAAc,C0BiEG,AAvBhB,kB1B1CD,0BAAc,C0BiEG,AAvBhB,kB1B1CD,wBAAc,C0BiEG,AAvBhB,kB1B1CD,yBAAc,C0BiEG,AAvBhB,O1B1CD,uBAAc,C0BiEG,AAvBhB,kB1B1CD,2BAAc,C0BiEG,AAvBhB,kB1B1CD,8BAAc,C0BiEG,AAvBhB,kB1B1CD,4BAAc,C0BiEG,AAvBhB,kB1B1CD,6BAAc,C0BiEG,AAvBhB,e1B1CD,wBAAc,C0BiEG,AAvBhB,kC1B1CD,4BAAc,C0BiEG,AAvBhB,kC1B1CD,+BAAc,C0BiEG,AAvBhB,kC1B1CD,6BAAc,C0BiEG,AAvBhB,kC1B1CD,8BAAc,C0BiEG,AAvBhB,Y1B1CD,uBAAc,C0BiEG,AAvBhB,4B1B1CD,2BAAc,C0BiEG,AAvBhB,4B1B1CD,8BAAc,C0BiEG,AAvBhB,4B1B1CD,4BAAc,C0BiEG,AAvBhB,4B1B1CD,6BAAc,C0BiEG,AAvBhB,S1B1CD,qBAAc,C0BiEG,AAvBhB,sB1B1CD,yBAAc,C0BiEG,AAvBhB,sB1B1CD,4BAAc,C0BiEG,AAvBhB,sB1B1CD,0BAAc,C0BiEG,AAvBhB,sB1B1CD,2BAAc,C0BiEG,AAvBhB,mB1B1CD,yBAAc,C0BiEG,AAvBhB,0C1B1CD,6BAAc,C0BiEG,AAvBhB,0C1B1CD,gCAAc,C0BiEG,AAvBhB,0C1B1CD,8BAAc,C0BiEG,AAvBhB,0C1B1CD,+BAAc,C0BiEG,AAvBhB,gB1B1CD,wBAAc,C0BiEG,AAvBhB,oC1B1CD,4BAAc,C0BiEG,AAvBhB,oC1B1CD,+BAAc,C0BiEG,AAvBhB,oC1B1CD,6BAAc,C0BiEG,AAvBhB,oC1B1CD,8BAAc,C0BiEG,AAvBhB,W1B1CD,wBAAc,C0BiEG,AAvBhB,0B1B1CD,4BAAc,C0BiEG,AAvBhB,0B1B1CD,+BAAc,C0BiEG,AAvBhB,0B1B1CD,6BAAc,C0BiEG,AAvBhB,0B1B1CD,8BAAc,C0BiEG,AAvBhB,a1B1CD,sBAAc,C0BiEG,AAvBhB,8B1B1CD,0BAAc,C0BiEG,AAvBhB,8B1B1CD,6BAAc,C0BiEG,AAvBhB,8B1B1CD,2BAAc,C0BiEG,AAvBhB,8B1B1CD,4BAAc,C0BiEG,AAvBhB,S1B1CD,kBAAc,C0BiEG,AAvBhB,sB1B1CD,sBAAc,C0BiEG,AAvBhB,sB1B1CD,yBAAc,C0BiEG,AAvBhB,sB1B1CD,uBAAc,C0BiEG,AAvBhB,sB1B1CD,wBAAc,C0BiEG,AZiBjB,4CYxCC,Y1B1CD,wBAAc,C0BiEG,AAvBhB,4B1B1CD,4BAAc,C0BiEG,AAvBhB,4B1B1CD,+BAAc,C0BiEG,AAvBhB,4B1B1CD,6BAAc,C0BiEG,AAvBhB,4B1B1CD,8BAAc,C0BiEG,AAvBhB,oB1B1CD,yBAAc,C0BiEG,AAvBhB,4C1B1CD,6BAAc,C0BiEG,AAvBhB,4C1B1CD,gCAAc,C0BiEG,AAvBhB,4C1B1CD,8BAAc,C0BiEG,AAvBhB,4C1B1CD,+BAAc,C0BiEG,AAvBhB,iB1B1CD,wBAAc,C0BiEG,AAvBhB,sC1B1CD,4BAAc,C0BiEG,AAvBhB,sC1B1CD,+BAAc,C0BiEG,AAvBhB,sC1B1CD,6BAAc,C0BiEG,AAvBhB,sC1B1CD,8BAAc,C0BiEG,AAvBhB,c1B1CD,sBAAc,C0BiEG,AAvBhB,gC1B1CD,0BAAc,C0BiEG,AAvBhB,gC1B1CD,6BAAc,C0BiEG,AAvBhB,gC1B1CD,2BAAc,C0BiEG,AAvBhB,gC1B1CD,4BAAc,C0BiEG,AAvBhB,c1B1CD,mBAAc,C0BiEG,AAvBhB,gC1B1CD,uBAAc,C0BiEG,AAvBhB,gC1B1CD,0BAAc,C0BiEG,AAvBhB,gC1B1CD,wBAAc,C0BiEG,AAvBhB,gC1B1CD,yBAAc,C0BiEG,AAvBhB,c1B1CD,uBAAc,C0BiEG,AAvBhB,gC1B1CD,2BAAc,C0BiEG,AAvBhB,gC1B1CD,8BAAc,C0BiEG,AAvBhB,gC1B1CD,4BAAc,C0BiEG,AAvBhB,gC1B1CD,6BAAc,C0BiEG,AAvBhB,sB1B1CD,wBAAc,C0BiEG,AAvBhB,gD1B1CD,4BAAc,C0BiEG,AAvBhB,gD1B1CD,+BAAc,C0BiEG,AAvBhB,gD1B1CD,6BAAc,C0BiEG,AAvBhB,gD1B1CD,8BAAc,C0BiEG,AAvBhB,mB1B1CD,uBAAc,C0BiEG,AAvBhB,0C1B1CD,2BAAc,C0BiEG,AAvBhB,0C1B1CD,8BAAc,C0BiEG,AAvBhB,0C1B1CD,4BAAc,C0BiEG,AAvBhB,0C1B1CD,6BAAc,C0BiEG,AAvBhB,gB1B1CD,qBAAc,C0BiEG,AAvBhB,oC1B1CD,yBAAc,C0BiEG,AAvBhB,oC1B1CD,4BAAc,C0BiEG,AAvBhB,oC1B1CD,0BAAc,C0BiEG,AAvBhB,oC1B1CD,2BAAc,C0BiEG,AAvBhB,0B1B1CD,yBAAc,C0BiEG,AAvBhB,wD1B1CD,6BAAc,C0BiEG,AAvBhB,wD1B1CD,gCAAc,C0BiEG,AAvBhB,wD1B1CD,8BAAc,C0BiEG,AAvBhB,wD1B1CD,+BAAc,C0BiEG,AAvBhB,uB1B1CD,wBAAc,C0BiEG,AAvBhB,kD1B1CD,4BAAc,C0BiEG,AAvBhB,kD1B1CD,+BAAc,C0BiEG,AAvBhB,kD1B1CD,6BAAc,C0BiEG,AAvBhB,kD1B1CD,8BAAc,C0BiEG,AAvBhB,kB1B1CD,wBAAc,C0BiEG,AAvBhB,wC1B1CD,4BAAc,C0BiEG,AAvBhB,wC1B1CD,+BAAc,C0BiEG,AAvBhB,wC1B1CD,6BAAc,C0BiEG,AAvBhB,wC1B1CD,8BAAc,C0BiEG,AAvBhB,oB1B1CD,sBAAc,C0BiEG,AAvBhB,4C1B1CD,0BAAc,C0BiEG,AAvBhB,4C1B1CD,6BAAc,C0BiEG,AAvBhB,4C1B1CD,2BAAc,C0BiEG,AAvBhB,4C1B1CD,4BAAc,C0BiEG,AAvBhB,gB1B1CD,kBAAc,C0BiEG,AAvBhB,oC1B1CD,sBAAc,C0BiEG,AAvBhB,oC1B1CD,yBAAc,C0BiEG,AAvBhB,oC1B1CD,uBAAc,C0BiEG,AAvBhB,oC1B1CD,wBAAc,C0BiEG,CnByyFpB,AOxxFG,6CYxCC,U1B1CD,wBAAc,C0BiEG,AAvBhB,wB1B1CD,4BAAc,C0BiEG,AAvBhB,wB1B1CD,+BAAc,C0BiEG,AAvBhB,wB1B1CD,6BAAc,C0BiEG,AAvBhB,wB1B1CD,8BAAc,C0BiEG,AAvBhB,kB1B1CD,yBAAc,C0BiEG,AAvBhB,wC1B1CD,6BAAc,C0BiEG,AAvBhB,wC1B1CD,gCAAc,C0BiEG,AAvBhB,wC1B1CD,8BAAc,C0BiEG,AAvBhB,wC1B1CD,+BAAc,C0BiEG,AAvBhB,e1B1CD,wBAAc,C0BiEG,AAvBhB,kC1B1CD,4BAAc,C0BiEG,AAvBhB,kC1B1CD,+BAAc,C0BiEG,AAvBhB,kC1B1CD,6BAAc,C0BiEG,AAvBhB,kC1B1CD,8BAAc,C0BiEG,AAvBhB,Y1B1CD,sBAAc,C0BiEG,AAvBhB,4B1B1CD,0BAAc,C0BiEG,AAvBhB,4B1B1CD,6BAAc,C0BiEG,AAvBhB,4B1B1CD,2BAAc,C0BiEG,AAvBhB,4B1B1CD,4BAAc,C0BiEG,AAvBhB,Y1B1CD,mBAAc,C0BiEG,AAvBhB,4B1B1CD,uBAAc,C0BiEG,AAvBhB,4B1B1CD,0BAAc,C0BiEG,AAvBhB,4B1B1CD,wBAAc,C0BiEG,AAvBhB,4B1B1CD,yBAAc,C0BiEG,AAvBhB,Y1B1CD,uBAAc,C0BiEG,AAvBhB,4B1B1CD,2BAAc,C0BiEG,AAvBhB,4B1B1CD,8BAAc,C0BiEG,AAvBhB,4B1B1CD,4BAAc,C0BiEG,AAvBhB,4B1B1CD,6BAAc,C0BiEG,AAvBhB,oB1B1CD,wBAAc,C0BiEG,AAvBhB,4C1B1CD,4BAAc,C0BiEG,AAvBhB,4C1B1CD,+BAAc,C0BiEG,AAvBhB,4C1B1CD,6BAAc,C0BiEG,AAvBhB,4C1B1CD,8BAAc,C0BiEG,AAvBhB,iB1B1CD,uBAAc,C0BiEG,AAvBhB,sC1B1CD,2BAAc,C0BiEG,AAvBhB,sC1B1CD,8BAAc,C0BiEG,AAvBhB,sC1B1CD,4BAAc,C0BiEG,AAvBhB,sC1B1CD,6BAAc,C0BiEG,AAvBhB,c1B1CD,qBAAc,C0BiEG,AAvBhB,gC1B1CD,yBAAc,C0BiEG,AAvBhB,gC1B1CD,4BAAc,C0BiEG,AAvBhB,gC1B1CD,0BAAc,C0BiEG,AAvBhB,gC1B1CD,2BAAc,C0BiEG,AAvBhB,wB1B1CD,yBAAc,C0BiEG,AAvBhB,oD1B1CD,6BAAc,C0BiEG,AAvBhB,oD1B1CD,gCAAc,C0BiEG,AAvBhB,oD1B1CD,8BAAc,C0BiEG,AAvBhB,oD1B1CD,+BAAc,C0BiEG,AAvBhB,qB1B1CD,wBAAc,C0BiEG,AAvBhB,8C1B1CD,4BAAc,C0BiEG,AAvBhB,8C1B1CD,+BAAc,C0BiEG,AAvBhB,8C1B1CD,6BAAc,C0BiEG,AAvBhB,8C1B1CD,8BAAc,C0BiEG,AAvBhB,gB1B1CD,wBAAc,C0BiEG,AAvBhB,oC1B1CD,4BAAc,C0BiEG,AAvBhB,oC1B1CD,+BAAc,C0BiEG,AAvBhB,oC1B1CD,6BAAc,C0BiEG,AAvBhB,oC1B1CD,8BAAc,C0BiEG,AAvBhB,kB1B1CD,sBAAc,C0BiEG,AAvBhB,wC1B1CD,0BAAc,C0BiEG,AAvBhB,wC1B1CD,6BAAc,C0BiEG,AAvBhB,wC1B1CD,2BAAc,C0BiEG,AAvBhB,wC1B1CD,4BAAc,C0BiEG,AAvBhB,c1B1CD,kBAAc,C0BiEG,AAvBhB,gC1B1CD,sBAAc,C0BiEG,AAvBhB,gC1B1CD,yBAAc,C0BiEG,AAvBhB,gC1B1CD,uBAAc,C0BiEG,AAvBhB,gC1B1CD,wBAAc,C0BiEG,CnB8/FpB,AO7+FG,wCYxCC,U1B1CD,wBAAc,C0BiEG,AAvBhB,wB1B1CD,4BAAc,C0BiEG,AAvBhB,wB1B1CD,+BAAc,C0BiEG,AAvBhB,wB1B1CD,6BAAc,C0BiEG,AAvBhB,wB1B1CD,8BAAc,C0BiEG,AAvBhB,kB1B1CD,yBAAc,C0BiEG,AAvBhB,wC1B1CD,6BAAc,C0BiEG,AAvBhB,wC1B1CD,gCAAc,C0BiEG,AAvBhB,wC1B1CD,8BAAc,C0BiEG,AAvBhB,wC1B1CD,+BAAc,C0BiEG,AAvBhB,e1B1CD,wBAAc,C0BiEG,AAvBhB,kC1B1CD,4BAAc,C0BiEG,AAvBhB,kC1B1CD,+BAAc,C0BiEG,AAvBhB,kC1B1CD,6BAAc,C0BiEG,AAvBhB,kC1B1CD,8BAAc,C0BiEG,AAvBhB,Y1B1CD,sBAAc,C0BiEG,AAvBhB,4B1B1CD,0BAAc,C0BiEG,AAvBhB,4B1B1CD,6BAAc,C0BiEG,AAvBhB,4B1B1CD,2BAAc,C0BiEG,AAvBhB,4B1B1CD,4BAAc,C0BiEG,AAvBhB,Y1B1CD,mBAAc,C0BiEG,AAvBhB,4B1B1CD,uBAAc,C0BiEG,AAvBhB,4B1B1CD,0BAAc,C0BiEG,AAvBhB,4B1B1CD,wBAAc,C0BiEG,AAvBhB,4B1B1CD,yBAAc,C0BiEG,AAvBhB,Y1B1CD,uBAAc,C0BiEG,AAvBhB,4B1B1CD,2BAAc,C0BiEG,AAvBhB,4B1B1CD,8BAAc,C0BiEG,AAvBhB,4B1B1CD,4BAAc,C0BiEG,AAvBhB,4B1B1CD,6BAAc,C0BiEG,AAvBhB,oB1B1CD,wBAAc,C0BiEG,AAvBhB,4C1B1CD,4BAAc,C0BiEG,AAvBhB,4C1B1CD,+BAAc,C0BiEG,AAvBhB,4C1B1CD,6BAAc,C0BiEG,AAvBhB,4C1B1CD,8BAAc,C0BiEG,AAvBhB,iB1B1CD,uBAAc,C0BiEG,AAvBhB,sC1B1CD,2BAAc,C0BiEG,AAvBhB,sC1B1CD,8BAAc,C0BiEG,AAvBhB,sC1B1CD,4BAAc,C0BiEG,AAvBhB,sC1B1CD,6BAAc,C0BiEG,AAvBhB,c1B1CD,qBAAc,C0BiEG,AAvBhB,gC1B1CD,yBAAc,C0BiEG,AAvBhB,gC1B1CD,4BAAc,C0BiEG,AAvBhB,gC1B1CD,0BAAc,C0BiEG,AAvBhB,gC1B1CD,2BAAc,C0BiEG,AAvBhB,wB1B1CD,yBAAc,C0BiEG,AAvBhB,oD1B1CD,6BAAc,C0BiEG,AAvBhB,oD1B1CD,gCAAc,C0BiEG,AAvBhB,oD1B1CD,8BAAc,C0BiEG,AAvBhB,oD1B1CD,+BAAc,C0BiEG,AAvBhB,qB1B1CD,wBAAc,C0BiEG,AAvBhB,8C1B1CD,4BAAc,C0BiEG,AAvBhB,8C1B1CD,+BAAc,C0BiEG,AAvBhB,8C1B1CD,6BAAc,C0BiEG,AAvBhB,8C1B1CD,8BAAc,C0BiEG,AAvBhB,gB1B1CD,wBAAc,C0BiEG,AAvBhB,oC1B1CD,4BAAc,C0BiEG,AAvBhB,oC1B1CD,+BAAc,C0BiEG,AAvBhB,oC1B1CD,6BAAc,C0BiEG,AAvBhB,oC1B1CD,8BAAc,C0BiEG,AAvBhB,kB1B1CD,sBAAc,C0BiEG,AAvBhB,wC1B1CD,0BAAc,C0BiEG,AAvBhB,wC1B1CD,6BAAc,C0BiEG,AAvBhB,wC1B1CD,2BAAc,C0BiEG,AAvBhB,wC1B1CD,4BAAc,C0BiEG,AAvBhB,c1B1CD,kBAAc,C0BiEG,AAvBhB,gC1B1CD,sBAAc,C0BiEG,AAvBhB,gC1B1CD,yBAAc,C0BiEG,AAvBhB,gC1B1CD,uBAAc,C0BiEG,AAvBhB,gC1B1CD,wBAAc,C0BiEG,CnBmtGpB,AoB/yGD,I3B2BI,qBAAc,AAoDV,kBC4kB0F,C0BzpBjG,AACD,I3BwBI,qBAAc,AAoDV,mBC8kBqF,C0BxpB5F,AACD,I3BqBI,qBAAc,AAoDV,mBC8kBqF,C0BrpB5F,AACD,I3BkBI,qBAAc,AAoDV,mBC8kBqF,C0BlpB5F,AACD,I3BeI,oBAAc,AAoDV,mBC8kBqF,C0B/oB5F,AACD,I3BYI,kBAAc,AAoDV,mBC8kBqF,C0B5oB5F,AAED,mDAOE,wBAAyB,AACzB,8BAAgC,CAChC,AJ0BM,WAEQ,8BAAuD,AAAvD,uBAAuD,CAE9D,AAJD,aAEQ,4BAAuD,CAE9D,AAJD,YAEQ,2BAAuD,CAE9D,AAJD,YAEQ,yBAAuD,CAE9D,AAJD,YAEQ,2BAAuD,CAE9D,AAJD,UAEQ,0BAAuD,AAAvD,4CAAuD,CAE9D,AAJD,WAEQ,mCAAuD,AAAvD,6BAAuD,CAE9D,AAJD,aAEQ,mCAAuD,CAE9D,AAJD,WAEQ,6BAAuD,CAE9D,AAJD,4BAEQ,+BAAuD,CAF/D,AAIC,iBAFO,6BAAuD,CAE9D,AAJD,aAEQ,wEAAuD,CAE9D,AAJD,eAEQ,uGAAuD,CAE9D,ATmDL,4CSvDI,kBAEQ,8BAAuD,AAAvD,uBAAuD,CAE9D,AAJD,oBAEQ,4BAAuD,CAE9D,AAJD,mBAEQ,2BAAuD,CAE9D,AAJD,mBAEQ,yBAAuD,CAE9D,AAJD,mBAEQ,2BAAuD,CAE9D,AAJD,iBAEQ,0BAAuD,AAAvD,4CAAuD,CAE9D,AAJD,kBAEQ,mCAAuD,AAAvD,6BAAuD,CAE9D,AAJD,oBAEQ,mCAAuD,CAE9D,AAJD,kBAEQ,8BAAuD,AAAvD,+BAAuD,CAE9D,AAJD,wBAEQ,gCAAuD,AAAvD,6BAAuD,CAE9D,AAJD,oBAEQ,wEAAuD,CAE9D,AAJD,sBAEQ,uGAAuD,CAE9D,ChBi5GR,AO91GG,6CSvDI,gBAEQ,8BAAuD,AAAvD,uBAAuD,CAE9D,AAJD,kBAEQ,4BAAuD,CAE9D,AAJD,iBAEQ,2BAAuD,CAE9D,AAJD,iBAEQ,yBAAuD,CAE9D,AAJD,iBAEQ,2BAAuD,CAE9D,AAJD,eAEQ,0BAAuD,AAAvD,4CAAuD,CAE9D,AAJD,gBAEQ,mCAAuD,AAAvD,6BAAuD,CAE9D,AAJD,kBAEQ,mCAAuD,CAE9D,AAJD,gBAEQ,8BAAuD,AAAvD,+BAAuD,CAE9D,AAJD,sBAEQ,gCAAuD,AAAvD,6BAAuD,CAE9D,AAJD,kBAEQ,wEAAuD,CAE9D,AAJD,oBAEQ,uGAAuD,CAE9D,ChB67GR,AqBlgHD,iBACI,kBAAkB,AAClB,YAAY,AACZ,SAAS,AACT,UAAU,AACV,UAAU,AACV,WAAW,AACX,gBAAgB,AAEhB,mBAA8B,AAC9B,mBAAmB,AACnB,8BAAiC,CAEpC,AAED,mEAEI,gBAAgB,AAChB,SAAS,AACT,WAAW,AACX,YAAY,AACZ,iBAAiB,AACjB,SAAU,CACb,AAED,SACI,2BAA6B,CAChC,AC/BA,aACO,8CAA4C,AAC5C,iHAAkK,CACrK,AAED,cACI,qBAAsB,CACzB,AfqHD,4CetGQ,qBACI,iBAAyB,AACzB,eAAe,AACf,MAAM,AACN,QAAQ,AACR,gBAAgB,AAChB,aAAa,AACb,cAAe,CAClB,CtBwhHZ,AO17GG,4CetGQ,qBACI,gBAAyB,AACzB,eAAe,AACf,MAAM,AACN,QAAQ,AACR,gBAAgB,AAChB,aAAa,AACb,cAAe,CAClB,CtBoiHZ,AOt8GG,sEetGQ,qBACI,mBAAyB,AACzB,eAAe,AACf,MAAM,AACN,QAAQ,AACR,gBAAgB,AAChB,aAAa,AACb,cAAe,CAClB,CtBgjHZ,AOl9GG,6CetGQ,qBACI,eAAyB,AACzB,eAAe,AACf,MAAM,AACN,QAAQ,AACR,gBAAgB,AAChB,aAAa,AACb,cAAe,CAClB,CtB4jHZ,AO99GG,kEetGQ,qBACI,cAAyB,AACzB,eAAe,AACf,MAAM,AACN,QAAQ,AACR,gBAAgB,AAChB,aAAa,AACb,cAAe,CAClB,CtBwkHZ,AO1+GG,wCetGQ,qBACI,eAAyB,AACzB,eAAe,AACf,MAAM,AACN,QAAQ,AACR,gBAAgB,AAChB,aAAa,AACb,cAAe,CAClB,CtBolHZ,AsB/kHD,SACI,4BAAqC,CACxC","file":"../main.min.css","sourcesContent":["//------------------------------------\n//    $HEADINGS\n//------------------------------------\n\n%base_heading_space {\n\t@include type-space(margin-bottom, 1);\n}\n\nh1 {\n    @include font-size($type-h1-size, $h1-lh);\n}\nh2 {\n    @include font-size($type-h2-size, $h2-lh);\n}\nh3 {\n    @include font-size($type-h3-size, $h3-lh);\n}\nh4 {\n    @include font-size($type-h4-size, $h4-lh);\n}\nh5 {\n    @include font-size($type-h5-size, $h5-lh);\n}\nh6 {\n    @include font-size($type-h6-size, $h6-lh);\n}\n\n\n@include headings(1, 6) {\n    @extend %base_heading_space;\n\t@extend %secondary_font_family;\n\n    & + p {\n        @include type-space(margin-top, -1);\n    }\n}\n\n/* SG\n# Typography/Body copy\n\nThe default font-size for all typography is **16px** with line-height of **24px** (1.5). This is applied to the `<body>` and inherited by paragraphs and lists. `<p>` tags all receive a bottom margin of 1rem.\n\nWhen a `<p>` follows a heading tag (`<h1>` for instance), the paragraph receives a negative top margin so it sits directly beneath the heading.\n\nThe default font-family is set in **Asap**.\n\n```html_example\n<p>Aenean lacinia bibendum nulla sed consectetur. Morbi leo risus, porta ac consectetur ac, vestibulum at eros. Sed posuere consectetur est at lobortis. </p>\n<p>Nullam quis risus eget urna mollis ornare vel eu leo. Nulla vitae elit libero, a pharetra augue.</p>\n\n<h5>A Heading...</h5>\n<p>...Followed by a paragraph. Notice how there's no margin between these two items.</p>\n```\n\n*/\n\np {\n\t@extend %type_vertical_rhythm;\n\n    @if $indented-paragraphs {\n\n        & + & {\n            @include type-space(text-indent, .5);\n            @include type-space(margin-top, -1);\n        }\n\n    }\n}\n\nsmall {\n\tdisplay: inline-block; //allows for own line-height\n\t@include font-size($type-small-size, $small-lh);\n}\n\n//\n// Not strictly a paragraph, but probably doesn’t need its own section.\n//\naddress {\n    @extend %type_vertical_rhythm;\n}\n\nb,\nstrong {\n\tfont-weight: 700;\n}\n\npre {\n    @extend %type_vertical_rhythm;\n    white-space: pre;\n    white-space: pre-wrap;\n    word-wrap: break-word;\n    overflow: auto;\n}\n\nsub,\nsup {\n\tfont-size: 75%;\n\tline-height: 0;\n\tposition: relative;\n\tvertical-align: baseline;\n}\n\nsup {\n\ttop: -0.5ex;\n}\n\nsub {\n\tbottom: -0.25ex;\n}\n\n\n// 1. Fix an odd quirk whereby, without this, code blocks are rendered at a\n//    font-size smaller than 1em.\n\ncode,\nkbd,\npre,\nsamp {\n    font-family: $monospace-font-stack;\n    _font-family: 'courier new', monospace;\n    font-size: 1em; // [1]\n}\n\n//Address styling not present in IE 7/8/9, Safari 5, and Chrome.\n\n\n//-------------------------------\n//    $QUOTES\n//-------------------------------\n//\n// 1. Hang the opening quote of the blockquote.\n//\tUses ex length for font-relative spacing\n//\nblockquote {\n    text-indent: -.5ex; // [1]\n}\n\nblockquote {\n    @include type-space(margin, 0 0 1 1);\n    quotes: '“' '”';\n\n    p {\n        &:before {\n            content: \"“\";\n            content: open-quote;\n        }\n\n        &:after {\n            content: \"\";\n            content: no-close-quote;\n        }\n\n        &:last-of-type:after {\n            content: \"”\";\n            content: close-quote;\n        }\n\n    }\n\n}\n\nq {\n    *quotes: none;\n    quotes: \"‘\" \"’\" \"“\" \"”\";\n    overflow: visible;\n\n    &:before {\n        content: \"‘\";\n        content: open-quote;\n    }\n\n    &:after {\n        content: \"’\";\n        content: close-quote;\n    }\n\n    q:before {\n        content: \"“\";\n        content: open-quote;\n    }\n\n    q:after {\n        content: \"”\";\n        content: close-quote;\n    }\n\n    //\n    // If an element opens with an inline quote, let’s hang that.\n    //\n    &:first-child {\n        display: inline-block;\n        text-indent: -0.22em;\n    }\n\n}\n","\n//Useful for sticky footers and floats\nhtml,\nbody {\n    min-height: 100%;\n}\n\nbody {\n\t@include font-size($base-font-size, true, p);\n}\n\nabbr[title],\ndfn[title] {\n    cursor: help;\n}\n\nu,\nins {\n\ttext-decoration: none;\n}\n\nins {\n    border-bottom: 1px solid;\n}\n\nmark {\n\tbackground-color: mix(color('links'), color('bg'), 20%);\n}\n\narticle,\naside,\ndetails,\nfigcaption,\nfigure,\nfooter,\nheader,\nmain,\nmenu,\nnav,\nsection,\nsummary,\nhr {\n\tdisplay: block;\n}\n\na {\n\tcursor: pointer;\n\tbackground-color: transparent;\n\tcolor: color('links');\n\n\t&:hover,\n\t&:focus {\n\t\tcolor: color('links', light);\n\t}\n\n\t&:active{\n\t\tcolor: color('links', darker);\n\t}\n\n\t&:focus {\n\t\toutline: thin dotted; //normalize browser outlines\n\t}\n\n\t// Improve readability when focused and also mouse hovered in all browsers.\n\n\t&:active,\n\t&:hover {\n\t\toutline: 0;\n\t}\n}\n\nhr {\n    height: 2px;\n    border-top: 2px solid color('bg', dark);\n\t@include type-space(margin, 1 0 );\n}\n","/* SG\n# Typography/Conversion [[dev]]\n\n##### `@px-to-rems()`\n###### mixin(`$property`, `$sizes`, `$important`: `false`, `$base-font`: `$$base-font-size`)\nTakes a pixel value and creates a property with a `rem` value. If `$$rem-px-fallback` is `true`, a pixel fallback is also included. `$sizes` also accepts 'auto'.\n@alias `@rems()`\n@requires `px-to-rems()`\n\n*/\n\n// REM generator\n// Used to create a property with a rem value and PX fallback\n@mixin px-to-rems($property, $sizes, $important: false, $base-font: $base-font-size) {\n    $important-val: if($important, ' !important', '');\n    $rem-sizes: ();\n    $px-sizes: ();\n    $is-zero: true;\n\n    //Loop through sizes, combining them into single lists\n    @each $size in $sizes {\n        @if $size == '' or $size == null {\n            $size: null;\n            $px-sizes: join($px-sizes, $size, space);\n        }\n        @else if $size == 'auto' or $size == 'normal' {\n            $px-sizes: join($px-sizes, $size, space);\n        }\n        @else {\n            @if $size == 0px {\n                $size: 0; //optimization\n            }\n            @else {\n                $is-zero: false;\n            }\n\n            $px-sizes: join($px-sizes, $size, space);\n            $size: if($size, px-to-rems($size, $base-font), '');\n        }\n\n        $rem-sizes: join($rem-sizes, $size, space);\n    }\n\n    @if $is-zero == false and $rem-px-fallback {\n        #{$property}: #{$px-sizes}#{$important-val};\n    }\n\n    #{$property}: #{$rem-sizes}#{$important-val};\n\n}\n\n//ALIAS: same as above\n@mixin rems($property, $sizes, $important: false, $base-font:$base-font-size) {\n    @include px-to-rems($property, $sizes, $important, $base-font);\n}\n\n\n/* SG\n\n# Typography/Sizing [[dev]]\n\n##### `@type-font-size()`\n###### mixin(`$font-size, $line-height: auto, $font-base:``$$base-font-size`)\nQuickly generate a font-size in rems, with a pixel fallback, based on the value we pass into the mixin. Optionally calculates line-height using `$$base-line-height`.\n\n_`$line-height` also accepts a pixel value and will be converted to a unitless one._\n\n@alias `@font-size()`\n@requires `@px-to-rems()`, `cache()`, `baseline-calc()`\n\n*/\n\n@mixin type-font-size (\n    $font-size,\n    $line-height: 'auto',\n    $font-base: $base-font-size,\n    $important: false\n) {\n    //Create REM-based font-size\n    @include px-to-rems('font-size', $font-size);\n\n    @if $line-height == true or $line-height == 'auto' {\n\n        $line-height: cache(baseline-calc, $font-size, $font-base);\n        line-height: $line-height;\n\n    }\n    @else if type-of($line-height) == 'number' {\n\n        //Convert to unitless\n        @if not unitless($line-height) {\n            @if unit($line-height) == 'px' {\n                $line-height: $line-height / $font-size;\n            }\n            @else {\n                @warn 'Line-height for #{$font-size} must be unitless or in pixel values';\n            }\n        }\n\n        line-height: $line-height;\n\n    }\n    @else if $line-height == 'inherit' or $line-height == 'normal' {\n        line-height: $line-height;\n    }\n}\n//Alias\n@mixin font-size($font-size, $line-height: true, $font-base: $base-font-size, $important: false) {\n    @include type-font-size($font-size, $line-height, $font-base, $important);\n}\n\n@mixin fs($font-size, $line-height: true, $font-base: $base-font-size, $important: false) {\n    @include type-font-size($font-size, $line-height, $font-base, $important);\n}\n\n\n/* SG\n# Typography/Spacing [[dev]]\n\n##### `@type-space()`\n###### mixin(`$properties, $multipliers, $important: false`)\nOutput REM values using the typographic grid. This is the prefered method of adding padding and margins because it enforces consistent spacing around all elements.\n\n**Arguments:**\n* `$properties`: Can be any `CSS` property that accepts a length value (e.g. `rem`). Also accepts multiple properties as a nested list (e.g. `(padding-left, padding-right)`).\n* `$multipliers`: Accepts unitless values that get converted to `rem` units which are a multiple of the typographic grid. Can be multiple values, **separated by spaces**, in the case of `margin` or `padding`.\n* `$important`: Accepts `true` or `!important`.\n\n**Example**\n```scss\n// SCSS input\n.foo {\n    @include type-space(padding, 1 .25 .5 auto, '!important');\n}\n\n// CSS output\n.foo {\n    padding: 24px 8px 12px auto !important;\n    padding: 1.5rem .375rem .75rem auto !important;\n}\n```\n\n@requires `@px-to-rems()`, `str-contains()`\n@alias `@space()`\n\n*/\n\n@mixin type-space(\n    $properties,\n    $multipliers,\n    $important: false,\n    $unit: 'auto'\n) {\n    $multiplier: nth($multipliers, 1);\n    $m-length: length($multipliers);\n    $important: if($important, true, false); //Allow for strings, convert to boolean\n\n    @each $property in $properties {\n        $values: null;\n        $multiple-index: 1;\n\n        @each $multiple in $multipliers {\n\n            @if $multiple == 'auto' {\n                $values: append($values, 'auto');\n                $multiple-index: $multiple-index + 1;\n            }\n            @else {\n                $value: $unit;\n\n                @if $unit == 'auto' {\n                    $value: $vertical-space;\n\n                    //If value is the second or fourth value in a list,\n                    // or is a left, right, or width value,\n                    // multiply by the $horizontal-space\n                    @if ($multiple-index % 2 == 0)\n                    or (\n                    str-contains($property, 'right')\n                    or str-contains($property, 'left')\n                    or str-contains($property, 'width')\n                    ) {\n                        $value: $horizontal-space;\n                    }\n                }\n\n                $value: $value * $multiple;\n                $values: append($values, $value);\n                $multiple-index: $multiple-index + 1;\n            }\n        }\n\n        @include px-to-rems($property, $values, $important);\n\n    }\n}\n\n//Alias\n@mixin space($properties, $multipliers, $important: false, $unit: $vertical-space) {\n    @include type-space($properties, $multipliers, $important, $unit);\n}\n\n\n@function type-space($multipliers) {\n    $base: $horizontal-space;\n\n    $values: ();\n    @each $multiple in $multipliers {\n        $pixel: if($multiple == 'auto', $multiple, $base * $multiple);\n        $multiple: px-to-rems($pixel);\n        $values: join($values, $multiple, space);\n    }\n\n    @return $values;\n}\n\n// Style any number of headings all at once, e.g.:\n//\n//    @include headings(1, 3){color:#BADA55;}\n//\n//    outputs:\n//    h1, h2, h3 {color:#BADA55;}\n//\n// Lifted from inuit.css:\n// github.com/csswizardry/inuit.css/generic/_mixins.scss\n\n$headings-use: 0 !global;\n\n@mixin headings($from: 1, $to: 6, $class-type: null) {\n    //Used for multiple calls to this mixin.\n    // Ensures no double extends.\n    $headings-use: $headings-use + 1 !global;\n\n    %base-headings#{$headings-use} {\n        @content;\n    }\n\n    @if $from >= 1 and $to <= 6 {\n\n        @for $i from $from through $to {\n            $selector: '#{$class-type}h#{$i}';\n            #{$selector} {\n                @extend %base-headings#{$headings-use};\n            }\n        }\n    }\n    @else {\n        @warn 'You need to supply numbers between 1 and 6 for headings mixin to work';\n    }\n}\n","/* SG\n# Functions/General [[dev]]\n\n##### `safe-get-function()`\n###### function(`$function-name`)\nWrapper for Sass' internal `get-function` that allows for compatibility across Sass versions. If version is higher than 3.5, then the function is returned, otherwise, just the name.\n\n@returns function\n\n\n##### `cache()`\n###### function(`$function-name, $args...`)\nMemoize (cache) a function's return values and arguments. Speeds up processing on intensive functions that get called many times (with the same arguments).\n\n_NOTE: This can actually **increase** processing time if used too often or on simple functions as the lookup process isn't free. Every cached value is unique._\n\n@returns function result\n\n*/\n\n@function safe-get-function($name) {\n    @if function-exists('get-function') {\n        @return get-function($name);\n    } @else {\n        @return $name;\n    }\n}\n\n\n$c-i: 0;\n$cached-values: ();\n\n@function cache($function-name, $args...) {\n    $cache-map: '#{$function-name}, #{$args}';\n    $cached-value: map-get($cached-values, $cache-map);\n\n    @if $cached-value != null and $cached-value != '' {\n        @return $cached-value;\n    } @else {\n        $result: call(safe-get-function($function-name), $args...);\n        $cached-values: map-merge($cached-values, ($cache-map: $result)) !global;\n        @return $result;\n    }\n}\n\n/* SG\n# Functions/Conversion [[dev]]\n\n##### `strip-units()`\n###### function(`$value`)\nRemove lengths (`px`, `em`, `rem`, etc.) from a value. Usually a variable. This is sometimes required because Sass cannot calculate incompatible units (`px * rem` for instance).\n[Reference](http://stackoverflow.com/questions/12328259/how-do-you-strip-the-unit-from-any-number-in-sass)\n\n##### `percentage-to-decimal()`\n###### function(`$percentage`)\nChanges percent value to decimal.\n@returns number\n\n##### `px-to-vw()`\n###### function(`$pixels`)\nConverts pixel dimensions to viewport width (vw) dimensions.\n@returns number (vw)\n\n##### `px-to-rems()`\n###### function(`$pixels, $base-font:` `$$base-font-size`)\nFunction for calculating `rem` values. Used by `@px-to-rems()`. The `$base-size` is used to calculate the value (e.g. if the body's font-size is `16px`, then the rem value of `24px` would be `1.5rem`).\n@returns number (rems)\n@alias rems()\n\n##### `px-to-ems()`\n###### function(`$pixels, $context:` `$base-font-size`)\nFunction for calculating `em` values. The `$context` is used to calculate the final value. Different from `px-to-rems()` by generating a value with an `em`. `$context` is often necessary based on the situation.\n@returns number(ems)\n@alias ems()\n\n##### `list-to-string()`\n###### function(`$list, $separator:','`)\nConverts a list to a string with an optional separator.\n@returns string\n@alias str-join()\n\n##### `str-to-number()`\n###### function(`$string, $unitless: false`)\nConverts a number-like string to a number. Since Sass accepts quoted and non-quoted values like `\"10px\"` and `10px`, but can only do math on the unquoted (number) value, it is sometimes necessary to convert/cast a string to a number.\n@returns number\n*/\n\n@function strip-units($value) {\n    @return $value / ($value * 0 + 1);\n}\n\n@function percentage-to-decimal($percentage) {\n    @if unit($percentage) == '%' {\n        $percentage: $percentage/100%;\n    }\n    @return $percentage;\n}\n\n\n@function px-to-vw($pixels) {\n    $vw-context: ($max-site-width * .01) * 1px;\n    @return ($pixels / $vw-context) * 1vw;\n}\n\n@function px-to-rems($pixels, $base-size: $base-font-size) {\n    @if $pixels == 'auto' {\n        @return $pixels;\n    }\n\n    @if (unitless($pixels)) {\n        $pixels: $pixels * 1px;\n    }\n\n    //If 0, don't include units\n    @if $pixels == 0px {\n        @return 0;\n    }\n\n    $pixels: ($pixels / $base-size) * 1rem;\n\n    @return $pixels;\n\n}\n//ALIAS: Same as above\n@function rems($pixels, $base-size:$base-font-size){\n    @return px-to-rems($pixels, $base-size);\n}\n\n//Pixels to em\n@function px-to-ems($pixels, $context: $base-font-size) {\n    @if (unitless($pixels)){\n        $pixels: $pixels * 1px;\n    }\n\n    //If 0, don't include rems\n    @if $pixels == 0px {\n        @return 0;\n    }\n\n    $pixels: ($pixels / $context) * 1em;\n\n    @return $pixels;\n}\n//ALIAS: same as above\n@function ems($pixels, $context: $base-font-size) {@return px-to-ems($pixels, $context);}\n\n//List Join\n//Convert a list to a string\n@function list-to-string($list, $separator: \",\") {\n    $string: \"\";\n\n    @for $i from 1 through length($list) {\n        $string: str-append($string, #{nth($list, $i)});\n\n        @if $i != length($list) {\n            $string: str-append($string, $separator);\n        }\n    }\n\n    @return $string;\n}\n\n//String to number conversion\n// Casts a number-like string to a true number\n@function str-to-number($string, $unitless: false){\n    //Maps to check against\n    $str-numbers:('0':0,'1':1,'2':2,'3':3,'4':4,'5':5,'6':6,'7':7,'8':8,'9':9);\n    //Leading 0 allows us to loop backwards without reaching null\n    $string: 0 + $string;\n\n    $total: 0;\n    $decimal: 1;\n    $negative: 1;\n    $number-found: false;\n    $unit: -1;\n\n    //Loop backwards through string until a number is found\n    @while not $number-found {\n\n        //Break if loop is longer than string, or longer than any possible unit value\n        @if (($unit * -1) >= str-length($string)) or $unit < -6 {\n            $unit: -2;\n            //set unitless to true regardless of user input.\n            $unitless: true;\n            $number-found: 1;\n        }\n\n        $slice: str-slice($string, $unit, $unit);\n        $number-found: map-get($str-numbers, $slice);\n        $unit:  $unit - 1;\n\n    }\n    //Compensate for Sass' non-zero\n    $unit: $unit + 1;\n    $value: str-slice($string, 1, $unit);\n    $str-length: str-length($value);\n\n    //Just return value if it's length is 2\n    @if $str-length == 2 {\n        @return map-get($str-numbers, str-slice($string, 2));\n    }\n\n    //Loop forward through string\n    @for $i from 1 through $str-length {\n        //Slice at each value\n        $sub-string: str-slice($value, $i, $i);\n        //Check for known number, convert to real number\n        $number: map-get($str-numbers, $sub-string);\n\n        @if $number {\n            //multiply total by ten to give us proper number placement\n            $total: $total * 10 + $number;\n\n        }@else if $sub-string == '-' {\n            //check for negative\n            $negative: -1;\n\n        }@else if $sub-string == '.' {\n            //check for decimal\n            $decimal-pos: $str-length - $i;\n            //Create a number to multiply by to recreate decimal\n            @for $j from 1 through $decimal-pos {\n                $decimal: $decimal * 0.1;\n            }\n        }\n    }\n\n    @if $unitless or $unit == -1 {\n        $unit: 1;\n    }@else {\n        $str-units: (\n            'px':1px,'%':1%,'em':1em,'rem':1rem,'ex':1ex,\n            'cm':1cm,'mm':1mm,'ch':1ch,'pica':1pica,'in':1in,'pt':1pt,'pc':1pc,\n            'vw':1vw,'vh':1vh,'vmin':1vmin,'vmax':1vmax\n        );\n        $unit-str: str-slice($string, ($unit + 1), -1);\n        $unit: map-get($str-units, $unit-str);\n\n        @if not $unit {\n            @warn \"#{$unit-str} is not a valid CSS unit.\";\n            $unit: 1;\n        }\n    }\n    //Take number and multiply it as necessary to achieve original.\n    @return ($total * $decimal)* $negative * $unit;\n}\n\n/* SG\n# Functions/Strings & Lists [[dev]]\n\n[Reference](https://github.com/devatrox/Sunglass)\n\n##### `contains()`\n###### function(`$data, $value`)\nGeneric `contains` function(similar to javascript's `indexOf`). Parses a variable(`$data`) for a `$value`. Returns boolean.\n@returns boolean\n@requires `str-contains()`, `list-contains()`\n\n##### `str-join()`\n###### function(`$list, $separator:','`)\nConverts a map or list to a string (`('this', 'and', 'this')` becomes `'this,and,this'`).\n@returns string\n\n##### `str-contains()`\n###### function(`$string, $value, $pos: 0`)\nChecks if a `$string` contains a `$value`. Optionally accepts a start positon.\n@returns boolean\n\n##### `str-append()`\n###### function(`$data, $separator:','`)\nAdds one string to another (e.g. `str-append('hello', 'world')` becomes `hello world`).\n@returns string\n\n##### `list-contains()`\n###### function(`$list, $value`)\nChecks whether a `$list` contains a `$value`.\n@returns boolean\n\n##### `list-print()`\n###### function(`$list, $depth: 1`)\nUsed to turn a list into a flat string. For debug purposes.\n@returns string\n\n##### `to-list()`\n###### function(`$string, $keep: 'both'`)\nConvert a value to a list. `$keep` accepts `'keys'`, `'values'`, or `'both'` for map conversion.\n@returns list\n\n*/\n\n//To list\n@function to-list($value, $keep: \"both\") {\n    $keep: if(index(\"keys\" \"values\" \"both\", $keep), $keep, \"both\");\n\n    @if type-of($value) == \"map\" {\n        $keys: ();\n        $values: ();\n\n        @each $key, $val in $value {\n            $keys: append($keys, $key);\n            $values: append($values, $val);\n        }\n\n        @if $keep == \"keys\" {\n            @return $keys;\n        }\n        @else if $keep == \"values\" {\n            @return $values;\n        }\n        @else {\n            @return zip($keys, $values);\n        }\n    }\n\n    @return if(type-of($value) != list, ($value,), $value);\n}\n\n//General 'contains' checker\n// Delegates methods to the appropriate function based on variable type\n@function contains($data, $value){\n    @if type-of($data == \"map\"){\n        @return map-has-keys($data, $value);\n    }@else if type-of($data == \"list\"){\n        @return list-contains($data, $value);\n    }@else if type-of($data == \"string\"){\n        @return str-contains($data, $value);\n    }\n}\n\n//String Join\n// Converts list to a string with an optional separator\n@function str-join($list, $separator: \",\") {\n    @return list-to-string($list, $separator);\n}\n\n// String contains check\n// Outputs true/false based on inputs\n@function str-contains($string, $value, $pos: 0) {\n\n    $string: str-slice($string, $pos);\n\n    @if str-index($string, $value) != null {\n        @return true;\n    }\n    @else {\n        @return false;\n    }\n}\n\n//String Append\n// Adds string to end of another string\n@function str-append($string, $insert) {\n    $string: if($string == null, '', $string);\n\n    @return str-insert($string, $insert, str-length($string) + 1);\n}\n\n//String replace\n// Replaces a value in a string with another\n@function str-replace($string, $search, $replace: '') {\n    $index: str-index($string, $search);\n\n    @if $index {\n        @return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);\n    }\n\n    @return $string;\n}\n\n// List contains check\n// Outputs true/false\n@function list-contains($list, $value) {\n    @return not not index($list, $value);\n}\n\n//Reverse a List\n@function list-reverse($list, $recursive: false) {\n    $result: ();\n\n    @for $i from length($list)*-1 through -1 {\n        @if type-of(nth($list, abs($i))) == list and $recursive {\n            $result: append($result, reverse(nth($list, abs($i)), $recursive));\n        }\n        @else {\n            $result: append($result, nth($list, abs($i)));\n        }\n    }\n\n    @return $result;\n}\n\n//List print\n@function list-print($list, $depth: 1) {\n    $output: '';\n\n    @if $depth > 0 {\n        @for $i from 1 through $depth {\n            $output: $output + $list;\n        }\n    }\n\n    @return $output;\n}\n\n/* SG\n# Functions/Maps [[dev]]\n\n@file globals/_gl-functions.scss\n\n[Reference](http://www.sitepoint.com/extra-map-functions-sass/)\n\n##### `map-deep-set()`\n###### function(`$map, $keys... [, $value]`)\nAdd to a deeply nested map key. Accepts any number of keys, but the final value is the new key.\n@returns map\n\n##### `map-depth()`\n###### function(`$map`)\nFind depth of a `$map`.\n@returns number\n\n##### `map-has-keys()`\n###### `[map], [key(s) to be checked ...]`\nDetermine whether a map contains certain keys.\n@returns boolean\n@alias map-contains-keys()\n\n##### `map-has-nested-keys()`\n###### function(`$map`, `$keys...`)\nCheck for the value of a nested key.\n@returns boolean\n@alias map-contains-nested-keys()\n\n##### `map-get-nested()`\n###### function(`$map`, `$keys...`)\nReturns nested map values. A deep version of Sass' `map-get()`.\n@returns string, boolean, list, or map\n\n##### `map-extend()`\n###### function(`$map`, `$maps...`(`$deep:true`))\nMerges multiple maps. Similar to jQuery's .extend().\n@returns map\n\n##### `map-add-depth()`\n###### function(`$map`, `$new-key:'base'`)\nAdds one level to a map using the new key to a map. Used by `generate_color_varations()`. (e.g. `(key: value, key: value)` becomes `(key:(new-key: value), key:(new-key: value))` )\n@returns map\n\n##### `map-print()`\n###### function(`$map`, `$level:1`)\nPrints map into a string (in a JSON-esque format). Useful for debugging.\n@returns string\n@alias map-inspect()\n\n*/\n\n\n//Deep Set\n//Update a deeply nested map key.\n@function map-deep-set($map, $keys... /*, $value */) {\n    $map-list: ($map,);\n    $result: null;\n\n    @if length($keys) == 2 {\n        @return map-merge($map, (nth($keys, 1): nth($keys, -1)));\n    }\n\n    @for $i from 1 through length($keys) - 2 {\n        $map-list: append($map-list, map-get(nth($map-list, -1), nth($keys, $i)));\n    }\n\n    @for $i from length($map-list) through 1 {\n        $result: map-merge(nth($map-list, $i), (nth($keys, $i): if($i == length($map-list), nth($keys, -1), $result)));\n    }\n\n    @return $result;\n}\n\n//Map depth finder\n// Returns a map's depth. Useful for debugging maps.\n@function map-depth($map) {\n    $level: 1;\n\n    @each $key, $value in $map {\n        @if type-of($value) == \"map\" {\n            $level: max(map-depth($value) + 1, $level);\n        }\n    }\n\n    @return $level;\n}\n\n//Check multiple map keys\n@function map-has-keys($map, $keys...) {\n    @each $key in $keys {\n        @if not map-has-key($map, $key) {\n            @return false;\n        }\n    }\n\n    @return true;\n}\n\n@function map-contains-keys($map, $keys...) {\n    @return map-has-keys($map, $keys);\n}\n\n//Check for deep map keys\n@function map-has-nested-keys($map, $keys...) {\n    @each $key in $keys {\n        @if not map-has-key($map, $key) {\n            @return false;\n        }\n\n        $map: map-get($map, $key);\n    }\n\n    @return true;\n}\n//ALIAS\n@function map-contains-nested-keys($map, $keys...) {@return map-has-nested-keys($map, $keys);}\n\n//Get map value at nested or 'deep' key, per $keys list\n@function map-get-nested($map, $keys...) {\n    @each $key in $keys {\n        @if type-of($map) != 'map' {\n            @return $map;\n        }\n        $map: map-get($map, $key);\n    }\n    @return $map;\n}\n\n//Map Extend\n// Similar to jQuery's extend function but for sass maps\n// Takes two maps and merges their differences\n@function map-extend($map, $maps... /*, $deep */) {\n    $last: nth($maps, -1);\n    $deep: $last == true;\n    $max: if($deep, length($maps) - 1, length($maps));\n\n    // Loop through all maps in $maps...\n    @for $i from 1 through $max {\n        // Store current map\n        $current: nth($maps, $i);\n\n        // If not in deep mode, simply merge current map with map\n        @if not $deep {\n            $map: map-merge($map, $current);\n        } @else {\n            // If in deep mode, loop through all tuples in current map\n            @each $key, $value in $current {\n\n                // If value is a nested map and same key from map is a nested map as well\n                @if type-of($value) == \"map\" and type-of(map-get($map, $key)) == \"map\" {\n                    // Recursive extend\n                    $value: map-extend(map-get($map, $key), $value, true);\n                }\n\n                // Merge current tuple with map\n                $map: map-merge($map, ($key: $value));\n            }\n        }\n    }\n\n    @return $map;\n}\n\n\n//Map depth-adder\n//-------------------------\n// Adds 'base'(or whatever initial key that's passed in) to a color map.\n// Used by color map generator function (colors/_colorfunctions)\n//--------------------------\n// 1. Check if map is less than or equal to the depth tolerance (default: 1).\n// 2. loops through all keys and values in the map.\n// 3. Make sure value isn't alreayd a map\n//   3a. If value is a map, then check to make sure $new-key is in the map\n//     3b. Duplicate first value of map (in case there are multiple)\n//     3c. Create new map with new-key and duplicated value\n// 4. Reformats those key-value pairs into a (key: (new-key: value ))\n// 5. Merges new depthy key-key-value back into the map.\n// 6. Returns the new map.\n\n@function map-add-depth($map, $new-key: 'base'){\n    $formatted-key:();\n    $new-map:'';\n\n    @each $key, $value in $map {                 //[2]\n        $formatted-key: ();\n        @if type-of($value) != \"map\" {                      //[3]\n            $formatted-key: ($key: ($new-key: $value));     //[4]\n\n        }@else if not map-has-key($value, $new-key) {       //[3a]\n            $duplicate-value: map-get($value, nth(map-keys($value), 1)); //[3b]\n            $duplicate-map: ($new-key : $duplicate-value);               //[3c]\n\n            $formatted-key: ($key: (map-merge($value, $duplicate-map))); //[4]\n        }\n        $map: map-merge($map, $formatted-key);        //[5]\n    }\n\n    @return $map;                                     //[6]\n}\n\n//Map printer\n//Print maps into a string\n// Useful for debugging maps.\n// Taken from: https://github.com/lunelson/sass-maps-plus\n\n@function map-inspect($map, $level: 1) {\n    $tab: '    ';\n    $cr: '\n';\n\n    @if type-of($map) != 'map' {\n        @return '#{inspect($map)}';\n    }\n\n    $indent: list-print($tab, $level + 1);\n    $output: '{' + $cr + $indent; $i: 1;\n\n    @each $key, $value in $map {\n        @if type-of($value) == 'map' {\n            $output: $output + '#{$key}: #{map-inspect($value, $level+1)}';\n        } @else {\n            $output: $output + '#{$key}: #{$value}';\n        }\n\n        @if $i < length(map-keys($map)) {\n            $output: $output + ',' + $cr + $indent;\n        }\n\n        $i: $i + 1;\n    }\n\n    $outdent: list-print($tab, $level);\n\n    @return $output + $cr + $outdent + '}';\n}\n//ALIAS\n@function map-print($map, $level: 1){\n    @return map-inspect($map, $level);\n}\n\n/* SG\n# Typography/Sizing [[dev]]\n\n##### `modular-scale()`\n###### function(`$scale`, `$ratio:``$$scale-ratio`)\nGenerates a pixel value that is an exponent of a ratio (`$ratio` defaults to `$$scale-ratio` value).\n@requires `pow()`, `cache()`, `strip-units()`\n@returns number (pixels)\n\n*/\n\n// Modular scale function to scale type up or down.\n@function modular-scale($scale, $ratio: $scale-ratio){\n    $modular-scale: $ratio;\n\n    @if length($ratio) == 2 {\n    // Making sure we don't have a ratio below 1.\n        @if nth($ratio,1) < nth($ratio,2){\n            $modular-scale:   nth($ratio, 2)/nth($ratio, 1);\n        }@else{\n            $modular-scale:   nth($ratio, 1)/nth($ratio, 2);\n        }\n    }\n\n    $font-size:  strip-units($base-font-size);\n    $pow: cache(pow, $modular-scale, $scale);\n    @return $pow * ($font-size) * 1px;\n}\n\n/* SG\n# Typography/Line-height [[dev]]\n\n##### `baseline()`\n###### function(`$font-size`, `$baseline`, `$multiple:1`)\n\nAligns a font-size to a baseline (`$baseline`). Returns a unitless value relative to the font-size (equivilent to ems). An optional multiple can be used to make a variation on the given baseline (using decimals will divide the the baseline).\n@returns number (unitless)\n\n*/\n\n@function baseline($font-size, $baseline: $base-line-height, $multiple:1, $floor: false) {\n    @if ($floor) {\n        @return floor($font-size / ($baseline * $multiple)) * ($baseline * $multiple) / $font-size;\n    }\n    @return ceil($font-size / ($baseline * $multiple)) * ($baseline * $multiple) / $font-size;\n}\n\n/* SG\n\n##### `baseline-curve()`\n###### function(`$x` , `$accel`: `1`)\n\nCalculates a where a number(`$x`) sits along a parabolic arc (curve). Change the curve's severity by changing its `$accel`.\nAn `$accel` of 1 is a smooth arc.\n`$accel` accepts any number between -2 and 2.35. A negative will invert the curve.\n\nThe formula: `y = (sqrt((x^1)+x) - sqrt(x^1)) / .4142135623730951`\n( [Visual](https://www.desmos.com/calculator/qswvc6q9kt) )\n\n@returns number\n@requires `sqrt()`, `pow()`\n\n*/\n\n@function baseline-curve($x, $accel:1) {\n    //Cache this exponent since it uses a decimal and requires a lot of computation\n    $x2: cache(pow, $x, $accel);\n    $x3: $x2 + $x;\n    $x3-root: sqrt($x3);\n    $x2-root: sqrt($x2);\n    $const: $SQRT2 - 1; // value used by logarithm (.4142135623730951)\n\n    $curve: ($x3-root - $x2-root) / $const;\n\n    @return min(1, $curve);\n}\n\n\n/*SG\n\n##### `baseline-calc()`\n###### function(`$font-size: $base-font-size, $font-base: $base-font-size, $basline-slack: $font-looseness`)\n\nCreates unitless line-heights that align to the baseline grid with consideration to the aesthetics of a given font size. Essentially makes sure larger font-sizes have smaller line-heights, while smaller font-sizes have larger ones.\nUses constraints based on upper and lower limits of pleasing line-heights, and finds where a given font-size should sit within those constraints. `$$font-looseness` increases the upper constraints, allowing for taller line heights on larger font sizes.\nDepends on `baseline()` for calculation and `baseline-curve()` to determine the deviance from the upper and lower constraints.\n\n@returns number (unitless)\n@requires `baseline()`, `baseline-curve()`\n\n*/\n\n$__font-index: ();\n$__font-warn: false;\n\n// Calculate the baseline of any particular font-size.\n@function baseline-calc(\n    $font-size: $base-font-size,\n    $font-base: $base-font-size,\n    $baseline-slack: $font-looseness\n){\n    $smallest-size: if(length($type-small-size) > 1, nth($type-small-size, 1), $type-small-size);\n    $smallest-size: max(10px, $smallest-size);\n    $largest-size: if(length($type-h1-size) > 1, nth($type-h1-size, 1), $type-h1-size);\n    $i: 0;\n\n    //Make sure baseline-slack is a percentage\n    @if unit($baseline-slack) != \"%\" {\n        @warn \"Baseline-slack/font-looseness should be a percentage.\";\n        $basline-slack: strip-units($baseline-slack);\n        $baseline-slack: percentage($baseline-slack);\n    }\n\n    $slack: ($baseline-slack / 100%);\n\n    //Base Highest and lowest line-height multiples\n    $base-lh-upper-bound: 1.9;\n    $base-lh-lower-bound: 1.1;\n\n    //smallest font-size's highest/lowest line-height multiple\n    // Use global settings to help determine, where possible\n    $sm-lh-upper-bound: 2 + ($slack / 2);\n    $sm-lh-lower-bound: 1 + ($slack / 2);\n\n    //Largest font-size's highest/lowest line-height multiple\n    // Use baseline slack to determine constraints\n    $lg-lh-upper-bound: 1.02 + ($slack / 2);\n    $lg-lh-lower-bound: 0.91 + ($slack / 2);\n\n    //Smallest/Largest font sizes to calculate against\n    $sm-font-size: 9 + ($slack * 10);\n    $lg-font-size: 95 + ($slack * 50);\n\n    //Baseline-curve progress percentages\n    $percent-along-current: 0;\n    $percent-along-upper: 0;\n    $percent-along-lower: 0;\n\n    //Non-adjusted placement of the font-size between largest and smallest font sizes\n    $true-percent-along: strip-units(($font-size - $sm-font-size) / ($lg-font-size - $sm-font-size));\n\n    //Make sure handle fonts larger than our initial assumptions\n    @if $font-size <= $sm-font-size {\n        //Set progress to 0%\n        $base-lh-lower-bound: 1;\n        $base-lh-upper-bound: $sm-lh-upper-bound;\n\n        @if $font-size > $smallest-size {\n            $true-percent-along: ($slack / 10);\n        }@else {\n            $true-percent-along: .001;\n        }\n    }\n    @else if $font-size >= $lg-font-size {\n        //Set progress to 100%\n        $percent-along-current: 1;\n        $percent-along-lower: 1;\n        $percent-along-upper: 1;\n        $base-lh-lower-bound: $lg-lh-lower-bound;\n        $base-lh-upper-bound: $lg-lh-upper-bound;\n        $lg-font-size: $font-size + ($slack * 50);\n    }\n    // Determine where we're at on the curve\n    @else {\n        //Standard curve\n        $percent-along-current:cache(baseline-curve, $true-percent-along, 1);\n        //Upper boundary curve\n        $percent-along-upper:  cache(baseline-curve, $true-percent-along, 1.3);\n        //Lower boundary curve\n        $percent-along-lower:  cache(baseline-curve, $true-percent-along, 1.9);\n    }\n\n    $upper-boundary: ($sm-lh-upper-bound - $lg-lh-upper-bound);\n    $lower-boundary: ($sm-lh-lower-bound - $lg-lh-lower-bound);\n\n    //Adjust percentages to line-height values\n    $base-lh-upper-bound: $sm-lh-upper-bound - ($percent-along-upper * $upper-boundary);\n    $base-lh-lower-bound: $sm-lh-lower-bound - ($percent-along-lower * $lower-boundary);\n\n    @if $debug-fonts {\n        @if index($__font-index, $font-size) == null {\n            @debug \"font-size: #{$font-size}\";\n            @debug \"%: #{percentage($true-percent-along)}\";\n            @debug \"%u: #{percentage($percent-along-upper)}, %l: #{percentage($percent-along-lower)}\";\n            @debug \"ub: #{$base-lh-upper-bound} (#{$font-size * $base-lh-upper-bound}), lb: #{$base-lh-lower-bound} (#{$font-size * $base-lh-lower-bound})\";\n            @debug \"sm-lh-ub: #{$sm-lh-upper-bound}, sm-lh-lb: #{$sm-lh-lower-bound}\";\n            @debug \"lg-lh-ub: #{$lg-lh-upper-bound}, lg-lh-lb: #{$lg-lh-lower-bound}\";\n            @debug \"slack: #{$slack}\";\n        }\n    }\n\n    //If the lower bound is somehow higher than the upper bound,\n    // let's just reset the bounds to simple values\n    @if $base-lh-lower-bound > $base-lh-upper-bound {\n        $base-lh-lower-bound: 1;\n        $base-lh-upper-bound: 2;\n    }\n\n    //First attempt\n    $baseline: $base-line-height;\n    $line-height: baseline($font-size, $baseline);\n\n    //Second attempt\n    @if ($line-height < $base-lh-lower-bound) or ($line-height > $base-lh-upper-bound) {\n\n        //Attempt using a negative line-height for very large sizes\n        @if ($true-percent-along > .9) {\n            $line-height: baseline($font-size, $baseline, .5, $floor: true);\n        }\n        @else if $font-size < $base-font-size {\n            $line-height: baseline($font-size, $baseline, 1.5);\n        }\n        @else {\n            $line-height: baseline($font-size, $baseline, .5);\n        }\n    }\n\n    //Set up while loop\n    $quit: false;\n\n    //Test baselines until we find a match\n    @while(($line-height < $base-lh-lower-bound or $line-height > $base-lh-upper-bound)\n        and not $quit //allows for infinite loop bailout\n    ){\n        $i: $i + .5;\n        //Try baselines in half increments\n        $line-height: baseline($font-size, $baseline, $i);\n\n        //Bail-out function to prevent infinite loops\n        // Set quit to true so we can escape this hellish loop\n        @if $i > (($font-size / 1px) / 2)  {\n            @if (not $__font-warn) and ($debug-fonts) {\n                @warn \"\n                Your font-looseness might be too high or low, watch for weird baselines and slow compile times.\n                FS: #{$font-size} / LH: #{$line-height}\n                Tolerances: #{$base-lh-upper-bound} / #{$base-lh-lower-bound}\n                loops: #{$i * 2}\";\n                $__font-warn: true !global; //Prevent seeing this warning multiple times\n            }\n\n            //default to normal calculated line-height\n            $line-height: baseline($font-size, $baseline);\n            $quit: true;\n        }\n    }\n\n    @if $debug-fonts {\n        @if index($__font-index, $font-size) == null {\n            $__font-index: append($__font-index, $font-size) !global;\n            @debug \"lh: #{$line-height * $font-size} / #{$line-height} \";\n            @debug \"loops: #{$i * 2}\";\n            @debug \"-----\";\n        }\n    }\n\n    @return $line-height;\n}\n\n//Add to silent classes registry\n@function silents-register($map, $key){\n    @if $debug-silent-classes {\n        @if map-get($silent-class-registry, $key) == null {\n            $silent-class-registry: map-merge($silent-class-registry, ($key:())) !global;\n        }\n        $map: map-merge(map-get($silent-class-registry, $key), $map);\n        @return map-deep-set($silent-class-registry, $key, $map);\n    }@else {\n        @return null;\n    }\n}\n\n\n\n// Global math constants\n$pi:    3.1415926535897932384626433832795028841971693993751;\n$π:     $pi;\n$PI:    $pi;\n$e:     2.71828182845904523536028747135266249775724709369995;\n$E:     $e;\n$LN2:   0.6931471805599453;\n$SQRT2: 1.4142135623730951;\n\n\n/* SG\n\n# Functions/Math [[dev]]\n\nMost functions taken from [Sassy Math](https://github.com/Team-Sass/Sassy-math/blob/master/sass/math.scss).\n\n*/\n\n\n/* SG\n\n##### `pow()`\n###### function(`$number`, `$exponent`, `$precision:12`)\n\nA more robust exponent multiplication which allows for decimal-based exponents. This **fully** replaces Compass' pow() function (allows for float-based exponents).\n\n[Reference](https://gist.github.com/nathancrank/7539155)\n\n@returns number\n@requires log()\n@alias exponent()\n\n*/\n\n@function pow($base, $exp) {\n    @if $exp == floor($exp) {\n        $r: 1;\n        $s: 0;\n        @if $exp < 0 {\n            $exp: $exp * -1;\n            $s: 1;\n        }\n        @while $exp > 0 {\n            @if $exp % 2 == 1 {\n                $r: $r * $base;\n            }\n            $exp: floor($exp * 0.5);\n            $base: $base * $base;\n        }\n        @return if($s != 0, 1 / $r, $r);\n    } @else {\n        $log: log($base);\n        $exp: cache(exp, ($log * $exp));\n        @return $exp;\n    }\n}\n\n// ALIAS\n@function exponent($base, $exponent) {\n    @return pow($base, $exponent);\n}\n\n\n/* SG\n\n##### `log()`\n###### function(`$x`)\nReturns the natural logarithm of a number.\n\n```scss\n$value:   log(2)  // 0.69315\n$value2:  log(10) // 2.30259\n```\n\n@returns number\n\n*/\n\n@function log($x) {\n    @if $x <= 0 {\n        @return 0;\n    }\n    $k-frexp: frexp(($x / $SQRT2));\n    $k: nth($k-frexp, 2);\n    $x: $x / ldexp(1, $k);\n    $x: ($x - 1) / ($x + 1);\n    $x2: $x * $x;\n    $i: 1;\n    $s: $x;\n    $sp: null;\n    @while $sp != $s {\n        $x: $x * $x2;\n        $i: $i + 2;\n        $sp: $s;\n        $s: $s + $x / $i;\n    }\n    @return $LN2 * $k + 2 * $s;\n}\n\n/* SG\n\n##### `frexp()`\n###### function(`$x`)\nReturns a two-element list containing the normalized fraction and exponent of number.\n\n@returns list (fraction, exponent)\n\n*/\n\n@function frexp($x) {\n    $exp: 0;\n    @if $x < 0 {\n        $x: $x * -1;\n    }\n    @if $x < 0.5 {\n        @while $x < 0.5 {\n            $x: $x * 2;\n            $exp: $exp - 1;\n        }\n    } @else if $x >= 1 {\n        @while $x >= 1 {\n            $x: $x / 2;\n            $exp: $exp + 1;\n        }\n    }\n    @return $x, $exp;\n}\n\n/* SG\n\n##### `ldexp()`\n###### function(`$x, $exp`)\n\nReturns $x * 2^$exp\n\n*/\n\n@function ldexp($x, $exp) {\n    $b: if($exp >= 0, 2, 1 / 2);\n    @if $exp < 0 {\n        $exp: $exp * -1;\n    }\n    @while $exp > 0 {\n        @if $exp % 2 == 1 {\n            $x: $x * $b;\n        }\n        $b: $b * $b;\n        $exp: floor($exp * 0.5);\n    }\n    @return $x;\n}\n\n/* SG\n\n##### `exp()`\n###### function(`$x`)\n\nReturns E^x, where x is the argument, and E is Euler's constant, the base of the natural logarithms.\n\n```scss\n$value: exp(1)  // 2.71828\n$value2: exp(-1) // 0.36788\n```\n\n@returns Number\n\n*/\n\n@function exp($x) {\n    $ret: 0;\n    @for $n from 0 to 24 {\n        $ret: $ret + pow($x, $n) / fact($n);\n    }\n    @return $ret;\n}\n\n/* SG\n\n##### `fact()`\n###### function(`$x`)\n\nReturns the factorial of a non-negative integer.\n\n```scss\n$value:  fact(0) // 1\n$value2: fact(8) // 40320\n```\n@return Number\n\n*/\n\n@function fact($x) {\n    @if $x < 0 or  $x != floor($x) {\n        @warn \"Argument for `fact()` must be a positive integer.\";\n        @return null;\n    }\n\n    $ret: 1;\n\n    @while $x > 0 {\n        $ret: $ret * $x;\n        $x: $x - 1;\n    }\n\n    @return $ret;\n}\n\n/* SG\n\n##### `gcd()`\n###### function(`$number-1`, `$number-2`)\n\nGreatest Common Divisor calculation (useful for calculating grids and widths).\n@returns number\n\n*/\n\n@function gcd($number-1, $number-2) {\n  // From: http://rosettacode.org/wiki/Greatest_common_divisor#JavaScript\n    @if $number-2 != 0 {\n        @return gcd($number-2, ($number-1 % $number-2));\n    }@else {\n        @return abs($number-1);\n    }\n}\n\n/* SG\n\n##### `lcm()`\n###### function(`$a`, `$b`)\n\nFinds the least common multiple. Use with caution...if there is no LCM, then you compilation will error out.\n\n@returns number\n\n*/\n\n@function lcm($a, $b) {\n    $a: round($a);\n    $b: round($b);\n    $gcd: gcd($a, $b);\n    $result: ($a * $b) / $gcd;\n    @return $result;\n}\n\n\n/* SG\n\n##### `nth_root()`\n###### function(`$base`, `$n:2`, `$precision:12`)\n\nAdvanced calculation for square roots, cube roots, etc. of a value.\n[Reference](http://rosettacode.org/wiki/Nth_root#JavaScript)\n\n@returns number\n\n*/\n\n@function nth_root($base, $n: 2, $precision: 12) {\n    $prec: $precision;\n    $x: 1;\n\n    @for $i from 0 through $prec {\n        $x: 1 / $n * (($n - 1) * $x + ($base / pow($x, $n - 1)));\n    }\n\n    @return $x;\n}\n\n/* SG\n\n##### `sqrt()`\n###### function(`$base`, `$precision:12`)\n\nFind the square root of a value.\n\n@returns number\n@alias `sqroot()`\n\n*/\n\n@function sqrt($base, $precision: 12) {\n    $guess: random(20);\n    $root: $guess;\n\n    @for $i from 1 through $precision {\n        $root: $root - (pow($root, 2) - $base) / (2 * $root);\n    }\n    @return $root;\n}\n\n@function sqroot($r) {\n  $x0: 1; // initial value\n  $solution: false;\n\n  @for $i from 1 through 10 {\n    @if abs(2 * $x0) < 0,00000000000001 { // Don't want to divide by a number smaller than this\n      $solution: false;\n    }\n\n    $x1: $x0 - ($x0 * $x0 - abs($r)) / (2 * $x0) !global;\n\n    @if ( abs($x1 - $x0) / abs($x1)) < 0,0000001 { // 7 digit accuracy is desired\n      $solution: true;\n    }\n\n    $x0: $x1;\n  }\n\n  @if $solution == true {\n    // If $r is negative, then the output will be multiplied with <a href=\"http://en.wikipedia.org/wiki/Imaginary_number\">i = √-1</a>\n    // (√xy = √x√y) => √-$r = √-1√$r\n    @if $r < 0 {\n      @return $x1 #{i};\n    }\n    @else {\n      @return $x1;\n    }\n  }\n  @else {\n    @return \"No solution\";\n  }\n}\n\n\n/* SG\n\n##### `sin()`\n###### function(`$angle`)\n\nDetermines the Sine of an angle.\n[Reference](https://unindented.org/articles/trigonometry-in-sass/)\n\n@returns number\n*/\n\n@function sin($angle) {\n    $sin: 0;\n    $angle: rad($angle);\n    // Iterate a bunch of times.\n    @for $i from 0 through 10 {\n        $sin: $sin + pow(-1, $i) * pow($angle, (2 * $i + 1)) / fact(2 * $i + 1);\n    }\n    @return $sin;\n}\n\n//Hyperbolic sine\n@function sinh($number) {\n    $top: exponent($e, (2 * $number)) - 1;\n    $bottom: 2 * exponent($e, $number);\n    @return  $top / $bottom;\n}\n\n/* SG\n\n##### `cos()`\n###### function(`$angle`)\n\nDetermines the Cosine of an angle.\n@returns number\n\n*/\n\n@function cos($angle) {\n    $cos: 0;\n    $angle: rad($angle);\n    // Iterate a bunch of times.\n    @for $i from 0 through 10 {\n        $cos: $cos + pow(-1, $i) * pow($angle, 2 * $i) / fact(2 * $i);\n    }\n    @return $cos;\n}\n\n/* SG\n##### `tan()`\n###### function(`$angle`)\n\nDetermines the Tangent of an angle.\n@returns number\n\n*/\n\n@function tan($angle) {\n    @return sin($angle) / cos($angle);\n}\n\n/* SG\n\n##### `golden()`\n###### function(`$base: 1`)\n\nGet the golden ratio from `$base`.\n@returns number\n@alias `$$golden_ratio`\n\n*/\n\n@function golden($base: 1) {\n    @return (1/2 + sqrt(5) / 2) * $base;\n}\n\n$golden_ratio: golden();\n\n\n@function rad($angle) {\n    $unit: unit($angle);\n    $unitless: $angle / ($angle * 0 + 1);\n    // If the angle has 'deg' as unit, convert to radians.\n    @if $unit == deg {\n        $unitless: $unitless / 180 * $pi;\n    }\n    @return $unitless;\n}\n\n//Alias\n@function angle-to-rad($angle) {\n    @return rad($angle);\n}\n\n\n// Math helpers\n// From https://github.com/inuitcss/tools.functions/blob/master/_tools.functions.scss\n//\n// Halve and double numbers, returning rounded integers. E.g.:\n//\n// .foo {\n//     padding: halve(3.2px);\n// }\n//\n// Outputs:\n// .foo{padding: 2px;}\n//\n@function quarter($number) {\n    @return round($number / 4);\n}\n\n@function halve($number) {\n    @return round($number / 2);\n}\n\n@function double($number) {\n    @return round($number * 2);\n}\n\n@function quadruple($number) {\n    @return round($number * 4);\n}\n","/* SG\n# Config/Typography Settings [[dev]]\n\n##### `$$base-font-size`\n###### Pixel value\nFont size all other values will use for calculation. Will be converted to `rems`.\n\n##### `$$base-line-height`\n###### Pixel value\nLine-height for base font-size. Will be used to determine the vertical spacing values when `type-space()` is used.\n\n##### `$$font-looseness`\n###### Percentage\nWhat to base the tightness/looseness of automatically-generated `line-heights`.\n\n##### `$$auto-scale-type`\n###### Boolean\nUses `$$scale-ratio` to create font sizes for headings starting from the `$$base-font-size`. Overwrites `$$type-[h#]-size`.\n\n##### `$$scale-ratio`\n###### Numeric (float)\nUsed for `$$auto-scale-type` and for `modular-scale()`.\n\n##### `$$rem-px-fallback`\n###### Boolean\nDetermines whether `rems()` conversion includes a pixel-value fallback for older browsers like IE8.\n\n##### `$$indented-paragraphs`\n###### Boolean\nDetermines whether to generate css for paragraphs with a text indent, rather than paragraphs with margins between them.\n\n*/\n\n$base-font-size:            16px;\n$base-line-height:          24px;\n$font-looseness: \t\t\t15%;\n$auto-scale-type:           false;\n$scale-ratio:               1.35;\n\n$vertical-space:\t\t\t$base-line-height; //Maintains best vertical rhythm\n$horizontal-space: \t\t\t$base-line-height;\n\n$rem-px-fallback: \t\t\tfalse;\n\n$indented-paragraphs:       false;\n\n\n\n/* SG\n# Config/Typography Settings [[dev]]\n\n##### `$$type-[h#]-size`\n###### List (pixel value [, pixel or unitless value])\nVariables used to generate heading (and small) font-sizes and line-heights. A secondary value will force the line-height to that base-value.\n\n_NOTE: First value must be pixel values(or a function that generates a pixel value like `modular-scale()`), but the optional secondary value can be unitless._\n*/\n\n\n$type-h1-size:           (modular-scale(6));\n$type-h2-size:           (modular-scale(5));\n$type-h3-size:           (modular-scale(4));\n$type-h4-size:           (modular-scale(3));\n$type-h5-size:           (modular-scale(2));\n$type-h6-size:           (modular-scale(1));\n$type-small-size: \t\t (ceil(modular-scale(-1)));\n\n\n/* SG\n# Config/Typography Settings [[dev]]\n\n##### `$$primary-font-stack`, `$$secondary-font-stack`, `$$monospace-font-stack`, `$$icon-font-stack`\n###### String\nUsed wherever font-families are declared. Use `null` if nothing exists.\n\n##### `$$use-web-fonts`\n###### Boolean\nWhether to generate `@font-face` values based on `$$font-file-name` (and the other `$font-` variables).\n\n##### `$$font-file-name`\n###### List (string)\nUses for automatically generated `@font-face` declarations. Describes the filename as well as the font-family name reference. _File names and @font-face values must be the same (e.g. 'opensans' and 'opensans.ttf').**Casing matters**._\n\n##### `$$font-weights`\n###### List (nested)\nEach parenthesis corresponds to each name in `$$font-file-name`. Determines how many `@font-face` weights are generated per font.\n\n##### `$$font-italics`\n###### List (nested) (boolean)\nCorresponds to each value in `$$font-weights`. (e.g. if `$font-weights: (400,700),(200,400)` and `$font-italics: (true),(false,true)` then the first font will have italics in the 400 and 700 weights while second font will have italics in the 400 weight).\n\n##### `$$font-include-woff2`\n###### Boolean (list)\nDetermines whether woff2 formats be included in the `@font-face` generation. Can be a list if each font has different values (not recommended since woff2 is the most performant font-file format).\n\n##### `$$font-include-eot`\n###### Boolean (list)\nDetermines whether to generate `@font-face` values that point at an .eot file. Fallback for IE8.\n\n*/\n\n\n$primary-font-stack:      \t\"opensans\", \"Helvetica Neue\", \"Helvetica\", \"Arial\", sans-serif;\n\n$secondary-font-stack:     \t\"Asap\", \"Garamond\",\"Baskerville\", \"Baskerville Old Face\", \"Hoefler Text\", \"Times New Roman\", serif;\n\n$monospace-font-stack: \t\t\"Consolas\", \"Andale Mono WT\", \"Andale Mono\", \"Lucida Console\", \"Lucida Sans Typewriter\", \"DejaVu Sans Mono\", \"Bitstream Vera Sans Mono\", \"Liberation Mono\", \"Nimbus Mono L\", \"Monaco\", \"Courier New\", \"Courier\", monospace;\n\n$icon-font-stack: \t\t\tnull;\n\n//Custom web fonts\n$use-web-fonts: \t\ttrue;\n//Relative path to fonts from CSS file\n$font-file-location: \t'/public/fonts';\n$font-file-name:        (\"Asap\", 'opensans');\n$font-weights:          (400 , 700 ),  (200,  400,  700 );\n$font-italics:          (true, true),  (true, true, true);\n\n$font-include-woff2:    (false, false);\n$font-include-eot: \t\tfalse;\n\n\n/* SG\n# Config/Responsive Settings [[dev]]\n\n##### `$$max-site-width`\n###### Pixel value\nMaximum desktop width for the site wrapper.\n_This value is also useful as a breakpoint, since this is the point at which your site is going to squish._\n\n##### `$$max-content-width`\n###### Pixel value\nMaximum width for content set at the `$$base-font-size`. This should be set to whatever creates the ideal line-length for standard content (Usually 45-75 characters).\n_Also useful as a breakpoint, since it is typical that your viewport is now smaller than your ideal line-length._\n\n##### `$$max-wide-content-width`\n###### Pixel value\nSimilar to `$$max-content-width`, but for type that might be a little larger, but smaller than your maximum site width(`$$max-site-width`). Useful for hero-style text treatments and content blocks that need a bit of constraint.\n\n*/\n\n$max-site-width:         1360px;\n\n$max-content-width: \t 690px;\n\n$max-wide-content-width: 910px;\n\n\n/* SG\n# Config/Breakpoints [[dev]]\n\n##### `$$breakpoints`\n###### Map (`breakpoint-name: 'breakpoint-value'`)\nSets up variables for media-queries. Used in `@media-query()`.\n\n_Note: It's usually good to convert your pixel values to ems to ensure best browser behavior. Can be accomplished via `#{ems(10px)}`_\n\n**Example**\n```scss\n$breakpoints: (\n  'small':'(min-width: 320px)',\n  'bigs':'(min-width: 850px)'\n);\n```\n*/\n\n$breakpoints: (\n    //Mostly phones\n    'smalls': '(max-width:#{ems($max-wide-content-width)})',\n\n    //Small Phones\n    'small': '(max-width: #{ems($max-content-width)})',\n\n    //Large (Modern) phones/phablets\n    'smallish': '(min-width: #{ems($max-content-width+1px)}) and (max-width: #{ems($max-wide-content-width)})',\n\n    //Tablets, Desktops and larger\n    'bigs': '(min-width: #{ems($max-wide-content-width+1px)})',\n\n    //Mostly Tablets and small laptops. Overrides Bigs\n    'lap': '(min-width: #{ems($max-wide-content-width + 1px)}) and (max-width: #{ems($max-site-width)})',\n\n    //Large Tablets and Desktops. Overrides Bigs.\n    'desk': '(min-width: #{ems($max-site-width)})'\n);\n\n\n/* SG\n# Config/Grid Settings [[dev]]\n\n##### `$$grid-columns`\n###### Number\nBase number of grid columns to be generated. Note that any column number will include all fractions of the fewer columns. For instance, a 12-column grid would also include all fractions of 1-12 (including things like three-sevenths).\n\n##### `$$grid-gutter`\n###### Pixel value\nSpace between grid items. Also used in `type-space()` for horizontal spacing units.\n\n##### `$$grid-silent-classes`\n###### Boolean\nIf set to false, actual grid classes will be output to CSS.\n\n##### `$$grid-push`, `$$grid-pull`\n###### Boolean\nDetermines whether to include extra grid classes for positional grid modifiers.\n*/\n\n$grid-columns:           13;\n$grid-gutter:            32px;\n$grid-silent-classes:\t true;\n$grid-push:              true;\n$grid-pull:              true;\n\n\n/* SG\n##### `$$grid-inline-block`\n###### Boolean\nCreate grids using an inline-block-based layout.\n\n##### `$$grid-markup-fix`\n###### Boolean\n**Only applicable to inline-block grid.** If set to `true`, html must have no white space (or comments) between grid items. Almost always set to `false`.\n\n##### `$$grid-letter-space-fix`\n###### em value\n**Only applicable to inline-block grid.** If `$$grid-markup-fix` is not used, then a negative `em` value must be set to remove whitespace between columns. Usually, `-0.45em` works, but this should be adjusted based on the natural width of the font-family set on the body element.\n\n##### `$$grid-flex`\n###### Boolean\nIf set to `true`, the grid will add markup for a flexbox-based layout. Can be combined with an inline-block-based grid to provide an older browser fallback.\n\n##### `$$grid-floats`\n###### Boolean\nIf set to `true`, the grid uses floats-based layout. **This is usually not recommended since inline-block and flexbox are much are more flexible.**\n*/\n\n$grid-inline-block:      true;\n$grid-markup-fix:        false;\n$grid-letter-space-fix:  -0.45em;\n\n$grid-flex:              true;\n$grid-floats:            false;\n\n\n/* SG\n##### `$$breakpoints-has-widths`, `$$breakpoints-has-push`, `$$breakpoints-has-pull`\n###### List (string)\nDetermines what classes (widths, pushes, pulls) get generated at `$$breakpoints`. The list's order determines the output order. This is useful if you want one breakpoint to override another.\n*/\n\n$breakpoint-has-widths: ('smalls', 'small', 'smallish', 'bigs', 'lap', 'desk');\n$breakpoint-has-push:   ('smalls', 'small', 'smallish', 'bigs', 'lap', 'desk');\n$breakpoint-has-pull:   ('smalls', 'small', 'smallish', 'bigs', 'lap', 'desk');\n\n\n/* SG\n# Config/Utility Class Settings [[dev]]\n\n##### `$$breakpoint-namespace-character`\n###### String\nUsed to define what character comes after an auto-generated responsive class. A setting of '_' would create classes like `smalls_space-v` whereas a '@' would create classes like `smalls@space-v`.\n*/\n\n$breakpoint-namespace-character: '_';\n\n/* SG\n# Config/Utility Class Settings [[dev]]\n\n##### `$$display-classes`\n###### Map (string: string)\nVariable used to generate display classes. Key value pairs determine the class name and the display value.\n\n**Example**\n```scss\n//SCSS input\n$display-classes: ('show':'block');\n\n//CSS output\n.show { display: block; }\n```\n\n##### `$$spacing-classes`\n###### Map (`string: string`)\nVariable used to generate utility (override) spacing classes. Classes are created via `@spacing-utilities()`.\n\n**Keys and Values**\n* 'directions': Direction class suffixes.\n* 'units': Numeric multiples (e.g. `2` or `-1`) of your spacing units (`$$horizontal-space` and `$$vertical-space`).\n* 'properties': Class name aliases for padding and margin.\n\n**Example**\n```scss\n//SCSS Input\n    $display-classes: (\n        'directions': (\n            '-t': 'top',\n            '-r': 'right',\n            '-v': 'top' 'bottom'\n        ),\n        'units': (\n            '-2': 2,\n            '-neg': -1\n        ),\n        'properties': (\n            'pad': 'padding',\n            'margin': 'space'\n        )\n    );\n\n//CSS output\n    // Assume spacing units are 1rem, for simplicity\n    .space-t-2, .space-v-2 { margin-top: 2rem; }\n    .space-v-2 { margin-bottom: 2rem; }\n    .space-r-2 { margin-right: 2rem; }\n    .space-t-neg { margin-top: -1rem; }\n    .space-r-neg { margin-right: -1rem; }\n\n    .pad-t-2 { padding-top: 2rem; }\n    .pad-r-2 { padding-right: 2rem;}\n    //--Negative padding classes filtered out since they are invalid---//\n\n    @media only screen and (min-width:300px){...}\n    //repeated for all media-queries defined by $breakpoints-has-spacing-classes...\n```\n*/\n\n$display-classes: (\n    'show': block,\n    'il': inline,\n    'i-block': inline-block,\n    'hide': none,\n    'flex': flex\n);\n\n// If $breakpoint-has-spacing-classes is false, this can be ignored\n$spacing-classes: (\n    directions: (\n        '': '',\n        '-t':'top',\n        '-b':'bottom',\n        '-l':'left',\n        '-r':'right',\n        '-v':'top' 'bottom',\n        '-h': 'right' 'left'\n    ),\n    units: (\n        '-0': 0,\n        '': 1,\n        '-quarter':.25,\n        '-half':.5,\n        '-2': 2,\n        '-neg-quarter': -.25,\n        '-neg-half': -.5,\n        '-neg': -1,\n        '-neg-2': -2\n    ),\n    properties: (\n        'pad': padding,\n        'space': margin\n    )\n);\n\n\n/* SG\n# Config/Utility Class Settings [[dev]]\n\n##### `$$breakpoints-has-alignment-classes`, `$$breakpoints-has-spacing-classes`, `$breakpoints-has-display-classes`, `$breakpoint-has-type-classes`\n###### List (keys from `$$breakpoints`)\nDetermines what utility classes get generated at `$$breakpoints`. The list's order determines cascade The list's order determines the output order. This is useful if you want one breakpoint to override another.\nA `false` value will output no classes of that type.\n*/\n\n$breakpoint-has-alignment-classes: \t\t\t('smalls', 'bigs', 'desk');\n$breakpoint-has-spacing-classes: \t\t\t('smalls', 'bigs', 'desk');\n$breakpoint-has-display-classes: \t\t\t('smalls', 'bigs');\n$breakpoint-has-type-classes: \t\t\t\t('smalls', 'bigs');\n\n\n/* SG\n# Config/Color Settings [[dev]]\n\n##### `$$base-colors`\n###### Map (key : color value)\nSets up consistent color names to be used for color-palette. Dark and light values will be automatically generated. Key values should be accessed through `colors()`.\n`type`, `links`, and `bg` key values are required for some starter styles. If you choose not to use them, just replace their references in the appropriate files.\n\nSupports a nested map style like the following:\n```scss\n$base-colors: (\n  'type':(\n    'base':red,\n    'light': pink,\n    'dark':maroon\n  ),\n  'links':(\n    'base':blue,\n    'light': sky,\n    'dark': navy\n  ),\n  'bg': (\n    'base': #fff,\n    'dark': #ddd\n  )\n);\n```\n*/\n\n//Create color variations based on the map, using the settings below\n$base-colors: generate-color-variations(\n    $map: (\n        'type': #0a1c2b, //Required\n\n        'links': #0d497b, //Required\n\n        'bg': #f6f8fb, //Required\n\n        //Change the following names and colors project-specific\n        'styleguide': (\n            'base': #5E839E,\n            'light': #CADDE2,\n            'lighter': #F5D1DD,\n            'lightest': #E0ECF0,\n            'highlight':#f60255,\n            'dark': #175CA2,\n            'darker': #114a84,\n            'darkest': #081D33\n        ),\n\n        'accent': mix(#d40026, #AD0909, 45%),\n\n        'success': #bada55\n    ),\n    $variations: ( //Color variation names\n        'light', 'lighter', 'lightest',\n        'dark', 'darker', 'darkest'\n    ),\n    $functions: ( //functions to use when creating variations\n        'linearlight', 'lineardodge', 'tint',\n        'darken', 'linearburn', 'linearburn'\n    ),\n    $blending-colors: ( //Allows for more uniform colors\n        #bfccd6, #dee9ec, null,\n        null, #4c5a66, #323d42\n    ),\n    $increments: ( //How strongly each color should be blended\n        50%,   60%,   80%,\n        5%,   40%,   70%\n    )\n);\n\n\n/* SG\n# Config/Debug Settings [[dev]]\n\n_NOTE: These settings, when set to `true`, will slow down compilation somewhat._\n\n##### `$$debug-fonts`\n###### Boolean\nWhether to include debug statements about font sizes and line-heights as they're generated. Useful if you're getting weird values on auto-generated line-heights.\n\n* %: Distance from the lowest font-size.\n* ub: Line-height upperbounds\n* lb: Line-height lowerbounds\n* lh: Final line-height (in pixels and unit-less).\n* loops: Number of times it took to process the line-height. High numbers can indicate font-sizes that are very difficult to process.\n\n##### `$$debug-baseline`\n###### Boolean\nAdds style for a `baseline-on` class that will show a grid of the baseline on any element (most useful on the `body` or `html` tag). Makes vertical alignment easier.\n\n\n##### `$$debug-silent-classes`\n###### Boolean\nStores all auto-generated silent classes into a map that is then output as a comment at the end of the final css. Useful for getting an overview of values that are stored by the framework.\n\n##### `$$debug-breakpoints`\n###### Boolean\nDisplays the current breakpoint (from `$$breakpoints`) name on a psuedo element on the body. Makes debugging media queries a little simpler.\n\n*/\n\n$debug-fonts: \t\t\t\tfalse;\n\n$debug-baseline:       \t \ttrue;\n\n$debug-silent-classes: \t\tfalse;\n\n$debug-breakpoints:         true;\n\n\n/* SG\n# Config/Slick Settings [[dev]]\n\n##### `$$slick-[]-[]`\nConfiguration for slick carousel jQuery plugin.\n[See Slick documentation for more](https://github.com/kenwheeler/slick/#sass-variables)\n\n*/\n\n$include-slider: \t\t\t\t\tfalse;\n\n$slick-font-path: \"fonts/\";\n$slick-loader-path: \"../images/\";\n$slick-arrow-color: white;\n$slick-dot-color: black;\n$slick-prev-character: '\\2190';\n$slick-next-character: '\\2192';\n$slick-dot-character: '\\2022';\n\n//Tab-box settings\n\n//Do you want to create styles for tabs?\n//Might be unnecessary for certain projects.\n$include-tabs: \t\t\t\t\t\ttrue;\n\n$tab-invert-active:                 false;\n$tab-border:                        color(links);\n$tab-button-bg:                     color(links, light);\n$tab-button-secondary: \t\t\t\trgb(153,17,37);\n$tab-content-bg:                    #fff;\n$tab-button-text:                   #fff;\n$tab-border-radius:                 2px;\n$tab-spacing:                       2px;\n\n\n// Initialize and propogate framework variables\n@include globalize-config();\n","/* SG\n\n# Colors/Blending Modes [[dev]]\n\n@file tools/_t-blend-modes.scss\n\n@priority 1\n\n[Taken from Sass Blend Modes](https://github.com/heygrady/scss-blend-modes/blob/master/stylesheets/_blend-modes.scss)\n\n##### `blend-normal()`\n###### function(`$forground, $background, $amount:0`)\n\n##### `blend-multiply()`\n###### function(`$forground, $background, $amount:0`)\n\n##### `blend-lighten()`\n###### function(`$forground, $background, $amount:0`)\n\n##### `blend-darken()`\n###### function(`$forground, $background, $amount:0`)\n\n##### `blend-lineardodge()`\n###### function(`$forground, $background, $amount:0`)\n\n##### `blend-linearburn()`\n###### function(`$forground, $background, $amount:0`)\n\n##### `blend-difference`\n###### function(`$forground, $background, $amount:0`)\n\n##### `blend-screen()`\n###### function(`$forground, $background, $amount:0`)\n\n##### `blend-exclusion()`\n###### function(`$forground, $background, $amount:0`)\n\n##### `blend-multiply()`\n###### function(`$forground, $background, $amount:0`)\n\n*/\n\n//Taken from: https://github.com/heygrady/scss-blend-modes/blob/master/stylesheets/_blend-modes.scss\n\n//Mimic blending modes found in photoshop.\n\n@function color-convert($color-input) {\n\t$color-input: invert($color-input);\n\t$color-input: invert($color-input);\n\t@return $color-input;\n}\n\n//--------------------------------\n// Normal\n//--------------------------------\n@function blend-normal ($foreground, $background, $amount:0) {\n\t$amount: $amount / 100;\n\t$foreground: transparentize($foreground, $amount);\n\t$opacity: opacity($foreground);\n\t$background-opacity: opacity($background);\n\n\t// calculate opacity\n\t$bm-red: red($foreground) * $opacity + red($background) * $background-opacity * (1 - $opacity);\n\t$bm-green: green($foreground) * $opacity + green($background) * $background-opacity * (1 - $opacity);\n\t$bm-blue: blue($foreground) * $opacity + blue($background) * $background-opacity * (1 - $opacity);\n\t@return rgb($bm-red, $bm-green, $bm-blue);\n}\n\n//--------------------------------\n// Multiply\n//--------------------------------\n@function blend-multiply ($foreground, $background, $amount:0) {\n\t$amount: $amount / 100;\n\t$foreground: transparentize($foreground, $amount);\n\t$bm-red: red($background) * red($foreground) / 255;\n\t$bm-green: green($background) * green($foreground) / 255;\n\t$bm-blue: blue($background) * blue($foreground) / 255;\n\n\t@return blend-normal(rgba($bm-red, $bm-green, $bm-blue, opacity($foreground)), $background);\n}\n\n//--------------------------------\n// Lighten\n//--------------------------------\n@function blend-lighten ($foreground, $background, $amount:0) {\n\t$amount: $amount / 100;\n\t$foreground: transparentize($foreground, $amount);\n\t$bm-red: blend-lighten-color(red($foreground), red($background));\n\t$bm-green: blend-lighten-color(green($foreground), green($background));\n\t$bm-blue: blend-lighten-color(blue($foreground), blue($background));\n\n\t@return blend-normal(rgba($bm-red, $bm-green, $bm-blue, opacity($foreground)), $background);\n}\n@function blend-lighten-color($foreground, $background) {\n\t@if $background > $foreground {\n\t\t$foreground: $background;\n\t}\n\t@return $foreground;\n}\n\n//--------------------------------\n// Darken\n//--------------------------------\n@function blend-darken ($foreground, $background, $amount:0) {\n\t$amount: $amount / 100;\n\t$foreground: transparentize($foreground, $amount);\n\t$bm-red: blend-darken-color(red($foreground), red($background));\n\t$bm-green: blend-darken-color(green($foreground), green($background));\n\t$bm-blue: blend-darken-color(blue($foreground), blue($background));\n\n\t@return blend-normal(rgba($bm-red, $bm-green, $bm-blue, opacity($foreground)), $background);\n}\n@function blend-darken-color($foreground, $background) {\n\t@if $background < $foreground {\n\t\t$foreground: $background;\n\t}\n\t@return $foreground;\n}\n\n//--------------------------------\n// Darker Color\n//--------------------------------\n@function blend-darkercolor ($foreground, $background, $amount:0) {\n\t$amount: $amount / 100;\n\t$foreground: transparentize($foreground, $amount);\n\t$bm-red: red($foreground);\n\t$bm-green: green($foreground);\n\t$bm-blue: blue($foreground);\n\t$background-red: red($background);\n\t$background-green: green($background);\n\t$background-blue: blue($background);\n\n\t@if $background-red * 0.3 + $background-green * 0.59 + $background-blue * 0.11 <= $bm-red * 0.3 + $bm-green * 0.59 + $bm-blue * 0.11 {\n\t\t$bm-red: $background-red;\n\t\t$bm-green: $background-green;\n\t\t$bm-blue: $background-blue;\n\t}\n\t@return blend-normal(rgba($bm-red, $bm-green, $bm-blue, opacity($foreground)), $background);\n}\n\n//--------------------------------\n// Lighter Color\n//--------------------------------\n@function blend-lightercolor ($foreground, $background, $amount:0) {\n\t$amount: $amount / 100;\n\t$foreground: transparentize($foreground, $amount);\n\t$bm-red: red($foreground);\n\t$bm-green: green($foreground);\n\t$bm-blue: blue($foreground);\n\t$background-red: red($background);\n\t$background-green: green($background);\n\t$background-blue: blue($background);\n\n\t@if $background-red * 0.3 + $background-green * 0.59 + $background-blue * 0.11 > $bm-red * 0.3 + $bm-green * 0.59 + $bm-blue * 0.11 {\n\t\t$bm-red: $background-red;\n\t\t$bm-green: $background-green;\n\t\t$bm-blue: $background-blue;\n\t}\n\t@return blend-normal(rgba($bm-red, $bm-green, $bm-blue, opacity($foreground)), $background);\n}\n\n//--------------------------------\n// Linear Dodge\n//--------------------------------\n@function blend-lineardodge ($foreground, $background, $amount:0) {\n\t$amount: $amount / 100;\n\t$foreground: transparentize($foreground, $amount);\n\t$bm-red: blend-lineardodge-color(red($foreground), red($background));\n\t$bm-green: blend-lineardodge-color(green($foreground), green($background));\n\t$bm-blue: blend-lineardodge-color(blue($foreground), blue($background));\n\n\t@return blend-normal(rgba($bm-red, $bm-green, $bm-blue, opacity($foreground)), $background);\n}\n@function blend-lineardodge-color($foreground, $background) {\n\t@if $background + $foreground > 255 {\n\t\t$foreground: 255;\n\t}\n\t@else {\n\t\t$foreground: $background + $foreground;\n\t}\n\t@return $foreground;\n}\n\n//--------------------------------\n// Linear Burn\n//--------------------------------\n@function blend-linearburn-color($foreground, $background) {\n\t@if $background + $foreground < 255 {\n\t\t$foreground: 0;\n\t}\n\t@else {\n\t\t$foreground: $background + $foreground - 255;\n\t}\n\t@return $foreground;\n}\n\n@function blend-linearburn ($foreground, $background, $amount:0) {\n\t$amount: $amount / 100;\n\t$foreground: transparentize($foreground, $amount);\n\t$bm-red: blend-linearburn-color(red($foreground), red($background));\n\t$bm-green: blend-linearburn-color(green($foreground), green($background));\n\t$bm-blue: blend-linearburn-color(blue($foreground), blue($background));\n\n\t@return blend-normal(rgba($bm-red, $bm-green, $bm-blue, opacity($foreground)), $background);\n}\n\n\n//--------------------------------\n// Difference\n//--------------------------------\n@function blend-difference ($foreground, $background, $amount:0) {\n\t$amount: $amount / 100;\n\t$foreground: transparentize($foreground, $amount);\n\t$bm-red: abs(red($background) - red($foreground));\n\t$bm-green: abs(green($background) - green($foreground));\n\t$bm-blue: abs(blue($background) - blue($foreground));\n\n\t@return blend-normal(rgba($bm-red, $bm-green, $bm-blue, opacity($foreground)), $background);\n}\n\n//--------------------------------\n// Screen\n//--------------------------------\n@function blend-screen-color($foreground, $background) {\n\t@return (255 - ( ( (255 - $foreground) * (255 - $background)) / 256));\n}\n\n@function blend-screen ($foreground, $background, $amount:0) {\n\t$amount: $amount / 100;\n\t$foreground: transparentize($foreground, $amount);\n\t$bm-red: blend-screen-color(red($foreground), red($background));\n\t$bm-green: blend-screen-color(green($foreground), green($background));\n\t$bm-blue: blend-screen-color(blue($foreground), blue($background));\n\n\t@return blend-normal(rgba($bm-red, $bm-green, $bm-blue, opacity($foreground)), $background);\n}\n\n\n//--------------------------------\n// Exclusion\n//--------------------------------\n@function blend-exclusion ($foreground, $background, $amount:0 ) {\n\t$amount: $amount / 100;\n\t$foreground: transparentize($foreground, $amount);\n\t$bm-red: blend-exclusion-color(red($foreground), red($background));\n\t$bm-green: blend-exclusion-color(green($foreground), green($background));\n\t$bm-blue: blend-exclusion-color(blue($foreground), blue($background));\n\n\t@return blend-normal(rgba($bm-red, $bm-green, $bm-blue, opacity($foreground)), $background);\n}\n\n@function blend-exclusion-color($foreground, $background) {\n\t@return $background - ($background * (2 / 255) - 1) * $foreground;\n}\n\n//--------------------------------\n// Overlay\n//--------------------------------\n@function blend-overlay-color($foreground, $background) {\n\t\t$comparison: 255 / 2;\n\t\t@if $background <= $comparison {\n\t\t\t$foreground: (2 * $background * $foreground) / 255;\n\t\t} @else {\n\t\t\t$foreground: 255 - (255 - 2 * ($background - (255 / 2))) * (255 - $foreground) / 255;\n\t\t}\n\t\t@return $foreground;\n}\n\n@function blend-overlay($foreground, $background, $amount:0) {\n\t\t$amount: $amount / 100;\n\t\t$foreground: transparentize($foreground, $amount);\n\n\t$bm-red: blend-overlay-color(\n\t\tred($foreground),\n\t\tred($background)\n\t);\n\t$bm-green: blend-overlay-color(green($foreground), green($background));\n\t$bm-blue: blend-overlay-color(blue($foreground), blue($background));\n\n\t@return blend-normal(rgba($bm-red, $bm-green, $bm-blue, opacity($foreground)), $background);\n}\n\n\n//--------------------------------\n// Soft Light\n//--------------------------------\n@function blend-softlight-color($foreground, $background) {\n\t@if $background < 128 {\n\t\t$foreground: (($foreground / 2) + 64) * $background * (2 / 255);\n\t} @else {\n\t\t$foreground: 255 - (191 - ($foreground / 2)) * (255 - $background) * (2 / 255);\n\t}\n\t@return $foreground;\n}\n\n@function blend-softlight ($foreground, $background, $amount:0) {\n\t\t$amount: $amount / 100;\n\t\t$foreground: transparentize($foreground, $amount);\n\t$bm-red: blend-softlight-color(red($foreground), red($background));\n\t$bm-green: blend-softlight-color(green($foreground), green($background));\n\t$bm-blue: blend-softlight-color(blue($foreground), blue($background));\n\n\t@return blend-normal(rgba($bm-red, $bm-green, $bm-blue, opacity($foreground)), $background);\n}\n\n\n//--------------------------------\n// Hard Light\n//--------------------------------\n@function blend-hardlight-color($foreground, $background) {\n\t$tmp-blend: $foreground;\n\t@if $tmp-blend < 128 {\n\t\t$foreground: $background * $tmp-blend * (2 / 255);\n\t} @else {\n\t\t$foreground: 255 - (255-$background) * (255-$tmp-blend) * (2 / 255);\n\t}\n\t@return $foreground;\n}\n\n@function blend-hardlight ($foreground, $background, $amount:0) {\n\t$amount: $amount / 100;\n\t$foreground: transparentize($foreground, $amount);\n\t$bm-red: blend-hardlight-color(red($foreground), red($background));\n\t$bm-green: blend-hardlight-color(green($foreground), green($background));\n\t$bm-blue: blend-hardlight-color(blue($foreground), blue($background));\n\n\t@return blend-normal(rgba($bm-red, $bm-green, $bm-blue, opacity($foreground)), $background);\n}\n\n\n//--------------------------------\n// Color Dodge\n//--------------------------------\n@function blend-colordodge-color($foreground, $background) {\n\n\t$comparison: 256 / (255 - $foreground);\n\t@if $comparison == Infinity {\n\t\t$comparison: 255;\n\t}\n\t$tmp: $background * $comparison;\n\t@if $tmp > 255 or $foreground == 255 {\n\t\t$foreground: 255;\n\t} @else {\n\t\t$foreground: $tmp;\n\t}\n\t@return $foreground;\n}\n\n@function blend-colordodge ($foreground, $background, $amount:0) {\n\t$amount: $amount / 100;\n\t$foreground: transparentize($foreground, $amount);\n\t$bm-red: blend-colordodge-color(red($foreground), red($background));\n\t$bm-green: blend-colordodge-color(green($foreground), green($background));\n\t$bm-blue: blend-colordodge-color(blue($foreground), blue($background));\n\n\t@return blend-normal(rgba($bm-red, $bm-green, $bm-blue, opacity($foreground)), $background);\n}\n\n\n//--------------------------------\n// Color Burn\n//--------------------------------\n@function blend-colorburn-color($foreground, $background) {\n\t$tmp: (255 - ((255 - $background) * 255) / $foreground);\n\n\t@if $foreground == 0 {\n\t\t$foreground: 255;\n\t} @elseif $tmp < 0 {\n\t\t$foreground: 0;\n\t} @else {\n\t\t$foreground: $tmp;\n\t}\n\t@return $foreground;\n}\n\n@function blend-colorburn ($foreground, $background, $amount:0) {\n\t$amount: $amount / 100;\n\t$foreground: transparentize($foreground, $amount);\n\t$bm-red: blend-colorburn-color(red($foreground), red($background));\n\t$bm-green: blend-colorburn-color(green($foreground), green($background));\n\t$bm-blue: blend-colorburn-color(blue($foreground), blue($background));\n\n\t@return blend-normal(rgba($bm-red, $bm-green, $bm-blue, opacity($foreground)), $background);\n}\n\n\n//--------------------------------\n// Linear Light\n//--------------------------------\n@function blend-linearlight ($foreground, $background, $amount:0) {\n\t$amount: $amount / 100;\n\t$foreground: transparentize($foreground, $amount);\n\t$bm-red: blend-linearlight-color(red($foreground), red($background));\n\t$bm-green: blend-linearlight-color(green($foreground), green($background));\n\t$bm-blue: blend-linearlight-color(blue($foreground), blue($background));\n\n\t@return blend-normal(rgba($bm-red, $bm-green, $bm-blue, opacity($foreground)), $background);\n}\n@function blend-linearlight-color($foreground, $background) {\n\t@if $foreground < 128 {\n\t\t$foreground: blend-linearburn-color($background, 2 * $foreground);\n\t} @else {\n\t\t$foreground: blend-lineardodge-color($background, 2 * ($foreground - 128));\n\t}\n\t@return $foreground;\n}\n\n//--------------------------------\n// Vivid Light\n//--------------------------------\n@function blend-vividlight ($foreground, $background, $amount:0) {\n\t$amount: $amount / 100;\n\t$foreground: transparentize($foreground, $amount);\n\t$bm-red: blend-vividlight-color(red($foreground), red($background));\n\t$bm-green: blend-vividlight-color(green($foreground), green($background));\n\t$bm-blue: blend-vividlight-color(blue($foreground), blue($background));\n\n\t@return blend-normal(rgba($bm-red, $bm-green, $bm-blue, opacity($foreground)), $background);\n}\n\n@function blend-vividlight-color($foreground, $background) {\n\t@if $foreground < 128 {\n\t\t$foreground: blend-colorburn-color(2 * $foreground, $background);\n\t} @else {\n\t\t$foreground: blend-colordodge-color(2 * ($foreground - 128), $background);\n\t}\n\t@return $foreground;\n}\n\n//--------------------------------\n// Pin Light\n//--------------------------------\n@function blend-pinlight ($foreground, $background, $amount:0) {\n\t$amount: $amount / 100;\n\t$foreground: transparentize($foreground, $amount);\n\t$bm-red:   blend-pinlight-color(red($foreground), red($background));\n\t$bm-green: blend-pinlight-color(green($foreground), green($background));\n\t$bm-blue:  blend-pinlight-color(blue($foreground), blue($background));\n\n\t@return blend-normal(rgba($bm-red, $bm-green, $bm-blue, opacity($foreground)), $background);\n}\n\n@function blend-pinlight-color($foreground, $background) {\n\t@if $foreground < 128 {\n\t\t$foreground: blend-darken-color($background, 2 * $foreground);\n\t} @else {\n\t\t$foreground: blend-lighten-color($background, 2 * ($foreground - 128));\n\t}\n\t@return $foreground;\n}\n\n//--------------------------------\n// Hard Mix\n//--------------------------------\n@function blend-hardmix ($foreground, $background, $amount:0 ) {\n\t$amount: $amount / 100;\n\t$foreground: transparentize($foreground, $amount);\n\t$bm-red: blend-hardmix-color(red($foreground), red($background));\n\t$bm-green: blend-hardmix-color(green($foreground), green($background));\n\t$bm-blue: blend-hardmix-color(blue($foreground), blue($background));\n\n\t@return blend-normal(rgba($bm-red, $bm-green, $bm-blue, opacity($foreground)), $background);\n}\n\n@function blend-hardmix-color($foreground, $background) {\n\t$tmp: blend-vividlight-color($foreground, $background);\n\t@if $tmp < 128 {\n\t\t$foreground: 0;\n\t} @else {\n\t\t$foreground: 255;\n\t}\n\t@return $foreground;\n}\n\n\n// Unique to Photoshop\n\n//--------------------------------\n// Color Blend\n//--------------------------------\n@function blend-colorblend ($foreground, $background, $amount:0 ) {\n\t$amount: $amount / 100;\n\t$foreground: transparentize($foreground, $amount);\n\t$foreground-hsv: color-to-hsv($foreground);\n\t$background-hsv: color-to-hsv($background);\n\n\t$bm-hsv: nth($foreground-hsv, 1), nth($foreground-hsv, 2), nth($background-hsv, 3);\n\t$bm-color: hsv-to-color($bm-hsv);\n\n\t@return blend-normal(rgba(red($bm-color), green($bm-color), blue($bm-color), opacity($foreground)), $background);\n}\n\n//--------------------------------\n// Dissolve\n//--------------------------------\n@function blend-dissolve ($foreground, $background, $amount:0 ) {\n\t// The Dissolve blend mode acts on transparent and partially transparent pixels\n\t// it treats transparency as a pixel pattern and applies a diffusion dither pattern.\n\t// @see http://photoblogstop.com/photoshop/photoshop-blend-modes-explained\n\t@return $foreground;\n}\n\n//--------------------------------\n// Divide\n//--------------------------------\n@function blend-divide ($foreground, $background, $amount:0 ) {\n\t$amount: $amount / 100;\n\t$foreground: transparentize($foreground, $amount);\n\t$bm-red: blend-divide-colors(red($foreground), red($background));\n\t$bm-green: blend-divide-colors(green($foreground), green($background));\n\t$bm-blue:blend-divide-colors(blue($foreground), blue($background));\n\n\t@return blend-normal(rgba($bm-red, $bm-green, $bm-blue, opacity($foreground)), $background);\n}\n@function blend-divide-colors($foreground, $background) {\n\t@return min((($background / 255) / ($foreground / 255)) * 255, 255);\n}\n\n//--------------------------------\n// Hue\n//--------------------------------\n@function blend-hue ($foreground, $background, $amount:0 ) {\n\t\t$amount: $amount / 100;\n\t\t$foreground: transparentize($foreground, $amount);\n\t$foreground-hsv: color-to-hsv($foreground);\n\t$background-hsv: color-to-hsv($background);\n\n\t$bm-hsv: nth($foreground-hsv, 1), nth($background-hsv, 2), nth($background-hsv, 3);\n\t$bm-color: hsv-to-color($bm-hsv);\n\n\t@return blend-normal(rgba(red($bm-color), green($bm-color), blue($bm-color), opacity($foreground)), $background);\n}\n\n//--------------------------------\n// Luminosity\n//--------------------------------\n@function blend-luminosity ($foreground, $background, $amount: 0) {\n\t$amount: $amount / 100;\n\t$foreground: transparentize($foreground, $amount);\n\t$foreground-hsv: color-to-hsv($foreground);\n\t$background-hsv: color-to-hsv($background);\n\n\t$bm-hsv: nth($background-hsv, 1), nth($background-hsv, 2), nth($foreground-hsv, 3);\n\t$bm-color: hsv-to-color($bm-hsv);\n\n\t@return blend-normal(rgba(red($bm-color), green($bm-color), blue($bm-color), opacity($foreground)), $background);\n}\n\n//--------------------------------\n// Saturation\n//--------------------------------\n@function blend-saturation ($foreground, $background, $amount:0 ) {\n\t$amount: $amount / 100;\n\t$foreground: transparentize($foreground, $amount);\n\t$foreground-hsv: color-to-hsv($foreground);\n\t$background-hsv: color-to-hsv($background);\n\n\t$bm-hsv: nth($background-hsv, 1), nth($foreground-hsv, 2), nth($background-hsv, 3);\n\t$bm-color: hsv-to-color($bm-hsv);\n\n\t@return blend-normal(rgba(red($bm-color), green($bm-color), blue($bm-color), opacity($foreground)), $background);\n}\n\n//--------------------------------\n// Subtract\n//--------------------------------\n@function blend-subtract ($foreground, $background, $amount:0 ) {\n\t$amount: $amount / 100;\n\t$foreground: transparentize($foreground, $amount);\n\t$bm-red: max(red($background) - red($foreground), 0);\n\t$bm-green: max(green($background) - green($foreground), 0);\n\t$bm-blue: max(blue($background) - blue($foreground), 0);\n\n\t@return blend-normal(rgba($bm-red, $bm-green, $bm-blue, opacity($foreground)), $background);\n}\n\n//--------------------------------\n// Tints and Shades (adding black or white to a color)\n//--------------------------------\n// Adapted from: https://gist.github.com/benfrain/7545629\n\n// Add percentage of white to a color\n@function blend-tint($color, $percent){\n\t@return mix(white, $color, $percent);\n}\n@function tint($color, $percent){\n\t@return mix(white, $color, $percent);\n}\n\n// Add percentage of black to a color\n@function shade($color, $percent){\n\t@return mix(black, $color, $percent);\n}\n@function blend-shade($color, $percent){\n\t@return mix(black, $color, $percent);\n}\n\n//Shortcut function for blendmodes\n@function blend($mode, $foreground, $background, $amount: 0) {\n\n\t\t$mode: unquote($mode);\n\t\t$blended-color: null;\n\n\t\t$blended-color: call(safe-get-function(blend-#{$mode}), $foreground, $background, $amount);\n\n\t\t//@if $mode == normal {\n\t\t//    $blended-color: blend-normal($foreground, $background);\n\t\t//}\n\t\t//\n\t\t//@if $mode == multiply {\n\t\t//    $blended-color: blend-multiply($foreground, $background);\n\t\t//}\n\t\t//\n\t\t//@if $mode == lighten {\n\t\t//    $blended-color: blend-lighten($foreground, $background);\n\t\t//}\n\t\t//\n\t\t//@if $mode == darken {\n\t\t//    $blended-color: blend-darken($foreground, $background);\n\t\t//}\n\t\t//\n\t\t//@if $mode == darkercolor {\n\t\t//    $blended-color: blend-darkercolor($foreground, $background);\n\t\t//}\n\t\t//\n\t\t//@if $mode == lightercolor {\n\t\t//    $blended-color: blend-lightercolor($foreground, $background);\n\t\t//}\n\t\t//\n\t\t//@if $mode == lineardodge {\n\t\t//    $blended-color: blend-lineardodge($foreground, $background);\n\t\t//}\n\t\t//\n\t\t//@if $mode == linearburn {\n\t\t//    $blended-color: blend-linearburn($foreground, $background);\n\t\t//}\n\t\t//\n\t\t//@if $mode == difference {\n\t\t//    $blended-color: blend-difference($foreground, $background);\n\t\t//}\n\t\t//\n\t\t//@if $mode == screen {\n\t\t//    $blended-color: blend-screen($foreground, $background);\n\t\t//}\n\t\t//\n\t\t//@if $mode == exclusion {\n\t\t//    $blended-color: blend-exclusion($foreground, $background);\n\t\t//}\n\t\t//\n\t\t//@if $mode == overlay {\n\t\t//    $blended-color: blend-overlay($foreground, $background);\n\t\t//}\n\t\t//\n\t\t//@if $mode == softlight {\n\t\t//    $blended-color: blend-softlight($foreground, $background);\n\t\t//}\n\t\t//\n\t\t//@if $mode == hardlight {\n\t\t//    $blended-color: blend-hardlight($foreground, $background);\n\t\t//}\n\t\t//\n\t\t//@if $mode == colordodge {\n\t\t//    $blended-color: blend-colordodge($foreground, $background);\n\t\t//}\n\t\t//\n\t\t//@if $mode == colorburn {\n\t\t//    $blended-color: blend-colorburn($foreground, $background);\n\t\t//}\n\t\t//\n\t\t//@if $mode == linearlight {\n\t\t//    $blended-color: blend-linearlight($foreground, $background);\n\t\t//}\n\t\t//\n\t\t//@if $mode == vividlight {\n\t\t//    $blended-color: blend-vividlight($foreground, $background);\n\t\t//}\n\t\t//\n\t\t//@if $mode == pinlight {\n\t\t//    $blended-color: blend-pinlight($foreground, $background);\n\t\t//}\n\t\t//\n\t\t//@if $mode == hardmix {\n\t\t//    $blended-color: blend-hardmix($foreground, $background);\n\t\t//}\n\t\t//\n\t\t//@if $mode == colorblend {\n\t\t//    $blended-color: blend-colorblend($foreground, $background);\n\t\t//}\n\t\t//\n\t\t//@if $mode == divide {\n\t\t//    $blended-color: blend-divide($foreground, $background);\n\t\t//}\n\t\t//\n\t\t//@if $mode == hue {\n\t\t//    $blended-color: blend-hue($foreground, $background);\n\t\t//}\n\t\t//\n\t\t//@if $mode == luminosity {\n\t\t//    $blended-color: blend-luminosity($foreground, $background);\n\t\t//}\n\t\t//\n\t\t//@if $mode == saturation {\n\t\t//    $blended-color: blend-saturation($foreground, $background);\n\t\t//}\n\t\t//\n\t\t//@if $mode == subtract {\n\t\t//    $blended-color: blend-subtract($foreground, $background);\n\t\t//}\n\n\t\t@return $blended-color;\n}\n\n//--------------------------------\n// HSL and HSV\n//--------------------------------\n// @see https://gist.github.com/1069204\n@function hsv-to-hsl($h, $s: 0, $v: 0) {\n\t@if type-of($h) == 'list' {\n\t\t$v: nth($h, 3);\n\t\t$s: nth($h, 2);\n\t\t$h: nth($h, 1);\n\t}\n\n\t@if unit($h) == 'deg' {\n\t\t$h: 3.1415 * 2 * ($h / 360deg);\n\t}\n\t@if unit($s) == '%' {\n\t\t$s: 0 + ($s / 100%);\n\t}\n\t@if unit($v) == '%' {\n\t\t$v: 0 + ($v / 100%);\n\t}\n\n\t$ss: $s * $v;\n\t$ll: (2 - $s) * $v;\n\n\t@if $ll <= 1 {\n\t\t$ss: $ss / $ll;\n\t} @else if ($ll == 2) {\n\t\t$ss: 0;\n\t} @else {\n\t\t$ss: $ss / (2 - $ll);\n\t}\n\n\t$ll: $ll / 2;\n\n\t@return 360deg * $h / (3.1415 * 2), percentage(max(0, min(1, $ss))), percentage(max(0, min(1, $ll)));\n}\n\n@function hsl-to-hsv($h, $ss: 0, $ll: 0) {\n\t@if type-of($h) == 'list' {\n\t\t$ll: nth($h, 3);\n\t\t$ss: nth($h, 2);\n\t\t$h: nth($h, 1);\n\t} @else if type-of($h) == 'color' {\n\t\t$ll: lightness($h);\n\t\t$ss: saturation($h);\n\t\t$h: hue($h);\n\t}\n\n\t@if unit($h) == 'deg' {\n\t\t$h: 3.1415 * 2 * ($h / 360deg);\n\t}\n\t@if unit($ss) == '%' {\n\t\t$ss: 0 + ($ss / 100%);\n\t}\n\t@if unit($ll) == '%' {\n\t\t$ll: 0 + ($ll / 100%);\n\t}\n\n\t$ll: $ll * 2;\n\n\t@if $ll <= 1 {\n\t\t$ss: $ss * $ll;\n\t} @else {\n\t\t$ss: $ss * (2 - $ll);\n\t}\n\n\t$v: ($ll + $ss) / 2;\n\t$s: (2 * $ss) / ($ll + $ss);\n\n\t@return 360deg * $h / (3.1415 * 2), percentage(max(0, min(1, $s))), percentage(max(0, min(1, $v)));\n}\n\n@function color-to-hsv($color) {\n\t@return hsl-to-hsv($color);\n}\n\n@function hsv-to-color($h, $s: 0, $v: 0) {\n\t$hsl: hsv-to-hsl($h, $s, $v);\n\t@return hsl(nth($hsl, 1), nth($hsl, 2), nth($hsl, 3));\n}\n","//------------------------------------*\\\n//    $Color Functions\n//------------------------------------*/\n\n/* SG\n# Colors/Lookup [[dev]]\n\n@file tools/_t-color-functions.scss\n\n@priority 99\n\n##### `colors()`\n###### function(`$color-name, $tone: 'base', $opacity: 1`)\nGet a color value from the global `$$base-colors` map. Darker and lighter tones are available by passing a second string.\n\n```scss\n.foo {\n    background-color: colors(links, light));\n}\n```\n\nPassing only a color name will default to the 'base' color.\n\n@alias color(), clr()\n@requires `$$base-colors`\n\n[Reference](http://blog.12spokes.com/web-design-development/simple-css-color-management-with-sass/)\n*/\n\n\n@function colors($color-name, $tone: 'base', $opacity: 1) {\n\n    @if not map-has-key($base-colors, $color-name) {\n        @warn \"Color '#{$color-name}' not found in $base-colors map. Returning #f00 instead\";\n        @return red;\n    }@else if not map-has-key(map-get($base-colors, $color-name), $tone) {\n        @warn \"Tone '#{$tone}' not found in #{$color-name}. Returning #f00 instead.\";\n        @return red;\n    }\n\n    @if $opacity < 1 {\n        @return rgba(map-get(map-get($base-colors, $color-name), $tone), $opacity);\n    }\n\n    @return map-get(map-get($base-colors, $color-name), $tone);\n}\n// ALIAS: Same as above, but easier to type\n@function color($color, $tone: 'base', $opacity: 1) { @return colors($color, $tone, $opacity);}\n@function clr($color, $tone: 'base', $opacity: 1) { @return colors($color, $tone, $opacity);}\n\n\n/* SG\n# Colors/Lookup [[dev]]\n\n##### `combine-color-maps()`\n###### function(`$map1 , $map2`)\nSpecialized function used by `generate-color-variations()` to merge two color maps.\n\n@returns map\n\n*/\n\n// FUNCTION: combine-color-maps()\n// Combines two color maps (or really any double-nested map)\n@function combine-color-maps($map1, $map2) {\n\n    @each $pal, $color in $map2 {\n        $value: ($pal: $color);\n        $map1: map-merge($map1, $value);\n    }\n\n    @return $map1;\n}\n\n/* SG\n# Colors/Manipulation [[dev]]\n\n##### `generate-color-varations()`\n###### function( `$map: $colors, $functions: (tint, tint, tint, shade, shade, shade), $increments: (20%, 40%, 80%, 20%, 40%, 80%), $variations: (light, lighter, lightest, dark, darker, darkest), $blending-colors: null`)\n\nTakes base color values and generates a full color palette. Used by the `$$base-colors` map to create a project's palette, accessible via `colors()`.\n\n**Arguments:**\n* `$map`: Color map you want to create variations of. Defaults to `$$base-colors`.\n* `$functions`: color functions used to generate variations (e.g. lighten or darken). Can use any `blend` function, provided `$blending-colors` are provided.\n* `$increments`: percentage amount to apply `$function` to each `$variations`.\n* `$variations`: actual names for each color tone when `colors()` used.\n* `$blending-colors`: used when a function is a `blend`. Can be a list or a single color.\n\n@requires `combine-color-maps()`\n\n*/\n\n// Adds color variations to a color map\n// 1a. Color functions.\n// 1b. Function percentages (e.g. lighten($foo, [percentages])).\n// 1c. Variation names (output to map).\n// 1d. Blending color. Only used when a blending mode is used (e.g. blend-colordodge)\n// 2a. Determine how often to switch functions.\n// 2b. Make sure map is properly formatted.\n// 2c. Define new map (for easier to understand return value).\n// 3a. Loop through the pallets and colors of the map input.\n// 3b. Store $color map in a list\n//     (this is required to prevent bugs on colors with names of real colors).\n// 3c. Define color function increment.\n// 4a. Loop through the variation names.\n// 4b. Get index and find the amount to use with the current color function.\n// 5a. Divide the loop increment by the number of color functions.\n// 5b. If the loop is larger than the variation frequency,\n//\t   move to the next color function.\n// 6a. Get the current color function and current color.\n// 6b. Add blending mode color if necessary (useful for mixing colors).\n// 6c. If blending-color is defined, use it to blend colors (use list-value if exists)\n// 7a. Call the color function, the color(s), and the amount and store that value.\n// 7b. Create the variation and color definition in map format (\"name\": color).\n// 7c. Merge the current base color map with the new variant map.\n// 8a. Format the previous loop results into a nested map.\n// 8b. Merge the input map with itself and the new nested map.\n// 9. Return the map with the new values.\n\n@function generate-color-variations(\n    $map: $base-colors,\n    $functions: (tint, tint, tint, shade, shade, shade),\t\t\t//[1a]\n    $increments: (20%,  40%,   80%,   20%,   40%,   80%), \t\t\t//[1b]\n    $variations: (light, lighter, lightest, dark, darker, darkest),//[1c]\n    $blending-colors: null \t\t\t\t\t\t\t\t\t\t\t\t//[1d]\n){\n        $variation-frequency:\n            length($variations) / length($functions); //[2a]\n\n        $map: map-add-depth($map, 'base');\t\t\t\t\t\t //[2b]\n        $new-map: $map;\t\t\t\t\t\t\t \t     \t\t //[2c]\n        $blend-value: '';\n\n        @each $palette, $color in $map { \t\t\t\t\t\t //[3a]\n            $values-list: $color;\t\t\t\t\t\t\t\t //[3b]\n            $color_fn-i: 1;\t\t\t\t\t\t\t\t\t\t //[3c]\n\n            @each $variant in $variations {        \t//[4a]\n                @if not map-has-key($color, $variant) {\n                    $i: index($variations, $variant);\t//[4b]\n                    $amount: nth($increments, $i);\t\t\t//[4b]\n\n                    $color_fn_place: $i/$variation-frequency;\t//[5a]\n\n                    @if $color_fn_place > $color_fn-i{ \t\t\t//[5b]\n                        $color_fn-i: $color_fn-i + 1;\t\t\t//[5b]\n                    }\n\n                    $curr_fn: nth($functions, $color_fn-i); \t\t//[6a]\n                    $curr_color: map-get($color, base);\t\t\t\t\t//[6b]\n\n                    @if $blending-colors != null\n                        or type-of($blending-colors) == 'list'{\t\t\t//[6c]\n\n                        @if type-of($blending-colors) == 'list' {\n                            $blend-value: nth($blending-colors, $color_fn-i);\n                        }@else {\n                            $blend-value: $blending-colors;\n                        }\n\n                        @if $blend-value == 'self' {\n                            $blend-value: $curr_color;\n                        }\n\n                        @if $blend-value != null {\n                            $amount: 1 - ($amount / 100%); //Invert the amount\n                            $temp-color: $curr_color;\n                            //Use amount to transparency of blending color\n                            $curr_color: transparentize($blend-value, $amount);\n                            //$amount becomes 'background' color we're blending\n                            $amount: $temp-color;\n                        }\n                    }\n                    //Try to add \"blend\" to the current function if it's not valid\n                    @if not function-exists($curr_fn){\n                        $curr_fn: unquote('blend-') + $curr_fn;\n                    }\n\n                    $new-color: call(safe-get-function($curr_fn), $curr_color, $amount); \t//[7a]\n                    $value: ($variant: $new-color); \t\t\t\t\t//[7b]\n\n                    $values-list: map-merge($value, $values-list);\t\t//[7c]\n                }\n            }\n\n            // This is required because sass maps are formatted\n            // with double parenthesis as they get more nested.\n            // (first-level: ( (second-level: value) ) )\n            $inner-map: ($palette:($values-list));\t\t\t\t//[8a]\n            $new-map: combine-color-maps($new-map, $inner-map); \t//[8b]\n\n        }\n\n        @return $new-map; \t\t\t\t\t\t\t\t//[9]\n}\n\n/* SG\n# Colors/Manipulation [[dev]]\n\n\n##### `black-or-white()`\n###### function(`$color`)\nChange text color based on background-color's darkness.\n\n```scss\ndiv {\n    background-color: #f8cd12;\n    color: set_text_color(#f8cd12);\n}\n// Your text color would be black because #f8cd12 and #00000 have more contrast.\n```\n@alias set-text-color()\n@requires `color-luminance`\n\n*/\n\n\n@function black-or-white($color) {\n    @if (color-luminance($color) > .45) {\n        @return #000;\n    }\n    @else {\n        @return #fff;\n    }\n}\n//ALIAS\n@function set-text-color($color){ @return black-or-white($color); }\n\n/* SG\n##### `pick-best-color()`\n###### function(`$base, $colors, $tolerance: 0`)\nCompares a set of colors against `$base` and returns the color with the most contrast. `$colors` should be a list.\n[Taken from here](https://gist.github.com/voxpelli/6304812)\n\n```scss\ndiv {\n    color: pick_best_color(#f8cd12, (#a0a0c0, #fff, #2c2c2c));\n}\n// The function would test the colors and find that #2c2c2c is the best.\n```\n@requires `color-contrast()`, `color-luminance()`\n@returns color\n*/\n\n@function pick-best-color($base, $colors, $tolerance: 0) {\n    $contrast: color-contrast($base, nth($colors, 1));\n    $best: nth($colors, 1);\n\n    @for $i from 2 through length($colors) {\n        $current_contrast: color-contrast($base, nth($colors, $i));\n\n        @if ($current_contrast - $contrast > $tolerance) {\n            $contrast: color-contrast($base, nth($colors, $i));\n            $best: nth($colors, $i);\n        }\n    }\n    @return $best;\n}\n/* SG\n##### `color-contrast()`\n###### function(`$color1, $color2`)\nFind contrast between two colors.\n[Adapted from color.js](https://github.com/LeaVerou/contrast-ratio/blob/gh-pages/color.js)\n\n@requires `color-luminance()`\n@returns number(0 - 1)\n*/\n\n@function color-contrast($color1, $color2) {\n    $luminance1: color-luminance($color1) + .05;\n    $luminance2: color-luminance($color2) + .05;\n    $ratio: $luminance1 / $luminance2;\n\n    @if $luminance2 > $luminance1 {\n        $ratio: 1 / $ratio;\n    }\n\n    $ratio: round($ratio * 10) / 10;\n\n    @return $ratio;\n}\n\n/* SG\n##### `color-luminance()`\n###### function(`$color1`)\nFind the relative luminance of a color. Used by `color-contrast()`. [Adapted from color.js](https://github.com/LeaVerou/contrast-ratio/blob/gh-pages/color.js)\n@alias luma()\n@returns number(0 - 1)\n*/\n\n@function color-luminance($color) {\n\n    $rgba: red($color), green($color), blue($color);\n    $rgba2: ();\n\n    @for $i from 1 through 3 {\n        $rgb: nth($rgba, $i);\n        $rgb: $rgb / 255;\n\n        $rgb: if($rgb < .03928, $rgb / 12.92, pow(($rgb + .055) / 1.055, 2.4));\n\n        $rgba2: append($rgba2, $rgb);\n    }\n    @return (.2126 * nth($rgba2, 1)) + (.7152 * nth($rgba2, 2)) + (0.0722 * nth($rgba2, 3));\n}\n\n//Alias\n@function luma($color){ @return color-luminance($color); }\n\n\n/* SG\n# Colors/Debugging [[dev]]\n\n@file tools/_t-color-functions.scss\n\n##### `@color-palette-output()`\n###### mixin(`$selector`, `$color-map:` `$$base-colors`)\nDebugging tool that creates a pretty color palette (in columns) using psuedo selectors (nth-child required). Used for \"color blocks\" output, in style guide.\n\n@requires `map-add-depth()`, `black-or-white()`\n\n*/\n\n@mixin color-palette-output($selector, $color-map: $base-colors) {\n    $color-names: \t  ( );\n    $color-subnames:  ( );\n    $color-fullnames: ( );\n    $color-values: \t  ( );\n\n    //Loop through the color map,\n    // adding all names, variants, and values to individual lists\n    @each $color, $color-variants in $color-map {\n        //Put color names into a list\n        $color-names: append($color-names, nth($color, 1));\n\n        //Put 'base' at beginning of list\n        @if index(map-keys($color-variants), base) == length(map-keys($color-variants)) {\n            $color-variants: list-reverse($color-variants);\n        }\n\n        //Loop through color variants (light, dark, etc.)\n        @each $color-variant in $color-variants {\n\n            //Add a non-breaking space before the color name\n            $subname-temp: unquote(' ' + nth($color-variant, 1));\n\n            //Remove 'base' from titles for nicer output\n            @if $subname-temp == ' base' {\n                $subname-temp: unquote('');\n            }\n\n            //Create name by adding the color and color-subname (e.g. blue dark)\n            $fullname-temp: unquote($color + $subname-temp);\n\n            //Add names to lists for later use\n            $color-fullnames: append($color-fullnames, $fullname-temp);\n            $color-subnames:\n                append($color-subnames, unquote(nth($color-variant, 1)));\n            $color-values:\n                append($color-values, nth($color-variant, 2));\n        }\n    }\n\n    //Store color lengths for selector loop\n    $top-colors-len: length($color-names);\n    $sub-colors-len: length($color-subnames) / $top-colors-len;\n    $color-index: 1;\n    $color-loop: 1;\n\n    //Loop through all colors\n    @for $i from 1 through length($color-fullnames){\n\n        //Grab the current color value and name\n        $current-color-value: nth($color-values, $color-index);\n        $current-color-name: nth($color-fullnames, $color-index);\n\n        //Apply it to the selection based on nth-child (using $i)\n        #{$selector}:nth-child(#{$i}){\n            background-color: #{$current-color-value};\n            //Determine if black or white should be used for text color\n            color: #{black-or-white( $current-color-value )};\n\n            //Make first row of colors a little larger\n            @if $i <= $top-colors-len {\n                padding: 2% 1% 2.5%;\n            }\n\n            //Describe the color and show its hex value\n            &:before {\n                content: \"#{$current-color-name}\";\n            }\n            &:after {\n                content: \"#{$current-color-value}\";\n            }\n        }\n\n        //Determine the index of the color to use\n        // This essentially makes the color chosen 1 loop ahead of $i\n        // E.G. if there are 9 top-level colors, $color-index will be 9 ahead of the current $i value\n        $color-index: ($color-index - $color-loop) + ($sub-colors-len + $color-loop);\n\n        // Increase the loop when we've reached the highest value\n        // And reset the color index.\n        @if $color-index > length($color-fullnames) {\n            $color-loop: $color-loop + 1;\n            $color-index: $color-loop;\n        }\n\n    }\n\n    //Base styles\n    #{$selector}{\n        //Width is a percentage of the total top-level colors (minus 1% for margin)\n        width: percentage(1 / $top-colors-len) - 1%;\n        padding: 1%;\n        margin-right: .95%;\n        float: left;\n        overflow: hidden;\n\n        &:before{\n            @include rems(font-size, modular-scale(-1));\n            display: block;\n            white-space: nowrap;\n        }\n\n        &:after{\n            @include rems(font-size, modular-scale(-2));\n            display: block;\n        }\n    }\n\n}\n\n//Harmonize colors\n//Takes all colors in a map and blends them with a secondary color to even them out\n// Should only be used as a tool to create color palletes.\n// Shouldn't be used on every compilation since it can make development fairly abstract.\n@function harmonize-colors(\n    $color-list: null,\n    $blending-mode: 'overlay',\n    $blending-color: null,\n    $amount: null\n) {\n    $temp-name-map: ();\n    $temp-top-map: ();\n    $temp-list: ();\n    $return: null;\n\n    //Make sure non-prefixed blending modes\n    // are appended with the correct function namespace\n    $blending-mode:\n        if(\n            str-contains($blending-mode, 'blend'),\n            $blending-mode,\n            'blend-' + $blending-mode\n        );\n\n    @if type-of($color-list) == 'map' {\n        $color-list: map-add-depth($color-list);\n\n        @each $color, $name in $color-list {\n            @each $key, $value in $name {\n                $value: call(safe-get-function($blending-mode), $blending-color, $value, $amount);\n                $temp-key: ($key: $value);\n                $temp-color: ($color: ($temp-key));\n                $temp-name-map: map-merge($temp-name-map, $temp-color);\n                @debug $temp-name-map;\n            }\n            $temp-top-map: map-merge($temp-top-map, $temp-name-map);\n        }\n\n        $return: map-merge($color-list, $temp-top-map);\n\n    }@else {\n        @each $value in $color-list {\n            $value: call(safe-get-function($blending-mode), $blending-color, $value, $amount);\n            $temp-list: append($temp-list, $value);\n        }\n        $return: $temp-list;\n    }\n\n    @return $return;\n}\n","/*! sanitize.css v3.0.0 | CC0 1.0 Public Domain | github.com/10up/sanitize.css */\n\n$root-background-color: #FFFFFF !default;\n$root-box-sizing: border-box !default;\n$root-color: #000000 !default;\n$root-cursor: default !default;\n$root-font-family: sans-serif !default;\n$root-font-size: 100% !default;\n$root-line-height: 1.5 !default;\n$root-text-rendering: optimizeLegibility !default;\n\n$anchor-text-decoration: none !default;\n$background-repeat: no-repeat !default;\n$form-element-background-color: transparent !default;\n$form-element-min-height: if(unitless($root-line-height), #{$root-line-height}em, if(unit($root-line-height) != '%', $root-line-height, null)) !default;\n$media-element-vertical-align: middle !default;\n$monospace-font-family: monospace !default;\n$nav-list-style: none !default;\n$selection-background-color: #B3D4FC !default;\n$selection-color: #ffffff !default;\n$selection-text-shadow: none !default;\n$small-font-size: 75% !default;\n$table-border-collapse: collapse !default;\n$table-border-spacing: 0 !default;\n$textarea-resize: vertical !default;\n\n/*\n * Normalization\n */\n\naudio:not([controls]) {\n\tdisplay: none; // Chrome 44-, iOS 8+, Safari 9+\n}\n\nbutton {\n\toverflow: visible; // Internet Explorer 11-\n\t-webkit-appearance: button; // iOS 8+\n}\n\n//details {\n//\tdisplay: block; // Edge 12+, Firefox 40+, Internet Explorer 11-, Windows Phone 8.1+\n//}\n\nhtml {\n\t-ms-overflow-style: -ms-autohiding-scrollbar; // Edge 12+, Internet Explorer 11-\n\toverflow-y: scroll; // All browsers without overlaying scrollbars\n\t-webkit-text-size-adjust: 100%; // iOS 8+\n\t-ms-text-size-adjust: 100%;\n}\n\ninput {\n\t-webkit-border-radius: 0; // iOS 8+\n\n\t&[type=\"button\"], &[type=\"reset\"], &[type=\"submit\"] {\n\t\t-webkit-appearance: button; // iOS 8+\n\t}\n\n\t&[type=\"number\"] {\n\t\twidth: auto; // Firefox 36+\n\t}\n\n\t&[type=\"search\"] {\n\t\t-webkit-appearance: textfield; // Chrome 45+, Safari 9+\n\n\t\t&::-webkit-search-cancel-button,\n\t\t&::-webkit-search-decoration {\n\t\t\t-webkit-appearance: none; // Chrome 45+, Safari 9+\n\t\t}\n\t}\n}\n\n//main {\n//\tdisplay: block; // Android 4.3-, Internet Explorer 11-, Windows Phone 8.1+\n//}\n\npre {\n\toverflow: auto; // Internet Explorer 11-\n}\n\nprogress {\n\tdisplay: inline-block; // Internet Explorer 11-, Windows Phone 8.1+\n}\n\n//small {\n//\tfont-size: $small-font-size; // All browsers\n//}\n\n//summary {\n//\tdisplay: block; // Firefox 40+, Internet Explorer 11-, Windows Phone 8.1+\n//}\n\nsvg:not(:root) {\n\toverflow: hidden; // Internet Explorer 11-\n}\n\ntemplate {\n\tdisplay: none; // Android 4.3-, Internet Explorer 11-, iOS 7-, Safari 7-, Windows Phone 8.1+\n}\n\ntextarea {\n\toverflow: auto; // Edge 12+, Internet Explorer 11-\n\tresize: $textarea-resize;\n}\n\n[hidden] {\n\tdisplay: none; // Internet Explorer 10-\n}\n\n/*\n * Universal inheritance\n */\n\n*,\n::before,\n::after {\n\tbox-sizing: inherit;\n}\n\n* {\n\tfont-size: inherit;\n\tline-height: inherit;\n}\n\n::before,\n::after {\n\ttext-decoration: inherit;\n\tvertical-align: inherit;\n}\n\n\n\n/*\n * Opinionated defaults\n */\n\n// specify the border style and width of all elements\n\n*,\n::before,\n::after {\n\tborder-style: solid;\n\tborder-width: 0;\n}\n\n// specify the core styles of all elements\n\n* {\n\tbackground-repeat: $background-repeat;\n\tmargin: 0;\n\tpadding: 0;\n}\n\n// specify the root styles of the document\n\n:root {\n\tbackground-color: $root-background-color;\n\tbox-sizing: $root-box-sizing;\n\tcolor: $root-color;\n\tcursor: $root-cursor;\n\tfont: #{$root-font-size}/#{$root-line-height} $root-font-family;\n\ttext-rendering: $root-text-rendering;\n}\n\n// specify the text decoration of anchors\n\na {\n\ttext-decoration: $anchor-text-decoration;\n}\n\n// specify the alignment of media elements\n\naudio,\ncanvas,\niframe,\nimg,\nsvg,\nvideo {\n\tvertical-align: $media-element-vertical-align;\n}\n\n// specify the background color of form elements\n\n//button,\n//input,\n//select,\n//textarea {\n//\tbackground-color: $form-element-background-color;\n//}\n\n// specify the inherited color and font of form elements\n\nbutton,\ninput,\nselect,\ntextarea {\n\tcolor: inherit;\n\tfont-family: inherit;\n\tfont-style: inherit;\n\tfont-weight: inherit;\n}\n\n// specify the minimum height of form elements\n\nbutton,\n[type=\"button\"],\n[type=\"date\"],\n[type=\"datetime\"],\n[type=\"datetime-local\"],\n[type=\"email\"],\n[type=\"month\"],\n[type=\"number\"],\n[type=\"password\"],\n[type=\"reset\"],\n[type=\"search\"],\n[type=\"submit\"],\n[type=\"tel\"],\n[type=\"text\"],\n[type=\"time\"],\n[type=\"url\"],\n[type=\"week\"],\nselect,\ntextarea {\n\t@include px-to-rems('min-height', $form-element-min-height);\n}\n\n// specify the font family of code elements\n\ncode,\nkbd,\npre,\nsamp {\n\tfont-family: $monospace-font-family, monospace;\n}\n\n// specify the list style of nav lists\n\nnav ol,\nnav ul {\n\tlist-style: $nav-list-style;\n}\n\n// specify the standard appearance of selects\n\nselect {\n\t-moz-appearance: none;    // Firefox 40+\n\t-webkit-appearance: none; // Chrome 45+\n\n\t&::-ms-expand {\n\t\tdisplay: none;        // Edge 12+, Internet Explorer 11-\n\t}\n\n\t&::-ms-value {\n\t\tcolor: currentColor;  // Edge 12+, Internet Explorer 11-\n\t}\n}\n\n// specify the border styling of tables\n\ntable {\n\tborder-collapse: $table-border-collapse;\n\tborder-spacing: $table-border-spacing;\n}\n\n// specify the background color, font color and drop shadow of text selections\n\n::-moz-selection {\n\tbackground-color: $selection-background-color; // required when declaring ::selection\n\tcolor: $selection-color;\n\ttext-shadow: $selection-text-shadow;\n}\n\n::selection {\n\tbackground-color: $selection-background-color; // required when declaring ::selection\n\tcolor: $selection-color;\n\ttext-shadow: $selection-text-shadow;\n}\n\n// specify the progress cursor of updating elements\n\n[aria-busy=\"true\"] {\n\tcursor: progress;\n}\n\n// specify the pointer cursor of trigger elements\n\n[aria-controls] {\n\tcursor: pointer;\n}\n\n// specify the unstyled cursor of disabled, not-editable, or otherwise inoperable elements\n\n[aria-disabled] {\n\tcursor: default;\n}\n\n// specify the style of visually hidden yet accessible elements\n\n[hidden][aria-hidden=\"false\"] {\n\tclip: rect(0 0 0 0);\n\tdisplay: inherit;\n\tposition: absolute;\n\n\t&:focus {\n\t\tclip: auto;\n\t}\n}\n","/* SG\n# Config/Propagation [[dev]]\n\n#### `@globalize-config()`\nPulls together config variables and routes them into structures expected by the framework, then makes them global.\nFor instance, the `$$type-h1-size` variable is accepted as a list, but will be available as a single size, while making `$type-h1-lh` available.\n\n*/\n\n\n@mixin globalize-config() {\n/* SG\n# Variables/Globals [[dev]]\nThe variables here are created based on the config variables passed by the user. These are generally abstracted to make them a little easier to parse, programmatically.\n\n##### `$$type-[h1-6,p,small]-lh`\n###### boolean/unitless/pixel value\nParses `$$type-h[#]-size` for an optional line-height value, if none exists, pass it along to `baseline-calc()`.\n@alias `$$h[#]-lh`\n\n##### `$$type-[h1-6,p,small]-size`\n###### Number (pixel)\nFont sizes, as defined by the user or `$$auto-scale-type`.\n*/\n\n    @if $auto-scale-type {\n        $type-h1-size:          modular-scale(7) !global;\n        $type-h2-size:          modular-scale(5) !global;\n        $type-h3-size:          modular-scale(4) !global;\n        $type-h4-size:          modular-scale(3) !global;\n        $type-h5-size:          modular-scale(2) !global;\n        $type-h6-size:\t\t\tmodular-scale(1) !global;\n        $type-small-size:\t\tmodular-scale(-1) !global;\n    }\n\n    //Check for existence of line-height override, and store it\n    $type-h1-lh: if(length($type-h1-size) > 1,\n        nth($type-h1-size, 2),\n        baseline-calc(nth($type-h1-size, 1))\n    ) !global;\n\n    $h1-lh: $type-h1-lh !global; //alias\n\n    $type-h2-lh: if(length($type-h2-size) > 1,\n        nth($type-h2-size, 2),\n        baseline-calc(nth($type-h2-size,1))\n    ) !global;\n\n    $h2-lh: $type-h2-lh !global; //alias\n\n    $type-h3-lh: if(length($type-h3-size) > 1,\n        nth($type-h3-size, 2),\n        baseline-calc(nth($type-h3-size,1))\n    ) !global;\n\n    $h3-lh: $type-h3-lh !global; //alias\n\n    $type-h4-lh: if(length($type-h4-size) > 1,\n        nth($type-h4-size, 2),\n        baseline-calc(nth($type-h4-size, 1))\n    ) !global;\n\n    $h4-lh: $type-h4-lh !global; //alias\n\n    $type-h5-lh: if(length($type-h5-size) > 1,\n        nth($type-h5-size, 2),\n        baseline-calc(nth($type-h5-size, 1))\n    ) !global;\n\n    $h5-lh: $type-h5-lh !global; //alias\n\n    $type-h6-lh: if(length($type-h6-size) > 1,\n        nth($type-h6-size, 2),\n        baseline-calc(nth($type-h6-size, 1))\n    ) !global;\n\n    $h6-lh: $type-h6-lh !global; //alias\n\n    $type-p-lh: baseline-calc($base-font-size) !global;\n\n    $p-lh: $type-p-lh !global; //alias\n\n    $type-small-lh:\tif(length($type-small-size) > 1,\n        nth($type-small-size, 2),\n        baseline-calc(nth($type-small-size, 1))\n    ) !global;\n\n    $small-lh: $type-small-lh !global; //alias\n\n\n    //Make sure we only grab the first-value\n    $type-h1-size: \t\t\t\tnth($type-h1-size, 1) !global;\n    $type-h2-size: \t\t\t\tnth($type-h2-size, 1) !global;\n    $type-h3-size:              nth($type-h3-size, 1) !global;\n    $type-h4-size:              nth($type-h4-size, 1) !global;\n    $type-h5-size:              nth($type-h5-size, 1) !global;\n    $type-h6-size:              nth($type-h6-size, 1) !global;\n    $type-p-size:               $base-font-size !global;\n    $type-small-size: \t\t\tnth($type-small-size, 1) !global;\n\n\n/* SG\n##### `$$type-base-unit`\n###### Number\nAbstraction of the base spacing unit used in any mixin or function that defines spacing units.\n\n##### `$$type-base-ratio`\n###### Number\nRatio used to calculate the difference between font sizes and spacing units.\n\n##### `$$type-headings`\n###### List (number)\nUsed for defining automatic headings functions.\n\n##### `$$type-modular-scale`\n###### Number\nAbstracts the `$$scale-ratio` and makes sure it's a positive number.\n*/\n\n    $type-base-unit:            $base-line-height !global;\n\n    @if $base-font-size >= $base-line-height {\n        $type-base-unit: baseline-calc($base-font-size) * $base-font-size !global;\n    }\n\n    $type-base-ratio: ($type-base-unit / $base-font-size) !global;\n\n    $type-headings:            6, 5, 4, 3, 2, 1 !global;\n    $type-modular-scale:       0 !global;\n\n    //Spacing variable for simple inclusion.\n    $type-space: 2 * $type-base-ratio !global;\n\n    //Variable for easier reference:\n    $stripped-base-font-size:  strip-units($base-font-size) !global;\n\n    $type-modular-scale: $scale-ratio !global;\n\n    //Checking for floats in $scale-ratio\n    @if length($scale-ratio) == 2 {\n        // Making sure we don't have a ratio below 1.\n        @if nth($scale-ratio,1) < nth($scale-ratio,2){\n            $type-modular-scale:   nth($scale-ratio, 2)/nth($scale-ratio, 1) !global;\n        }@else{\n            $type-modular-scale:   nth($scale-ratio, 1)/nth($scale-ratio, 2) !global;\n        }\n    }\n\n    //Silent class registry\n    // Holds all auto-generated silent classes for debugging.\n    $silent-class-registry: () !global;\n\n    // Is this build mobile first? Setting to ‘true’ means that all grids will be\n    // 100% width if you do not apply a more specific class to them.\n    $mobile-first:          true !global;\n\n/*\n##### `$$all-breakpoints`\n###### List\nStores all the names defined in `$$breakpoints` for use in abstract framework components so that if names are chagned, boilerplate media queries won't fail.\n\n##### `$$breakpoint-smallest`\n###### String\nGrabs the first `$$breakpoints` name.\n\n##### `$$breakpoint-largest`\n###### String\nGrabs the last `$$breakpoints` name.\n*/\n\n    //Move all breakpoint names into a list\n    $all-breakpoints: () !global;\n\n    //Grab all breakpoint names\n    @each $breakpoint in $breakpoints {\n        $temp-bp: nth($breakpoint, 1) !global;\n\n        @if $temp-bp != ' '{\n            $all-breakpoints: append($all-breakpoints, $temp-bp, comma) !global;\n        }\n    }\n\n\n    //Abstracting the smallest and largest breakpoints\n    $breakpoint-smallest: nth($all-breakpoints, 1) !global;\n    $breakpoint-largest:  nth($all-breakpoints, length($all-breakpoints)) !global;\n\n    //------------------------------------\n    //\t\t$SANITIZE\n    //------------------------------------\n\n    $root-background-color: color('bg') !global;\n    $root-color: color('type') !global;\n    $root-font-family: $primary-font-stack !global;\n    $root-font-size: percentage($base-font-size/16px) !global;\n    $root-line-height: $type-base-ratio !global;\n    $root-text-rendering: optimizeLegibility !global;\n    $root-cursor: inherit !global;\n\n    $anchor-text-decoration: none !global;\n    $background-repeat: no-repeat !global;\n\n    $form-element-min-height: $base-line-height !global;\n    $textarea-resize: vertical !global;\n\n    $media-element-vertical-align: middle !global;\n\n    $monospace-font-family: $monospace-font-stack !global;\n\n    $nav-list-style: none !global;\n\n    $selection-background-color: mix(color('links'), color('bg'), 80%) !global;\n    $selection-color: black-or-white($selection-background-color) !global;\n    $selection-text-shadow: none !global;\n\n    $table-border-collapse: collapse !global;\n    $table-border-spacing: 0 !global;\n}\n","@charset \"UTF-8\";\n/* SG\n# Imports [[dev]]\n\n@priority 0\n@file main.scss\n\nSass files are imported in order from lowest specificity to highest.\n1. `/tools`\n  * Functions\n  * System variables and defaults\n  * General-use mixins and sass utilities\n  * `/config` - Settings and initialization\n3. `base/generic`\n  * Normalize/reset styles (unclassed)\n4. `/base`\n  * Element styles (unclassed)\n5. `/layout`\n  * Basic layout and object styles (single-class)\n6. `/components`\n  * Module and component styles (single- and child-classes)\n7. `/sections`\n  * View- and page-specific and scoped styles (typically `parent > child` classes).\n8. `/overrides`\n  * Utility styles, usually end in `!important`.\n\n*/\n/* SG\n# Functions/General [[dev]]\n\n##### `safe-get-function()`\n###### function(`$function-name`)\nWrapper for Sass' internal `get-function` that allows for compatibility across Sass versions. If version is higher than 3.5, then the function is returned, otherwise, just the name.\n\n@returns function\n\n\n##### `cache()`\n###### function(`$function-name, $args...`)\nMemoize (cache) a function's return values and arguments. Speeds up processing on intensive functions that get called many times (with the same arguments).\n\n_NOTE: This can actually **increase** processing time if used too often or on simple functions as the lookup process isn't free. Every cached value is unique._\n\n@returns function result\n\n*/\n/* SG\n# Functions/Conversion [[dev]]\n\n##### `strip-units()`\n###### function(`$value`)\nRemove lengths (`px`, `em`, `rem`, etc.) from a value. Usually a variable. This is sometimes required because Sass cannot calculate incompatible units (`px * rem` for instance).\n[Reference](http://stackoverflow.com/questions/12328259/how-do-you-strip-the-unit-from-any-number-in-sass)\n\n##### `percentage-to-decimal()`\n###### function(`$percentage`)\nChanges percent value to decimal.\n@returns number\n\n##### `px-to-vw()`\n###### function(`$pixels`)\nConverts pixel dimensions to viewport width (vw) dimensions.\n@returns number (vw)\n\n##### `px-to-rems()`\n###### function(`$pixels, $base-font:` `$$base-font-size`)\nFunction for calculating `rem` values. Used by `@px-to-rems()`. The `$base-size` is used to calculate the value (e.g. if the body's font-size is `16px`, then the rem value of `24px` would be `1.5rem`).\n@returns number (rems)\n@alias rems()\n\n##### `px-to-ems()`\n###### function(`$pixels, $context:` `$base-font-size`)\nFunction for calculating `em` values. The `$context` is used to calculate the final value. Different from `px-to-rems()` by generating a value with an `em`. `$context` is often necessary based on the situation.\n@returns number(ems)\n@alias ems()\n\n##### `list-to-string()`\n###### function(`$list, $separator:','`)\nConverts a list to a string with an optional separator.\n@returns string\n@alias str-join()\n\n##### `str-to-number()`\n###### function(`$string, $unitless: false`)\nConverts a number-like string to a number. Since Sass accepts quoted and non-quoted values like `\"10px\"` and `10px`, but can only do math on the unquoted (number) value, it is sometimes necessary to convert/cast a string to a number.\n@returns number\n*/\n/* SG\n# Functions/Strings & Lists [[dev]]\n\n[Reference](https://github.com/devatrox/Sunglass)\n\n##### `contains()`\n###### function(`$data, $value`)\nGeneric `contains` function(similar to javascript's `indexOf`). Parses a variable(`$data`) for a `$value`. Returns boolean.\n@returns boolean\n@requires `str-contains()`, `list-contains()`\n\n##### `str-join()`\n###### function(`$list, $separator:','`)\nConverts a map or list to a string (`('this', 'and', 'this')` becomes `'this,and,this'`).\n@returns string\n\n##### `str-contains()`\n###### function(`$string, $value, $pos: 0`)\nChecks if a `$string` contains a `$value`. Optionally accepts a start positon.\n@returns boolean\n\n##### `str-append()`\n###### function(`$data, $separator:','`)\nAdds one string to another (e.g. `str-append('hello', 'world')` becomes `hello world`).\n@returns string\n\n##### `list-contains()`\n###### function(`$list, $value`)\nChecks whether a `$list` contains a `$value`.\n@returns boolean\n\n##### `list-print()`\n###### function(`$list, $depth: 1`)\nUsed to turn a list into a flat string. For debug purposes.\n@returns string\n\n##### `to-list()`\n###### function(`$string, $keep: 'both'`)\nConvert a value to a list. `$keep` accepts `'keys'`, `'values'`, or `'both'` for map conversion.\n@returns list\n\n*/\n/* SG\n# Functions/Maps [[dev]]\n\n@file globals/_gl-functions.scss\n\n[Reference](http://www.sitepoint.com/extra-map-functions-sass/)\n\n##### `map-deep-set()`\n###### function(`$map, $keys... [, $value]`)\nAdd to a deeply nested map key. Accepts any number of keys, but the final value is the new key.\n@returns map\n\n##### `map-depth()`\n###### function(`$map`)\nFind depth of a `$map`.\n@returns number\n\n##### `map-has-keys()`\n###### `[map], [key(s) to be checked ...]`\nDetermine whether a map contains certain keys.\n@returns boolean\n@alias map-contains-keys()\n\n##### `map-has-nested-keys()`\n###### function(`$map`, `$keys...`)\nCheck for the value of a nested key.\n@returns boolean\n@alias map-contains-nested-keys()\n\n##### `map-get-nested()`\n###### function(`$map`, `$keys...`)\nReturns nested map values. A deep version of Sass' `map-get()`.\n@returns string, boolean, list, or map\n\n##### `map-extend()`\n###### function(`$map`, `$maps...`(`$deep:true`))\nMerges multiple maps. Similar to jQuery's .extend().\n@returns map\n\n##### `map-add-depth()`\n###### function(`$map`, `$new-key:'base'`)\nAdds one level to a map using the new key to a map. Used by `generate_color_varations()`. (e.g. `(key: value, key: value)` becomes `(key:(new-key: value), key:(new-key: value))` )\n@returns map\n\n##### `map-print()`\n###### function(`$map`, `$level:1`)\nPrints map into a string (in a JSON-esque format). Useful for debugging.\n@returns string\n@alias map-inspect()\n\n*/\n/* SG\n# Typography/Sizing [[dev]]\n\n##### `modular-scale()`\n###### function(`$scale`, `$ratio:``$$scale-ratio`)\nGenerates a pixel value that is an exponent of a ratio (`$ratio` defaults to `$$scale-ratio` value).\n@requires `pow()`, `cache()`, `strip-units()`\n@returns number (pixels)\n\n*/\n/* SG\n# Typography/Line-height [[dev]]\n\n##### `baseline()`\n###### function(`$font-size`, `$baseline`, `$multiple:1`)\n\nAligns a font-size to a baseline (`$baseline`). Returns a unitless value relative to the font-size (equivilent to ems). An optional multiple can be used to make a variation on the given baseline (using decimals will divide the the baseline).\n@returns number (unitless)\n\n*/\n/* SG\n\n##### `baseline-curve()`\n###### function(`$x` , `$accel`: `1`)\n\nCalculates a where a number(`$x`) sits along a parabolic arc (curve). Change the curve's severity by changing its `$accel`.\nAn `$accel` of 1 is a smooth arc.\n`$accel` accepts any number between -2 and 2.35. A negative will invert the curve.\n\nThe formula: `y = (sqrt((x^1)+x) - sqrt(x^1)) / .4142135623730951`\n( [Visual](https://www.desmos.com/calculator/qswvc6q9kt) )\n\n@returns number\n@requires `sqrt()`, `pow()`\n\n*/\n/*SG\n\n##### `baseline-calc()`\n###### function(`$font-size: $base-font-size, $font-base: $base-font-size, $basline-slack: $font-looseness`)\n\nCreates unitless line-heights that align to the baseline grid with consideration to the aesthetics of a given font size. Essentially makes sure larger font-sizes have smaller line-heights, while smaller font-sizes have larger ones.\nUses constraints based on upper and lower limits of pleasing line-heights, and finds where a given font-size should sit within those constraints. `$$font-looseness` increases the upper constraints, allowing for taller line heights on larger font sizes.\nDepends on `baseline()` for calculation and `baseline-curve()` to determine the deviance from the upper and lower constraints.\n\n@returns number (unitless)\n@requires `baseline()`, `baseline-curve()`\n\n*/\n/* SG\n\n# Functions/Math [[dev]]\n\nMost functions taken from [Sassy Math](https://github.com/Team-Sass/Sassy-math/blob/master/sass/math.scss).\n\n*/\n/* SG\n\n##### `pow()`\n###### function(`$number`, `$exponent`, `$precision:12`)\n\nA more robust exponent multiplication which allows for decimal-based exponents. This **fully** replaces Compass' pow() function (allows for float-based exponents).\n\n[Reference](https://gist.github.com/nathancrank/7539155)\n\n@returns number\n@requires log()\n@alias exponent()\n\n*/\n/* SG\n\n##### `log()`\n###### function(`$x`)\nReturns the natural logarithm of a number.\n\n```scss\n$value:   log(2)  // 0.69315\n$value2:  log(10) // 2.30259\n```\n\n@returns number\n\n*/\n/* SG\n\n##### `frexp()`\n###### function(`$x`)\nReturns a two-element list containing the normalized fraction and exponent of number.\n\n@returns list (fraction, exponent)\n\n*/\n/* SG\n\n##### `ldexp()`\n###### function(`$x, $exp`)\n\nReturns $x * 2^$exp\n\n*/\n/* SG\n\n##### `exp()`\n###### function(`$x`)\n\nReturns E^x, where x is the argument, and E is Euler's constant, the base of the natural logarithms.\n\n```scss\n$value: exp(1)  // 2.71828\n$value2: exp(-1) // 0.36788\n```\n\n@returns Number\n\n*/\n/* SG\n\n##### `fact()`\n###### function(`$x`)\n\nReturns the factorial of a non-negative integer.\n\n```scss\n$value:  fact(0) // 1\n$value2: fact(8) // 40320\n```\n@return Number\n\n*/\n/* SG\n\n##### `gcd()`\n###### function(`$number-1`, `$number-2`)\n\nGreatest Common Divisor calculation (useful for calculating grids and widths).\n@returns number\n\n*/\n/* SG\n\n##### `lcm()`\n###### function(`$a`, `$b`)\n\nFinds the least common multiple. Use with caution...if there is no LCM, then you compilation will error out.\n\n@returns number\n\n*/\n/* SG\n\n##### `nth_root()`\n###### function(`$base`, `$n:2`, `$precision:12`)\n\nAdvanced calculation for square roots, cube roots, etc. of a value.\n[Reference](http://rosettacode.org/wiki/Nth_root#JavaScript)\n\n@returns number\n\n*/\n/* SG\n\n##### `sqrt()`\n###### function(`$base`, `$precision:12`)\n\nFind the square root of a value.\n\n@returns number\n@alias `sqroot()`\n\n*/\n/* SG\n\n##### `sin()`\n###### function(`$angle`)\n\nDetermines the Sine of an angle.\n[Reference](https://unindented.org/articles/trigonometry-in-sass/)\n\n@returns number\n*/\n/* SG\n\n##### `cos()`\n###### function(`$angle`)\n\nDetermines the Cosine of an angle.\n@returns number\n\n*/\n/* SG\n##### `tan()`\n###### function(`$angle`)\n\nDetermines the Tangent of an angle.\n@returns number\n\n*/\n/* SG\n\n##### `golden()`\n###### function(`$base: 1`)\n\nGet the golden ratio from `$base`.\n@returns number\n@alias `$$golden_ratio`\n\n*/\n/* SG\n# Colors/Lookup [[dev]]\n\n@file tools/_t-color-functions.scss\n\n@priority 99\n\n##### `colors()`\n###### function(`$color-name, $tone: 'base', $opacity: 1`)\nGet a color value from the global `$$base-colors` map. Darker and lighter tones are available by passing a second string.\n\n```scss\n.foo {\n    background-color: colors(links, light));\n}\n```\n\nPassing only a color name will default to the 'base' color.\n\n@alias color(), clr()\n@requires `$$base-colors`\n\n[Reference](http://blog.12spokes.com/web-design-development/simple-css-color-management-with-sass/)\n*/\n/* SG\n# Colors/Lookup [[dev]]\n\n##### `combine-color-maps()`\n###### function(`$map1 , $map2`)\nSpecialized function used by `generate-color-variations()` to merge two color maps.\n\n@returns map\n\n*/\n/* SG\n# Colors/Manipulation [[dev]]\n\n##### `generate-color-varations()`\n###### function( `$map: $colors, $functions: (tint, tint, tint, shade, shade, shade), $increments: (20%, 40%, 80%, 20%, 40%, 80%), $variations: (light, lighter, lightest, dark, darker, darkest), $blending-colors: null`)\n\nTakes base color values and generates a full color palette. Used by the `$$base-colors` map to create a project's palette, accessible via `colors()`.\n\n**Arguments:**\n* `$map`: Color map you want to create variations of. Defaults to `$$base-colors`.\n* `$functions`: color functions used to generate variations (e.g. lighten or darken). Can use any `blend` function, provided `$blending-colors` are provided.\n* `$increments`: percentage amount to apply `$function` to each `$variations`.\n* `$variations`: actual names for each color tone when `colors()` used.\n* `$blending-colors`: used when a function is a `blend`. Can be a list or a single color.\n\n@requires `combine-color-maps()`\n\n*/\n/* SG\n# Colors/Manipulation [[dev]]\n\n\n##### `black-or-white()`\n###### function(`$color`)\nChange text color based on background-color's darkness.\n\n```scss\ndiv {\n    background-color: #f8cd12;\n    color: set_text_color(#f8cd12);\n}\n// Your text color would be black because #f8cd12 and #00000 have more contrast.\n```\n@alias set-text-color()\n@requires `color-luminance`\n\n*/\n/* SG\n##### `pick-best-color()`\n###### function(`$base, $colors, $tolerance: 0`)\nCompares a set of colors against `$base` and returns the color with the most contrast. `$colors` should be a list.\n[Taken from here](https://gist.github.com/voxpelli/6304812)\n\n```scss\ndiv {\n    color: pick_best_color(#f8cd12, (#a0a0c0, #fff, #2c2c2c));\n}\n// The function would test the colors and find that #2c2c2c is the best.\n```\n@requires `color-contrast()`, `color-luminance()`\n@returns color\n*/\n/* SG\n##### `color-contrast()`\n###### function(`$color1, $color2`)\nFind contrast between two colors.\n[Adapted from color.js](https://github.com/LeaVerou/contrast-ratio/blob/gh-pages/color.js)\n\n@requires `color-luminance()`\n@returns number(0 - 1)\n*/\n/* SG\n##### `color-luminance()`\n###### function(`$color1`)\nFind the relative luminance of a color. Used by `color-contrast()`. [Adapted from color.js](https://github.com/LeaVerou/contrast-ratio/blob/gh-pages/color.js)\n@alias luma()\n@returns number(0 - 1)\n*/\n/* SG\n# Colors/Debugging [[dev]]\n\n@file tools/_t-color-functions.scss\n\n##### `@color-palette-output()`\n###### mixin(`$selector`, `$color-map:` `$$base-colors`)\nDebugging tool that creates a pretty color palette (in columns) using psuedo selectors (nth-child required). Used for \"color blocks\" output, in style guide.\n\n@requires `map-add-depth()`, `black-or-white()`\n\n*/\n/* SG\n\n# Colors/Blending Modes [[dev]]\n\n@file tools/_t-blend-modes.scss\n\n@priority 1\n\n[Taken from Sass Blend Modes](https://github.com/heygrady/scss-blend-modes/blob/master/stylesheets/_blend-modes.scss)\n\n##### `blend-normal()`\n###### function(`$forground, $background, $amount:0`)\n\n##### `blend-multiply()`\n###### function(`$forground, $background, $amount:0`)\n\n##### `blend-lighten()`\n###### function(`$forground, $background, $amount:0`)\n\n##### `blend-darken()`\n###### function(`$forground, $background, $amount:0`)\n\n##### `blend-lineardodge()`\n###### function(`$forground, $background, $amount:0`)\n\n##### `blend-linearburn()`\n###### function(`$forground, $background, $amount:0`)\n\n##### `blend-difference`\n###### function(`$forground, $background, $amount:0`)\n\n##### `blend-screen()`\n###### function(`$forground, $background, $amount:0`)\n\n##### `blend-exclusion()`\n###### function(`$forground, $background, $amount:0`)\n\n##### `blend-multiply()`\n###### function(`$forground, $background, $amount:0`)\n\n*/\n/* SG\n# Variables/Easing [[dev]]\n\nEach easing variable is a cubic-bezier value that specifies rate of change of an animation. [See easings for more](http://www.easings.net).\n\n[Reference](https://github.com/matthewlein/Ceaser/blob/master/developer/)\n\n*/\n/* SG\n# Config/Propagation [[dev]]\n\n#### `@globalize-config()`\nPulls together config variables and routes them into structures expected by the framework, then makes them global.\nFor instance, the `$$type-h1-size` variable is accepted as a list, but will be available as a single size, while making `$type-h1-lh` available.\n\n*/\n/* SG\n# Typography/Font Face [[dev]]\n\n##### `@fonts()`\n###### mixin(`$name`: `$$font-file-name`, `$path: $$font-file-location`, `$weights`: `$$font-weights`, `$italics`: `$$font-italics`)\nA wrapper function for `@font-face()`. Takes global configuration variables and passes them to `@font-face()`. Loops through each `$name` based on `$weights` and `$italics`. Uses `$path` and `$name` to point to font files. Formats these variables so they can be passed to `@font-face()`.\n\nFont file names must be the same as their CSS font-family values. Example: arial font, 400 weight would be arial400.ttf and the CSS value would be font-family: 'arial'; font-weight: 400.\n\n@requires `@font-face()`\n\n##### `@font-face()`\n###### mixin(`$name`, `$font-files`, `$weight:false`,` $style:false`, `$eot:false`)\nGenerates cross-browser font-face declarations when called.\n$name is required, arbitrary, and what you will use in font stacks.\n**Arguments:**\n* $font-files is required using font-files('relative/location', 'format'). For best results use this order: woff, opentype/truetype, svg\n* $eot is required by IE, and is a relative location of the eot file.\n* $weight shows if the font is bold, defaults to normal\n* $style defaults to normal, might be also italic\n\nBased on [Compass' font-face mixin](http://compass-style.org/reference/compass/css3/font_face/).\n\n*/\n/* SG\n# Mixins/Media Queries [[dev]]\n\n@file globals/tools/_t-media-queries.scss\n\n##### `@media-query()`\n###### mixin(`$media-queries...`)\nEnclose a block of code with a media query as named in `$breakpoints`. To create more consolodated code, most (if not all) media queries should be called through this mixin. Multiple media-queries can be defined, separated by a comma. This will place your content into multiple separate media-queries at once (useful if you need the same css at different breakpoints).\n\n**Alternative Uses:**\n\n* Passing multiple media queries separated by an `'and'` (quoted) to combine them, compiles to something like `@media screen and (min-width: 500px) and (max-width: 900px){}`.\n\n* Passing a value like `min-width 1200px` or `max-height 300px` allows for arbitrary breakpoints.\n\n* Passing `max 1200px 'and' smalls` will create a combined media-query with a predefined one from `$$breakpoints`.\n\n* Passing `height smalls` will replace `width` with `height` within the `smalls` breakpoint. Similarly, using `min smalls` would replace 'max' with 'min'.\n\n@requires `mq-arglist-to-map()`, `mq-parse-query-args()` `$$breakpoints`\n@alias @mq(), @breakpoint(), @bp()\n\n*/\n/* SG\n# Mixins/Overrides [[dev]]\n\n##### `@create-overrides()`\n###### mixin(`$map, $breakpoints, $namespace: \"\"`)\nTakes a map of class names and style properties and outputs utility (override) classes over a specified number of breakpoints. Useful for creating a number of single-use classes over multiple breakpoints. Always makes property declarations `!important`.\n\nExample:\n```scss\n//Input\n@include creat-overrides(\n    (\n        \"class-name\": (\n            \"property\": \"value\",\n        ),\n        \"float-right, align_right\": (\n            \"float\": \"right\"\n        )\n    ),\n    ('smalls', 'bigs')\n);\n\n//CSS-output\n.float-left {\n    float: left !important;\n}\n.float-right,\n.align_right {\n    float: right !important;\n}\n@media (max-width: 600px) {\n    .float-left {\n        float: left !important;\n    }\n    .float-right,\n    .align_right {\n        float: right !important;\n    }\n}\n@media (min-width: 601px) {\n    ...\n}\n```\n##### `@_override-output()`\n###### mixin(`$map, $namespace: \"\"`)\nUsed exclusively by `@create-overrides()` to iterate through a map of classes, properties, and values to create responsive classes.\n\n*/\n/* SG\n\n# Mixins/CSS Helpers [[dev]]\n\n##### `@specificity()`\n###### mixin(`$specificity: 1`)\nSpecificity increaser. Useful for increasing specificity of a selector instead of using `!important`.\n```scss\n.class {\n    @include specificity(2) {\n        color: red;\n    }\n}\n\n//css\n.class.class {\n    color: red;\n}\n\n```\n[Reference](http://www.sitepoint.com/selector-specificity-css-preprocessors/)\n\n*/\n/* SG\n##### `@opacity()`\n###### mixin(`$opacity`)\nCross-browser (including IE8-) opacity.\n[Reference](https://gist.github.com/jgv/745754)\n\n*/\n/* SG\n##### `@border()`\n###### mixin(`$border`)\nAllows creating many border properties at once. Works like the standard border shorthand style but allows varied styles on different border directions.\n\n```scss\n\t//scss\n\t.foo {\n\t\t@include border(2px 3px solid dashed dotted blue currentColor yellow);\n\t}\n\n\t//css\n\t.foo {\n\t\tborder-width: 2px 3px;\n\t\tborder-style: solid dashed dotted;\n\t\tborder-color: blue currentColor yellow;\n\t}\n```\n*/\n/* SG\n\n# Mixins/Buttons [[dev]]\n\n##### `@button()`\n###### mixin(`$bg-color`: `color('links')`, `$text-color`: `null`, `$border`: `null`, `$radius`: `null`, `$text-radius`: `null`, `$style`: `null`, `$inset`: `false`)\nGenerates common button styles, allowing for simple creation of more complex gradient styles. Intelligently excludes unnecessary styles from states like hover, focus, and active. _Does not generate hover, focus, or active psuedo selectors on its own._\n\n**Accepted arguments**\n* `$bg-color`: Color values. This cannot accept null.\n* `$text-color`: Color or null (null will let the mixin decide the best color based on contrast).\n* `$border`: Any border properties (colors, styles, widths) or `null`. Uses the `@border()` mixin.\n* `$radius`: `border-radius` values. `null` produces no border-radius property.\n* `$style`: `null`, `shiny` or `reflective`.\n   `shiny` creates a simple gradient backgroud based on the `$bg-color`.\n   `reflective` creates a stacked gradient based on the `$bg-color`.\n* `$inset`: Boolean. `True` adds a dark box-shadow inset.\n   If combined with 'shiny' or 'reflective' `$style`, background gradients are inverted.\n\n*/\n/* SG\n# Tools/Z-Index [[dev]]\n\n@file globals/tools/_t-zindex.scss\n\n##### `z()`\n###### function(`$layer`, `$modifier: false`)\nReturns a numeric value (used for z-index) from a named layer, stored in `$$z-index`. Changing the modifier to anything other than `false` will add 1 plus however many times the value has been called. So, if you've called `z(head, true)` 5 times, and `head`'s default value is 100, you would get a value of 105.\n\nThe `$modifier` is useful if you'd like to closely layer z-indexes within the same module. It is rarely necessary, though since z-indexes stack.\n\n*/\n/* SG\n# Tools/Display Utilities [[dev]]\n\n@file globals/tools/_t-display.scss\n\n##### `@display-utilities()`\n###### mixin(`$namespace:\"\", $silent:false, $important:true, $class-list:$display-classes`)\nGenerates classes with display properties defined in `$class-list`. Intelligently extends duplicated display properties.\n\n\n##### `@display-utilities-init()`\n###### mixin(`$breakpoints: $all-breakpoints, $namespace: '', $silent: true, $important: false`)\nThe responsive component to `@display-utilities()`. Invoke `@display-utilites()` with that loops through a set of media-queries defined in `$$breakpoints`. This is most useful for creating responsive display classes.\n\n*/\n/* SG\n# Grid System/Variables [[dev]]\n\n##### `$$human-readable-numerators`\n###### List (string)\nFirst words used to represent numbers in a fraction; Corresponds to grid interval names (one, two, three, etc.).\n\n\n##### `$$human-readable-denominators`\n###### List (string)\nSecond words used to represent numbers in a fraction; Corresponds to grid interval names (whole, half, third, etc.).\n*/\n/* SG\n# Grid System/Functions [[dev]]\n\n##### `grid-size()`\n###### function(`$size, $total:` `$$grid-columns`)\nCreates a percentage based on the `$size / $total`.\n@requires `$$grid-columns`\n\n*/\n/* SG\n# Grid System/Mixins [[dev]]\n\n##### `@grid-width()`\n###### mixin(`$columns, $total:` `$$grid-columns`)\nCreates a width property with a percentage based on the `$columns / $total`.\n@requires `grid-size()`, `$$grid-columns`\n@alias `@width()`\n\n*/\n/* SG\n\n\n##### `@width-setup()`\n###### mixin(`$namespace:\"\", $silent:` `$$grid-silent-classes`, $property:\"width\")\n Uses `$$human-readable-numerators` and `$$human-readable-denominators` to create percentages based on `$$grid-columns`. `$property` accepts any property, as well as lists of properties.\n\n@requires `grid-size()`, `$$human-readable-numerators`, `$$human-readable-denominators`\n\n*/\n/* SG\n# Grid System/Mixins [[dev]]\n\n##### `@grid-setup()`\n###### mixin(`$silent:` `$$grid-silent-classes`)\nCreates basic grid classes (listed below), called by `@grid-init()`.\n\n_Note: `[% || .]` denotes a class that is either silent(`%`) or standard CSS(`.`). Based on the `$$grid-silent-classes` setting._\n\n* ###### `%grid_reset`\n Useful for resetting the grid's effects without making full grid items.\n\n* ###### `[% || .]grid`\n Wrapper class for grid widths. Puts a negative left margin of one unit. When not using floats, adds appropriate letter-spacing (for inline-block-based grid).\n\n* ###### `[% || .]grid_item`\n Sets up a grid column. Uses column padding inherited from parent `%/.grid`.\n\n* ###### `[% || .]grid_rev`\n Makes grid columns start from the right.\n\n* ###### `[% || .]grid_right`\n Makes all grid columns align to the right.\n\n* ###### `[% || .]grid_center`\n Makes all grid columns align to the center.\n\n* ###### `[% || .]grid_middle`\n Makes all grid columns vertical align to the middle.\n\n* ###### `[% || .]grid_bottom`\n Makes all grid columns vertical align to the bottom.\n\n* ###### `[% || .]grid_full`\n Eliminates padding between grid columns.\n\n* ###### `[% || .]grid_narrow`\n Reduces the padding between grid columns.\n\n* ###### `[% || .]grid_wide`\n Increases the padding between grid columns.\n\n*/\n/* SG\n# Grid System/Mixins [[dev]]\n\n##### `@grid-row()`\n###### mixin()\nCreates a grid container (row) based on your grid configuration.\n@requires `@type-space()`\n\n##### `@grid-item()`\n###### mixin(`$columns: $grid-columns`)\nCreates a grid item (column) based on your grid configuration set to a width based on the `$columns` passed in.\n@requires `@type-space()`, `@grid-width()`\n*/\n/* SG\n##### `@grid-init()`\n###### mixin(`$silent:` `$$grid-silent-classes`, `$important:false`)\nCreates responsive grid classes by running through all the grid-setup mixins. Uses the media-queries defined in the `$breakpoint-has-` variables to create media-query-scoped classes.\n@requires `@grid-classes()`, `@width-classes()`, `@push-classes()`, `@pull-classes()`\n\n*/\n/* SG\n##### `@grid-classes()`\n###### mixin(`$silent:` `$$grid-silent-classes`)\nRuns `@grid-setup()`.\n@requires `@grid-setup()`\n\n##### `@width-classes()`\n###### mixin(`$silent:` `$$grid-silent-classes`, `$important: false`)\nRuns `@width-setup()`, looping across all breakpoints in `$$breakpoint-has-widths`. Creates classes with `width` property values (`flex-basis` and `max-width` for flex-based grids) based on the grid.\n@requires `@media-query()`, `@width-setup()`\n\n##### `@push-classes()`\n###### mixin(`$silent:` `$$grid-silent-classes`, `$important: false`)\nRuns `@width-setup()`, looping across all breakpoints in `$$breakpoint-has-push`. Creates classes with `push_` and `left` property values based on the grid.\n@requires `@media-query()`, `@width-setup()`\n\n##### `@pull-classes()`\n###### mixin(`$silent:` `$$grid-silent-classes`, `$important: false`)\nRuns `@pull-setup()`, looping across all breakpoints in `$$breakpoint-has-pull`. Creates classes with `pull_` and `right` property values based on the grid.\n@requires `@media-query()`, `@width-setup()`\n\n*/\n/* SG\n# Tools/Spacing Utilities [[dev]]\n\n##### `@spacing-utilities()`\n###### mixin(`$namespace:''`, `$config`)\nGenerates responsive spacing and padding classes. The `$namespace` argument is the media query's name, which will be appended to all generated classes. The `$config` argument is a map that allows JS-style arguments. Outputs class name as: `breakpoint_prefix_direction_amount`.\n\n**`$config` Keys:**\n* `silent:` boolean for outputting silent/non-silent classes.\n* `important:` whether to output !important after each declaration.\n* `directions:` names that get appended to class names.\n* `amounts:` how much to multiply spacing unit by `$$base-line-height`.\n* `names:` corresponding names for each `amounts` that gets appended to class names.\n* `prefixes:` first word in the class name. Must contain the words 'pad' and 'space'. Used by `layout-type()` to determine padding or margin.\n\n\n##### `@spacing-utilities-init()`\n###### mixin(`$breakpoints:` `$$all-breakpoints`, `$namespace:''`, `$config:(silent:true)`)\nThe responsive component to `@spacing-utilities()`. Invoke `@spacing-utilites()` with that loops through a set of media-queries defined in `$$breakpoints`. This is most useful for creating responsive spacing classes.\n\n*/\n/* SG\n# Typography/Conversion [[dev]]\n\n##### `@px-to-rems()`\n###### mixin(`$property`, `$sizes`, `$important`: `false`, `$base-font`: `$$base-font-size`)\nTakes a pixel value and creates a property with a `rem` value. If `$$rem-px-fallback` is `true`, a pixel fallback is also included. `$sizes` also accepts 'auto'.\n@alias `@rems()`\n@requires `px-to-rems()`\n\n*/\n/* SG\n\n# Typography/Sizing [[dev]]\n\n##### `@type-font-size()`\n###### mixin(`$font-size, $line-height: auto, $font-base:``$$base-font-size`)\nQuickly generate a font-size in rems, with a pixel fallback, based on the value we pass into the mixin. Optionally calculates line-height using `$$base-line-height`.\n\n_`$line-height` also accepts a pixel value and will be converted to a unitless one._\n\n@alias `@font-size()`\n@requires `@px-to-rems()`, `cache()`, `baseline-calc()`\n\n*/\n/* SG\n# Typography/Spacing [[dev]]\n\n##### `@type-space()`\n###### mixin(`$properties, $multipliers, $important: false`)\nOutput REM values using the typographic grid. This is the prefered method of adding padding and margins because it enforces consistent spacing around all elements.\n\n**Arguments:**\n* `$properties`: Can be any `CSS` property that accepts a length value (e.g. `rem`). Also accepts multiple properties as a nested list (e.g. `(padding-left, padding-right)`).\n* `$multipliers`: Accepts unitless values that get converted to `rem` units which are a multiple of the typographic grid. Can be multiple values, **separated by spaces**, in the case of `margin` or `padding`.\n* `$important`: Accepts `true` or `!important`.\n\n**Example**\n```scss\n// SCSS input\n.foo {\n    @include type-space(padding, 1 .25 .5 auto, '!important');\n}\n\n// CSS output\n.foo {\n    padding: 24px 8px 12px auto !important;\n    padding: 1.5rem .375rem .75rem auto !important;\n}\n```\n\n@requires `@px-to-rems()`, `str-contains()`\n@alias `@space()`\n\n*/\n/* SG\n# Config/Typography Settings [[dev]]\n\n##### `$$base-font-size`\n###### Pixel value\nFont size all other values will use for calculation. Will be converted to `rems`.\n\n##### `$$base-line-height`\n###### Pixel value\nLine-height for base font-size. Will be used to determine the vertical spacing values when `type-space()` is used.\n\n##### `$$font-looseness`\n###### Percentage\nWhat to base the tightness/looseness of automatically-generated `line-heights`.\n\n##### `$$auto-scale-type`\n###### Boolean\nUses `$$scale-ratio` to create font sizes for headings starting from the `$$base-font-size`. Overwrites `$$type-[h#]-size`.\n\n##### `$$scale-ratio`\n###### Numeric (float)\nUsed for `$$auto-scale-type` and for `modular-scale()`.\n\n##### `$$rem-px-fallback`\n###### Boolean\nDetermines whether `rems()` conversion includes a pixel-value fallback for older browsers like IE8.\n\n##### `$$indented-paragraphs`\n###### Boolean\nDetermines whether to generate css for paragraphs with a text indent, rather than paragraphs with margins between them.\n\n*/\n/* SG\n# Config/Typography Settings [[dev]]\n\n##### `$$type-[h#]-size`\n###### List (pixel value [, pixel or unitless value])\nVariables used to generate heading (and small) font-sizes and line-heights. A secondary value will force the line-height to that base-value.\n\n_NOTE: First value must be pixel values(or a function that generates a pixel value like `modular-scale()`), but the optional secondary value can be unitless._\n*/\n/* SG\n# Config/Typography Settings [[dev]]\n\n##### `$$primary-font-stack`, `$$secondary-font-stack`, `$$monospace-font-stack`, `$$icon-font-stack`\n###### String\nUsed wherever font-families are declared. Use `null` if nothing exists.\n\n##### `$$use-web-fonts`\n###### Boolean\nWhether to generate `@font-face` values based on `$$font-file-name` (and the other `$font-` variables).\n\n##### `$$font-file-name`\n###### List (string)\nUses for automatically generated `@font-face` declarations. Describes the filename as well as the font-family name reference. _File names and @font-face values must be the same (e.g. 'opensans' and 'opensans.ttf').**Casing matters**._\n\n##### `$$font-weights`\n###### List (nested)\nEach parenthesis corresponds to each name in `$$font-file-name`. Determines how many `@font-face` weights are generated per font.\n\n##### `$$font-italics`\n###### List (nested) (boolean)\nCorresponds to each value in `$$font-weights`. (e.g. if `$font-weights: (400,700),(200,400)` and `$font-italics: (true),(false,true)` then the first font will have italics in the 400 and 700 weights while second font will have italics in the 400 weight).\n\n##### `$$font-include-woff2`\n###### Boolean (list)\nDetermines whether woff2 formats be included in the `@font-face` generation. Can be a list if each font has different values (not recommended since woff2 is the most performant font-file format).\n\n##### `$$font-include-eot`\n###### Boolean (list)\nDetermines whether to generate `@font-face` values that point at an .eot file. Fallback for IE8.\n\n*/\n/* SG\n# Config/Responsive Settings [[dev]]\n\n##### `$$max-site-width`\n###### Pixel value\nMaximum desktop width for the site wrapper.\n_This value is also useful as a breakpoint, since this is the point at which your site is going to squish._\n\n##### `$$max-content-width`\n###### Pixel value\nMaximum width for content set at the `$$base-font-size`. This should be set to whatever creates the ideal line-length for standard content (Usually 45-75 characters).\n_Also useful as a breakpoint, since it is typical that your viewport is now smaller than your ideal line-length._\n\n##### `$$max-wide-content-width`\n###### Pixel value\nSimilar to `$$max-content-width`, but for type that might be a little larger, but smaller than your maximum site width(`$$max-site-width`). Useful for hero-style text treatments and content blocks that need a bit of constraint.\n\n*/\n/* SG\n# Config/Breakpoints [[dev]]\n\n##### `$$breakpoints`\n###### Map (`breakpoint-name: 'breakpoint-value'`)\nSets up variables for media-queries. Used in `@media-query()`.\n\n_Note: It's usually good to convert your pixel values to ems to ensure best browser behavior. Can be accomplished via `0.625em`_\n\n**Example**\n```scss\n$breakpoints: (\n  'small':'(min-width: 320px)',\n  'bigs':'(min-width: 850px)'\n);\n```\n*/\n/* SG\n# Config/Grid Settings [[dev]]\n\n##### `$$grid-columns`\n###### Number\nBase number of grid columns to be generated. Note that any column number will include all fractions of the fewer columns. For instance, a 12-column grid would also include all fractions of 1-12 (including things like three-sevenths).\n\n##### `$$grid-gutter`\n###### Pixel value\nSpace between grid items. Also used in `type-space()` for horizontal spacing units.\n\n##### `$$grid-silent-classes`\n###### Boolean\nIf set to false, actual grid classes will be output to CSS.\n\n##### `$$grid-push`, `$$grid-pull`\n###### Boolean\nDetermines whether to include extra grid classes for positional grid modifiers.\n*/\n/* SG\n##### `$$grid-inline-block`\n###### Boolean\nCreate grids using an inline-block-based layout.\n\n##### `$$grid-markup-fix`\n###### Boolean\n**Only applicable to inline-block grid.** If set to `true`, html must have no white space (or comments) between grid items. Almost always set to `false`.\n\n##### `$$grid-letter-space-fix`\n###### em value\n**Only applicable to inline-block grid.** If `$$grid-markup-fix` is not used, then a negative `em` value must be set to remove whitespace between columns. Usually, `-0.45em` works, but this should be adjusted based on the natural width of the font-family set on the body element.\n\n##### `$$grid-flex`\n###### Boolean\nIf set to `true`, the grid will add markup for a flexbox-based layout. Can be combined with an inline-block-based grid to provide an older browser fallback.\n\n##### `$$grid-floats`\n###### Boolean\nIf set to `true`, the grid uses floats-based layout. **This is usually not recommended since inline-block and flexbox are much are more flexible.**\n*/\n/* SG\n##### `$$breakpoints-has-widths`, `$$breakpoints-has-push`, `$$breakpoints-has-pull`\n###### List (string)\nDetermines what classes (widths, pushes, pulls) get generated at `$$breakpoints`. The list's order determines the output order. This is useful if you want one breakpoint to override another.\n*/\n/* SG\n# Config/Utility Class Settings [[dev]]\n\n##### `$$breakpoint-namespace-character`\n###### String\nUsed to define what character comes after an auto-generated responsive class. A setting of '_' would create classes like `smalls_space-v` whereas a '@' would create classes like `smalls@space-v`.\n*/\n/* SG\n# Config/Utility Class Settings [[dev]]\n\n##### `$$display-classes`\n###### Map (string: string)\nVariable used to generate display classes. Key value pairs determine the class name and the display value.\n\n**Example**\n```scss\n//SCSS input\n$display-classes: ('show':'block');\n\n//CSS output\n.show { display: block; }\n```\n\n##### `$$spacing-classes`\n###### Map (`string: string`)\nVariable used to generate utility (override) spacing classes. Classes are created via `@spacing-utilities()`.\n\n**Keys and Values**\n* 'directions': Direction class suffixes.\n* 'units': Numeric multiples (e.g. `2` or `-1`) of your spacing units (`$$horizontal-space` and `$$vertical-space`).\n* 'properties': Class name aliases for padding and margin.\n\n**Example**\n```scss\n//SCSS Input\n    $display-classes: (\n        'directions': (\n            '-t': 'top',\n            '-r': 'right',\n            '-v': 'top' 'bottom'\n        ),\n        'units': (\n            '-2': 2,\n            '-neg': -1\n        ),\n        'properties': (\n            'pad': 'padding',\n            'margin': 'space'\n        )\n    );\n\n//CSS output\n    // Assume spacing units are 1rem, for simplicity\n    .space-t-2, .space-v-2 { margin-top: 2rem; }\n    .space-v-2 { margin-bottom: 2rem; }\n    .space-r-2 { margin-right: 2rem; }\n    .space-t-neg { margin-top: -1rem; }\n    .space-r-neg { margin-right: -1rem; }\n\n    .pad-t-2 { padding-top: 2rem; }\n    .pad-r-2 { padding-right: 2rem;}\n    //--Negative padding classes filtered out since they are invalid---//\n\n    @media only screen and (min-width:300px){...}\n    //repeated for all media-queries defined by $breakpoints-has-spacing-classes...\n```\n*/\n/* SG\n# Config/Utility Class Settings [[dev]]\n\n##### `$$breakpoints-has-alignment-classes`, `$$breakpoints-has-spacing-classes`, `$breakpoints-has-display-classes`, `$breakpoint-has-type-classes`\n###### List (keys from `$$breakpoints`)\nDetermines what utility classes get generated at `$$breakpoints`. The list's order determines cascade The list's order determines the output order. This is useful if you want one breakpoint to override another.\nA `false` value will output no classes of that type.\n*/\n/* SG\n# Config/Color Settings [[dev]]\n\n##### `$$base-colors`\n###### Map (key : color value)\nSets up consistent color names to be used for color-palette. Dark and light values will be automatically generated. Key values should be accessed through `colors()`.\n`type`, `links`, and `bg` key values are required for some starter styles. If you choose not to use them, just replace their references in the appropriate files.\n\nSupports a nested map style like the following:\n```scss\n$base-colors: (\n  'type':(\n    'base':red,\n    'light': pink,\n    'dark':maroon\n  ),\n  'links':(\n    'base':blue,\n    'light': sky,\n    'dark': navy\n  ),\n  'bg': (\n    'base': #fff,\n    'dark': #ddd\n  )\n);\n```\n*/\n/* SG\n# Config/Debug Settings [[dev]]\n\n_NOTE: These settings, when set to `true`, will slow down compilation somewhat._\n\n##### `$$debug-fonts`\n###### Boolean\nWhether to include debug statements about font sizes and line-heights as they're generated. Useful if you're getting weird values on auto-generated line-heights.\n\n* %: Distance from the lowest font-size.\n* ub: Line-height upperbounds\n* lb: Line-height lowerbounds\n* lh: Final line-height (in pixels and unit-less).\n* loops: Number of times it took to process the line-height. High numbers can indicate font-sizes that are very difficult to process.\n\n##### `$$debug-baseline`\n###### Boolean\nAdds style for a `baseline-on` class that will show a grid of the baseline on any element (most useful on the `body` or `html` tag). Makes vertical alignment easier.\n\n\n##### `$$debug-silent-classes`\n###### Boolean\nStores all auto-generated silent classes into a map that is then output as a comment at the end of the final css. Useful for getting an overview of values that are stored by the framework.\n\n##### `$$debug-breakpoints`\n###### Boolean\nDisplays the current breakpoint (from `$$breakpoints`) name on a psuedo element on the body. Makes debugging media queries a little simpler.\n\n*/\n/* SG\n# Config/Slick Settings [[dev]]\n\n##### `$$slick-[]-[]`\nConfiguration for slick carousel jQuery plugin.\n[See Slick documentation for more](https://github.com/kenwheeler/slick/#sass-variables)\n\n*/\n/* SG\n# Variables/Globals [[dev]]\nThe variables here are created based on the config variables passed by the user. These are generally abstracted to make them a little easier to parse, programmatically.\n\n##### `$$type-[h1-6,p,small]-lh`\n###### boolean/unitless/pixel value\nParses `$$type-h[#]-size` for an optional line-height value, if none exists, pass it along to `baseline-calc()`.\n@alias `$$h[#]-lh`\n\n##### `$$type-[h1-6,p,small]-size`\n###### Number (pixel)\nFont sizes, as defined by the user or `$$auto-scale-type`.\n*/\n/* SG\n##### `$$type-base-unit`\n###### Number\nAbstraction of the base spacing unit used in any mixin or function that defines spacing units.\n\n##### `$$type-base-ratio`\n###### Number\nRatio used to calculate the difference between font sizes and spacing units.\n\n##### `$$type-headings`\n###### List (number)\nUsed for defining automatic headings functions.\n\n##### `$$type-modular-scale`\n###### Number\nAbstracts the `$$scale-ratio` and makes sure it's a positive number.\n*/\n/*\n##### `$$all-breakpoints`\n###### List\nStores all the names defined in `$$breakpoints` for use in abstract framework components so that if names are chagned, boilerplate media queries won't fail.\n\n##### `$$breakpoint-smallest`\n###### String\nGrabs the first `$$breakpoints` name.\n\n##### `$$breakpoint-largest`\n###### String\nGrabs the last `$$breakpoints` name.\n*/\nhtml,\nbody {\n  min-height: 100%;\n}\n\nbody {\n  font-size: 1rem;\n  line-height: 1.5;\n}\n\nabbr[title],\ndfn[title] {\n  cursor: help;\n}\n\nu,\nins {\n  text-decoration: none;\n}\n\nins {\n  border-bottom: 1px solid;\n}\n\nmark {\n  background-color: #c7d5e1;\n}\n\narticle,\naside,\ndetails,\nfigcaption,\nfigure,\nfooter,\nheader,\nmain,\nmenu,\nnav,\nsection,\nsummary,\nhr {\n  display: block;\n}\n\na {\n  cursor: pointer;\n  background-color: transparent;\n  color: #0d497b;\n}\n\na:hover, a:focus {\n  color: #4c95bd;\n}\n\na:active {\n  color: #082c4a;\n}\n\na:focus {\n  outline: thin dotted;\n}\n\na:active, a:hover {\n  outline: 0;\n}\n\nhr {\n  height: 2px;\n  border-top: 2px solid #e4eaf3;\n  margin: 1.5rem 0;\n}\n\n/*! sanitize.css v3.0.0 | CC0 1.0 Public Domain | github.com/10up/sanitize.css */\n/*\n * Normalization\n */\naudio:not([controls]) {\n  display: none;\n}\n\nbutton {\n  overflow: visible;\n  -webkit-appearance: button;\n}\n\nhtml {\n  -ms-overflow-style: -ms-autohiding-scrollbar;\n  overflow-y: scroll;\n  -webkit-text-size-adjust: 100%;\n  -ms-text-size-adjust: 100%;\n}\n\ninput {\n  -webkit-border-radius: 0;\n}\n\ninput[type=\"button\"], input[type=\"reset\"], input[type=\"submit\"] {\n  -webkit-appearance: button;\n}\n\ninput[type=\"number\"] {\n  width: auto;\n}\n\ninput[type=\"search\"] {\n  -webkit-appearance: textfield;\n}\n\ninput[type=\"search\"]::-webkit-search-cancel-button, input[type=\"search\"]::-webkit-search-decoration {\n  -webkit-appearance: none;\n}\n\npre {\n  overflow: auto;\n}\n\nprogress {\n  display: inline-block;\n}\n\nsvg:not(:root) {\n  overflow: hidden;\n}\n\ntemplate {\n  display: none;\n}\n\ntextarea {\n  overflow: auto;\n  resize: vertical;\n}\n\n[hidden] {\n  display: none;\n}\n\n/*\n * Universal inheritance\n */\n*,\n::before,\n::after {\n  box-sizing: inherit;\n}\n\n* {\n  font-size: inherit;\n  line-height: inherit;\n}\n\n::before,\n::after {\n  text-decoration: inherit;\n  vertical-align: inherit;\n}\n\n/*\n * Opinionated defaults\n */\n*,\n::before,\n::after {\n  border-style: solid;\n  border-width: 0;\n}\n\n* {\n  background-repeat: no-repeat;\n  margin: 0;\n  padding: 0;\n}\n\n:root {\n  background-color: #f6f8fb;\n  box-sizing: border-box;\n  color: #0a1c2b;\n  cursor: inherit;\n  font: 100%/1.5 \"opensans\", \"Helvetica Neue\", \"Helvetica\", \"Arial\", sans-serif;\n  text-rendering: optimizeLegibility;\n}\n\na {\n  text-decoration: none;\n}\n\naudio,\ncanvas,\niframe,\nimg,\nsvg,\nvideo {\n  vertical-align: middle;\n}\n\nbutton,\ninput,\nselect,\ntextarea {\n  color: inherit;\n  font-family: inherit;\n  font-style: inherit;\n  font-weight: inherit;\n}\n\nbutton,\n[type=\"button\"],\n[type=\"date\"],\n[type=\"datetime\"],\n[type=\"datetime-local\"],\n[type=\"email\"],\n[type=\"month\"],\n[type=\"number\"],\n[type=\"password\"],\n[type=\"reset\"],\n[type=\"search\"],\n[type=\"submit\"],\n[type=\"tel\"],\n[type=\"text\"],\n[type=\"time\"],\n[type=\"url\"],\n[type=\"week\"],\nselect,\ntextarea {\n  min-height: 1.5rem;\n}\n\ncode,\nkbd,\npre,\nsamp {\n  font-family: \"Consolas\", \"Andale Mono WT\", \"Andale Mono\", \"Lucida Console\", \"Lucida Sans Typewriter\", \"DejaVu Sans Mono\", \"Bitstream Vera Sans Mono\", \"Liberation Mono\", \"Nimbus Mono L\", \"Monaco\", \"Courier New\", \"Courier\", monospace, monospace;\n}\n\nnav ol,\nnav ul {\n  list-style: none;\n}\n\nselect {\n  -moz-appearance: none;\n  -webkit-appearance: none;\n}\n\nselect::-ms-expand {\n  display: none;\n}\n\nselect::-ms-value {\n  color: currentColor;\n}\n\ntable {\n  border-collapse: collapse;\n  border-spacing: 0;\n}\n\n::-moz-selection {\n  background-color: #3c6c95;\n  color: #fff;\n  text-shadow: none;\n}\n\n::selection {\n  background-color: #3c6c95;\n  color: #fff;\n  text-shadow: none;\n}\n\n[aria-busy=\"true\"] {\n  cursor: progress;\n}\n\n[aria-controls] {\n  cursor: pointer;\n}\n\n[aria-disabled] {\n  cursor: default;\n}\n\n[hidden][aria-hidden=\"false\"] {\n  clip: rect(0 0 0 0);\n  display: inherit;\n  position: absolute;\n}\n\n[hidden][aria-hidden=\"false\"]:focus {\n  clip: auto;\n}\n\n@font-face {\n  font-family: \"Asap\";\n  src: url(\"/public/fonts/Asap-400.woff\") format(\"woff\"), url(\"/public/fonts/Asap-400.ttf\") format(\"truetype\"), url(\"/public/fonts/Asap-400.svg#Asap400\") format(\"svg\");\n  font-weight: 400;\n  font-style: normal;\n}\n\n@font-face {\n  font-family: \"Asap\";\n  src: url('/public/fonts/Asap-400-italic.woff') format('woff'), url('/public/fonts/Asap-400-italic.ttf') format('truetype'), url('/public/fonts/Asap-400-italic.svg#Asap400italic') format('svg');\n  font-weight: 400;\n  font-style: italic;\n}\n\n@font-face {\n  font-family: \"Asap\";\n  src: url(\"/public/fonts/Asap-700.woff\") format(\"woff\"), url(\"/public/fonts/Asap-700.ttf\") format(\"truetype\"), url(\"/public/fonts/Asap-700.svg#Asap700\") format(\"svg\");\n  font-weight: 700;\n  font-style: normal;\n}\n\n@font-face {\n  font-family: \"Asap\";\n  src: url('/public/fonts/Asap-700-italic.woff') format('woff'), url('/public/fonts/Asap-700-italic.ttf') format('truetype'), url('/public/fonts/Asap-700-italic.svg#Asap700italic') format('svg');\n  font-weight: 700;\n  font-style: italic;\n}\n\n@font-face {\n  font-family: \"opensans\";\n  src: url(\"/public/fonts/opensans-200.woff\") format(\"woff\"), url(\"/public/fonts/opensans-200.ttf\") format(\"truetype\"), url(\"/public/fonts/opensans-200.svg#opensans200\") format(\"svg\");\n  font-weight: 200;\n  font-style: normal;\n}\n\n@font-face {\n  font-family: \"opensans\";\n  src: url('/public/fonts/opensans-200-italic.woff') format('woff'), url('/public/fonts/opensans-200-italic.ttf') format('truetype'), url('/public/fonts/opensans-200-italic.svg#opensans200italic') format('svg');\n  font-weight: 200;\n  font-style: italic;\n}\n\n@font-face {\n  font-family: \"opensans\";\n  src: url(\"/public/fonts/opensans-400.woff\") format(\"woff\"), url(\"/public/fonts/opensans-400.ttf\") format(\"truetype\"), url(\"/public/fonts/opensans-400.svg#opensans400\") format(\"svg\");\n  font-weight: 400;\n  font-style: normal;\n}\n\n@font-face {\n  font-family: \"opensans\";\n  src: url('/public/fonts/opensans-400-italic.woff') format('woff'), url('/public/fonts/opensans-400-italic.ttf') format('truetype'), url('/public/fonts/opensans-400-italic.svg#opensans400italic') format('svg');\n  font-weight: 400;\n  font-style: italic;\n}\n\n@font-face {\n  font-family: \"opensans\";\n  src: url(\"/public/fonts/opensans-700.woff\") format(\"woff\"), url(\"/public/fonts/opensans-700.ttf\") format(\"truetype\"), url(\"/public/fonts/opensans-700.svg#opensans700\") format(\"svg\");\n  font-weight: 700;\n  font-style: normal;\n}\n\n@font-face {\n  font-family: \"opensans\";\n  src: url('/public/fonts/opensans-700-italic.woff') format('woff'), url('/public/fonts/opensans-700-italic.ttf') format('truetype'), url('/public/fonts/opensans-700-italic.svg#opensans700italic') format('svg');\n  font-weight: 700;\n  font-style: italic;\n}\n\nh1, h2, h3, h4, h5, h6 {\n  font-family: \"Asap\", \"Garamond\", \"Baskerville\", \"Baskerville Old Face\", \"Hoefler Text\", \"Times New Roman\", serif;\n}\n\ntable, p, address, pre {\n  margin: 0 0 1.5rem;\n}\n\nlegend {\n  display: table;\n  white-space: normal;\n}\n\nbutton,\ninput {\n  line-height: normal;\n}\n\nbutton,\ninput[type=\"button\"],\ninput[type=\"reset\"],\ninput[type=\"submit\"] {\n  font-family: inherit;\n  font-size: inherit;\n  line-height: inherit;\n  border: 0;\n  -webkit-appearance: button;\n  cursor: pointer;\n  *overflow: visible;\n}\n\nbutton,\ninput,\nselect,\ntextarea {\n  background-color: #fff;\n}\n\nbutton::-moz-focus-inner,\ninput::-moz-focus-inner {\n  border: 0;\n  padding: 0;\n}\n\ninput[type=\"checkbox\"],\ninput[type=\"radio\"] {\n  box-sizing: border-box;\n  padding: 0;\n  *height: 13px;\n  *width: 13px;\n}\n\nbutton[disabled],\ninput[disabled] {\n  cursor: default !important;\n}\n\ninput[type=\"number\"]::-webkit-inner-spin-button,\ninput[type=\"number\"]::-webkit-outer-spin-button {\n  height: auto;\n}\n\ninput[type=\"search\"] {\n  appearance: none;\n  box-sizing: border-box;\n}\n\nselect input[type=\"submit\"],\ninput[type=\"button\"],\ninput[type=\"image\"],\ninput[type=\"reset\"] {\n  border-radius: 0;\n  -webkit-border-radius: 0;\n}\n\nul,\nol,\ndl,\nmenu {\n  margin: 0 0 1.5rem 1.5rem;\n}\n\nli > ul,\nli > ol {\n  margin-bottom: 0;\n}\n\nnav ol,\nnav ul {\n  margin-left: 0;\n}\n\ntable {\n  width: 100%;\n  background-color: transparent;\n  border-collapse: collapse;\n  border-spacing: 0;\n}\n\nth,\ntd {\n  padding: 1.5rem 0 0.75rem;\n  text-align: left;\n  vertical-align: top;\n  border: 0;\n  border-bottom: 1px;\n  border-top-width: 0px;\n  border-color: #e4eaf3;\n  border-style: solid;\n}\n\nth {\n  font-weight: bold;\n}\n\nthead th {\n  vertical-align: bottom;\n  padding: 1.5rem 0 0;\n}\n\nh1, h2, h3, h4, h5, h6 {\n  margin-bottom: 1.5rem;\n}\n\nh1 {\n  font-size: 6.05345rem;\n  line-height: 0.99117;\n}\n\nh2 {\n  font-size: 4.48403rem;\n  line-height: 1.00356;\n}\n\nh3 {\n  font-size: 3.32151rem;\n  line-height: 1.12901;\n}\n\nh4 {\n  font-size: 2.46038rem;\n  line-height: 1.21933;\n}\n\nh5 {\n  font-size: 1.8225rem;\n  line-height: 1.23457;\n}\n\nh6 {\n  font-size: 1.35rem;\n  line-height: 1.11111;\n}\n\nh1 + p, h2 + p, h3 + p, h4 + p, h5 + p, h6 + p {\n  margin-top: -1.5rem;\n}\n\n/* SG\n# Typography/Body copy\n\nThe default font-size for all typography is **16px** with line-height of **24px** (1.5). This is applied to the `<body>` and inherited by paragraphs and lists. `<p>` tags all receive a bottom margin of 1rem.\n\nWhen a `<p>` follows a heading tag (`<h1>` for instance), the paragraph receives a negative top margin so it sits directly beneath the heading.\n\nThe default font-family is set in **Asap**.\n\n```html_example\n<p>Aenean lacinia bibendum nulla sed consectetur. Morbi leo risus, porta ac consectetur ac, vestibulum at eros. Sed posuere consectetur est at lobortis. </p>\n<p>Nullam quis risus eget urna mollis ornare vel eu leo. Nulla vitae elit libero, a pharetra augue.</p>\n\n<h5>A Heading...</h5>\n<p>...Followed by a paragraph. Notice how there's no margin between these two items.</p>\n```\n\n*/\nsmall {\n  display: inline-block;\n  font-size: 0.75rem;\n  line-height: 2;\n}\n\nb,\nstrong {\n  font-weight: 700;\n}\n\npre {\n  white-space: pre;\n  white-space: pre-wrap;\n  word-wrap: break-word;\n  overflow: auto;\n}\n\nsub,\nsup {\n  font-size: 75%;\n  line-height: 0;\n  position: relative;\n  vertical-align: baseline;\n}\n\nsup {\n  top: -0.5ex;\n}\n\nsub {\n  bottom: -0.25ex;\n}\n\ncode,\nkbd,\npre,\nsamp {\n  font-family: \"Consolas\", \"Andale Mono WT\", \"Andale Mono\", \"Lucida Console\", \"Lucida Sans Typewriter\", \"DejaVu Sans Mono\", \"Bitstream Vera Sans Mono\", \"Liberation Mono\", \"Nimbus Mono L\", \"Monaco\", \"Courier New\", \"Courier\", monospace;\n  _font-family: 'courier new', monospace;\n  font-size: 1em;\n}\n\nblockquote {\n  text-indent: -.5ex;\n}\n\nblockquote {\n  margin: 0 0 1.5rem 1.5rem;\n  quotes: '“' '”';\n}\n\nblockquote p:before {\n  content: \"“\";\n  content: open-quote;\n}\n\nblockquote p:after {\n  content: \"\";\n  content: no-close-quote;\n}\n\nblockquote p:last-of-type:after {\n  content: \"”\";\n  content: close-quote;\n}\n\nq {\n  *quotes: none;\n  quotes: \"‘\" \"’\" \"“\" \"”\";\n  overflow: visible;\n}\n\nq:before {\n  content: \"‘\";\n  content: open-quote;\n}\n\nq:after {\n  content: \"’\";\n  content: close-quote;\n}\n\nq q:before {\n  content: \"“\";\n  content: open-quote;\n}\n\nq q:after {\n  content: \"”\";\n  content: close-quote;\n}\n\nq:first-child {\n  display: inline-block;\n  text-indent: -0.22em;\n}\n\n.wrap {\n  margin: 0 auto;\n  max-width: 1360px;\n  display: block !important;\n  float: none;\n  padding: 1.5rem 0;\n  width: 95%;\n}\n\n@media only screen and (min-width: 43.1875em) and (max-width: 56.875em) {\n  .wrap {\n    width: 93%;\n  }\n}\n\n@media only screen and (min-width: 56.9375em) {\n  .wrap {\n    width: 90%;\n  }\n}\n\n.wrap--content {\n  max-width: 43.125rem;\n}\n\n.wrap--wide-content {\n  max-width: 56.875rem;\n}\n\n.clearfix,\n.wrap,\n.media-object,\n.clearfix {\n  *zoom: 1;\n}\n\n.clearfix:before, .clearfix:after,\n.wrap:before,\n.media-object:before,\n.clearfix:before,\n.wrap:after,\n.media-object:after,\n.clearfix:after {\n  display: table;\n  content: \" \";\n}\n\n.clearfix:after,\n.wrap:after,\n.media-object:after,\n.clearfix:after {\n  clear: both;\n  height: 0;\n  width: 0;\n}\n\n.row > * {\n  letter-spacing: normal;\n  word-spacing: normal;\n}\n\n.row {\n  list-style: none;\n  margin: 0;\n  padding: 0;\n  margin-left: -2rem;\n  letter-spacing: -0.45em;\n  display: flex;\n  flex-wrap: wrap;\n}\n\n.row .opera:-o-prefocus, .row {\n  word-spacing: -0.45em;\n}\n\n.column {\n  padding-left: 2rem;\n  width: 100%;\n  min-height: 1px;\n  display: inline-block;\n  vertical-align: top;\n  letter-spacing: normal;\n  word-spacing: normal;\n  flex: 0 0 100%;\n  width: 100%;\n  flex-basis: 100%;\n  max-width: 100%;\n}\n\n.row--full {\n  margin-left: 0;\n}\n\n.row--full > .column {\n  padding-left: 0;\n}\n\n.row--narrow {\n  margin-left: -1rem;\n}\n\n.row--narrow > .column {\n  padding-left: 1rem;\n}\n\n.w-quarter {\n  width: 25% ;\n  max-width: 25% ;\n  flex-basis: 25% ;\n}\n\n.w-half {\n  width: 50% ;\n  max-width: 50% ;\n  flex-basis: 50% ;\n}\n\n/* SG\n\n# Layout/Media object\n\nIsolates an image from text wrapping underneath. Useful for creating an association between an image and text. Often used with an icon or avatar. Adding other classes to the `media-object__body` can create a more stylized version.\n\n```html_example\n<img class=\"media-object__media\" src=\"http://placehold.it/300x48\" alt=\"placeholder image\">\n<p class=\"media-object__body\">\n    Content that sits to the right of the image but will never wrap underneath the image to the left. Etiam porta sem malesuada magna mollis euismod. Cras justo odio, dapibus ac facilisis in, egestas eget quam.\n</p>\n\n```\n*/\n.media-object__media, .media-object__body {\n  overflow: hidden;\n  _overflow: visible;\n  zoom: 1;\n}\n\n.media-object__media {\n  float: left;\n}\n\n.media-object, .media-object__media, .media-object__media img, .media-object__body {\n  display: block;\n}\n\n.media-object {\n  width: 100%;\n  margin-bottom: 1.5rem;\n}\n\n.media-object__body {\n  padding-left: 0.75rem;\n}\n\n/* SG\n\n# Layout/Arrangement object\n\nCreates an image-content block that vertically aligns images and text (centered, bottom, or top).\nChildren can be named four things:\n* `arrange__item--fit` or `arrange__media` will create a block that fits the width of its content (useful for images).\n* `arrange__item--fill` will fill the remaining space.\n* `arrange__body` is similar to 'arrange__item--fill' but has some default styling.\n\nYou may also combine this with grid items like `row` and `column` if you wish to add gutters between elements.\n\n_NOTE: Do not mistake this for true grid items. This should only be used for the arrangement of a few items. It is \"squishy\", but not technically responsive._\n\n```html_example\n<div class=\"arrange\">\n    <div class=\"arrange__media\">\n        <img src=\"http://placehold.it/60x48\" alt=\"placeholder image\">\n    </div>\n    <div class=\"arrange__body\">\n        Content that is vertically (middle) aligned with the image.\n    </div>\n</div>\n\n<!-- Bottom Arrangement -->\n<div class=\"arrange arrange--bottom\">\n    <div class=\"arrange__media\">\n        <img src=\"http://placehold.it/60x48\" alt=\"placeholder image\">\n    </div>\n    <div class=\"arrange__body\">\n        Content that is bottom aligned to the image.\n    </div>\n</div>\n\n<!-- Equal width arrangement-->\n<div class=\"arrange arrange--equal\">\n    <div class=\"arrange__item arrange__item--fill\">\n        Equal width columns.\n    </div>\n    <div class=\"arrange__item arrange__item--fill\">\n        <img class=\"show\" src=\"http://placehold.it/120x72\" alt=\"placeholder image\" style=\"margin: auto;\">\n    </div>\n    <div class=\"arrange__item arrange__item--fill\">\n        Can be as many columns as you want.\n    </div>\n</div>\n\n```\n*/\n.arrange {\n  table-layout: auto;\n  min-width: 100%;\n  display: table;\n  width: 100%;\n  margin-bottom: 1.5rem;\n}\n\n.arrange__item, .arrange__media, .arrange__body {\n  display: table-cell;\n}\n\n.arrange__item--fill, .arrange__body {\n  width: 100%;\n}\n\n.arrange__item--fit img, .arrange__media img {\n  display: block;\n  max-width: none;\n}\n\n.arrange__item--pad, .arrange__body {\n  padding-left: 0.75rem;\n}\n\n.arrange__item--fill, .arrange__item--fit, .arrange__media, .arrange__body {\n  vertical-align: middle;\n}\n\n.arrange--top > .arrange__item--fill, .arrange--top > .arrange__item--fit, .arrange--top > .arrange__media, .arrange--top > .arrange__body {\n  vertical-align: top;\n}\n\n.arrange--bottom > .arrange__item--fill, .arrange--bottom > .arrange__item--fit, .arrange--bottom > .arrange__media, .arrange--bottom > .arrange__body {\n  vertical-align: bottom;\n}\n\n.arrange--equal {\n  table-layout: fixed;\n}\n\n.arrange--equal > .arrange__item--fill,\n.arrange--equal > .arrange__item--fit {\n  width: 1%;\n}\n\n/* SG\n# Buttons\nApplying the `btn` class to anything will make it look like a button. Always declare `type=\"button\"` on `<button>` elements for proper accessibility.\n\n```html_example\n<button type=\"button\" class=\"btn\">Button</button>\n\n<a href=\"\" class=\"btn\">Faux Button</a>\n```\n\n*/\n.btn {\n  border-radius: 1.275rem/1.5rem;\n  box-shadow: 0 3px 4px -2px transparent;\n  background-color: #0d497b;\n  padding: 0.75rem 0.5625rem;\n  color: white;\n  font-weight: bold;\n  transition: background-color .1s ease-in-out, box-shadow .2s ease-out, color .1s ease-in-out;\n}\n\n.btn:focus, .btn:hover {\n  outline: none;\n  box-shadow: 0 3px 8px -2px rgba(76, 149, 189, 0.65);\n  background-color: #4c95bd;\n}\n\n.btn:active {\n  outline: none;\n  box-shadow: 0 0 4px 1px rgba(146, 182, 202, 0.5);\n  background-color: #92b6ca;\n  color: #cfdbe5;\n}\n\n.btn {\n  display: inline-flex;\n  justify-content: space-between;\n  align-content: flex-start;\n  align-items: center;\n}\n\n.btn--wide {\n  width: 100%;\n}\n\n.btn--compact {\n  padding: 0.1875rem;\n}\n\n.btn__icon {\n  display: inline-block;\n  flex: 0 1 auto;\n  margin: 0 0.375rem 0 0.375rem;\n}\n\n.btn--reversed .btn__icon {\n  order: -1;\n}\n\n.btn__svg,\n.btn__icon--image {\n  display: block;\n  width: 1.5rem;\n  height: auto;\n  min-height: 1px;\n  fill: currentColor;\n}\n\n.btn__body {\n  display: inline-block;\n  flex: 1 1 auto;\n  padding: 0 0.75rem;\n}\n\n.hero {\n  display: table;\n  width: 100%;\n  height: 96vh;\n  max-height: 100.5rem;\n  background-size: cover;\n  color: #fff;\n  position: relative;\n  background-image: url(\"../images/logo.svg\");\n  padding: 1.5rem 0 1.5rem;\n  background-attachment: fixed;\n}\n\n.hero__body {\n  display: table-cell;\n  vertical-align: middle;\n  max-width: 99%;\n}\n\n.editor_content ul {\n  list-style: bulleted;\n  margin-left: 1.5rem;\n}\n\n.icon {\n  width: 1.2em;\n  margin-right: .5em;\n  display: inline-block;\n  margin-top: -.25em;\n}\n\n.box_open {\n  border-width: 2px 0;\n}\n\n[class*=\"list_bordered\"] > li {\n  border-top-width: 2px;\n  margin-top: -2px;\n}\n\n[class*=\"list_bordered\"] > li:first-child {\n  border-top-color: #e4eaf3;\n}\n\n[class*=\"list_bordered\"] > li:last-child {\n  border-bottom: 2px solid #e4eaf3;\n  margin-bottom: 4px;\n}\n\n.tab,\n.list_nav a {\n  text-transform: uppercase;\n  letter-spacing: .5px;\n  font-weight: bold;\n  font-size: 0.75rem;\n  line-height: 2;\n  text-decoration: none;\n}\n\n.toggles {\n  position: fixed;\n  top: -1px;\n  right: -1px;\n  z-index: 501;\n  background-color: #fff;\n  border: 1px solid #ddd;\n  padding: 5px 10px;\n  border-radius: 0px 0px 0px 3px;\n}\n\n.float-left {\n  float: left !important;\n}\n\n.float-right {\n  float: right !important;\n}\n\n.float-none {\n  float: none !important;\n}\n\n.fixed {\n  position: fixed !important;\n}\n\n.absolute {\n  position: absolute !important;\n}\n\n.absolute-fill {\n  top: 0 !important;\n  left: 0 !important;\n  bottom: 0 !important;\n  right: 0 !important;\n}\n\n@media only screen and (max-width: 56.875em) {\n  .smalls_float-left {\n    float: left !important;\n  }\n  .smalls_float-right {\n    float: right !important;\n  }\n  .smalls_float-none {\n    float: none !important;\n  }\n  .smalls_fixed {\n    position: fixed !important;\n  }\n  .smalls_absolute {\n    position: absolute !important;\n  }\n  .smalls_absolute-fill {\n    top: 0 !important;\n    left: 0 !important;\n    bottom: 0 !important;\n    right: 0 !important;\n  }\n}\n\n@media only screen and (min-width: 56.9375em) {\n  .bigs_float-left {\n    float: left !important;\n  }\n  .bigs_float-right {\n    float: right !important;\n  }\n  .bigs_float-none {\n    float: none !important;\n  }\n  .bigs_fixed {\n    position: fixed !important;\n  }\n  .bigs_absolute {\n    position: absolute !important;\n  }\n  .bigs_absolute-fill {\n    top: 0 !important;\n    left: 0 !important;\n    bottom: 0 !important;\n    right: 0 !important;\n  }\n}\n\n@media only screen and (min-width: 85em) {\n  .desk_float-left {\n    float: left !important;\n  }\n  .desk_float-right {\n    float: right !important;\n  }\n  .desk_float-none {\n    float: none !important;\n  }\n  .desk_fixed {\n    position: fixed !important;\n  }\n  .desk_absolute {\n    position: absolute !important;\n  }\n  .desk_absolute-fill {\n    top: 0 !important;\n    left: 0 !important;\n    bottom: 0 !important;\n    right: 0 !important;\n  }\n}\n\n.show {\n  display: block !important;\n}\n\n.il {\n  display: inline !important;\n}\n\n.i-block {\n  display: inline-block !important;\n}\n\n.hide {\n  display: none !important;\n}\n\n.flex {\n  display: flex !important;\n}\n\n@media only screen and (max-width: 56.875em) {\n  .smalls_show {\n    display: block !important;\n  }\n  .smalls_il {\n    display: inline !important;\n  }\n  .smalls_i-block {\n    display: inline-block !important;\n  }\n  .smalls_hide {\n    display: none !important;\n  }\n  .smalls_flex {\n    display: flex !important;\n  }\n}\n\n@media only screen and (min-width: 56.9375em) {\n  .bigs_show {\n    display: block !important;\n  }\n  .bigs_il {\n    display: inline !important;\n  }\n  .bigs_i-block {\n    display: inline-block !important;\n  }\n  .bigs_hide {\n    display: none !important;\n  }\n  .bigs_flex {\n    display: flex !important;\n  }\n}\n\n[hidden] {\n  display: none !important;\n}\n\n.invisible {\n  visibility: hidden !important;\n}\n\n.pad {\n  padding: 1.5rem !important;\n}\n\n.pad-v, .pad-t {\n  padding-top: 1.5rem !important;\n}\n\n.pad-v, .pad-b {\n  padding-bottom: 1.5rem !important;\n}\n\n.pad-h, .pad-l {\n  padding-left: 1.5rem !important;\n}\n\n.pad-h, .pad-r {\n  padding-right: 1.5rem !important;\n}\n\n.pad-quarter {\n  padding: 0.375rem !important;\n}\n\n.pad-t-quarter, .pad-v-quarter {\n  padding-top: 0.375rem !important;\n}\n\n.pad-b-quarter, .pad-v-quarter {\n  padding-bottom: 0.375rem !important;\n}\n\n.pad-l-quarter, .pad-h-quarter {\n  padding-left: 0.375rem !important;\n}\n\n.pad-r-quarter, .pad-h-quarter {\n  padding-right: 0.375rem !important;\n}\n\n.pad-half {\n  padding: 0.75rem !important;\n}\n\n.pad-t-half, .pad-v-half {\n  padding-top: 0.75rem !important;\n}\n\n.pad-b-half, .pad-v-half {\n  padding-bottom: 0.75rem !important;\n}\n\n.pad-l-half, .pad-h-half {\n  padding-left: 0.75rem !important;\n}\n\n.pad-r-half, .pad-h-half {\n  padding-right: 0.75rem !important;\n}\n\n.pad-2 {\n  padding: 3rem !important;\n}\n\n.pad-t-2, .pad-v-2 {\n  padding-top: 3rem !important;\n}\n\n.pad-b-2, .pad-v-2 {\n  padding-bottom: 3rem !important;\n}\n\n.pad-l-2, .pad-h-2 {\n  padding-left: 3rem !important;\n}\n\n.pad-r-2, .pad-h-2 {\n  padding-right: 3rem !important;\n}\n\n.pad-0 {\n  padding: 0 !important;\n}\n\n.pad-t-0, .pad-v-0 {\n  padding-top: 0 !important;\n}\n\n.pad-b-0, .pad-v-0 {\n  padding-bottom: 0 !important;\n}\n\n.pad-l-0, .pad-h-0 {\n  padding-left: 0 !important;\n}\n\n.pad-r-0, .pad-h-0 {\n  padding-right: 0 !important;\n}\n\n.space {\n  margin: 1.5rem !important;\n}\n\n.space-v, .space-t {\n  margin-top: 1.5rem !important;\n}\n\n.space-v, .space-b {\n  margin-bottom: 1.5rem !important;\n}\n\n.space-h, .space-l {\n  margin-left: 1.5rem !important;\n}\n\n.space-h, .space-r {\n  margin-right: 1.5rem !important;\n}\n\n.space-quarter {\n  margin: 0.375rem !important;\n}\n\n.space-t-quarter, .space-v-quarter {\n  margin-top: 0.375rem !important;\n}\n\n.space-b-quarter, .space-v-quarter {\n  margin-bottom: 0.375rem !important;\n}\n\n.space-l-quarter, .space-h-quarter {\n  margin-left: 0.375rem !important;\n}\n\n.space-r-quarter, .space-h-quarter {\n  margin-right: 0.375rem !important;\n}\n\n.space-half {\n  margin: 0.75rem !important;\n}\n\n.space-t-half, .space-v-half {\n  margin-top: 0.75rem !important;\n}\n\n.space-b-half, .space-v-half {\n  margin-bottom: 0.75rem !important;\n}\n\n.space-l-half, .space-h-half {\n  margin-left: 0.75rem !important;\n}\n\n.space-r-half, .space-h-half {\n  margin-right: 0.75rem !important;\n}\n\n.space-2 {\n  margin: 3rem !important;\n}\n\n.space-t-2, .space-v-2 {\n  margin-top: 3rem !important;\n}\n\n.space-b-2, .space-v-2 {\n  margin-bottom: 3rem !important;\n}\n\n.space-l-2, .space-h-2 {\n  margin-left: 3rem !important;\n}\n\n.space-r-2, .space-h-2 {\n  margin-right: 3rem !important;\n}\n\n.space-neg-quarter {\n  margin: -0.375rem !important;\n}\n\n.space-t-neg-quarter, .space-v-neg-quarter {\n  margin-top: -0.375rem !important;\n}\n\n.space-b-neg-quarter, .space-v-neg-quarter {\n  margin-bottom: -0.375rem !important;\n}\n\n.space-l-neg-quarter, .space-h-neg-quarter {\n  margin-left: -0.375rem !important;\n}\n\n.space-r-neg-quarter, .space-h-neg-quarter {\n  margin-right: -0.375rem !important;\n}\n\n.space-neg-half {\n  margin: -0.75rem !important;\n}\n\n.space-t-neg-half, .space-v-neg-half {\n  margin-top: -0.75rem !important;\n}\n\n.space-b-neg-half, .space-v-neg-half {\n  margin-bottom: -0.75rem !important;\n}\n\n.space-l-neg-half, .space-h-neg-half {\n  margin-left: -0.75rem !important;\n}\n\n.space-r-neg-half, .space-h-neg-half {\n  margin-right: -0.75rem !important;\n}\n\n.space-neg {\n  margin: -1.5rem !important;\n}\n\n.space-t-neg, .space-v-neg {\n  margin-top: -1.5rem !important;\n}\n\n.space-b-neg, .space-v-neg {\n  margin-bottom: -1.5rem !important;\n}\n\n.space-l-neg, .space-h-neg {\n  margin-left: -1.5rem !important;\n}\n\n.space-r-neg, .space-h-neg {\n  margin-right: -1.5rem !important;\n}\n\n.space-neg-2 {\n  margin: -3rem !important;\n}\n\n.space-t-neg-2, .space-v-neg-2 {\n  margin-top: -3rem !important;\n}\n\n.space-b-neg-2, .space-v-neg-2 {\n  margin-bottom: -3rem !important;\n}\n\n.space-l-neg-2, .space-h-neg-2 {\n  margin-left: -3rem !important;\n}\n\n.space-r-neg-2, .space-h-neg-2 {\n  margin-right: -3rem !important;\n}\n\n.space-0 {\n  margin: 0 !important;\n}\n\n.space-t-0, .space-v-0 {\n  margin-top: 0 !important;\n}\n\n.space-b-0, .space-v-0 {\n  margin-bottom: 0 !important;\n}\n\n.space-l-0, .space-h-0 {\n  margin-left: 0 !important;\n}\n\n.space-r-0, .space-h-0 {\n  margin-right: 0 !important;\n}\n\n@media only screen and (max-width: 56.875em) {\n  .smalls_pad {\n    padding: 1.5rem !important;\n  }\n  .smalls_pad-v, .smalls_pad-t {\n    padding-top: 1.5rem !important;\n  }\n  .smalls_pad-v, .smalls_pad-b {\n    padding-bottom: 1.5rem !important;\n  }\n  .smalls_pad-h, .smalls_pad-l {\n    padding-left: 1.5rem !important;\n  }\n  .smalls_pad-h, .smalls_pad-r {\n    padding-right: 1.5rem !important;\n  }\n  .smalls_pad-quarter {\n    padding: 0.375rem !important;\n  }\n  .smalls_pad-t-quarter, .smalls_pad-v-quarter {\n    padding-top: 0.375rem !important;\n  }\n  .smalls_pad-b-quarter, .smalls_pad-v-quarter {\n    padding-bottom: 0.375rem !important;\n  }\n  .smalls_pad-l-quarter, .smalls_pad-h-quarter {\n    padding-left: 0.375rem !important;\n  }\n  .smalls_pad-r-quarter, .smalls_pad-h-quarter {\n    padding-right: 0.375rem !important;\n  }\n  .smalls_pad-half {\n    padding: 0.75rem !important;\n  }\n  .smalls_pad-t-half, .smalls_pad-v-half {\n    padding-top: 0.75rem !important;\n  }\n  .smalls_pad-b-half, .smalls_pad-v-half {\n    padding-bottom: 0.75rem !important;\n  }\n  .smalls_pad-l-half, .smalls_pad-h-half {\n    padding-left: 0.75rem !important;\n  }\n  .smalls_pad-r-half, .smalls_pad-h-half {\n    padding-right: 0.75rem !important;\n  }\n  .smalls_pad-2 {\n    padding: 3rem !important;\n  }\n  .smalls_pad-t-2, .smalls_pad-v-2 {\n    padding-top: 3rem !important;\n  }\n  .smalls_pad-b-2, .smalls_pad-v-2 {\n    padding-bottom: 3rem !important;\n  }\n  .smalls_pad-l-2, .smalls_pad-h-2 {\n    padding-left: 3rem !important;\n  }\n  .smalls_pad-r-2, .smalls_pad-h-2 {\n    padding-right: 3rem !important;\n  }\n  .smalls_pad-0 {\n    padding: 0 !important;\n  }\n  .smalls_pad-t-0, .smalls_pad-v-0 {\n    padding-top: 0 !important;\n  }\n  .smalls_pad-b-0, .smalls_pad-v-0 {\n    padding-bottom: 0 !important;\n  }\n  .smalls_pad-l-0, .smalls_pad-h-0 {\n    padding-left: 0 !important;\n  }\n  .smalls_pad-r-0, .smalls_pad-h-0 {\n    padding-right: 0 !important;\n  }\n  .smalls_space {\n    margin: 1.5rem !important;\n  }\n  .smalls_space-v, .smalls_space-t {\n    margin-top: 1.5rem !important;\n  }\n  .smalls_space-v, .smalls_space-b {\n    margin-bottom: 1.5rem !important;\n  }\n  .smalls_space-h, .smalls_space-l {\n    margin-left: 1.5rem !important;\n  }\n  .smalls_space-h, .smalls_space-r {\n    margin-right: 1.5rem !important;\n  }\n  .smalls_space-quarter {\n    margin: 0.375rem !important;\n  }\n  .smalls_space-t-quarter, .smalls_space-v-quarter {\n    margin-top: 0.375rem !important;\n  }\n  .smalls_space-b-quarter, .smalls_space-v-quarter {\n    margin-bottom: 0.375rem !important;\n  }\n  .smalls_space-l-quarter, .smalls_space-h-quarter {\n    margin-left: 0.375rem !important;\n  }\n  .smalls_space-r-quarter, .smalls_space-h-quarter {\n    margin-right: 0.375rem !important;\n  }\n  .smalls_space-half {\n    margin: 0.75rem !important;\n  }\n  .smalls_space-t-half, .smalls_space-v-half {\n    margin-top: 0.75rem !important;\n  }\n  .smalls_space-b-half, .smalls_space-v-half {\n    margin-bottom: 0.75rem !important;\n  }\n  .smalls_space-l-half, .smalls_space-h-half {\n    margin-left: 0.75rem !important;\n  }\n  .smalls_space-r-half, .smalls_space-h-half {\n    margin-right: 0.75rem !important;\n  }\n  .smalls_space-2 {\n    margin: 3rem !important;\n  }\n  .smalls_space-t-2, .smalls_space-v-2 {\n    margin-top: 3rem !important;\n  }\n  .smalls_space-b-2, .smalls_space-v-2 {\n    margin-bottom: 3rem !important;\n  }\n  .smalls_space-l-2, .smalls_space-h-2 {\n    margin-left: 3rem !important;\n  }\n  .smalls_space-r-2, .smalls_space-h-2 {\n    margin-right: 3rem !important;\n  }\n  .smalls_space-neg-quarter {\n    margin: -0.375rem !important;\n  }\n  .smalls_space-t-neg-quarter, .smalls_space-v-neg-quarter {\n    margin-top: -0.375rem !important;\n  }\n  .smalls_space-b-neg-quarter, .smalls_space-v-neg-quarter {\n    margin-bottom: -0.375rem !important;\n  }\n  .smalls_space-l-neg-quarter, .smalls_space-h-neg-quarter {\n    margin-left: -0.375rem !important;\n  }\n  .smalls_space-r-neg-quarter, .smalls_space-h-neg-quarter {\n    margin-right: -0.375rem !important;\n  }\n  .smalls_space-neg-half {\n    margin: -0.75rem !important;\n  }\n  .smalls_space-t-neg-half, .smalls_space-v-neg-half {\n    margin-top: -0.75rem !important;\n  }\n  .smalls_space-b-neg-half, .smalls_space-v-neg-half {\n    margin-bottom: -0.75rem !important;\n  }\n  .smalls_space-l-neg-half, .smalls_space-h-neg-half {\n    margin-left: -0.75rem !important;\n  }\n  .smalls_space-r-neg-half, .smalls_space-h-neg-half {\n    margin-right: -0.75rem !important;\n  }\n  .smalls_space-neg {\n    margin: -1.5rem !important;\n  }\n  .smalls_space-t-neg, .smalls_space-v-neg {\n    margin-top: -1.5rem !important;\n  }\n  .smalls_space-b-neg, .smalls_space-v-neg {\n    margin-bottom: -1.5rem !important;\n  }\n  .smalls_space-l-neg, .smalls_space-h-neg {\n    margin-left: -1.5rem !important;\n  }\n  .smalls_space-r-neg, .smalls_space-h-neg {\n    margin-right: -1.5rem !important;\n  }\n  .smalls_space-neg-2 {\n    margin: -3rem !important;\n  }\n  .smalls_space-t-neg-2, .smalls_space-v-neg-2 {\n    margin-top: -3rem !important;\n  }\n  .smalls_space-b-neg-2, .smalls_space-v-neg-2 {\n    margin-bottom: -3rem !important;\n  }\n  .smalls_space-l-neg-2, .smalls_space-h-neg-2 {\n    margin-left: -3rem !important;\n  }\n  .smalls_space-r-neg-2, .smalls_space-h-neg-2 {\n    margin-right: -3rem !important;\n  }\n  .smalls_space-0 {\n    margin: 0 !important;\n  }\n  .smalls_space-t-0, .smalls_space-v-0 {\n    margin-top: 0 !important;\n  }\n  .smalls_space-b-0, .smalls_space-v-0 {\n    margin-bottom: 0 !important;\n  }\n  .smalls_space-l-0, .smalls_space-h-0 {\n    margin-left: 0 !important;\n  }\n  .smalls_space-r-0, .smalls_space-h-0 {\n    margin-right: 0 !important;\n  }\n}\n\n@media only screen and (min-width: 56.9375em) {\n  .bigs_pad {\n    padding: 1.5rem !important;\n  }\n  .bigs_pad-v, .bigs_pad-t {\n    padding-top: 1.5rem !important;\n  }\n  .bigs_pad-v, .bigs_pad-b {\n    padding-bottom: 1.5rem !important;\n  }\n  .bigs_pad-h, .bigs_pad-l {\n    padding-left: 1.5rem !important;\n  }\n  .bigs_pad-h, .bigs_pad-r {\n    padding-right: 1.5rem !important;\n  }\n  .bigs_pad-quarter {\n    padding: 0.375rem !important;\n  }\n  .bigs_pad-t-quarter, .bigs_pad-v-quarter {\n    padding-top: 0.375rem !important;\n  }\n  .bigs_pad-b-quarter, .bigs_pad-v-quarter {\n    padding-bottom: 0.375rem !important;\n  }\n  .bigs_pad-l-quarter, .bigs_pad-h-quarter {\n    padding-left: 0.375rem !important;\n  }\n  .bigs_pad-r-quarter, .bigs_pad-h-quarter {\n    padding-right: 0.375rem !important;\n  }\n  .bigs_pad-half {\n    padding: 0.75rem !important;\n  }\n  .bigs_pad-t-half, .bigs_pad-v-half {\n    padding-top: 0.75rem !important;\n  }\n  .bigs_pad-b-half, .bigs_pad-v-half {\n    padding-bottom: 0.75rem !important;\n  }\n  .bigs_pad-l-half, .bigs_pad-h-half {\n    padding-left: 0.75rem !important;\n  }\n  .bigs_pad-r-half, .bigs_pad-h-half {\n    padding-right: 0.75rem !important;\n  }\n  .bigs_pad-2 {\n    padding: 3rem !important;\n  }\n  .bigs_pad-t-2, .bigs_pad-v-2 {\n    padding-top: 3rem !important;\n  }\n  .bigs_pad-b-2, .bigs_pad-v-2 {\n    padding-bottom: 3rem !important;\n  }\n  .bigs_pad-l-2, .bigs_pad-h-2 {\n    padding-left: 3rem !important;\n  }\n  .bigs_pad-r-2, .bigs_pad-h-2 {\n    padding-right: 3rem !important;\n  }\n  .bigs_pad-0 {\n    padding: 0 !important;\n  }\n  .bigs_pad-t-0, .bigs_pad-v-0 {\n    padding-top: 0 !important;\n  }\n  .bigs_pad-b-0, .bigs_pad-v-0 {\n    padding-bottom: 0 !important;\n  }\n  .bigs_pad-l-0, .bigs_pad-h-0 {\n    padding-left: 0 !important;\n  }\n  .bigs_pad-r-0, .bigs_pad-h-0 {\n    padding-right: 0 !important;\n  }\n  .bigs_space {\n    margin: 1.5rem !important;\n  }\n  .bigs_space-v, .bigs_space-t {\n    margin-top: 1.5rem !important;\n  }\n  .bigs_space-v, .bigs_space-b {\n    margin-bottom: 1.5rem !important;\n  }\n  .bigs_space-h, .bigs_space-l {\n    margin-left: 1.5rem !important;\n  }\n  .bigs_space-h, .bigs_space-r {\n    margin-right: 1.5rem !important;\n  }\n  .bigs_space-quarter {\n    margin: 0.375rem !important;\n  }\n  .bigs_space-t-quarter, .bigs_space-v-quarter {\n    margin-top: 0.375rem !important;\n  }\n  .bigs_space-b-quarter, .bigs_space-v-quarter {\n    margin-bottom: 0.375rem !important;\n  }\n  .bigs_space-l-quarter, .bigs_space-h-quarter {\n    margin-left: 0.375rem !important;\n  }\n  .bigs_space-r-quarter, .bigs_space-h-quarter {\n    margin-right: 0.375rem !important;\n  }\n  .bigs_space-half {\n    margin: 0.75rem !important;\n  }\n  .bigs_space-t-half, .bigs_space-v-half {\n    margin-top: 0.75rem !important;\n  }\n  .bigs_space-b-half, .bigs_space-v-half {\n    margin-bottom: 0.75rem !important;\n  }\n  .bigs_space-l-half, .bigs_space-h-half {\n    margin-left: 0.75rem !important;\n  }\n  .bigs_space-r-half, .bigs_space-h-half {\n    margin-right: 0.75rem !important;\n  }\n  .bigs_space-2 {\n    margin: 3rem !important;\n  }\n  .bigs_space-t-2, .bigs_space-v-2 {\n    margin-top: 3rem !important;\n  }\n  .bigs_space-b-2, .bigs_space-v-2 {\n    margin-bottom: 3rem !important;\n  }\n  .bigs_space-l-2, .bigs_space-h-2 {\n    margin-left: 3rem !important;\n  }\n  .bigs_space-r-2, .bigs_space-h-2 {\n    margin-right: 3rem !important;\n  }\n  .bigs_space-neg-quarter {\n    margin: -0.375rem !important;\n  }\n  .bigs_space-t-neg-quarter, .bigs_space-v-neg-quarter {\n    margin-top: -0.375rem !important;\n  }\n  .bigs_space-b-neg-quarter, .bigs_space-v-neg-quarter {\n    margin-bottom: -0.375rem !important;\n  }\n  .bigs_space-l-neg-quarter, .bigs_space-h-neg-quarter {\n    margin-left: -0.375rem !important;\n  }\n  .bigs_space-r-neg-quarter, .bigs_space-h-neg-quarter {\n    margin-right: -0.375rem !important;\n  }\n  .bigs_space-neg-half {\n    margin: -0.75rem !important;\n  }\n  .bigs_space-t-neg-half, .bigs_space-v-neg-half {\n    margin-top: -0.75rem !important;\n  }\n  .bigs_space-b-neg-half, .bigs_space-v-neg-half {\n    margin-bottom: -0.75rem !important;\n  }\n  .bigs_space-l-neg-half, .bigs_space-h-neg-half {\n    margin-left: -0.75rem !important;\n  }\n  .bigs_space-r-neg-half, .bigs_space-h-neg-half {\n    margin-right: -0.75rem !important;\n  }\n  .bigs_space-neg {\n    margin: -1.5rem !important;\n  }\n  .bigs_space-t-neg, .bigs_space-v-neg {\n    margin-top: -1.5rem !important;\n  }\n  .bigs_space-b-neg, .bigs_space-v-neg {\n    margin-bottom: -1.5rem !important;\n  }\n  .bigs_space-l-neg, .bigs_space-h-neg {\n    margin-left: -1.5rem !important;\n  }\n  .bigs_space-r-neg, .bigs_space-h-neg {\n    margin-right: -1.5rem !important;\n  }\n  .bigs_space-neg-2 {\n    margin: -3rem !important;\n  }\n  .bigs_space-t-neg-2, .bigs_space-v-neg-2 {\n    margin-top: -3rem !important;\n  }\n  .bigs_space-b-neg-2, .bigs_space-v-neg-2 {\n    margin-bottom: -3rem !important;\n  }\n  .bigs_space-l-neg-2, .bigs_space-h-neg-2 {\n    margin-left: -3rem !important;\n  }\n  .bigs_space-r-neg-2, .bigs_space-h-neg-2 {\n    margin-right: -3rem !important;\n  }\n  .bigs_space-0 {\n    margin: 0 !important;\n  }\n  .bigs_space-t-0, .bigs_space-v-0 {\n    margin-top: 0 !important;\n  }\n  .bigs_space-b-0, .bigs_space-v-0 {\n    margin-bottom: 0 !important;\n  }\n  .bigs_space-l-0, .bigs_space-h-0 {\n    margin-left: 0 !important;\n  }\n  .bigs_space-r-0, .bigs_space-h-0 {\n    margin-right: 0 !important;\n  }\n}\n\n@media only screen and (min-width: 85em) {\n  .desk_pad {\n    padding: 1.5rem !important;\n  }\n  .desk_pad-v, .desk_pad-t {\n    padding-top: 1.5rem !important;\n  }\n  .desk_pad-v, .desk_pad-b {\n    padding-bottom: 1.5rem !important;\n  }\n  .desk_pad-h, .desk_pad-l {\n    padding-left: 1.5rem !important;\n  }\n  .desk_pad-h, .desk_pad-r {\n    padding-right: 1.5rem !important;\n  }\n  .desk_pad-quarter {\n    padding: 0.375rem !important;\n  }\n  .desk_pad-t-quarter, .desk_pad-v-quarter {\n    padding-top: 0.375rem !important;\n  }\n  .desk_pad-b-quarter, .desk_pad-v-quarter {\n    padding-bottom: 0.375rem !important;\n  }\n  .desk_pad-l-quarter, .desk_pad-h-quarter {\n    padding-left: 0.375rem !important;\n  }\n  .desk_pad-r-quarter, .desk_pad-h-quarter {\n    padding-right: 0.375rem !important;\n  }\n  .desk_pad-half {\n    padding: 0.75rem !important;\n  }\n  .desk_pad-t-half, .desk_pad-v-half {\n    padding-top: 0.75rem !important;\n  }\n  .desk_pad-b-half, .desk_pad-v-half {\n    padding-bottom: 0.75rem !important;\n  }\n  .desk_pad-l-half, .desk_pad-h-half {\n    padding-left: 0.75rem !important;\n  }\n  .desk_pad-r-half, .desk_pad-h-half {\n    padding-right: 0.75rem !important;\n  }\n  .desk_pad-2 {\n    padding: 3rem !important;\n  }\n  .desk_pad-t-2, .desk_pad-v-2 {\n    padding-top: 3rem !important;\n  }\n  .desk_pad-b-2, .desk_pad-v-2 {\n    padding-bottom: 3rem !important;\n  }\n  .desk_pad-l-2, .desk_pad-h-2 {\n    padding-left: 3rem !important;\n  }\n  .desk_pad-r-2, .desk_pad-h-2 {\n    padding-right: 3rem !important;\n  }\n  .desk_pad-0 {\n    padding: 0 !important;\n  }\n  .desk_pad-t-0, .desk_pad-v-0 {\n    padding-top: 0 !important;\n  }\n  .desk_pad-b-0, .desk_pad-v-0 {\n    padding-bottom: 0 !important;\n  }\n  .desk_pad-l-0, .desk_pad-h-0 {\n    padding-left: 0 !important;\n  }\n  .desk_pad-r-0, .desk_pad-h-0 {\n    padding-right: 0 !important;\n  }\n  .desk_space {\n    margin: 1.5rem !important;\n  }\n  .desk_space-v, .desk_space-t {\n    margin-top: 1.5rem !important;\n  }\n  .desk_space-v, .desk_space-b {\n    margin-bottom: 1.5rem !important;\n  }\n  .desk_space-h, .desk_space-l {\n    margin-left: 1.5rem !important;\n  }\n  .desk_space-h, .desk_space-r {\n    margin-right: 1.5rem !important;\n  }\n  .desk_space-quarter {\n    margin: 0.375rem !important;\n  }\n  .desk_space-t-quarter, .desk_space-v-quarter {\n    margin-top: 0.375rem !important;\n  }\n  .desk_space-b-quarter, .desk_space-v-quarter {\n    margin-bottom: 0.375rem !important;\n  }\n  .desk_space-l-quarter, .desk_space-h-quarter {\n    margin-left: 0.375rem !important;\n  }\n  .desk_space-r-quarter, .desk_space-h-quarter {\n    margin-right: 0.375rem !important;\n  }\n  .desk_space-half {\n    margin: 0.75rem !important;\n  }\n  .desk_space-t-half, .desk_space-v-half {\n    margin-top: 0.75rem !important;\n  }\n  .desk_space-b-half, .desk_space-v-half {\n    margin-bottom: 0.75rem !important;\n  }\n  .desk_space-l-half, .desk_space-h-half {\n    margin-left: 0.75rem !important;\n  }\n  .desk_space-r-half, .desk_space-h-half {\n    margin-right: 0.75rem !important;\n  }\n  .desk_space-2 {\n    margin: 3rem !important;\n  }\n  .desk_space-t-2, .desk_space-v-2 {\n    margin-top: 3rem !important;\n  }\n  .desk_space-b-2, .desk_space-v-2 {\n    margin-bottom: 3rem !important;\n  }\n  .desk_space-l-2, .desk_space-h-2 {\n    margin-left: 3rem !important;\n  }\n  .desk_space-r-2, .desk_space-h-2 {\n    margin-right: 3rem !important;\n  }\n  .desk_space-neg-quarter {\n    margin: -0.375rem !important;\n  }\n  .desk_space-t-neg-quarter, .desk_space-v-neg-quarter {\n    margin-top: -0.375rem !important;\n  }\n  .desk_space-b-neg-quarter, .desk_space-v-neg-quarter {\n    margin-bottom: -0.375rem !important;\n  }\n  .desk_space-l-neg-quarter, .desk_space-h-neg-quarter {\n    margin-left: -0.375rem !important;\n  }\n  .desk_space-r-neg-quarter, .desk_space-h-neg-quarter {\n    margin-right: -0.375rem !important;\n  }\n  .desk_space-neg-half {\n    margin: -0.75rem !important;\n  }\n  .desk_space-t-neg-half, .desk_space-v-neg-half {\n    margin-top: -0.75rem !important;\n  }\n  .desk_space-b-neg-half, .desk_space-v-neg-half {\n    margin-bottom: -0.75rem !important;\n  }\n  .desk_space-l-neg-half, .desk_space-h-neg-half {\n    margin-left: -0.75rem !important;\n  }\n  .desk_space-r-neg-half, .desk_space-h-neg-half {\n    margin-right: -0.75rem !important;\n  }\n  .desk_space-neg {\n    margin: -1.5rem !important;\n  }\n  .desk_space-t-neg, .desk_space-v-neg {\n    margin-top: -1.5rem !important;\n  }\n  .desk_space-b-neg, .desk_space-v-neg {\n    margin-bottom: -1.5rem !important;\n  }\n  .desk_space-l-neg, .desk_space-h-neg {\n    margin-left: -1.5rem !important;\n  }\n  .desk_space-r-neg, .desk_space-h-neg {\n    margin-right: -1.5rem !important;\n  }\n  .desk_space-neg-2 {\n    margin: -3rem !important;\n  }\n  .desk_space-t-neg-2, .desk_space-v-neg-2 {\n    margin-top: -3rem !important;\n  }\n  .desk_space-b-neg-2, .desk_space-v-neg-2 {\n    margin-bottom: -3rem !important;\n  }\n  .desk_space-l-neg-2, .desk_space-h-neg-2 {\n    margin-left: -3rem !important;\n  }\n  .desk_space-r-neg-2, .desk_space-h-neg-2 {\n    margin-right: -3rem !important;\n  }\n  .desk_space-0 {\n    margin: 0 !important;\n  }\n  .desk_space-t-0, .desk_space-v-0 {\n    margin-top: 0 !important;\n  }\n  .desk_space-b-0, .desk_space-v-0 {\n    margin-bottom: 0 !important;\n  }\n  .desk_space-l-0, .desk_space-h-0 {\n    margin-left: 0 !important;\n  }\n  .desk_space-r-0, .desk_space-h-0 {\n    margin-right: 0 !important;\n  }\n}\n\n/* SG\n# Typography/Heading sizes\n\nMoving from `h6` up to `h1`, the heading font sizes get larger on a scale. For instance, `h6` is 1.35 times larger than the base font size of 16px. Headings have a default bottom margin of 24px.\n\n**Heading tags should be used in a hierarchical manner**, appropriate for the page, and not used for their size. To override a heading size, use a class with the corresponding heading name. See the example below.\n\n```html_example\n<h1>Heading 1</h1>\n<h2>Heading 2</h2>\n<h3>Heading 3</h3>\n<h4>Heading 4</h4>\n<h5>Heading 5</h5>\n<h6>Heading 6</h6>\n\n<h1 class=\"h4\">Heading 1 with an h4 class</h1>\n\n```\n*/\n.h1 {\n  font-size: 6.05345rem;\n  line-height: 0.99117;\n}\n\n.h2 {\n  font-size: 4.48403rem;\n  line-height: 1.00356;\n}\n\n.h3 {\n  font-size: 3.32151rem;\n  line-height: 1.12901;\n}\n\n.h4 {\n  font-size: 2.46038rem;\n  line-height: 1.21933;\n}\n\n.h5 {\n  font-size: 1.8225rem;\n  line-height: 1.23457;\n}\n\n.h6 {\n  font-size: 1.35rem;\n  line-height: 1.11111;\n}\n\n.link--naked {\n  color: inherit !important;\n  text-decoration: none !important;\n}\n\n.link--naked:hover, .link--naked:focus {\n  color: inherit !important;\n  text-decoration: none !important;\n}\n\n.txt-small {\n  font-size: 0.74074rem !important;\n  line-height: 2 !important;\n}\n\n.txt-smaller {\n  font-size: 0.74074em !important;\n}\n\n.txt-center {\n  text-align: center !important;\n}\n\n.txt-normal {\n  font-weight: 400 !important;\n}\n\n.txt-italic {\n  font-style: italic !important;\n}\n\n.txt-bold {\n  font-weight: 700 !important;\n  -webkit-font-smoothing: antialiased !important;\n}\n\n.txt-upper {\n  text-transform: uppercase !important;\n  letter-spacing: 0.1em !important;\n}\n\n.txt-capital {\n  text-transform: capitalize !important;\n}\n\n.txt-lower {\n  text-transform: none !important;\n  letter-spacing: normal !important;\n}\n\n.txt-space-reset {\n  letter-spacing: normal !important;\n  word-spacing: normal !important;\n}\n\n.txt-primary {\n  font-family: opensans, Helvetica Neue, Helvetica, Arial, sans-serif !important;\n}\n\n.txt-secondary {\n  font-family: Asap, Garamond, Baskerville, Baskerville Old Face, Hoefler Text, Times New Roman, serif !important;\n}\n\n@media only screen and (max-width: 56.875em) {\n  .smalls_txt-small {\n    font-size: 0.74074rem !important;\n    line-height: 2 !important;\n  }\n  .smalls_txt-smaller {\n    font-size: 0.74074em !important;\n  }\n  .smalls_txt-center {\n    text-align: center !important;\n  }\n  .smalls_txt-normal {\n    font-weight: 400 !important;\n  }\n  .smalls_txt-italic {\n    font-style: italic !important;\n  }\n  .smalls_txt-bold {\n    font-weight: 700 !important;\n    -webkit-font-smoothing: antialiased !important;\n  }\n  .smalls_txt-upper {\n    text-transform: uppercase !important;\n    letter-spacing: 0.1em !important;\n  }\n  .smalls_txt-capital {\n    text-transform: capitalize !important;\n  }\n  .smalls_txt-lower {\n    text-transform: none !important;\n    letter-spacing: normal !important;\n  }\n  .smalls_txt-space-reset {\n    letter-spacing: normal !important;\n    word-spacing: normal !important;\n  }\n  .smalls_txt-primary {\n    font-family: opensans, Helvetica Neue, Helvetica, Arial, sans-serif !important;\n  }\n  .smalls_txt-secondary {\n    font-family: Asap, Garamond, Baskerville, Baskerville Old Face, Hoefler Text, Times New Roman, serif !important;\n  }\n}\n\n@media only screen and (min-width: 56.9375em) {\n  .bigs_txt-small {\n    font-size: 0.74074rem !important;\n    line-height: 2 !important;\n  }\n  .bigs_txt-smaller {\n    font-size: 0.74074em !important;\n  }\n  .bigs_txt-center {\n    text-align: center !important;\n  }\n  .bigs_txt-normal {\n    font-weight: 400 !important;\n  }\n  .bigs_txt-italic {\n    font-style: italic !important;\n  }\n  .bigs_txt-bold {\n    font-weight: 700 !important;\n    -webkit-font-smoothing: antialiased !important;\n  }\n  .bigs_txt-upper {\n    text-transform: uppercase !important;\n    letter-spacing: 0.1em !important;\n  }\n  .bigs_txt-capital {\n    text-transform: capitalize !important;\n  }\n  .bigs_txt-lower {\n    text-transform: none !important;\n    letter-spacing: normal !important;\n  }\n  .bigs_txt-space-reset {\n    letter-spacing: normal !important;\n    word-spacing: normal !important;\n  }\n  .bigs_txt-primary {\n    font-family: opensans, Helvetica Neue, Helvetica, Arial, sans-serif !important;\n  }\n  .bigs_txt-secondary {\n    font-family: Asap, Garamond, Baskerville, Baskerville Old Face, Hoefler Text, Times New Roman, serif !important;\n  }\n}\n\n.visually-hidden {\n  position: absolute;\n  margin: -1px;\n  border: 0;\n  padding: 0;\n  width: 1px;\n  height: 1px;\n  overflow: hidden;\n  clip: rect(0px, 0px, 0px, 0px);\n  clip: rect(0 0 0 0);\n  transition: all 300ms ease-in-out;\n}\n\n.visually-hidden.focusable:active,\n.visually-hidden.focusable:focus {\n  position: static;\n  margin: 0;\n  width: auto;\n  height: auto;\n  overflow: visible;\n  clip: auto;\n}\n\n.contain {\n  position: relative !important;\n}\n\n.baseline-on {\n  background-image: url(http://basehold.it/i/24);\n  background: linear-gradient(to top, rgba(0, 0, 0, 0.15) 1px, transparent 1px, rgba(0, 0, 0, 0.15) 1px, transparent 1px) top left/auto 0.75em;\n}\n\n.baseline-off {\n  background-image: none;\n}\n\n@media only screen and (max-width: 56.875em) {\n  .breakpoint-on:after {\n    content: \"smalls\";\n    position: fixed;\n    top: 0;\n    right: 0;\n    background: #fff;\n    padding: 10px;\n    z-index: 999999;\n  }\n}\n\n@media only screen and (max-width: 43.125em) {\n  .breakpoint-on:after {\n    content: \"small\";\n    position: fixed;\n    top: 0;\n    right: 0;\n    background: #fff;\n    padding: 10px;\n    z-index: 999999;\n  }\n}\n\n@media only screen and (min-width: 43.1875em) and (max-width: 56.875em) {\n  .breakpoint-on:after {\n    content: \"smallish\";\n    position: fixed;\n    top: 0;\n    right: 0;\n    background: #fff;\n    padding: 10px;\n    z-index: 999999;\n  }\n}\n\n@media only screen and (min-width: 56.9375em) {\n  .breakpoint-on:after {\n    content: \"bigs\";\n    position: fixed;\n    top: 0;\n    right: 0;\n    background: #fff;\n    padding: 10px;\n    z-index: 999999;\n  }\n}\n\n@media only screen and (min-width: 56.9375em) and (max-width: 85em) {\n  .breakpoint-on:after {\n    content: \"lap\";\n    position: fixed;\n    top: 0;\n    right: 0;\n    background: #fff;\n    padding: 10px;\n    z-index: 999999;\n  }\n}\n\n@media only screen and (min-width: 85em) {\n  .breakpoint-on:after {\n    content: \"desk\";\n    position: fixed;\n    top: 0;\n    right: 0;\n    background: #fff;\n    padding: 10px;\n    z-index: 999999;\n  }\n}\n\n#testing {\n  padding: auto 15rem auto auto;\n}\n","//------------------------------------\n//      $FONT FACE TOOL\n//------------------------------------\n\n/* SG\n# Typography/Font Face [[dev]]\n\n##### `@fonts()`\n###### mixin(`$name`: `$$font-file-name`, `$path: $$font-file-location`, `$weights`: `$$font-weights`, `$italics`: `$$font-italics`)\nA wrapper function for `@font-face()`. Takes global configuration variables and passes them to `@font-face()`. Loops through each `$name` based on `$weights` and `$italics`. Uses `$path` and `$name` to point to font files. Formats these variables so they can be passed to `@font-face()`.\n\nFont file names must be the same as their CSS font-family values. Example: arial font, 400 weight would be arial400.ttf and the CSS value would be font-family: 'arial'; font-weight: 400.\n\n@requires `@font-face()`\n\n##### `@font-face()`\n###### mixin(`$name`, `$font-files`, `$weight:false`,` $style:false`, `$eot:false`)\nGenerates cross-browser font-face declarations when called.\n$name is required, arbitrary, and what you will use in font stacks.\n**Arguments:**\n* $font-files is required using font-files('relative/location', 'format'). For best results use this order: woff, opentype/truetype, svg\n* $eot is required by IE, and is a relative location of the eot file.\n* $weight shows if the font is bold, defaults to normal\n* $style defaults to normal, might be also italic\n\nBased on [Compass' font-face mixin](http://compass-style.org/reference/compass/css3/font_face/).\n\n*/\n\n\n//------------------------------------\n//    $MIXIN\n//------------------------------------\n//\tUses our own take on Compass' font-face generator.\n//\tMore robust and automated than Compass, though.\n\n// 1. Get current weights of the font.\n// 1B. And then loop through those weights if there are different weights in each\n//  font-family.\n// 2. Create svg id based on font's supplied name.\n// 3. Create paths to various font files.\n//\t  Always assumed woff, ttf, and svg files are supplied.\n// 4. If IE8 support is needed, create eot path.\n// 5. Call Compass-based font-generator.\n// 6. If italics are included, do all of the above, but append \"italic\" to the end\n//\t  of every file name and style.\n// 7. Call Mixin for all fonts by looping through font-file-names.\n\n//-------\n// Cross-browser support for @font-face. Supports IE, Gecko, Webkit, Opera.\n// http://compass-style.org/reference/compass/css3/font_face/\n//-------\n// $name is required, arbitrary, and what you will use in font stacks.\n// $font-files is required using font-files('relative/location', 'format').\n//  for best results use this order: woff, opentype/truetype, svg\n// $eot is required by IE, and is a relative location of the eot file.\n// $weight shows if the font is bold, defaults to normal\n// $style defaults to normal, might be also italic\n// To support iOS < 4.2, an SVG file must be provided\n// If you need to generate other formats check out the Font Squirrel font generator\n\n@mixin font-face(\n    $name,\n    $font-files,\n    $weight: false,\n    $style: false,\n    $eot: false\n){\n    $iefont: unquote(\"'#{$eot}?#iefix'\");\n    @font-face {\n        font-family: quote($name);\n        @if $eot {\n            src: url($eot);\n            $font-files: url($iefont) unquote(\"format('embedded-opentype')\"), $font-files;\n        }\n        src: #{$font-files};\n        @if $weight {\n            font-weight: $weight;\n        }\n        @if $style {\n            font-style: $style;\n        }\n    }\n}\n\n\n@mixin fonts(\n    $name: $font-file-name,\n    $path: $font-file-location,\n    $weights: $font-weights,\n    $italics: $font-italics\n){\n    $weight-group: $weights;\n\n    @if length($font-file-name) > 1{\n        $weight-group: nth($weights, $fontface-loop);\t\t//[1]\n    }\n\n    @each $weight in $weight-group{\t\t\t//[1B]\n\n        $font-eot: false;\n        $font-woff2: null;\n        $svg-id: ('##{$name}#{$weight}');\t\t//[2]\n        $font-name: #{$path}/#{unquote($name)}-#{$weight};\t\t//[3]\n\n        $font-files: (\n            'url(\"#{$font-name}.woff\") format(\"woff\")',\n            'url(\"#{$font-name}.ttf\") format(\"truetype\")',\n            'url(\"#{$font-name}.svg#{$svg-id}\") format(\"svg\")'\n        );\n\n        @if length($font-include-woff2) > 1 {\n            @if nth($font-include-woff2, $fontface-loop) == true {\n                $font-files: join('url(\"#{$font-name}.woff2\") format(\"woff2\")', $font-files);\n            }\n        }@else if $font-include-woff2 == true {\n            $font-files: join('url(\"#{$font-name}.woff2\") format(\"woff2\")', $font-files);\n        }\n\n        @if length($font-include-eot) > 1 {\n            @if nth($font-include-eot, $fontface-loop) {\n                $font-eot: '#{$font-name}.eot';\t//[4]\n            }\n        }@else if $font-include-eot == true {\n            $font-eot: '#{$font-name}.eot';\t\t//[4]\n        }\n\n        @include font-face($name, $font-files, $weight, normal, $font-eot); //[5]\n\n        $italic: nth($italics, $fontface-loop);\n        @if length($italic) > 1 {\n            $italic: nth($italic, index($weight-group, $weight));\n        }\n        @if $italic == true {\t\t//[6]\n            $svg-id: ('##{$name}#{$weight}italic');\n\n            $font-files: (\n                unquote(\"url('#{$font-name}-italic.woff') format('woff')\"),\n                unquote(\"url('#{$font-name}-italic.ttf') format('truetype')\"),\n                unquote(\"url('#{$font-name}-italic.svg#{$svg-id}') format('svg')\")\n            );\n\n            @if length($font-include-woff2) > 1 {\n                @if nth($font-include-woff2, $fontface-loop) == true {\n                    $font-files: join(unquote('url(\"#{$font-name}-italic.woff2\") format(\"woff2\")'), $font-files);\n                }\n            }@else if $font-include-woff2 == true {\n                $font-files: join('url(\"#{$font-name}-italic.woff2\") format(\"woff2\")', $font-files);\n            }\n\n            @if length($font-include-eot) > 1 {\n                @if nth($font-include-eot, $fontface-loop) {\n                    $font-eot: '#{$font-name}-italic.eot';\t//[4]\n                }\n            }@else if $font-include-eot == true {\n                $font-eot: '#{$font-name}-italic.eot';\t\t//[4]\n            }\n\n            @include font-face($name, $font-files, $weight, italic, $font-eot);\n        }\n    }\n}\n\n$fontface-loop: 0;\n\n@mixin include-web-fonts() {\n    @if $use-web-fonts and $font-file-name {\n        @each $font in $font-file-name { //[7]\n            $fontface-loop: $fontface-loop + 1 !global;\n            @include fonts($font);\n        }\n    }\n}\n\n\n//------------------------------------\n//    $EXAMPLE\n//------------------------------------\n//\tThis may be useful if you would rather generate your own font-face,\n//\tor if you'd like to include some specialty fonts that aren't easy to\n//\tfeed into the mixin.\n\n//@font-face {\n//    font-family: 'Asap';\n//    src: url('fonts/Asap-Regular-webfont.eot');\n//    src: url('fonts/Asap-Regular-webfont.eot?#iefix') format('embedded-opentype'),\n//         url('fonts/Asap-Regular-webfont.woff') format('woff'),\n//         url('fonts/Asap-Regular-webfont.ttf') format('truetype'),\n//         url('fonts/Asap-Regular-webfont.svg#AsapRegular') format('svg');\n//    font-weight: 400;\n//    font-style: normal;\n//\n//}\n//\n//@font-face {\n//    font-family: 'Asap';\n//    src: url('fonts/Asap-Italic-webfont.eot');\n//    src: url('fonts/Asap-Italic-webfont.eot?#iefix') format('embedded-opentype'),\n//         url('fonts/Asap-Italic-webfont.woff') format('woff'),\n//         url('fonts/Asap-Italic-webfont.ttf') format('truetype'),\n//         url('fonts/Asap-Italic-webfont.svg#AsapItalic') format('svg');\n//    font-weight: 400;\n//    font-style: italic;\n//\n//}\n","$base_namespace: '';\n\n%list_naked,\n%naked_list {\n\t@include no-bullets;\n    margin-left: 0;\n}\n\n%primary_font_family {\n\tfont-family: $primary-font-stack;\n}\n%secondary_font_family {\n\tfont-family: $secondary-font-stack;\n}\n\n%type_vertical_rhythm {\n\t@include type-space(margin, 0 0 1);\n}\n\n//Use an image instead of text, but keep the text in the DOM for\n//screen readers.\n//Particularly useful for logos. e.g.\n// .logo{\n//   @include %image-replace;\n//   background: url(image/logo.png) no-repeat;\n// }\n%replace_image {\n\twhite-space: nowrap;\n\toverflow: hidden;\n\tbackground-color: transparent;\n\tborder: 0;\n\t*text-indent: -9999px;\n\n\t&:before{\n\t\tcontent: \"\";\n\t\tdisplay: block;\n\t\twidth: 0;\n\t\theight: 150%;\n\t}\n}\n\n//Hide Visually. Usefuly for Accessiblity.\n//Used for text which describes a purely visual function.\n// e.g. Adding 'Current page' to the current nav item (which is usually indicated by something visual.\n%visually_hidden {\n\tborder: 0;\n\tclip: rect(0 0 0 0);\n\tclip: rect(0px, 0px, 0px, 0px);\n\twidth: 1px;\n\theight: 1px;\n\tmargin: -1px;\n\toverflow: hidden;\n\tpadding: 0;\n\tposition: absolute;\n\ttransition: all 300ms ease-in-out;\n}\n\n@include spacing-utilities-init(\n\t$config: (important: false, silent: true)\n);\n","\n// 1. Enable line-wrapping in IE8+.\n// 2. Enable line-wrapping in old versions of some other browsers.\nlegend {\n\tdisplay: table; // [1]\n\twhite-space: normal; // [2]\n}\n\n//\n// Address Firefox 4+ setting `line-height` on `input` using `!important` in\n// the UA stylesheet.\nbutton,\ninput {\n    line-height: normal;\n}\n\nbutton,\ninput[type=\"button\"], // [1]\ninput[type=\"reset\"],\ninput[type=\"submit\"] {\n    font-family: inherit;\n    font-size: inherit;\n    line-height: inherit;\n    border: 0;\n    -webkit-appearance: button; // [2]\n    cursor: pointer; // [3]\n    *overflow: visible;  // [4]\n}\n\nbutton,\ninput,\nselect,\ntextarea {\n\tbackground-color: #fff;\n}\n\n// Remove inner padding and border in Firefox 3+.\nbutton::-moz-focus-inner,\ninput::-moz-focus-inner {\n\tborder: 0;\n\tpadding: 0;\n}\n\n// 1. Address box sizing set to content-box in IE 8/9.\n// 2. Remove excess padding in IE 8/9.\n// 3. Remove excess padding in IE 7.\n//    Known issue: excess padding remains in IE 6.\ninput[type=\"checkbox\"],\ninput[type=\"radio\"] {\n\tbox-sizing: border-box; // 1\n\tpadding: 0; // 2\n\t*height: 13px; // 3\n\t*width: 13px; // 3\n}\n\n// Re-set default cursor for disabled elements.\nbutton[disabled],\ninput[disabled]{\n\tcursor: default !important;\n}\n\n// Fix the cursor style for Chrome's increment/decrement buttons. For certain\n// `font-size` values of the `input`, it causes the cursor style of the\n// decrement button to change from `default` to `text`.\n\ninput[type=\"number\"]::-webkit-inner-spin-button,\ninput[type=\"number\"]::-webkit-outer-spin-button {\n\theight: auto;\n}\n\n// 2. Address `appearance` in iOS defaulting to rounded corners.\n// 2. Address `box-sizing` set to `border-box` in Safari 5 and Chrome\ninput[type=\"search\"] {\n\tappearance: none;\n\tbox-sizing: border-box;\n}\n\n//Allow styling of particularly annoying inputs\nselect\ninput[type=\"submit\"],\ninput[type=\"button\"],\ninput[type=\"image\"],\ninput[type=\"reset\"] {\n\tborder-radius: 0;\n\t-webkit-border-radius: 0; //Mobile Safari\n}\n","//-------------------------------\n//   $LISTS\n//-------------------------------\n\nul,\nol,\ndl,\nmenu {\n    @include type-space(margin, 0 0 1 1);\n}\n\nli > ul,\nli > ol {\n    margin-bottom: 0;\n}\n\nnav ol,\nnav ul {\n    margin-left: 0;\n}\n","//Base table styles\ntable {\n    @extend %type_vertical_rhythm;\n    width: 100%;\n    background-color: transparent;\n    border-collapse: collapse;\n    border-spacing: 0;\n}\n\nth,\ntd {\n\t@include type-space(padding, 1 0 .5);\n\ttext-align: left;\n\tvertical-align:top;\n\tborder: 0;\n\tborder-bottom: 1px;\n\tborder-top-width: 0px;\n\tborder-color: color(bg, dark);\n\tborder-style: solid;\n}\n\nth {\n\tfont-weight: bold;\n}\n\nthead th {\n\tvertical-align: bottom;\n\t@include type-space(padding, 1 0 0 );\n}\n",".wrap {\n\tmargin: 0 auto;\n\tmax-width: $max-site-width;\n\tdisplay: block !important;\n    float: none;\n\t@extend %clearfix;\n\t@include type-space(padding, 1 0);\n    width: 95%;\n\n    @include mq(smallish) {\n        width: 93%;\n    }\n    @include mq(bigs) {\n        width: 90%;\n    }\n}\n\n.wrap--content {\n    @include rems(max-width, $max-content-width);\n}\n\n.wrap--wide-content {\n    @include rems(max-width, $max-wide-content-width);\n}\n\n.clearfix,\n%clearfix {\n\t*zoom: 1;\n\n\t&:before,\n    &:after{\n\t\tdisplay: table;\n\t\tcontent: \" \";\n\t}\n\t&:after{\n\t\tclear: both;\n\t\theight: 0;\n\t\twidth: 0;\n\t}\n}\n","//------------------------------------\n//\t$MEDIA QUERIES\n//------------------------------------\n\n/* SG\n# Mixins/Media Queries [[dev]]\n\n@file globals/tools/_t-media-queries.scss\n\n##### `@media-query()`\n###### mixin(`$media-queries...`)\nEnclose a block of code with a media query as named in `$breakpoints`. To create more consolodated code, most (if not all) media queries should be called through this mixin. Multiple media-queries can be defined, separated by a comma. This will place your content into multiple separate media-queries at once (useful if you need the same css at different breakpoints).\n\n**Alternative Uses:**\n\n* Passing multiple media queries separated by an `'and'` (quoted) to combine them, compiles to something like `@media screen and (min-width: 500px) and (max-width: 900px){}`.\n\n* Passing a value like `min-width 1200px` or `max-height 300px` allows for arbitrary breakpoints.\n\n* Passing `max 1200px 'and' smalls` will create a combined media-query with a predefined one from `$$breakpoints`.\n\n* Passing `height smalls` will replace `width` with `height` within the `smalls` breakpoint. Similarly, using `min smalls` would replace 'max' with 'min'.\n\n@requires `mq-arglist-to-map()`, `mq-parse-query-args()` `$$breakpoints`\n@alias @mq(), @breakpoint(), @bp()\n\n*/\n\n//Accepted media-query expression types\n$media-query-expressions: (\n\t'device-width', 'orientation', 'aspect-ratio', 'device-aspect-ratio',\n\t'color', 'color-index', 'monochrome', 'resolution', 'scan', 'grid'\n);\n//Accepted media-query device types\n$media-query-devices: (\n\t'screen','all','print','tv','handheld','braille',\n\t'embossed','projection','speech','tty'\n);\n//Accepted media-query operator arguments\n$media-query-operators: (\n\t'max-width',\n\t'max-height',\n\t'min-width',\n\t'min-height',\n\t'device-width',\n\t'min-device-width',\n\t'max-device-width',\n\t'min-device-height',\n\t'max-device-height',\n\t'aspect-ratio',\n\t'device-aspect-ratio',\n\t'resolution'\n);\n\n//Used to switch a media-query from one type to another\n$media-query-switch: (\n\t'max',\n\t'min',\n\t'height',\n\t'width',\n\t'landscape',\n\t'portrait'\n);\n\n//Values to increase media-queries by\n$media-query-intervals: (\n\t'px'\t\t: \t  1,\n\t'em'\t\t: \t.01,\n\t'rem'\t\t: \t.01,\n\t'vh'\t\t: \t.01,\n\t'vw'\t\t:\t.01\n);\n\n\n@mixin media-query($mq...) {\n\n    //Stored for switching on and off\n    $rem-px-default: $rem-px-fallback;\n\n\t//format arglist into maps with key-value pairs\n\t//Should return (1:(operator:...,value:...,'device':...), 2:(...));\n\t$arguments-map: mq-arglist-to-map($mq);\n\n\t//Use a string storage for multiple media-queries\n\t$media-query-string: '';\n\n\t//Turn off px-fallback inside media-queries\n\t// since 99% of mobile browsers support rems\n\t$rem-px-fallback: false !global;\n\n\t@each $mq-id, $mq-group in $arguments-map {\n\n\t\t//Extract each value from the arguments map\n\t\t$operator: map-get($mq-group, 'operator');\n\n\t\t$value: map-get($mq-group, 'value');\n\n\t\t$device: map-get($mq-group, 'device');\n\n\t\t$device: if($device, $device, 'screen'); //Default to screen if no device specified\n\n\t\t$logical-operator: unquote('#{$operator}#{$value}');\n\n\t\t//Multiple media-queries in the map indicates an 'or' media-query\n\t\t// So let's concatenate those media-queries together\n\t\t@if length($arguments-map) > 1 {\n\n\t\t\t$media-query-string: $media-query-string + '#{$device} and #{$logical-operator}';\n\n\t\t\t//Use the IDs assigned to each media-query as a way to compare length\n\t\t\t// (Libsass has an issue with indexes in maps)\n\t\t\t@if $mq-id != length($arguments-map) {\n\n\t\t\t\t//Add a comma to the end of all but the last query\n\t\t\t\t$media-query-string: $media-query-string + ', ';\n\n\t\t\t}@else {\n\n\t\t\t\t@media only #{$media-query-string}  {\n\t\t\t\t\t@content;\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\t\t@else {\n\n\t\t\t@if $operator { //Only output media-queries with operators\n\n\t\t\t\t@media only #{$device} and #{$logical-operator} {\n\t\t\t\t\t@content;\n\t\t\t\t}\n\n\t\t\t}@else {\n\t\t\t\t@warn \"the media-query mixin requires a logical-operator and a value (min-width 2px). You will have to write your own media query if you'd like something else\";\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t//Change back to user setting\n\t$rem-px-fallback: $rem-px-default !global;\n\n}\n\n//Aliases: Same as above, but shorter\n@mixin media        ($mq...)\t{ @include media-query($mq...) { @content; } }\n@mixin mq           ($mq...)    { @include media-query($mq...) { @content; } }\n@mixin breakpoint   ($mq...)\t{ @include media-query($mq...) { @content; } }\n@mixin bp           ($mq...)\t{ @include media-query($mq...) { @content; } }\n\n//-------------------------\n// Private media-query functions\n//-------------------------\n\n//Check for proper media-query arguments\n// Converting them to proper CSS values\n@function mq-arglist-to-map($arguments-list) {\n\t$stored: ();\n\t$arg-map: ();\n\t$structure: ();\n\n\t//For loop used because each loops produce different results in Ruby and LibSass\n\t@for $i from 1 through length($arguments-list) {\n\t\t$argument: nth($arguments-list, $i);\n\n\t\t//Check all values in the argument for valid media-query arguments\n\t\t$structure: map-merge($structure, mq-parse-query-args($argument));\n\n\t\t//Since value should be last, we can assume the grouping is done\n\t\t@if (map-get($structure, 'value')) {\n\t\t\t//Wrap arguments into an array-object-like structure (1:(key:value, key:value))\n\t\t\t$key: $i * 1; //Fixes a libSass error.\n\t\t\t$arg-map: map-merge($arg-map, ($key: ($structure)));\n\t\t\t//Empty the map so we can rewrite it\n\t\t\t$structure: ();\n\t\t}\n\t}\n\n\t@return $arg-map;\n}\n\n// Test each argument for its type and match it up to a proper map key\n@function mq-parse-query-args($argument, $call: 0, $check: null){\n\t$query-map: ();\n\t//Check global $breakpoints config variable for matches\n\t@if\t(map-get($breakpoints, $argument)){\n\t\t$query-map: map-merge($query-map, ('operator': map-get($breakpoints, $argument)));\n\t\t//Also set value to nothing since we already have it\n\t\t$query-map: map-merge($query-map, ('value': ''));\n\t}\n\t//Check operators for matches\n\t@elseif (index($media-query-operators, $argument)) {\n\t\t//Format operator as the beginning of a parenthesis\n\t\t$query-map: map-merge($query-map, ('operator': \"(#{$argument}\"));\n\t}\n\t//If its a number, assume its a value\n\t@elseif(type-of($argument) == number){\n\t\t//Format value with a colon and closing parenthesis\n\t\t$query-map: map-merge($query-map, ('value': \":#{$argument})\"));\n\t}\n\t//Check devices for matches\n\t@elseif(index($media-query-devices, $argument)) {\n\t\t$query-map: map-merge($query-map, ('device': $argument));\n\t}\n\t@else {\n\t\t//if not a device, $breakpoint, value, or operator, it's probably a nested list\n\t\t//We'll need to loop through that list and re-call this function until we get to the bottom\n\t\t@for $i from 1 through length($argument) {\n\t\t\t$arg: nth($argument, $i);\n\t\t\t//Set a reasonable number so we don't loop forever\n\t\t\t//Only set if nothing has been set before\n\t\t\t$check: if($check, $check, length($argument));\n\t\t\t//If we've looped through this more times than the length of the argument,\n\t\t\t//we can assume an error and return nothing.\n\t\t\t@if $call > ($check + 1) {\n\t\t\t\t@warn \"#{$arg} is not valid argument for media-query mixin\";\n\t\t\t\t@return ();\n\t\t\t}\n\t\t\t//Add to the loop count\n\t\t\t$call: $call + 1;\n\t\t\t//Re-run this function through all arguments\n\t\t\t$query-map: map-merge($query-map, mq-parse-query-args($arg, $call, $check));\n\t\t}\n\t}\n\n\t@return $query-map;\n}\n","/* SG\n# Grid System/Mixins [[dev]]\n\n##### `@grid-setup()`\n###### mixin(`$silent:` `$$grid-silent-classes`)\nCreates basic grid classes (listed below), called by `@grid-init()`.\n\n_Note: `[% || .]` denotes a class that is either silent(`%`) or standard CSS(`.`). Based on the `$$grid-silent-classes` setting._\n\n* ###### `%grid_reset`\n Useful for resetting the grid's effects without making full grid items.\n\n* ###### `[% || .]grid`\n Wrapper class for grid widths. Puts a negative left margin of one unit. When not using floats, adds appropriate letter-spacing (for inline-block-based grid).\n\n* ###### `[% || .]grid_item`\n Sets up a grid column. Uses column padding inherited from parent `%/.grid`.\n\n* ###### `[% || .]grid_rev`\n Makes grid columns start from the right.\n\n* ###### `[% || .]grid_right`\n Makes all grid columns align to the right.\n\n* ###### `[% || .]grid_center`\n Makes all grid columns align to the center.\n\n* ###### `[% || .]grid_middle`\n Makes all grid columns vertical align to the middle.\n\n* ###### `[% || .]grid_bottom`\n Makes all grid columns vertical align to the bottom.\n\n* ###### `[% || .]grid_full`\n Eliminates padding between grid columns.\n\n* ###### `[% || .]grid_narrow`\n Reduces the padding between grid columns.\n\n* ###### `[% || .]grid_wide`\n Increases the padding between grid columns.\n\n*/\n\n\n@mixin grid-setup($silent: $grid-silent-classes) {\n\n    $class-type: if($silent, \"%\", \".\");\n\n    %grid_reset {\n        letter-spacing: normal;\n        word-spacing: normal;\n    }\n\n    //*------------------------------------\n    //    $GRID SETUP\n    //*------------------------------------\n\n    #{$class-type}grid {\n        @include grid-row();\n    }\n\n    #{$class-type}grid_item {\n        @include grid-item($grid-columns);\n    }\n\n    // Special class for grid items that need to behave like both grids and grid__items.\n    #{$class-type}grid_reset_item {\n        @include grid-item($grid-columns);\n        @extend #{$class-type}grid;\n    }\n\n    //\n    // Reversed grids allow you to structure your source in the opposite order to\n    // how your rendered layout will appear. Extends `.grid`.\n    //\n    #{$class-type}grid_rev,\n    #{$class-type}grid_reverse{\n        @if $grid-floats {\n            @extend %clearfix;\n\n            > #{$class-type}grid_item{\n                float: right;\n            }\n        }\n        @if $grid-inline-block or\n            $grid-flex\n        {\n            direction: rtl;\n            text-align: left;\n\n            > #{$class-type}grid_item{\n                direction: ltr;\n                text-align: left;\n            }\n        }\n    }\n\n\n    //\n    // Align the entire grid to the right. Extends `.grid`.\n    //\n    #{$class-type}grid_right {\n        @if $grid-inline-block {\n            text-align: right;\n\n            > #{$class-type}grid_item {\n                text-align: left;\n            }\n        }\n        @if $grid-flex {\n            justify-content: flex-end;\n        }\n    }\n    //\n    // Centered grids align grid items centrally without needing to use push or pull\n    // classes. Extends `.grid`.\n    //\n    #{$class-type}grid_center{\n\n        @if $grid-flex {\n            justify-content: center;\n        }\n\n        @if $grid-inline-block {\n            text-align: center;\n\n            > #{$class-type}grid_item {\n                text-align: left;\n            }\n        }\n    }\n    //\n    //\n    // Align grid cells vertically (`.grid--middle` or `.grid--bottom`). Extends\n    // `.grid`.\n    //\n    #{$class-type}grid_middle {\n\n        > #{$class-type}grid_item {\n            @if $grid-flex {\n                align-self: center;\n            }\n            vertical-align: middle;\n        }\n    }\n\n    #{$class-type}grid_bottom{\n\n        > #{$class-type}grid_item {\n            @if $grid-flex {\n                align-self: flex-end;\n            }\n            vertical-align: bottom;\n        }\n    }\n\n\n    // Gutterless grids have all the properties of regular grids, minus any spacing.\n    // Extends `.grid`.\n\n    #{$class-type}grid_full{\n        margin-left: 0;\n\n        > #{$class-type}grid_item {\n            padding-left: 0;\n        }\n    }\n\n\n    //\n    // Create grids with narrower gutters. Extends `.grid`.\n    //\n    #{$class-type}grid_narrow {\n        @include type-space(margin-left, -.5, $unit: $grid-gutter);\n\n        > #{$class-type}grid_item {\n            @include type-space(padding-left, .5, $unit: $grid-gutter);\n        }\n    }\n\n\n    //\n    // Create grids with wider gutters. Extends `.grid`.\n    //\n    #{$class-type}grid_wide {\n        @include type-space(margin-left, -2, $unit: $grid-gutter);\n\n        > #{$class-type}grid_item {\n            @include type-space(padding-left, 2, $unit: $grid-gutter);\n        }\n    }\n\n    //\n    // Cause layout items to take up a non-explicit amount of width.\n    //\n    #{$class-type}grid_auto {\n\n        @if $grid-inline-block {\n            text-align: justify;\n\n            &:after {\n                content: \" \";\n                display: inline-block;\n                width: 100%;\n                height: 1px;\n            }\n        }\n\n        & > #{$class-type}grid_item,\n        #{$class-type}grid_item_auto {\n            width: auto;\n\n            @if $grid-inline-block {\n                text-align: left;\n            }\n\n            @if $grid-flex {\n                flex-grow: 1;\n                flex-basis: auto;\n            }\n        }\n    }\n}\n\n\n/* SG\n# Grid System/Mixins [[dev]]\n\n##### `@grid-row()`\n###### mixin()\nCreates a grid container (row) based on your grid configuration.\n@requires `@type-space()`\n\n##### `@grid-item()`\n###### mixin(`$columns: $grid-columns`)\nCreates a grid item (column) based on your grid configuration set to a width based on the `$columns` passed in.\n@requires `@type-space()`, `@grid-width()`\n*/\n\n$grid-columns:           12      !default;\n$grid-gutter:            32px    !default;\n$grid-silent-classes:\t false   !default;\n$grid-push:              true    !default;\n$grid-pull:              true    !default;\n$grid-floats:            false   !default;\n$grid-flex:              true    !default;\n$grid-inline-block:      true    !default;\n$grid-markup-fix:        false   !default;\n$grid-letter-space-fix:  -0.45em !default;\n\n$breakpoint-has-widths: ('smalls', 'small', 'lap', 'bigs') !default;\n$breakpoint-has-push:   ('smalls', 'small', 'lap', 'bigs') !default;\n$breakpoint-has-pull:   ('smalls', 'small', 'lap', 'bigs') !default;\n\n@mixin grid-row() {\n    // 1. Allow the grid system to be used on lists.\n    // 2. Remove any margins and paddings that might affect the grid system.\n    // 3. Apply a negative `margin-left` to negate the columns’ gutters.\n\n    list-style: none;                // [1]\n    margin: 0;                       // [2]\n    padding: 0;                      // [2]\n    @include type-space(margin-left, -1, $unit:$grid-gutter);\n\n    @if $grid-inline-block {\n        letter-spacing: $grid-letter-space-fix;\n\n        // Opera hack\n        .opera:-o-prefocus,\n        & {\n            word-spacing: $grid-letter-space-fix;\n        }\n    }\n\n    @if $grid-flex {\n        display: flex;\n        flex-wrap: wrap;\n    }\n\n    @if $grid-floats {\n        @extend %clearfix;\n    }\n}\n\n\n@mixin grid-item($columns: $grid-columns) {\n    // 1. Space columns apart.\n    // 2. Cause columns to stack side-by-side.\n    // 3. Align columns to the tops of each other.\n    // 4. Required to combine fluid widths and fixed gutters.\n\n    @include type-space(padding-left, 1, $unit:$grid-gutter); // [1]\n    width: 100%;\n    min-height: 1px;\n\n    @if $grid-inline-block {\n        display: inline-block;            // [2]\n        vertical-align: top;              // [3]\n\n        @if $grid-markup-fix != true {    // [5]\n            letter-spacing: normal;\n            word-spacing: normal;\n        }\n    }\n\n    @if $grid-floats {\n        float: left;                     // [2]\n    }\n\n    @if $grid-flex {\n        flex: 0 0 #{percentage($columns/$grid-columns)};\n\n        //Forces flex grid to behave like inline-block\n        @if $grid-inline-block != true {\n            flex-grow: 1;\n        }\n    }\n\n    @include grid-width($columns, $grid-columns);\n}\n\n\n/* SG\n##### `@grid-init()`\n###### mixin(`$silent:` `$$grid-silent-classes`, `$important:false`)\nCreates responsive grid classes by running through all the grid-setup mixins. Uses the media-queries defined in the `$breakpoint-has-` variables to create media-query-scoped classes.\n@requires `@grid-classes()`, `@width-classes()`, `@push-classes()`, `@pull-classes()`\n\n*/\n\n@mixin grid-init($silent: $grid-silent-classes, $important: false) {\n\n    @if ($grid-inline-block == false and $grid-floats == false and $grid-flex == false) {\n        @warn 'No grid type selected. Please make sure to set grid-inline-block, -floats, or -flex to true.'\n    }\n\n    @include grid-classes($silent);\n\n    @include width-classes($silent, $important);\n\n    @if $grid-push {\n        @include push-classes($silent, $important);\n    }\n\n    @if $grid-pull {\n        @include pull-classes($silent, $important);\n    }\n}\n\n\n/* SG\n##### `@grid-classes()`\n###### mixin(`$silent:` `$$grid-silent-classes`)\nRuns `@grid-setup()`.\n@requires `@grid-setup()`\n\n##### `@width-classes()`\n###### mixin(`$silent:` `$$grid-silent-classes`, `$important: false`)\nRuns `@width-setup()`, looping across all breakpoints in `$$breakpoint-has-widths`. Creates classes with `width` property values (`flex-basis` and `max-width` for flex-based grids) based on the grid.\n@requires `@media-query()`, `@width-setup()`\n\n##### `@push-classes()`\n###### mixin(`$silent:` `$$grid-silent-classes`, `$important: false`)\nRuns `@width-setup()`, looping across all breakpoints in `$$breakpoint-has-push`. Creates classes with `push_` and `left` property values based on the grid.\n@requires `@media-query()`, `@width-setup()`\n\n##### `@pull-classes()`\n###### mixin(`$silent:` `$$grid-silent-classes`, `$important: false`)\nRuns `@pull-setup()`, looping across all breakpoints in `$$breakpoint-has-pull`. Creates classes with `pull_` and `right` property values based on the grid.\n@requires `@media-query()`, `@width-setup()`\n\n*/\n\n@mixin grid-classes($silent: $grid-silent-classes) {\n    @include grid-setup($silent);\n}\n\n@mixin width-classes($silent: $grid-silent-classes, $important: false) {\n    //Include flex-basis (and max-width) for flex-box grids\n\n    $column-props: if($grid-flex, (\"width\" \"max-width\" \"flex-basis\"), \"width\");\n\n    @include width-setup(\"\", $silent, $column-props, $important);\n\n    // Our responsive classes, if we have enabled them.\n    @each $name in $breakpoint-has-widths {\n        @include media-query($name) {\n           @include width-setup(\"#{$name}#{$breakpoint-namespace-character}\", $silent, $column-props, $important);\n        }\n    }\n}\n\n@mixin push-classes($silent: $grid-silent-classes, $important: false) {\n    @include width-setup(\"push_\", $silent, \"left\");\n\n    @each $name in $breakpoint-has-push {\n        @include media-query($name) {\n           @include width-setup(\"#{$name}#{$breakpoint-namespace-character}push_\", $silent, \"left\", $important);\n        }\n    }\n}\n\n@mixin pull-classes($silent: $grid-silent-classes, $important: false) {\n\n    @include width-setup(\"pull_\", $silent, \"right\", $important);\n\n    @each $name in $breakpoint-has-pull {\n        @include media-query($name) {\n           @include width-setup(\"#{$name}#{$breakpoint-namespace-character}pull_\", $silent, \"right\", $important);\n        }\n    }\n}\n","$grid-columns: 12 !default;\n\n/* SG\n# Grid System/Variables [[dev]]\n\n##### `$$human-readable-numerators`\n###### List (string)\nFirst words used to represent numbers in a fraction; Corresponds to grid interval names (one, two, three, etc.).\n\n\n##### `$$human-readable-denominators`\n###### List (string)\nSecond words used to represent numbers in a fraction; Corresponds to grid interval names (whole, half, third, etc.).\n*/\n\n//Grid\n$human-readable-numerators: one, two, three, four, five, six, seven, eight, nine, ten, eleven, twelve, thirteen, fourteen, fifteen, sixteen, seventeen, eighteen, nineteen, twenty;\n\n$human-readable-denominators: whole, half, third, quarter, fifth, sixth, seventh, eighth, ninth, tenth, eleventh, twelfth, thirteenth, fourteenth, fifteenth, sixteenth, seventeenth, eighteenth, nineteenth, twentieth, twentyfirst, twentysecond, twentythird, twentyfourth, twentyfifth, twentysixth, twentyseventh,twentyeigth, twentyninth;\n\n\n/* SG\n# Grid System/Functions [[dev]]\n\n##### `grid-size()`\n###### function(`$size, $total:` `$$grid-columns`)\nCreates a percentage based on the `$size / $total`.\n@requires `$$grid-columns`\n\n*/\n\n@function grid-size($size, $total: $grid-columns) {\n    @return percentage($size / $total);\n}\n\n\n/* SG\n# Grid System/Mixins [[dev]]\n\n##### `@grid-width()`\n###### mixin(`$columns, $total:` `$$grid-columns`)\nCreates a width property with a percentage based on the `$columns / $total`.\n@requires `grid-size()`, `$$grid-columns`\n@alias `@width()`\n\n*/\n\n@mixin grid-width($columns, $total:$grid-columns) {\n    width: #{percentage($columns/$total)};\n    @if $grid-flex {\n        flex-basis: #{percentage($columns/$grid-columns)};\n        max-width: #{percentage($columns/$grid-columns)};\n    }\n}\n\n@mixin width($columns, $total:$grid-columns) {\n    @include grid-width($columns, $total);\n}\n\n\n/* SG\n\n\n##### `@width-setup()`\n###### mixin(`$namespace:\"\", $silent:` `$$grid-silent-classes`, $property:\"width\")\n Uses `$$human-readable-numerators` and `$$human-readable-denominators` to create percentages based on `$$grid-columns`. `$property` accepts any property, as well as lists of properties.\n\n@requires `grid-size()`, `$$human-readable-numerators`, `$$human-readable-denominators`\n\n*/\n\n\n@mixin width-setup(\n    $namespace:\"\",\n    $silent: $grid-silent-classes,\n    $property: \"width\",\n    $important: false,\n    $columns: $grid-columns\n) {\n\n    // [1] Loop through the $grid-columns.\n    // [2] Loop through $divisor (same number as $grid-columns). This acts as the second number in our column fraction.\n    // [3a]Loop through $divisor before it decreases by 1 from the previous loop.\n    // [3b]After widths are defined, subtract 1 from $divisor.\n    // [4] Assign the numerator and denominator of our fraction to human-readable versions (e.g. three, four, third, quarter, etc.).\n    // [5] Check if the numerator equals 1 (one). If so, we keep our singular human-readable numerators and denominators (e.g. one_twelfth).\n    // [6] If the numerator is larger than 1(one), add an 's' to our selector (e.g. two_eighths).\n    //\n    // Same system used for pushes and pulls.\n    $class-type: if($silent, \"%\", \".\");\n    $divisor: $columns;\n\t$class-name-list: ();\n    $prefix: \"#{$class-type}#{$namespace}\";\n    $important: if($important, \"!important\", \"\");\n\n    //To prevent stuff like 12/12 (five-fifths, etc.), we need to declare 1/1 here\n    #{$prefix}one_whole {\n        @each $type in $property {\n            #{$type}: 100% #{$important};\n        }\n    }\n\n    @for $i from 1 through $columns {                                         // [1]\n\n        @while $divisor > 0 {                                                // [2]\n\n            @for $dividen from 1 to $divisor {                              // [3a]\n\t\t\t\t//Create numerator (first number, e.g. 'two').\n                $numerator: nth($human-readable-numerators, $dividen);      // [4]\n\n\t\t\t\t//Create denominator (second number, e.g. 'thirds').\n                $denominator: nth($human-readable-denominators, $divisor);\n\n\t\t\t\t//Divide first number(numerator) by second number(denominator).\n                $size: grid-size($dividen, $divisor);\n\n                //Create class name\n                $class-name: \"#{$prefix}#{$numerator}_#{$denominator}\";\n\n                //Pluralize anything other than ratios with a numerator of 1\n                @if $numerator != \"one\" {                                    // [5]\n\t\t\t\t\t$class-name: \"#{$class-name}s\";                          // [6]\n                }\n\n\t\t\t\t#{$class-name} {\n                    @each $type in $property {\n                        @if index(\"top\" \"right\" \"bottom\" \"left\", $type) != null {\n                            position: relative;\n                        }\n                        #{$type}: $size #{$important};\n                    }\n                }\n\n\t\t\t\t@if $grid-silent-classes and $debug-silent-classes {\n\t\t\t\t\t$class-name-list: map-merge($class-name-list, ($class-name:$size));\n\t\t\t\t}\n\n            }\n\n            $divisor: $divisor - 1; //[3b]\n        }\n    }\n\n    //Allow for fourths as an alias to quarters\n    #{$prefix}one_fourth {\n\t\t@extend #{$prefix}one_quarter;\n    }\n\n    #{$prefix}two_fourths {\n\t\t@extend #{$prefix}two_quarters;\n    }\n\n    #{$prefix}three_fourths {\n\t\t@extend #{$prefix}three_quarters;\n    }\n\n\n\t@if $silent and $debug-silent-classes {\n\t\t$class-name-list: map-merge($class-name-list,(\n\t\t\t#{$prefix}one_whole: 100%\n\t\t));\n\t\t$silent-class-registry: silents-register($class-name-list, $type) !global;\n\t}\n}\n","/* SG\n\n# Layout/Media object\n\nIsolates an image from text wrapping underneath. Useful for creating an association between an image and text. Often used with an icon or avatar. Adding other classes to the `media-object__body` can create a more stylized version.\n\n```html_example\n<img class=\"media-object__media\" src=\"http://placehold.it/300x48\" alt=\"placeholder image\">\n<p class=\"media-object__body\">\n    Content that sits to the right of the image but will never wrap underneath the image to the left. Etiam porta sem malesuada magna mollis euismod. Cras justo odio, dapibus ac facilisis in, egestas eget quam.\n</p>\n\n```\n*/\n\n%media_overflow {\n    overflow: hidden;\n    _overflow:visible;\n    zoom: 1;\n}\n\n%media_left {\n    float: left;\n}\n\n%media_right {\n    float: right;\n}\n\n%media_block {\n    display: block;\n}\n\n.media-object {\n    width: 100%;\n    @extend %media_block;\n    @extend %clearfix;\n    @include type-space(margin-bottom, 1);\n\n    &__media {\n        @extend %media_left;\n        @extend %media_block;\n        @extend %media_overflow;\n\n        img {\n            @extend %media_block;\n        }\n    }\n\n    &__body {\n        @extend %media_block;\n        @extend %media_overflow;\n        @include type-space(padding-left, .5);\n    }\n}\n\n\n/* SG\n\n# Layout/Arrangement object\n\nCreates an image-content block that vertically aligns images and text (centered, bottom, or top).\nChildren can be named four things:\n* `arrange__item--fit` or `arrange__media` will create a block that fits the width of its content (useful for images).\n* `arrange__item--fill` will fill the remaining space.\n* `arrange__body` is similar to 'arrange__item--fill' but has some default styling.\n\nYou may also combine this with grid items like `row` and `column` if you wish to add gutters between elements.\n\n_NOTE: Do not mistake this for true grid items. This should only be used for the arrangement of a few items. It is \"squishy\", but not technically responsive._\n\n```html_example\n<div class=\"arrange\">\n    <div class=\"arrange__media\">\n        <img src=\"http://placehold.it/60x48\" alt=\"placeholder image\">\n    </div>\n    <div class=\"arrange__body\">\n        Content that is vertically (middle) aligned with the image.\n    </div>\n</div>\n\n<!-- Bottom Arrangement -->\n<div class=\"arrange arrange--bottom\">\n    <div class=\"arrange__media\">\n        <img src=\"http://placehold.it/60x48\" alt=\"placeholder image\">\n    </div>\n    <div class=\"arrange__body\">\n        Content that is bottom aligned to the image.\n    </div>\n</div>\n\n<!-- Equal width arrangement-->\n<div class=\"arrange arrange--equal\">\n    <div class=\"arrange__item arrange__item--fill\">\n        Equal width columns.\n    </div>\n    <div class=\"arrange__item arrange__item--fill\">\n        <img class=\"show\" src=\"http://placehold.it/120x72\" alt=\"placeholder image\" style=\"margin: auto;\">\n    </div>\n    <div class=\"arrange__item arrange__item--fill\">\n        Can be as many columns as you want.\n    </div>\n</div>\n\n```\n*/\n\n\n.arrange {\n    table-layout: auto;\n    min-width: 100%;\n    display: table;\n    width: 100%;\n    @include type-space(margin-bottom, 1);\n\n    &__item,\n    &__media,\n    &__body {\n        display: table-cell;\n    }\n\n    &__item--fill,\n    &__body {\n        width: 100%;\n    }\n\n    &__item--fit,\n    &__media {\n        img {\n            display: block;\n            max-width: none;\n        }\n    }\n\n    &__item--pad,\n    &__body {\n        @include type-space(padding-left, .5);\n    }\n\n    &__item--fill,\n    &__item--fit,\n    &__media,\n    &__body {\n        vertical-align: middle;\n\n        .arrange--top > & {\n            vertical-align: top;\n        }\n\n        .arrange--bottom > & {\n            vertical-align: bottom;\n        }\n\n    }\n}\n\n//Forces equal-width columns\n.arrange--equal {\n    table-layout: fixed;\n\n    & > .arrange__item--fill,\n    & > .arrange__item--fit {\n        width: 1%;\n    }\n}\n","/* SG\n# Buttons\nApplying the `btn` class to anything will make it look like a button. Always declare `type=\"button\"` on `<button>` elements for proper accessibility.\n\n```html_example\n<button type=\"button\" class=\"btn\">Button</button>\n\n<a href=\"\" class=\"btn\">Faux Button</a>\n```\n\n*/\n\n//Useful placeholder selector for button creation\n\n%button {\n    border-radius: type-space(.85) / type-space(1);\n    box-shadow: 0 3px 4px -2px rgba(black, 0);\n    background-color: color('links');\n    padding: type-space(.5 .375);\n    color: white;\n    font-weight: bold;\n    transition: background-color .1s ease-in-out, box-shadow .2s ease-out, color .1s ease-in-out;\n\n    &:focus,\n    &:hover {\n        outline: none;\n        box-shadow: 0 3px 8px -2px rgba(colors('links', 'light'), .65);\n        background-color: color('links', 'light');\n    }\n\n    &:active {\n        outline: none;\n        box-shadow: 0 0 4px 1px rgba(colors('links', 'lighter'), .5);\n        background-color: color('links', 'lighter');\n        color: color('links', 'lightest');\n    }\n\n}\n\n.btn {\n    @extend %button;\n    display: inline-flex;\n    justify-content: space-between;\n    align-content: flex-start;\n    align-items: center;\n}\n\n.btn--wide {\n    width: 100%;\n}\n\n.btn--compact {\n    padding: type-space(.125);\n}\n\n.btn__icon {\n    display: inline-block;\n    flex: 0 1 auto;\n    margin: type-space(0 .25 0 .25);\n\n    .btn--reversed & {\n        order: -1;\n    }\n}\n\n.btn__svg,\n.btn__icon--image {\n    display: block;\n    width: type-space(1);\n    height: auto;\n    min-height: 1px;\n    fill: currentColor;\n}\n\n.btn__body {\n    display: inline-block;\n    flex: 1 1 auto;\n    padding: type-space(0 .5);\n}\n",".hero {\n\tdisplay: table;\n\twidth: 100%;\n\theight: 96vh;\n\t@include type-space(max-height, 67);\n\tbackground-size: cover;\n\tcolor: #fff;\n\tposition: relative;\n\tbackground-image: url('../images/logo.svg');\n\t@include type-space(padding, 1 0 1);\n    background-attachment: fixed;\n}\n\n.hero__body {\n\tdisplay: table-cell;\n\tvertical-align: middle;\n\tmax-width: 99%;\n}\n","//-----------------------\n// Editor Content\n//-----------------------\n// Nested (non-template) styles\n// used to override base component styles for TinyMCE/editor-created content\n\n//It's usually best not to use extends here since it can mess with the cascade.\n\n.editor_content {\n\n\tul {\n\t\tlist-style: bulleted;\n\t\t@include type-space(margin-left, 1);\n\t}\n\n}\n",".icon {\n\twidth: 1.2em;\n\tmargin-right: .5em;\n\tdisplay: inline-block;\n\tmargin-top: -.25em;\n}\n\n.box_open{\n\tborder-width: 2px 0;\n}\n\n[class*=\"list_bordered\"] > li{\n\tborder-top-width: 2px;\n\tmargin-top: -2px;\n\n\t&:first-child{\n\t\tborder-top-color: color(bg, dark);\n\t}\n\n\t&:last-child {\n\t\tborder-bottom: 2px solid color(bg, dark);\n\t\tmargin-bottom: 4px;\n\t}\n}\n\n.tab,\n.list_nav a {\n\ttext-transform: uppercase;\n\tletter-spacing: .5px;\n\tfont-weight: bold;\n    @include font-size($type-small-size, $type-small-lh);\n\ttext-decoration: none;\n}\n\n.toggles{\n    position: fixed;\n    top: -1px;\n    right: -1px;\n    z-index: z(modal);\n    background-color: #fff;\n    border: 1px solid #ddd;\n    padding: 5px 10px;\n    border-radius: 0px 0px 0px 3px;\n}\n","//------------------------------------\n//      $MIXINS\n//------------------------------------\n\n/* SG\n# Tools/Z-Index [[dev]]\n\n@file globals/tools/_t-zindex.scss\n\n##### `z()`\n###### function(`$layer`, `$modifier: false`)\nReturns a numeric value (used for z-index) from a named layer, stored in `$$z-index`. Changing the modifier to anything other than `false` will add 1 plus however many times the value has been called. So, if you've called `z(head, true)` 5 times, and `head`'s default value is 100, you would get a value of 105.\n\nThe `$modifier` is useful if you'd like to closely layer z-indexes within the same module. It is rarely necessary, though since z-indexes stack.\n\n*/\n\n$z-index: (\n\treset: 0,\n\tbehind: -100,\n\thead: 100,\n\tbody: 200,\n\tfoot: 300,\n\tmodal: 500\n) !default;\n\n$z-registry: ();\n\n@function z($layer, $modifier: false) {\n\t$layer-addition: 0;\n\n\t@if map-get($z-index, $layer) != false{\n\t\t@if $modifier == null {\n\t\t\t@if map-get($z-registry, $layer) == null {\n\t\t\t\t$z-registry: map-merge($z-registry, ($layer: 0)) !global;\n\t\t\t}\n\n\t\t\t@return map-get($z-index, $layer);\n\n\t\t}@else {\n\t\t\t@if map-get($z-registry, $layer) == null {\n\t\t\t\t$z-registry: map-merge($z-registry, ($layer: 1)) !global;\n\t\t\t}@else {\n\t\t\t\t$layer-addition: map-get($z-registry, $layer) + 1;\n\t\t\t\t$z-registry: map-merge($z-registry, ($layer: $layer-addition)) !global;\n\t\t\t}\n\n\t\t\t$return-value: map-get($z-index, $layer) + map-get($z-registry, $layer);\n\n\t\t\t@return $return-value;\n\t\t}\n\t}@else {\n\t\t@warn \"#{$layer} is not in the $z-index map, please choose from the following z-index values: #{$z-index}\";\n\t}\n}\n","/* SG\n# Mixins/Overrides [[dev]]\n\n##### `@create-overrides()`\n###### mixin(`$map, $breakpoints, $namespace: \"\"`)\nTakes a map of class names and style properties and outputs utility (override) classes over a specified number of breakpoints. Useful for creating a number of single-use classes over multiple breakpoints. Always makes property declarations `!important`.\n\nExample:\n```scss\n//Input\n@include creat-overrides(\n    (\n        \"class-name\": (\n            \"property\": \"value\",\n        ),\n        \"float-right, align_right\": (\n            \"float\": \"right\"\n        )\n    ),\n    ('smalls', 'bigs')\n);\n\n//CSS-output\n.float-left {\n    float: left !important;\n}\n.float-right,\n.align_right {\n    float: right !important;\n}\n@media (max-width: 600px) {\n    .float-left {\n        float: left !important;\n    }\n    .float-right,\n    .align_right {\n        float: right !important;\n    }\n}\n@media (min-width: 601px) {\n    ...\n}\n```\n##### `@_override-output()`\n###### mixin(`$map, $namespace: \"\"`)\nUsed exclusively by `@create-overrides()` to iterate through a map of classes, properties, and values to create responsive classes.\n\n*/\n\n@mixin create-overrides($map, $breakpoints, $namespace: \"\", $separator: $breakpoint-namespace-character) {\n\n    //create non-responsive classes first\n    @include _override-output($map, $namespace);\n\n    //create responsive classes\n    @each $breakpoint-name in $breakpoints {\n\n        @include media-query($breakpoint-name) {\n\n\t\t\t$name: $namespace + $breakpoint-name + $separator;\n        \t@include _override-output($map, $name);\n\n\t\t}\n    }\n}\n\n@mixin _override-output($map, $namespace) {\n\n    @each $class-name in map-keys($map) {\n        $properties: map-keys(map-get($map, $class-name));\n        $values: map-values(map-get($map, $class-name));\n        $class-name: str-replace($class-name, ',', ', .#{$namespace}');\n        $class-name: str-replace($class-name, ' ', '');\n\n        .#{$namespace}#{$class-name} {\n            @for $i from 1 through length($properties) {\n                #{nth($properties, $i)}: #{nth($values, $i)} !important;\n            }\n        }\n    }\n}\n","//------------------------------------*\\\n//    $DISPLAY UTILITIES\n//------------------------------------*/\n\n/* SG\n# Tools/Display Utilities [[dev]]\n\n@file globals/tools/_t-display.scss\n\n##### `@display-utilities()`\n###### mixin(`$namespace:\"\", $silent:false, $important:true, $class-list:$display-classes`)\nGenerates classes with display properties defined in `$class-list`. Intelligently extends duplicated display properties.\n\n\n##### `@display-utilities-init()`\n###### mixin(`$breakpoints: $all-breakpoints, $namespace: '', $silent: true, $important: false`)\nThe responsive component to `@display-utilities()`. Invoke `@display-utilites()` with that loops through a set of media-queries defined in `$$breakpoints`. This is most useful for creating responsive display classes.\n\n*/\n\n//Create silent versions of the above classes\n$default-display-classes: (\n    'show': 'block',\n    'bl': 'block',\n    'il_bl': 'inline-block',\n    'tbl': 'table',\n    'tbl_cl': 'table-cell',\n    'hide': 'none',\n    'block': 'block',\n    'inline_block': 'inline-block',\n    'table_cell': 'table-cell',\n    'table': 'table'\n);\n\n@mixin display-utilities(\n    $namespace: \"\",\n    $silent: false,\n    $important: true,\n    $class-list: $display-classes) {\n    //Merge user-defined classes with defaults (so we have a wide-array of silent classes)\n    $silent-display-classes: map-extend($display-classes, $default-display-classes, true);\n\n    $classtype: if($silent, unquote('%'), unquote(\".\"));\n    $important_str: if($important, ' !important', '');\n    $display-lookup: null;\n    $display-registry: ();\n    $class-name-list: ();\n\n    @each $name, $display in $class-list {\n\n        $display-class: #{$classtype}#{$namespace}#{$name};\n        //Check for existence of a previous class using the same display\n        $display-lookup: index($display-registry, $display);\n        //If it exists, look it up in the map and extend that value.\n        @if $display-lookup != null {\n            $extender: nth(nth($class-list, $display-lookup), 1);\n\n            #{$display-class} {\n                @extend #{$classtype}#{$namespace}#{$extender};\n            }\n\n        } @else {\n            #{$display-class} {\n                display: #{$display}#{$important_str};\n            }\n\n        }\n\n        //Keep track of display values so we can extend if necessary\n        @if index($display-registry, \"#{$display}\") != null {\n            @if $silent and $debug-silent-classes {\n                $class-name-list:map-merge($class-name-list,($display-class:$display));\n            }\n\n            //Make sure duplicate values get a uniqueID so it's not extended\n            $display: $display + '' + length($display-registry);\n        }\n        $display-registry: append($display-registry, \"#{$display}\", comma);\n    }\n\n    //Register silent class names for debugging\n    @if $silent and $debug-silent-classes {\n        $silent-class-registry: silents-register($class-name-list, 'display') !global;\n    }\n}\n\n@mixin display-utilities-init(\n    $breakpoints: $all-breakpoints,\n    $namespace: '',\n    $silent: true,\n    $important: false\n){\n    $classes: if($silent, $silent-display-classes, $display-classes);\n\n    @include display-utilities($namespace, $silent, $important, $classes);\n\n    @each $name in $breakpoints {\n        @include media-query($name) {\n\n            $name: $namespace + $name;\n\n            @include display-utilities(\n                '#{$name}#{$breakpoint-namespace-character}', $silent, $important, $classes\n            );\n        }\n    }\n}\n","// sass-lint:disable no-important\n\n@if $breakpoint-has-display-classes != false {\n\n    @include display-utilities-init(\n        $breakpoints: $breakpoint-has-display-classes,\n        $namespace: '',\n        $silent: false,\n        $important: true\n    );\n\n    [hidden] {\n        display: none !important;\n    }\n\n    .invisible {\n        visibility: hidden !important;\n    }\n}\n","//------------------------------------\n//      $SPACING TOOLS\n//------------------------------------\n\n/* SG\n# Tools/Spacing Utilities [[dev]]\n\n##### `@spacing-utilities()`\n###### mixin(`$namespace:''`, `$config`)\nGenerates responsive spacing and padding classes. The `$namespace` argument is the media query's name, which will be appended to all generated classes. The `$config` argument is a map that allows JS-style arguments. Outputs class name as: `breakpoint_prefix_direction_amount`.\n\n**`$config` Keys:**\n* `silent:` boolean for outputting silent/non-silent classes.\n* `important:` whether to output !important after each declaration.\n* `directions:` names that get appended to class names.\n* `amounts:` how much to multiply spacing unit by `$$base-line-height`.\n* `names:` corresponding names for each `amounts` that gets appended to class names.\n* `prefixes:` first word in the class name. Must contain the words 'pad' and 'space'. Used by `layout-type()` to determine padding or margin.\n\n\n##### `@spacing-utilities-init()`\n###### mixin(`$breakpoints:` `$$all-breakpoints`, `$namespace:''`, `$config:(silent:true)`)\nThe responsive component to `@spacing-utilities()`. Invoke `@spacing-utilites()` with that loops through a set of media-queries defined in `$$breakpoints`. This is most useful for creating responsive spacing classes.\n\n*/\n\n//Spacing utility classes\n//Generates responsive spacing and padding classes\n// The first argument is the media query's name, which will be appended to all generated classes.\n// The second argument is a map. This allows JS-style arguments.\n\n@mixin spacing-utilities ($namespace:\"\", $config: ()){\n\n\t//Merge the passed map with some default values\n\t$config: map-extend((\n\t\tsilent: true,\n\t\timportant: false,\n\t\tdirections: (\n\t\t\tnull: null,\n            '-t':'top',\n            '-b':'bottom',\n            '-l':'left',\n            '-r':'right',\n            '-v':'top' 'bottom',\n            '-h': 'right' 'left'\n\t\t),\n\t\tunits: (\n\t\t\tnull: 1,\n            '-quarter':.25,\n            '-half':.5,\n            '-2': 2,\n            '-neg-quarter': -.25,\n            '-neg-half': -.5,\n            '-neg': -1,\n            '-neg-2': -2,\n            '-0': 0\n\t\t),\n\t\tproperties: (\n\t\t\t'pad': 'padding',\n            'space': 'margin'\n\t\t),\n\t\tunit: $vertical-space\n\n\t), $config, true);\n\n\n\t//Convert map values to variables for simpler parsing\n\t$classtype: if(map-get($config, silent), unquote('%'),unquote(\".\"));\n    $properties: map-get($config, properties);\n    $directions: map-get($config, directions);\n    $units: map-get($config, units);\n\t$important: map-get($config, important);\n    $unit: map-get($config, unit);\n\n    $class-name-list: ();\n    $class-cache: ();\n\n\t//Loop through base names, then amounts, then directions.\n\t@each $given_name, $base_property in $properties {\n\n        @each $amount_name, $amount in $units {\n\n\t\t\t@each $direction_name, $property_directions in $directions {\n\n                $class_name: #{$classtype}#{$namespace}#{$given_name}#{$direction_name}#{$amount_name};\n\n                //Don't do anything if the padding is a negative value.\n\t\t\t\t@if not (($base_property == 'padding') and ($amount < 0)) {\n\n\t\t\t\t\t#{$class_name} {\n\n                        @each $direction in $property_directions { //multi-direction\n\n                            $property: $base_property;\n\n                            @if ($direction) and ($direction != '') {\n                                $property: $property + '-' + $direction;\n                            }\n\n                            $property-amount: '#{$property+$amount}';\n\n                            @if map-get($class-cache, $property-amount) {\n                                @extend #{map-get($class-cache, $property-amount)};\n                            }\n                            @else {\n                                //Using type-space mixin, output the REM-based value\n    \t\t\t\t\t\t\t@include type-space($property, $amount, $important, $unit);\n\n                                $class-cache: map-merge($class-cache, ($property-amount: $class_name));\n                            }\n\n    \t\t\t\t\t}\n                    }\n\n\t\t\t\t\t$class-name-list: map-merge($class-name-list, ($class_name: $amount));\n\n                }\n\n            }\n\t\t}\n\t}\n\n\t//Register silent classes for debugging.\n\t@if map-get($config, silent) {\n\t\t$silent-class-registry: silents-register($class-name-list, 'spacing') !global;\n\t}\n}\n\n@mixin spacing-utilities-init(\n\t$breakpoints: $all-breakpoints,\n\t$namespace: '',\n\t$config: (silent: true)\n){\n\n\t@include spacing-utilities($namespace, $config);\n\n    @each $name in $breakpoints {\n\n        @include media-query($name) {\n\n\t\t\t$name: $namespace+$name;\n        \t@include spacing-utilities('#{$name}_', $config);\n\n\t\t}\n    }\n\n}\n","/* SG\n# Typography/Heading sizes\n\nMoving from `h6` up to `h1`, the heading font sizes get larger on a scale. For instance, `h6` is 1.35 times larger than the base font size of 16px. Headings have a default bottom margin of 24px.\n\n**Heading tags should be used in a hierarchical manner**, appropriate for the page, and not used for their size. To override a heading size, use a class with the corresponding heading name. See the example below.\n\n```html_example\n<h1>Heading 1</h1>\n<h2>Heading 2</h2>\n<h3>Heading 3</h3>\n<h4>Heading 4</h4>\n<h5>Heading 5</h5>\n<h6>Heading 6</h6>\n\n<h1 class=\"h4\">Heading 1 with an h4 class</h1>\n\n```\n*/\n\n.h1 {\n    @include type-font-size($type-h1-size, $h1-lh, $important:true);\n}\n.h2 {\n    @include type-font-size($type-h2-size, $h2-lh, $important:true);\n}\n.h3 {\n    @include type-font-size($type-h3-size, $h3-lh, $important:true);\n}\n.h4 {\n    @include type-font-size($type-h4-size, $h4-lh, $important:true);\n}\n.h5 {\n    @include type-font-size($type-h5-size, $h5-lh, $important:true);\n}\n.h6 {\n    @include type-font-size($type-h6-size, $h6-lh, $important:true);\n}\n\n.link--naked,\n%link_naked {\n\tcolor: inherit !important;\n\ttext-decoration: none !important;\n\n\t&:hover,\n    &:focus {\n\t\tcolor: inherit !important;\n\t\ttext-decoration: none !important;\n\t}\n}\n\n\n@include create-overrides(\n    (\n        'txt-small': (\n            font-size: rems(modular-scale(-1)),\n            line-height: $type-small-lh\n        ),\n        'txt-smaller': (\n            font-size: ems(modular-scale(-1))\n        ),\n        'txt-center': (\n            text-align: center\n        ),\n        'txt-normal': (\n            font-weight: 400\n        ),\n        'txt-italic': (\n            font-style: italic\n        ),\n        'txt-bold': (\n            font-weight: 700,\n            -webkit-font-smoothing: antialiased\n        ),\n        'txt-upper': (\n            text-transform: uppercase,\n            letter-spacing: .1em\n        ),\n        'txt-capital': (\n            text-transform: capitalize\n        ),\n        'txt-lower': (\n            text-transform: none,\n            letter-spacing: normal\n        ),\n        'txt-space-reset': (\n            letter-spacing: normal,\n            word-spacing: normal\n        ),\n        'txt-primary': (\n            font-family: $primary-font-stack,\n        ),\n        'txt-secondary': (\n            font-family: $secondary-font-stack\n        )\n\n    ),\n    $breakpoint-has-type-classes\n);\n","//------------------------------------\n//      $Overrides\n//------------------------------------\n// Final import. Include any overrides\n// or high-specificity selectors.\n//-----------------------------------\n// sass-lint:disable no-important\n\n\n.visually-hidden {\n    position: absolute;\n    margin: -1px;\n    border: 0;\n    padding: 0;\n    width: 1px;\n    height: 1px;\n    overflow: hidden;\n    // sass-lint:disable-all\n    clip: rect(0px, 0px, 0px, 0px);\n    clip: rect(0 0 0 0);\n    transition: all 300ms ease-in-out;\n    // sass-lint:enable-all\n}\n\n.visually-hidden.focusable:active,\n.visually-hidden.focusable:focus {\n    position: static;\n    margin: 0;\n    width: auto;\n    height: auto;\n    overflow: visible;\n    clip: auto;\n}\n\n.contain {\n    position: relative !important;\n}\n\n.clearfix {\n    @extend %clearfix;\n}\n","//Allow a toggle for baseline image\n@if $debug-baseline == true {\n\n    $type-baseline-size: strip-units($type-base-unit);\n\n\t.baseline-on {\n        background-image: url(http://basehold.it/i/#{$type-baseline-size}); // [3]\n        background: linear-gradient(to top, rgba(0, 0, 0, .15) 1px, transparent 1px, rgba(black, .15) 1px, transparent 1px) top left / auto (($type-base-ratio / 2) * 1em);\n    }\n\n    .baseline-off {\n        background-image: none;\n    }\n}\n\n\n//Output all silent classes and values at the end of the CSS file if silent-class debugging is enabled. Will not show up in minified output\n\n@if $debug-silent-classes {\n/*! Silent classes:\n\t#{map-inspect($silent-class-registry)}\n*/\n}\n\n@if $debug-breakpoints {\n    @each $breakpoint in $all-breakpoints {\n        @include mq($breakpoint) {\n            .breakpoint-on:after {\n                content: \"#{$breakpoint}\";\n                position: fixed;\n                top: 0;\n                right: 0;\n                background: #fff;\n                padding: 10px;\n                z-index: 999999;\n            }\n        }\n    }\n}\n\n#testing {\n    padding: type-space(auto 10 auto auto)\n}\n"]}