{"version":3,"sources":["../sass/tools/_t-color-functions.scss","../sass/tools/_t-type.scss","styleguide.scss","../sass/tools/_t-grid-system.scss","../../config/sass.config.scss","../sass/tools/_t-widths.scss","../sass/tools/_t-media-queries.scss","styleguide.css","../sass/tools/_t-functions.scss"],"names":[],"mappings":"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BAAqB,CACxB,AAED,wBACI,iBAAkB,CACrB,AAED,qCACI,YAAa,CAChB,AAID,gCAEI,oBAAqB,CACxB,AAED,YACI,mBAAoB,CACvB,AAED,2BACC,qCAAsC,CACtC,AAED,uCDzWI,oBAAc,AAAd,qBAAc,CC4WjB,AAED,0BACC,6BAA6B,AAC7B,4BAAsC,CACtC,AAED,YACI,iBAAkB,CACrB,AAED,yBAEI,eAAgB,CACnB,AAED,oBACI,kBAAmB,CACtB,AAED,iBACI,oBAAqB,CACxB,AAxOD,YA2OI,oCAA2B,AAC3B,yBAA0B,CAC7B,AAED,mBACI,kBAAkB,AAClB,yBAAyB,AACzB,cAAc,AACd,qBAAqB,AACrB,eAAe,AACf,mBAAmB,AACnB,mBAAmB,AACnB,gBAAgB,AAChB,UAAW,CACd,AAED,iBACI,qBAAqB,AACrB,iBAAkB,CACrB,AAGD,uBACI,YAAY,AACZ,cAAc,AACd,SAAS,AACT,WAAW,AAIX,UAAW,CAHd,AAMD,gBACI,QAAS,CACZ,AAED,iBACI,4BErD2B,CFsD9B,AAMD,sBACI,aEhEuB,CFiE1B,AAED,cACI,oBAAqB,CACxB,AAED,4BACI,kBAAmB,CACtB,AAED,qBACC,kCAAiC,AACjC,yBAA0B,CAC1B,AAID,wDAEI,aAAc,CACjB,AACD,4BACI,eAAgB,CACnB,AAED,4BACI,cAAc,AACd,iBAAiB,AACjB,gBAAgB,AAChB,WAAY,CACf,AAGD,kBACI,yBAAyB,AACzB,cAAe,CAClB,AACD,0BACI,aAAc,CACjB,AAED,KACI,iCAAqC,CACxC","file":"../styleguide.min.css","sourcesContent":["//------------------------------------*\\\n//    $Color Functions\n//------------------------------------*/\n\n/* SG\n# Colors/Lookup [[dev]]\n\n@file tools/_t-color-functions.scss\n\n@priority 99\n\n##### `colors()`\n###### function(`$color-name, $tone: 'base', $opacity: 1`)\nGet a color value from the global `$$base-colors` map. Darker and lighter tones are available by passing a second string.\n\n```scss\n.foo {\n    background-color: colors(links, light));\n}\n```\n\nPassing only a color name will default to the 'base' color.\n\n@alias color(), clr()\n@requires `$$base-colors`\n\n[Reference](http://blog.12spokes.com/web-design-development/simple-css-color-management-with-sass/)\n*/\n\n\n@function colors($color-name, $tone: 'base', $opacity: 1) {\n\n    @if not map-has-key($base-colors, $color-name) {\n        @warn \"Color '#{$color-name}' not found in $base-colors map. Returning #f00 instead\";\n        @return red;\n    }@else if not map-has-key(map-get($base-colors, $color-name), $tone) {\n        @warn \"Tone '#{$tone}' not found in #{$color-name}. Returning #f00 instead.\";\n        @return red;\n    }\n\n    @if $opacity < 1 {\n        @return rgba(map-get(map-get($base-colors, $color-name), $tone), $opacity);\n    }\n\n    @return map-get(map-get($base-colors, $color-name), $tone);\n}\n// ALIAS: Same as above, but easier to type\n@function color($color, $tone: 'base', $opacity: 1) { @return colors($color, $tone, $opacity);}\n@function clr($color, $tone: 'base', $opacity: 1) { @return colors($color, $tone, $opacity);}\n\n\n/* SG\n# Colors/Lookup [[dev]]\n\n##### `combine-color-maps()`\n###### function(`$map1 , $map2`)\nSpecialized function used by `generate-color-variations()` to merge two color maps.\n\n@returns map\n\n*/\n\n// FUNCTION: combine-color-maps()\n// Combines two color maps (or really any double-nested map)\n@function combine-color-maps($map1, $map2) {\n\n    @each $pal, $color in $map2 {\n        $value: ($pal: $color);\n        $map1: map-merge($map1, $value);\n    }\n\n    @return $map1;\n}\n\n/* SG\n# Colors/Manipulation [[dev]]\n\n##### `generate-color-varations()`\n###### function( `$map: $colors, $functions: (tint, tint, tint, shade, shade, shade), $increments: (20%, 40%, 80%, 20%, 40%, 80%), $variations: (light, lighter, lightest, dark, darker, darkest), $blending-colors: null`)\n\nTakes base color values and generates a full color palette. Used by the `$$base-colors` map to create a project's palette, accessible via `colors()`.\n\n**Arguments:**\n* `$map`: Color map you want to create variations of. Defaults to `$$base-colors`.\n* `$functions`: color functions used to generate variations (e.g. lighten or darken). Can use any `blend` function, provided `$blending-colors` are provided.\n* `$increments`: percentage amount to apply `$function` to each `$variations`.\n* `$variations`: actual names for each color tone when `colors()` used.\n* `$blending-colors`: used when a function is a `blend`. Can be a list or a single color.\n\n@requires `combine-color-maps()`\n\n*/\n\n// Adds color variations to a color map\n// 1a. Color functions.\n// 1b. Function percentages (e.g. lighten($foo, [percentages])).\n// 1c. Variation names (output to map).\n// 1d. Blending color. Only used when a blending mode is used (e.g. blend-colordodge)\n// 2a. Determine how often to switch functions.\n// 2b. Make sure map is properly formatted.\n// 2c. Define new map (for easier to understand return value).\n// 3a. Loop through the pallets and colors of the map input.\n// 3b. Store $color map in a list\n//     (this is required to prevent bugs on colors with names of real colors).\n// 3c. Define color function increment.\n// 4a. Loop through the variation names.\n// 4b. Get index and find the amount to use with the current color function.\n// 5a. Divide the loop increment by the number of color functions.\n// 5b. If the loop is larger than the variation frequency,\n//\t   move to the next color function.\n// 6a. Get the current color function and current color.\n// 6b. Add blending mode color if necessary (useful for mixing colors).\n// 6c. If blending-color is defined, use it to blend colors (use list-value if exists)\n// 7a. Call the color function, the color(s), and the amount and store that value.\n// 7b. Create the variation and color definition in map format (\"name\": color).\n// 7c. Merge the current base color map with the new variant map.\n// 8a. Format the previous loop results into a nested map.\n// 8b. Merge the input map with itself and the new nested map.\n// 9. Return the map with the new values.\n\n@function generate-color-variations(\n    $map: $base-colors,\n    $functions: (tint, tint, tint, shade, shade, shade),\t\t\t//[1a]\n    $increments: (20%,  40%,   80%,   20%,   40%,   80%), \t\t\t//[1b]\n    $variations: (light, lighter, lightest, dark, darker, darkest),//[1c]\n    $blending-colors: null \t\t\t\t\t\t\t\t\t\t\t\t//[1d]\n){\n        $variation-frequency:\n            length($variations) / length($functions); //[2a]\n\n        $map: map-add-depth($map, 'base');\t\t\t\t\t\t //[2b]\n        $new-map: $map;\t\t\t\t\t\t\t \t     \t\t //[2c]\n        $blend-value: '';\n\n        @each $palette, $color in $map { \t\t\t\t\t\t //[3a]\n            $values-list: $color;\t\t\t\t\t\t\t\t //[3b]\n            $color_fn-i: 1;\t\t\t\t\t\t\t\t\t\t //[3c]\n\n            @each $variant in $variations {        \t//[4a]\n                @if not map-has-key($color, $variant) {\n                    $i: index($variations, $variant);\t//[4b]\n                    $amount: nth($increments, $i);\t\t\t//[4b]\n\n                    $color_fn_place: $i/$variation-frequency;\t//[5a]\n\n                    @if $color_fn_place > $color_fn-i{ \t\t\t//[5b]\n                        $color_fn-i: $color_fn-i + 1;\t\t\t//[5b]\n                    }\n\n                    $curr_fn: nth($functions, $color_fn-i); \t\t//[6a]\n                    $curr_color: map-get($color, base);\t\t\t\t\t//[6b]\n\n                    @if $blending-colors != null\n                        or type-of($blending-colors) == 'list'{\t\t\t//[6c]\n\n                        @if type-of($blending-colors) == 'list' {\n                            $blend-value: nth($blending-colors, $color_fn-i);\n                        }@else {\n                            $blend-value: $blending-colors;\n                        }\n\n                        @if $blend-value == 'self' {\n                            $blend-value: $curr_color;\n                        }\n\n                        @if $blend-value != null {\n                            $amount: 1 - ($amount / 100%); //Invert the amount\n                            $temp-color: $curr_color;\n                            //Use amount to transparency of blending color\n                            $curr_color: transparentize($blend-value, $amount);\n                            //$amount becomes 'background' color we're blending\n                            $amount: $temp-color;\n                        }\n                    }\n                    //Try to add \"blend\" to the current function if it's not valid\n                    @if not function-exists($curr_fn){\n                        $curr_fn: unquote('blend-') + $curr_fn;\n                    }\n\n                    $new-color: call(safe-get-function($curr_fn), $curr_color, $amount); \t//[7a]\n                    $value: ($variant: $new-color); \t\t\t\t\t//[7b]\n\n                    $values-list: map-merge($value, $values-list);\t\t//[7c]\n                }\n            }\n\n            // This is required because sass maps are formatted\n            // with double parenthesis as they get more nested.\n            // (first-level: ( (second-level: value) ) )\n            $inner-map: ($palette:($values-list));\t\t\t\t//[8a]\n            $new-map: combine-color-maps($new-map, $inner-map); \t//[8b]\n\n        }\n\n        @return $new-map; \t\t\t\t\t\t\t\t//[9]\n}\n\n/* SG\n# Colors/Manipulation [[dev]]\n\n\n##### `black-or-white()`\n###### function(`$color`)\nChange text color based on background-color's darkness.\n\n```scss\ndiv {\n    background-color: #f8cd12;\n    color: set_text_color(#f8cd12);\n}\n// Your text color would be black because #f8cd12 and #00000 have more contrast.\n```\n@alias set-text-color()\n@requires `color-luminance`\n\n*/\n\n\n@function black-or-white($color) {\n    @if (color-luminance($color) > .45) {\n        @return #000;\n    }\n    @else {\n        @return #fff;\n    }\n}\n//ALIAS\n@function set-text-color($color){ @return black-or-white($color); }\n\n/* SG\n##### `pick-best-color()`\n###### function(`$base, $colors, $tolerance: 0`)\nCompares a set of colors against `$base` and returns the color with the most contrast. `$colors` should be a list.\n[Taken from here](https://gist.github.com/voxpelli/6304812)\n\n```scss\ndiv {\n    color: pick_best_color(#f8cd12, (#a0a0c0, #fff, #2c2c2c));\n}\n// The function would test the colors and find that #2c2c2c is the best.\n```\n@requires `color-contrast()`, `color-luminance()`\n@returns color\n*/\n\n@function pick-best-color($base, $colors, $tolerance: 0) {\n    $contrast: color-contrast($base, nth($colors, 1));\n    $best: nth($colors, 1);\n\n    @for $i from 2 through length($colors) {\n        $current_contrast: color-contrast($base, nth($colors, $i));\n\n        @if ($current_contrast - $contrast > $tolerance) {\n            $contrast: color-contrast($base, nth($colors, $i));\n            $best: nth($colors, $i);\n        }\n    }\n    @return $best;\n}\n/* SG\n##### `color-contrast()`\n###### function(`$color1, $color2`)\nFind contrast between two colors.\n[Adapted from color.js](https://github.com/LeaVerou/contrast-ratio/blob/gh-pages/color.js)\n\n@requires `color-luminance()`\n@returns number(0 - 1)\n*/\n\n@function color-contrast($color1, $color2) {\n    $luminance1: color-luminance($color1) + .05;\n    $luminance2: color-luminance($color2) + .05;\n    $ratio: $luminance1 / $luminance2;\n\n    @if $luminance2 > $luminance1 {\n        $ratio: 1 / $ratio;\n    }\n\n    $ratio: round($ratio * 10) / 10;\n\n    @return $ratio;\n}\n\n/* SG\n##### `color-luminance()`\n###### function(`$color1`)\nFind the relative luminance of a color. Used by `color-contrast()`. [Adapted from color.js](https://github.com/LeaVerou/contrast-ratio/blob/gh-pages/color.js)\n@alias luma()\n@returns number(0 - 1)\n*/\n\n@function color-luminance($color) {\n\n    $rgba: red($color), green($color), blue($color);\n    $rgba2: ();\n\n    @for $i from 1 through 3 {\n        $rgb: nth($rgba, $i);\n        $rgb: $rgb / 255;\n\n        $rgb: if($rgb < .03928, $rgb / 12.92, pow(($rgb + .055) / 1.055, 2.4));\n\n        $rgba2: append($rgba2, $rgb);\n    }\n    @return (.2126 * nth($rgba2, 1)) + (.7152 * nth($rgba2, 2)) + (0.0722 * nth($rgba2, 3));\n}\n\n//Alias\n@function luma($color){ @return color-luminance($color); }\n\n\n/* SG\n# Colors/Debugging [[dev]]\n\n@file tools/_t-color-functions.scss\n\n##### `@color-palette-output()`\n###### mixin(`$selector`, `$color-map:` `$$base-colors`)\nDebugging tool that creates a pretty color palette (in columns) using psuedo selectors (nth-child required). Used for \"color blocks\" output, in style guide.\n\n@requires `map-add-depth()`, `black-or-white()`\n\n*/\n\n@mixin color-palette-output($selector, $color-map: $base-colors) {\n    $color-names: \t  ( );\n    $color-subnames:  ( );\n    $color-fullnames: ( );\n    $color-values: \t  ( );\n\n    //Loop through the color map,\n    // adding all names, variants, and values to individual lists\n    @each $color, $color-variants in $color-map {\n        //Put color names into a list\n        $color-names: append($color-names, nth($color, 1));\n\n        //Put 'base' at beginning of list\n        @if index(map-keys($color-variants), base) == length(map-keys($color-variants)) {\n            $color-variants: list-reverse($color-variants);\n        }\n\n        //Loop through color variants (light, dark, etc.)\n        @each $color-variant in $color-variants {\n\n            //Add a non-breaking space before the color name\n            $subname-temp: unquote(' ' + nth($color-variant, 1));\n\n            //Remove 'base' from titles for nicer output\n            @if $subname-temp == ' base' {\n                $subname-temp: unquote('');\n            }\n\n            //Create name by adding the color and color-subname (e.g. blue dark)\n            $fullname-temp: unquote($color + $subname-temp);\n\n            //Add names to lists for later use\n            $color-fullnames: append($color-fullnames, $fullname-temp);\n            $color-subnames:\n                append($color-subnames, unquote(nth($color-variant, 1)));\n            $color-values:\n                append($color-values, nth($color-variant, 2));\n        }\n    }\n\n    //Store color lengths for selector loop\n    $top-colors-len: length($color-names);\n    $sub-colors-len: length($color-subnames) / $top-colors-len;\n    $color-index: 1;\n    $color-loop: 1;\n\n    //Loop through all colors\n    @for $i from 1 through length($color-fullnames){\n\n        //Grab the current color value and name\n        $current-color-value: nth($color-values, $color-index);\n        $current-color-name: nth($color-fullnames, $color-index);\n\n        //Apply it to the selection based on nth-child (using $i)\n        #{$selector}:nth-child(#{$i}){\n            background-color: #{$current-color-value};\n            //Determine if black or white should be used for text color\n            color: #{black-or-white( $current-color-value )};\n\n            //Make first row of colors a little larger\n            @if $i <= $top-colors-len {\n                padding: 2% 1% 2.5%;\n            }\n\n            //Describe the color and show its hex value\n            &:before {\n                content: \"#{$current-color-name}\";\n            }\n            &:after {\n                content: \"#{$current-color-value}\";\n            }\n        }\n\n        //Determine the index of the color to use\n        // This essentially makes the color chosen 1 loop ahead of $i\n        // E.G. if there are 9 top-level colors, $color-index will be 9 ahead of the current $i value\n        $color-index: ($color-index - $color-loop) + ($sub-colors-len + $color-loop);\n\n        // Increase the loop when we've reached the highest value\n        // And reset the color index.\n        @if $color-index > length($color-fullnames) {\n            $color-loop: $color-loop + 1;\n            $color-index: $color-loop;\n        }\n\n    }\n\n    //Base styles\n    #{$selector}{\n        //Width is a percentage of the total top-level colors (minus 1% for margin)\n        width: percentage(1 / $top-colors-len) - 1%;\n        padding: 1%;\n        margin-right: .95%;\n        float: left;\n        overflow: hidden;\n\n        &:before{\n            @include rems(font-size, modular-scale(-1));\n            display: block;\n            white-space: nowrap;\n        }\n\n        &:after{\n            @include rems(font-size, modular-scale(-2));\n            display: block;\n        }\n    }\n\n}\n\n//Harmonize colors\n//Takes all colors in a map and blends them with a secondary color to even them out\n// Should only be used as a tool to create color palletes.\n// Shouldn't be used on every compilation since it can make development fairly abstract.\n@function harmonize-colors(\n    $color-list: null,\n    $blending-mode: 'overlay',\n    $blending-color: null,\n    $amount: null\n) {\n    $temp-name-map: ();\n    $temp-top-map: ();\n    $temp-list: ();\n    $return: null;\n\n    //Make sure non-prefixed blending modes\n    // are appended with the correct function namespace\n    $blending-mode:\n        if(\n            str-contains($blending-mode, 'blend'),\n            $blending-mode,\n            'blend-' + $blending-mode\n        );\n\n    @if type-of($color-list) == 'map' {\n        $color-list: map-add-depth($color-list);\n\n        @each $color, $name in $color-list {\n            @each $key, $value in $name {\n                $value: call(safe-get-function($blending-mode), $blending-color, $value, $amount);\n                $temp-key: ($key: $value);\n                $temp-color: ($color: ($temp-key));\n                $temp-name-map: map-merge($temp-name-map, $temp-color);\n                @debug $temp-name-map;\n            }\n            $temp-top-map: map-merge($temp-top-map, $temp-name-map);\n        }\n\n        $return: map-merge($color-list, $temp-top-map);\n\n    }@else {\n        @each $value in $color-list {\n            $value: call(safe-get-function($blending-mode), $blending-color, $value, $amount);\n            $temp-list: append($temp-list, $value);\n        }\n        $return: $temp-list;\n    }\n\n    @return $return;\n}\n","/* SG\n# Typography/Conversion [[dev]]\n\n##### `@px-to-rems()`\n###### mixin(`$property`, `$sizes`, `$important`: `false`, `$base-font`: `$$base-font-size`)\nTakes a pixel value and creates a property with a `rem` value. If `$$rem-px-fallback` is `true`, a pixel fallback is also included. `$sizes` also accepts 'auto'.\n@alias `@rems()`\n@requires `px-to-rems()`\n\n*/\n\n// REM generator\n// Used to create a property with a rem value and PX fallback\n@mixin px-to-rems($property, $sizes, $important: false, $base-font: $base-font-size) {\n    $important-val: if($important, ' !important', '');\n    $rem-sizes: ();\n    $px-sizes: ();\n    $is-zero: true;\n\n    //Loop through sizes, combining them into single lists\n    @each $size in $sizes {\n        @if $size == '' or $size == null {\n            $size: null;\n            $px-sizes: join($px-sizes, $size, space);\n        }\n        @else if $size == 'auto' or $size == 'normal' {\n            $px-sizes: join($px-sizes, $size, space);\n        }\n        @else {\n            @if $size == 0px {\n                $size: 0; //optimization\n            }\n            @else {\n                $is-zero: false;\n            }\n\n            $px-sizes: join($px-sizes, $size, space);\n            $size: if($size, px-to-rems($size, $base-font), '');\n        }\n\n        $rem-sizes: join($rem-sizes, $size, space);\n    }\n\n    @if $is-zero == false and $rem-px-fallback {\n        #{$property}: #{$px-sizes}#{$important-val};\n    }\n\n    #{$property}: #{$rem-sizes}#{$important-val};\n\n}\n\n//ALIAS: same as above\n@mixin rems($property, $sizes, $important: false, $base-font:$base-font-size) {\n    @include px-to-rems($property, $sizes, $important, $base-font);\n}\n\n\n/* SG\n\n# Typography/Sizing [[dev]]\n\n##### `@type-font-size()`\n###### mixin(`$font-size, $line-height: auto, $font-base:``$$base-font-size`)\nQuickly generate a font-size in rems, with a pixel fallback, based on the value we pass into the mixin. Optionally calculates line-height using `$$base-line-height`.\n\n_`$line-height` also accepts a pixel value and will be converted to a unitless one._\n\n@alias `@font-size()`\n@requires `@px-to-rems()`, `cache()`, `baseline-calc()`\n\n*/\n\n@mixin type-font-size (\n    $font-size,\n    $line-height: 'auto',\n    $font-base: $base-font-size,\n    $important: false\n) {\n    //Create REM-based font-size\n    @include px-to-rems('font-size', $font-size);\n\n    @if $line-height == true or $line-height == 'auto' {\n\n        $line-height: cache(baseline-calc, $font-size, $font-base);\n        line-height: $line-height;\n\n    }\n    @else if type-of($line-height) == 'number' {\n\n        //Convert to unitless\n        @if not unitless($line-height) {\n            @if unit($line-height) == 'px' {\n                $line-height: $line-height / $font-size;\n            }\n            @else {\n                @warn 'Line-height for #{$font-size} must be unitless or in pixel values';\n            }\n        }\n\n        line-height: $line-height;\n\n    }\n    @else if $line-height == 'inherit' or $line-height == 'normal' {\n        line-height: $line-height;\n    }\n}\n//Alias\n@mixin font-size($font-size, $line-height: true, $font-base: $base-font-size, $important: false) {\n    @include type-font-size($font-size, $line-height, $font-base, $important);\n}\n\n@mixin fs($font-size, $line-height: true, $font-base: $base-font-size, $important: false) {\n    @include type-font-size($font-size, $line-height, $font-base, $important);\n}\n\n\n/* SG\n# Typography/Spacing [[dev]]\n\n##### `@type-space()`\n###### mixin(`$properties, $multipliers, $important: false`)\nOutput REM values using the typographic grid. This is the prefered method of adding padding and margins because it enforces consistent spacing around all elements.\n\n**Arguments:**\n* `$properties`: Can be any `CSS` property that accepts a length value (e.g. `rem`). Also accepts multiple properties as a nested list (e.g. `(padding-left, padding-right)`).\n* `$multipliers`: Accepts unitless values that get converted to `rem` units which are a multiple of the typographic grid. Can be multiple values, **separated by spaces**, in the case of `margin` or `padding`.\n* `$important`: Accepts `true` or `!important`.\n\n**Example**\n```scss\n// SCSS input\n.foo {\n    @include type-space(padding, 1 .25 .5 auto, '!important');\n}\n\n// CSS output\n.foo {\n    padding: 24px 8px 12px auto !important;\n    padding: 1.5rem .375rem .75rem auto !important;\n}\n```\n\n@requires `@px-to-rems()`, `str-contains()`\n@alias `@space()`\n\n*/\n\n@mixin type-space(\n    $properties,\n    $multipliers,\n    $important: false,\n    $unit: 'auto'\n) {\n    $multiplier: nth($multipliers, 1);\n    $m-length: length($multipliers);\n    $important: if($important, true, false); //Allow for strings, convert to boolean\n\n    @each $property in $properties {\n        $values: null;\n        $multiple-index: 1;\n\n        @each $multiple in $multipliers {\n\n            @if $multiple == 'auto' {\n                $values: append($values, 'auto');\n                $multiple-index: $multiple-index + 1;\n            }\n            @else {\n                $value: $unit;\n\n                @if $unit == 'auto' {\n                    $value: $vertical-space;\n\n                    //If value is the second or fourth value in a list,\n                    // or is a left, right, or width value,\n                    // multiply by the $horizontal-space\n                    @if ($multiple-index % 2 == 0)\n                    or (\n                    str-contains($property, 'right')\n                    or str-contains($property, 'left')\n                    or str-contains($property, 'width')\n                    ) {\n                        $value: $horizontal-space;\n                    }\n                }\n\n                $value: $value * $multiple;\n                $values: append($values, $value);\n                $multiple-index: $multiple-index + 1;\n            }\n        }\n\n        @include px-to-rems($property, $values, $important);\n\n    }\n}\n\n//Alias\n@mixin space($properties, $multipliers, $important: false, $unit: $vertical-space) {\n    @include type-space($properties, $multipliers, $important, $unit);\n}\n\n\n@function type-space($multipliers) {\n    $base: $horizontal-space;\n\n    $values: ();\n    @each $multiple in $multipliers {\n        $pixel: if($multiple == 'auto', $multiple, $base * $multiple);\n        $multiple: px-to-rems($pixel);\n        $values: join($values, $multiple, space);\n    }\n\n    @return $values;\n}\n\n// Style any number of headings all at once, e.g.:\n//\n//    @include headings(1, 3){color:#BADA55;}\n//\n//    outputs:\n//    h1, h2, h3 {color:#BADA55;}\n//\n// Lifted from inuit.css:\n// github.com/csswizardry/inuit.css/generic/_mixins.scss\n\n$headings-use: 0 !global;\n\n@mixin headings($from: 1, $to: 6, $class-type: null) {\n    //Used for multiple calls to this mixin.\n    // Ensures no double extends.\n    $headings-use: $headings-use + 1 !global;\n\n    %base-headings#{$headings-use} {\n        @content;\n    }\n\n    @if $from >= 1 and $to <= 6 {\n\n        @for $i from $from through $to {\n            $selector: '#{$class-type}h#{$i}';\n            #{$selector} {\n                @extend %base-headings#{$headings-use};\n            }\n        }\n    }\n    @else {\n        @warn 'You need to supply numbers between 1 and 6 for headings mixin to work';\n    }\n}\n","// Framework core\n@import '../sass/tools/t-import';\n\n//Settings\n@import '../../config/sass.config';\n\n/* SG\n# Color Palette\n\n```html_example\n<div class=\"color-block\"></div><div class=\"color-block\"></div><div class=\"color-block\"></div><div class=\"color-block\"></div><div class=\"color-block\"></div><div class=\"color-block\"></div><div class=\"color-block\"></div>\n<div class=\"color-block\"></div><div class=\"color-block\"></div><div class=\"color-block\"></div><div class=\"color-block\"></div><div class=\"color-block\"></div><div class=\"color-block\"></div><div class=\"color-block\"></div>\n<div class=\"color-block\"></div><div class=\"color-block\"></div><div class=\"color-block\"></div><div class=\"color-block\"></div><div class=\"color-block\"></div><div class=\"color-block\"></div><div class=\"color-block\"></div>\n<div class=\"color-block\"></div><div class=\"color-block\"></div><div class=\"color-block\"></div><div class=\"color-block\"></div><div class=\"color-block\"></div><div class=\"color-block\"></div><div class=\"color-block\"></div>\n<div class=\"color-block\"></div><div class=\"color-block\"></div><div class=\"color-block\"></div><div class=\"color-block\"></div><div class=\"color-block\"></div><div class=\"color-block\"></div><div class=\"color-block\"></div>\n<div class=\"color-block\"></div><div class=\"color-block\"></div><div class=\"color-block\"></div><div class=\"color-block\"></div><div class=\"color-block\"></div><div class=\"color-block\"></div><div class=\"color-block\"></div>\n<div class=\"color-block\"></div><div class=\"color-block\"></div><div class=\"color-block\"></div><div class=\"color-block\"></div><div class=\"color-block\"></div><div class=\"color-block\"></div><div class=\"color-block\"></div>\n```\n*/\n@include color-palette-output('.color-block');\n\n.color-block:before {\n\ttext-transform: capitalize;\n}\n\n.color-block:after {\n\tletter-spacing: 0.1em;\n}\n\n\n/* SG\n# Grid/Basics\n\n@priority 1\n\nThis is an example of a flex-box-based grid system with an inline-block fallback.\n\nAll grids start with a `grid` or `row` element, with nested `grid_item` or `column` element(s). All columns start at 100% width, so adding width classes to columns is required to make them to sit next to each other.\n\n_NOTE: The following width classes are out of the box. If you'd like to use your own classes for widths and grid items, then set `$grid-silent-classes` is set to true and use extends for style inheritence._\n\n```html_example\n<div class=\"grid\">\n    <div class=\"grid_item\">Column (100% width)</div>\n\n    <div class=\"grid_item one_half\">1/2 Column</div>\n    <div class=\"grid_item one_half\">1/2 Column</div>\n\n    <div class=\"grid_item one_third\">1/3 Column</div>\n    <div class=\"grid_item one_third\">1/3 Column</div>\n    <div class=\"grid_item one_third\">1/3 Column</div>\n\n    <div class=\"grid_item one_fourth\"> 1/4 Column</div>\n    <div class=\"grid_item one_quarter\">1/4 Column</div>\n    <div class=\"grid_item one_fourth\"> 1/4 Column</div>\n    <div class=\"grid_item one_fourth\"> 1/4 Column</div>\n</div>\n```\n*/\n\n/* SG\n# Grid/Automatic columns\n\n@priority 2\n\nGrids/rows set with a `grid_auto` class will create columns that have automatic widths based on their content.\n\nYou can also combine automatic columns with width-based one. The automatic columns with fill the space around the set-width column.\n\n_Note: Flexbox handles this a little differently than inline-block, so check older browsers before using this style of grid to be sure you're getting a similar result._\n\n```html_example\n<div class=\"grid grid_auto\">\n    <div class=\"grid_item\">Auto Column</div>\n    <div class=\"grid_item\">Auto Column</div>\n    <div class=\"grid_item\">Auto Column</div>\n    <div class=\"grid_item\">Auto Column</div>\n    <div class=\"grid_item one_third\">Set Width (1/3)</div>\n    <div class=\"grid_item\">Auto Column</div>\n    <div class=\"grid_item\">Auto Column</div>\n    <div class=\"grid_item\">Auto Column</div>\n    <div class=\"grid_item one_half\">Set Width (1/2)</div>\n    <div class=\"grid_item\">Auto Column</div>\n    <div class=\"grid_item\">Auto Column</div>\n    <div class=\"grid_item\">Auto Column</div>\n</div>\n```\n*/\n\n/* SG\n# Grid/Gutter Control\n\n@priority 3\n\nGutters (spaces between grid items) default to 1.5rem. However, there are three grid gutter classes to alter this behavior.\n\n* `grid_full` will set gutters to 0.\n* `grid_wide` will double the width of gutters.\n* `grid_narrow` will halve the width of gutters.\n\n```html_example\n<div class=\"grid grid_full\">\n    <div class=\"grid_item one_third\">No gutter</div>\n    <div class=\"grid_item one_third\">No gutter</div>\n    <div class=\"grid_item one_third\">No gutter</div>\n</div>\n<div class=\"grid grid_wide\">\n    <div class=\"grid_item one_third\">Wide gutter</div>\n    <div class=\"grid_item one_third\">Wide gutter</div>\n    <div class=\"grid_item one_third\">Wide gutter</div>\n</div>\n<div class=\"grid grid_narrow\">\n    <div class=\"grid_item one_third\">Narrow gutter</div>\n    <div class=\"grid_item one_third\">Narrow gutter</div>\n    <div class=\"grid_item one_third\">Narrow gutter</div>\n</div>\n```\n*/\n\n@include grid-init($silent:false, $important: true);\n\n$grid-gutter-rems: rems($grid-gutter); //Required so\n\n/* Style-guide-specific grid styling */\n\n.sg-body .column,\n.sg-body .grid_item {\n    @include type-space((padding-top, padding-bottom), 1);\n    @include type-space(margin-top margin-bottom, .5);\n    position: relative;\n    text-align: center;\n    @include font-size($type-small-size, false);\n\n    &:before { //Adds gray background to grid items\n        content: \"\";\n        position: absolute;\n        display: block;\n        width: calc(100% - #{$grid-gutter-rems});\n        left: $grid-gutter-rems;\n        top: 0;\n        bottom: 0;\n        background-color: rgba(color(links),.1);\n    }\n}\n\n.grid_full .grid_item:before {\n    width: 100%;\n    left: 0;\n}\n\n.grid_wide .grid_item:before {\n    width: calc(100% - #{$grid-gutter-rems*2});\n    left: #{$grid-gutter-rems*2};\n}\n\n.grid_narrow .grid_item:before {\n    width: calc(100% - #{$grid-gutter-rems/2});\n    left: #{$grid-gutter-rems/2};\n}\n\n/******Base Layout******/\n\n.sg-body {\n    margin: 0;\n}\n\n.sg-wrap {\n    display: block;\n    width: 100%;\n    min-height: 100vh;\n    margin: 0;\n    overflow: auto;\n}\n\n.sg-menu {\n    position: absolute;\n    vertical-align: top;\n    background-color: color(styleguide, darkest);\n    width: 18rem;\n    top: 0;\n    left: 0;\n    bottom: 0;\n    font-size: .9em;\n}\n\n.sg-main {\n    padding-left: 18rem;\n    transition: padding .15s ease-out;\n}\n\n.sg-category {\n    padding-left: 5%;\n    padding-right: 5%;\n    overflow: auto;\n}\n\n.sg-category_wrap {\n    max-width: 58em; /* Should be wider for universal box-sizing: border-box */\n    margin: auto;\n}\n\n.sg-example {\n    width: 110%;\n    margin-left: -5%;\n}\n\n@media only screen and (max-width: 1100px) {\n\n    .sg-menu {\n        width: 10rem;\n    }\n\n    .sg-main {\n        padding-left: 10rem;\n    }\n}\n\n@media only screen and (max-width: 700px) {\n    .sg-menu {\n        width: 0;\n    }\n\n    .sg-main {\n        padding-left: 0;\n    }\n}\n\n\n/******Menu******/\n.sg-menu {\n    transition: all .2s ease-out;\n    overflow: auto;\n}\n\n.sg_menu_list,\n.sg-menu_item {\n    padding: 0;\n    margin: 0;\n    position: relative;\n}\n\n.sg-menu_list {\n    list-style: none;\n    padding: 0;\n    color: rgba(color(styleguide, lighter), 0.1); /* Used for border colors */\n}\n\n.sg-menu_section {\n    border-top: 1px solid;\n}\n\n.sg-menu_article > .sg-menu_link {\n    color: rgba(color(styleguide, light), .65);\n}\n\n.sg-category-active {\n    background: rgba(color(styleguide), .04);\n}\n\n/* Menu links */\n.sg-menu_link {\n    display: block;\n    padding: .75rem 1.65rem .65rem;\n    text-decoration: none;\n    color: color(styleguide, light);\n}\n\n.sg-menu_link:hover,\n.sg-menu_link:focus {\n    background-color: rgba(color(styleguide, light), .05);\n    color: color(styleguide, light);\n}\n\n.sg-toc-active > .sg-menu_link {\n    background-color: rgba(color(styleguide, lighter), .1);\n}\n\n.sg-menu_section > .sg-menu_link {\n    color: color(styleguide, highlight);\n}\n\n.sg-menu_article .sg-menu_link {\n    padding-left: 2.5rem;\n    padding-right: 2rem;\n}\n\n@media only screen and (max-width: 1100px) {\n    .sg-menu_link {\n        padding-left: .5rem;\n    }\n\n    .sg-menu_article .sg-menu_link {\n        padding-left: .75rem;\n    }\n}\n\n.sg-menu_article {\n    display: none;\n}\n\n.sg-category-active .sg-menu_article,\n.sg-menu_article.sg-toc-active {\n    display: block;\n}\n\n.sg-category-active > .sg-menu_link {\n    border-left: 2px solid color(styleguide, highlight);\n    text-indent: -2px;\n}\n\n/******Project Logo******/\n\n.sg-logo {\n    font-weight: normal;\n    background-color: color(styleguide, highlight);\n    background-image: url('images/logo.svg');\n    background-attachment: fixed;\n    background-size: 100vw;\n    color: #fff;\n    margin: 0;\n    font-size: 1.5em;\n}\n\n.sg-logo:hover,\n.sg-logo:focus {\n    background-color: lighten(color(styleguide, highlight), 8%);\n}\n\n.sg-logo .sg-menu_link {\n    color: inherit;\n    padding-top: 1em;\n    padding-bottom: .75em;\n    opacity: 0;\n    transition: opacity .3s ease-out;\n}\n\n.sg-menu[style*=\"fixed\"] .sg-logo .sg-menu_link {\n    opacity: 1;\n}\n\n/******Headings******/\n\n.sg-heading-section {\n    color: color(styleguide);\n    font-size: 2.8587rem;\n    line-height: 1.57414;\n    font-weight: normal;\n}\n\n.sg-heading-category {\n    color: color(styleguide, dark);\n    font-weight: normal;\n    font-size: 1.6em;\n}\n\n.sg-heading-category-article,\n.sg-heading-article {\n    @include font-size($type-h3-size, $type-h3-lh);\n}\n\n.sg-heading-article {\n    color: color(styleguide, dark);\n    font-weight: normal;\n}\n\n.sg-heading .sg-code {\n\tcolor: #435270;\n}\n\n.sg-heading-6 {\n    font-weight: normal;\n}\n\n.sg-heading-5 + .sg-heading-6 {\n    margin-top: -1rem;\n    padding-bottom: .25rem;\n}\n\n\n/******Section, Category & Article Layout******/\n\n.sg-section:nth-child(even) {\n    padding-bottom: 1.5em;\n}\n\n.sg-section:first-child {\n    padding-top: 10rem;\n}\n\n.sg-section:first-child .sg-category {\n    border-top: 0;\n}\n\n/* Article spacing */\n\n.sg-article_comment,\n.sg-example {\n    margin-bottom: 1.5rem;\n}\n\n.sg-section {\n    padding-bottom: 3rem;\n}\n\n.sg-section:nth-child(odd) {\n\tbackground-color: rgba(224,229,235,.3);\n}\n\n.sg-category:nth-child(odd):last-child {\n\t@include type-space(margin-bottom, -2);\n    @include type-space(padding-bottom, 3);\n}\n\n.sg-category + .sg-category {\n\tbackground-color: transparent;\n\tborder-top: 1px solid rgb(224,229,235);\n}\n\n.sg-article {\n    margin-bottom: 3em;\n}\n\n.sg-category,\n.sg-article {\n    padding-top: 3em;\n}\n\n.sg-article_comment {\n    margin-top: -1.5rem;\n}\n\n.sg-article_head {\n    padding-bottom: 1.5em;\n}\n\n.sg-example {\n    background-color: rgba(#fff,.8);\n    border-top: 1px solid #fff;\n}\n\n.sg-example:before {\n    content: 'Example';\n    background-color: #EDF0F2;\n    color: #647582;\n    display: inline-block;\n    font-size: .9em;\n    padding: .45em .5em;\n    margin-bottom: .5em;\n    margin-left: 1px;\n    clear: both;\n}\n\n.sg-example_wrap {\n    padding: .75em 1.25em;\n    position: relative;\n}\n\n/* Clearfix */\n.sg-example_wrap:after {\n    content: \" \";\n    display: table;\n    height: 0;\n    width: 100%;\n}\n\n.sg-example_wrap:after {\n    clear: both;\n}\n\n.sg-markup_wrap {\n    margin: 0;\n}\n\n.sg-markup-block {\n    border-top: 1px solid color(styleguide, lightest);\n}\n\n.sg-codespan {\n    color: color(styleguide);\n}\n\n.sg-file {\n    color: color(styleguide);\n}\n\n.sg-codeblock {\n    margin-bottom: 1.5rem;\n}\n\n.sg-code-meta + .sg-code-meta {\n    margin-top: -1.5rem;\n}\n\n.sg-code-meta:before {\n\tcontent: attr(data-code-meta)\": \";\n\ttext-transform: capitalize;\n}\n\n\n/* Highlight.js Code Blocks */\n#styleguide .sg-markup_wrap,\n#styleguide .sg-markup code {\n    overflow: auto;\n}\n#styleguide .sg-markup_wrap {\n    max-height: 30em;\n}\n\n#styleguide .sg-markup code {\n    display: block;\n    word-wrap: normal;\n    white-space: pre;\n    padding: 1em;\n}\n\n/* Custom background color to match nav. Overwrites highlight.js default */\n#styleguide .hljs {\n    background-color: #40476B;\n    font-size: .9em;\n}\n#styleguide .hljs-comment {\n    color: #8aaeb7;\n}\n\ncode {\n    font-family: 'Roboto Mono', monospace;\n}\n","/* SG\n# Grid System/Mixins [[dev]]\n\n##### `@grid-setup()`\n###### mixin(`$silent:` `$$grid-silent-classes`)\nCreates basic grid classes (listed below), called by `@grid-init()`.\n\n_Note: `[% || .]` denotes a class that is either silent(`%`) or standard CSS(`.`). Based on the `$$grid-silent-classes` setting._\n\n* ###### `%grid_reset`\n Useful for resetting the grid's effects without making full grid items.\n\n* ###### `[% || .]grid`\n Wrapper class for grid widths. Puts a negative left margin of one unit. When not using floats, adds appropriate letter-spacing (for inline-block-based grid).\n\n* ###### `[% || .]grid_item`\n Sets up a grid column. Uses column padding inherited from parent `%/.grid`.\n\n* ###### `[% || .]grid_rev`\n Makes grid columns start from the right.\n\n* ###### `[% || .]grid_right`\n Makes all grid columns align to the right.\n\n* ###### `[% || .]grid_center`\n Makes all grid columns align to the center.\n\n* ###### `[% || .]grid_middle`\n Makes all grid columns vertical align to the middle.\n\n* ###### `[% || .]grid_bottom`\n Makes all grid columns vertical align to the bottom.\n\n* ###### `[% || .]grid_full`\n Eliminates padding between grid columns.\n\n* ###### `[% || .]grid_narrow`\n Reduces the padding between grid columns.\n\n* ###### `[% || .]grid_wide`\n Increases the padding between grid columns.\n\n*/\n\n\n@mixin grid-setup($silent: $grid-silent-classes) {\n\n    $class-type: if($silent, \"%\", \".\");\n\n    %grid_reset {\n        letter-spacing: normal;\n        word-spacing: normal;\n    }\n\n    //*------------------------------------\n    //    $GRID SETUP\n    //*------------------------------------\n\n    #{$class-type}grid {\n        @include grid-row();\n    }\n\n    #{$class-type}grid_item {\n        @include grid-item($grid-columns);\n    }\n\n    // Special class for grid items that need to behave like both grids and grid__items.\n    #{$class-type}grid_reset_item {\n        @include grid-item($grid-columns);\n        @extend #{$class-type}grid;\n    }\n\n    //\n    // Reversed grids allow you to structure your source in the opposite order to\n    // how your rendered layout will appear. Extends `.grid`.\n    //\n    #{$class-type}grid_rev,\n    #{$class-type}grid_reverse{\n        @if $grid-floats {\n            @extend %clearfix;\n\n            > #{$class-type}grid_item{\n                float: right;\n            }\n        }\n        @if $grid-inline-block or\n            $grid-flex\n        {\n            direction: rtl;\n            text-align: left;\n\n            > #{$class-type}grid_item{\n                direction: ltr;\n                text-align: left;\n            }\n        }\n    }\n\n\n    //\n    // Align the entire grid to the right. Extends `.grid`.\n    //\n    #{$class-type}grid_right {\n        @if $grid-inline-block {\n            text-align: right;\n\n            > #{$class-type}grid_item {\n                text-align: left;\n            }\n        }\n        @if $grid-flex {\n            justify-content: flex-end;\n        }\n    }\n    //\n    // Centered grids align grid items centrally without needing to use push or pull\n    // classes. Extends `.grid`.\n    //\n    #{$class-type}grid_center{\n\n        @if $grid-flex {\n            justify-content: center;\n        }\n\n        @if $grid-inline-block {\n            text-align: center;\n\n            > #{$class-type}grid_item {\n                text-align: left;\n            }\n        }\n    }\n    //\n    //\n    // Align grid cells vertically (`.grid--middle` or `.grid--bottom`). Extends\n    // `.grid`.\n    //\n    #{$class-type}grid_middle {\n\n        > #{$class-type}grid_item {\n            @if $grid-flex {\n                align-self: center;\n            }\n            vertical-align: middle;\n        }\n    }\n\n    #{$class-type}grid_bottom{\n\n        > #{$class-type}grid_item {\n            @if $grid-flex {\n                align-self: flex-end;\n            }\n            vertical-align: bottom;\n        }\n    }\n\n\n    // Gutterless grids have all the properties of regular grids, minus any spacing.\n    // Extends `.grid`.\n\n    #{$class-type}grid_full{\n        margin-left: 0;\n\n        > #{$class-type}grid_item {\n            padding-left: 0;\n        }\n    }\n\n\n    //\n    // Create grids with narrower gutters. Extends `.grid`.\n    //\n    #{$class-type}grid_narrow {\n        @include type-space(margin-left, -.5, $unit: $grid-gutter);\n\n        > #{$class-type}grid_item {\n            @include type-space(padding-left, .5, $unit: $grid-gutter);\n        }\n    }\n\n\n    //\n    // Create grids with wider gutters. Extends `.grid`.\n    //\n    #{$class-type}grid_wide {\n        @include type-space(margin-left, -2, $unit: $grid-gutter);\n\n        > #{$class-type}grid_item {\n            @include type-space(padding-left, 2, $unit: $grid-gutter);\n        }\n    }\n\n    //\n    // Cause layout items to take up a non-explicit amount of width.\n    //\n    #{$class-type}grid_auto {\n\n        @if $grid-inline-block {\n            text-align: justify;\n\n            &:after {\n                content: \" \";\n                display: inline-block;\n                width: 100%;\n                height: 1px;\n            }\n        }\n\n        & > #{$class-type}grid_item,\n        #{$class-type}grid_item_auto {\n            width: auto;\n\n            @if $grid-inline-block {\n                text-align: left;\n            }\n\n            @if $grid-flex {\n                flex-grow: 1;\n                flex-basis: auto;\n            }\n        }\n    }\n}\n\n\n/* SG\n# Grid System/Mixins [[dev]]\n\n##### `@grid-row()`\n###### mixin()\nCreates a grid container (row) based on your grid configuration.\n@requires `@type-space()`\n\n##### `@grid-item()`\n###### mixin(`$columns: $grid-columns`)\nCreates a grid item (column) based on your grid configuration set to a width based on the `$columns` passed in.\n@requires `@type-space()`, `@grid-width()`\n*/\n\n$grid-columns:           12      !default;\n$grid-gutter:            32px    !default;\n$grid-silent-classes:\t false   !default;\n$grid-push:              true    !default;\n$grid-pull:              true    !default;\n$grid-floats:            false   !default;\n$grid-flex:              true    !default;\n$grid-inline-block:      true    !default;\n$grid-markup-fix:        false   !default;\n$grid-letter-space-fix:  -0.45em !default;\n\n$breakpoint-has-widths: ('smalls', 'small', 'lap', 'bigs') !default;\n$breakpoint-has-push:   ('smalls', 'small', 'lap', 'bigs') !default;\n$breakpoint-has-pull:   ('smalls', 'small', 'lap', 'bigs') !default;\n\n@mixin grid-row() {\n    // 1. Allow the grid system to be used on lists.\n    // 2. Remove any margins and paddings that might affect the grid system.\n    // 3. Apply a negative `margin-left` to negate the columns’ gutters.\n\n    list-style: none;                // [1]\n    margin: 0;                       // [2]\n    padding: 0;                      // [2]\n    @include type-space(margin-left, -1, $unit:$grid-gutter);\n\n    @if $grid-inline-block {\n        letter-spacing: $grid-letter-space-fix;\n\n        // Opera hack\n        .opera:-o-prefocus,\n        & {\n            word-spacing: $grid-letter-space-fix;\n        }\n    }\n\n    @if $grid-flex {\n        display: flex;\n        flex-wrap: wrap;\n    }\n\n    @if $grid-floats {\n        @extend %clearfix;\n    }\n}\n\n\n@mixin grid-item($columns: $grid-columns) {\n    // 1. Space columns apart.\n    // 2. Cause columns to stack side-by-side.\n    // 3. Align columns to the tops of each other.\n    // 4. Required to combine fluid widths and fixed gutters.\n\n    @include type-space(padding-left, 1, $unit:$grid-gutter); // [1]\n    width: 100%;\n    min-height: 1px;\n\n    @if $grid-inline-block {\n        display: inline-block;            // [2]\n        vertical-align: top;              // [3]\n\n        @if $grid-markup-fix != true {    // [5]\n            letter-spacing: normal;\n            word-spacing: normal;\n        }\n    }\n\n    @if $grid-floats {\n        float: left;                     // [2]\n    }\n\n    @if $grid-flex {\n        flex: 0 0 #{percentage($columns/$grid-columns)};\n\n        //Forces flex grid to behave like inline-block\n        @if $grid-inline-block != true {\n            flex-grow: 1;\n        }\n    }\n\n    @include grid-width($columns, $grid-columns);\n}\n\n\n/* SG\n##### `@grid-init()`\n###### mixin(`$silent:` `$$grid-silent-classes`, `$important:false`)\nCreates responsive grid classes by running through all the grid-setup mixins. Uses the media-queries defined in the `$breakpoint-has-` variables to create media-query-scoped classes.\n@requires `@grid-classes()`, `@width-classes()`, `@push-classes()`, `@pull-classes()`\n\n*/\n\n@mixin grid-init($silent: $grid-silent-classes, $important: false) {\n\n    @if ($grid-inline-block == false and $grid-floats == false and $grid-flex == false) {\n        @warn 'No grid type selected. Please make sure to set grid-inline-block, -floats, or -flex to true.'\n    }\n\n    @include grid-classes($silent);\n\n    @include width-classes($silent, $important);\n\n    @if $grid-push {\n        @include push-classes($silent, $important);\n    }\n\n    @if $grid-pull {\n        @include pull-classes($silent, $important);\n    }\n}\n\n\n/* SG\n##### `@grid-classes()`\n###### mixin(`$silent:` `$$grid-silent-classes`)\nRuns `@grid-setup()`.\n@requires `@grid-setup()`\n\n##### `@width-classes()`\n###### mixin(`$silent:` `$$grid-silent-classes`, `$important: false`)\nRuns `@width-setup()`, looping across all breakpoints in `$$breakpoint-has-widths`. Creates classes with `width` property values (`flex-basis` and `max-width` for flex-based grids) based on the grid.\n@requires `@media-query()`, `@width-setup()`\n\n##### `@push-classes()`\n###### mixin(`$silent:` `$$grid-silent-classes`, `$important: false`)\nRuns `@width-setup()`, looping across all breakpoints in `$$breakpoint-has-push`. Creates classes with `push_` and `left` property values based on the grid.\n@requires `@media-query()`, `@width-setup()`\n\n##### `@pull-classes()`\n###### mixin(`$silent:` `$$grid-silent-classes`, `$important: false`)\nRuns `@pull-setup()`, looping across all breakpoints in `$$breakpoint-has-pull`. Creates classes with `pull_` and `right` property values based on the grid.\n@requires `@media-query()`, `@width-setup()`\n\n*/\n\n@mixin grid-classes($silent: $grid-silent-classes) {\n    @include grid-setup($silent);\n}\n\n@mixin width-classes($silent: $grid-silent-classes, $important: false) {\n    //Include flex-basis (and max-width) for flex-box grids\n\n    $column-props: if($grid-flex, (\"width\" \"max-width\" \"flex-basis\"), \"width\");\n\n    @include width-setup(\"\", $silent, $column-props, $important);\n\n    // Our responsive classes, if we have enabled them.\n    @each $name in $breakpoint-has-widths {\n        @include media-query($name) {\n           @include width-setup(\"#{$name}#{$breakpoint-namespace-character}\", $silent, $column-props, $important);\n        }\n    }\n}\n\n@mixin push-classes($silent: $grid-silent-classes, $important: false) {\n    @include width-setup(\"push_\", $silent, \"left\");\n\n    @each $name in $breakpoint-has-push {\n        @include media-query($name) {\n           @include width-setup(\"#{$name}#{$breakpoint-namespace-character}push_\", $silent, \"left\", $important);\n        }\n    }\n}\n\n@mixin pull-classes($silent: $grid-silent-classes, $important: false) {\n\n    @include width-setup(\"pull_\", $silent, \"right\", $important);\n\n    @each $name in $breakpoint-has-pull {\n        @include media-query($name) {\n           @include width-setup(\"#{$name}#{$breakpoint-namespace-character}pull_\", $silent, \"right\", $important);\n        }\n    }\n}\n","/* SG\n# Config/Typography Settings [[dev]]\n\n##### `$$base-font-size`\n###### Pixel value\nFont size all other values will use for calculation. Will be converted to `rems`.\n\n##### `$$base-line-height`\n###### Pixel value\nLine-height for base font-size. Will be used to determine the vertical spacing values when `type-space()` is used.\n\n##### `$$font-looseness`\n###### Percentage\nWhat to base the tightness/looseness of automatically-generated `line-heights`.\n\n##### `$$auto-scale-type`\n###### Boolean\nUses `$$scale-ratio` to create font sizes for headings starting from the `$$base-font-size`. Overwrites `$$type-[h#]-size`.\n\n##### `$$scale-ratio`\n###### Numeric (float)\nUsed for `$$auto-scale-type` and for `modular-scale()`.\n\n##### `$$rem-px-fallback`\n###### Boolean\nDetermines whether `rems()` conversion includes a pixel-value fallback for older browsers like IE8.\n\n##### `$$indented-paragraphs`\n###### Boolean\nDetermines whether to generate css for paragraphs with a text indent, rather than paragraphs with margins between them.\n\n*/\n\n$base-font-size:            16px;\n$base-line-height:          24px;\n$font-looseness: \t\t\t15%;\n$auto-scale-type:           false;\n$scale-ratio:               1.35;\n\n$vertical-space:\t\t\t$base-line-height; //Maintains best vertical rhythm\n$horizontal-space: \t\t\t$base-line-height;\n\n$rem-px-fallback: \t\t\tfalse;\n\n$indented-paragraphs:       false;\n\n\n\n/* SG\n# Config/Typography Settings [[dev]]\n\n##### `$$type-[h#]-size`\n###### List (pixel value [, pixel or unitless value])\nVariables used to generate heading (and small) font-sizes and line-heights. A secondary value will force the line-height to that base-value.\n\n_NOTE: First value must be pixel values(or a function that generates a pixel value like `modular-scale()`), but the optional secondary value can be unitless._\n*/\n\n\n$type-h1-size:           (modular-scale(6));\n$type-h2-size:           (modular-scale(5));\n$type-h3-size:           (modular-scale(4));\n$type-h4-size:           (modular-scale(3));\n$type-h5-size:           (modular-scale(2));\n$type-h6-size:           (modular-scale(1));\n$type-small-size: \t\t (ceil(modular-scale(-1)));\n\n\n/* SG\n# Config/Typography Settings [[dev]]\n\n##### `$$primary-font-stack`, `$$secondary-font-stack`, `$$monospace-font-stack`, `$$icon-font-stack`\n###### String\nUsed wherever font-families are declared. Use `null` if nothing exists.\n\n##### `$$use-web-fonts`\n###### Boolean\nWhether to generate `@font-face` values based on `$$font-file-name` (and the other `$font-` variables).\n\n##### `$$font-file-name`\n###### List (string)\nUses for automatically generated `@font-face` declarations. Describes the filename as well as the font-family name reference. _File names and @font-face values must be the same (e.g. 'opensans' and 'opensans.ttf').**Casing matters**._\n\n##### `$$font-weights`\n###### List (nested)\nEach parenthesis corresponds to each name in `$$font-file-name`. Determines how many `@font-face` weights are generated per font.\n\n##### `$$font-italics`\n###### List (nested) (boolean)\nCorresponds to each value in `$$font-weights`. (e.g. if `$font-weights: (400,700),(200,400)` and `$font-italics: (true),(false,true)` then the first font will have italics in the 400 and 700 weights while second font will have italics in the 400 weight).\n\n##### `$$font-include-woff2`\n###### Boolean (list)\nDetermines whether woff2 formats be included in the `@font-face` generation. Can be a list if each font has different values (not recommended since woff2 is the most performant font-file format).\n\n##### `$$font-include-eot`\n###### Boolean (list)\nDetermines whether to generate `@font-face` values that point at an .eot file. Fallback for IE8.\n\n*/\n\n\n$primary-font-stack:      \t\"opensans\", \"Helvetica Neue\", \"Helvetica\", \"Arial\", sans-serif;\n\n$secondary-font-stack:     \t\"Asap\", \"Garamond\",\"Baskerville\", \"Baskerville Old Face\", \"Hoefler Text\", \"Times New Roman\", serif;\n\n$monospace-font-stack: \t\t\"Consolas\", \"Andale Mono WT\", \"Andale Mono\", \"Lucida Console\", \"Lucida Sans Typewriter\", \"DejaVu Sans Mono\", \"Bitstream Vera Sans Mono\", \"Liberation Mono\", \"Nimbus Mono L\", \"Monaco\", \"Courier New\", \"Courier\", monospace;\n\n$icon-font-stack: \t\t\tnull;\n\n//Custom web fonts\n$use-web-fonts: \t\ttrue;\n//Relative path to fonts from CSS file\n$font-file-location: \t'/public/fonts';\n$font-file-name:        (\"Asap\", 'opensans');\n$font-weights:          (400 , 700 ),  (200,  400,  700 );\n$font-italics:          (true, true),  (true, true, true);\n\n$font-include-woff2:    (false, false);\n$font-include-eot: \t\tfalse;\n\n\n/* SG\n# Config/Responsive Settings [[dev]]\n\n##### `$$max-site-width`\n###### Pixel value\nMaximum desktop width for the site wrapper.\n_This value is also useful as a breakpoint, since this is the point at which your site is going to squish._\n\n##### `$$max-content-width`\n###### Pixel value\nMaximum width for content set at the `$$base-font-size`. This should be set to whatever creates the ideal line-length for standard content (Usually 45-75 characters).\n_Also useful as a breakpoint, since it is typical that your viewport is now smaller than your ideal line-length._\n\n##### `$$max-wide-content-width`\n###### Pixel value\nSimilar to `$$max-content-width`, but for type that might be a little larger, but smaller than your maximum site width(`$$max-site-width`). Useful for hero-style text treatments and content blocks that need a bit of constraint.\n\n*/\n\n$max-site-width:         1360px;\n\n$max-content-width: \t 690px;\n\n$max-wide-content-width: 910px;\n\n\n/* SG\n# Config/Breakpoints [[dev]]\n\n##### `$$breakpoints`\n###### Map (`breakpoint-name: 'breakpoint-value'`)\nSets up variables for media-queries. Used in `@media-query()`.\n\n_Note: It's usually good to convert your pixel values to ems to ensure best browser behavior. Can be accomplished via `#{ems(10px)}`_\n\n**Example**\n```scss\n$breakpoints: (\n  'small':'(min-width: 320px)',\n  'bigs':'(min-width: 850px)'\n);\n```\n*/\n\n$breakpoints: (\n    //Mostly phones\n    'smalls': '(max-width:#{ems($max-wide-content-width)})',\n\n    //Small Phones\n    'small': '(max-width: #{ems($max-content-width)})',\n\n    //Large (Modern) phones/phablets\n    'smallish': '(min-width: #{ems($max-content-width+1px)}) and (max-width: #{ems($max-wide-content-width)})',\n\n    //Tablets, Desktops and larger\n    'bigs': '(min-width: #{ems($max-wide-content-width+1px)})',\n\n    //Mostly Tablets and small laptops. Overrides Bigs\n    'lap': '(min-width: #{ems($max-wide-content-width + 1px)}) and (max-width: #{ems($max-site-width)})',\n\n    //Large Tablets and Desktops. Overrides Bigs.\n    'desk': '(min-width: #{ems($max-site-width)})'\n);\n\n\n/* SG\n# Config/Grid Settings [[dev]]\n\n##### `$$grid-columns`\n###### Number\nBase number of grid columns to be generated. Note that any column number will include all fractions of the fewer columns. For instance, a 12-column grid would also include all fractions of 1-12 (including things like three-sevenths).\n\n##### `$$grid-gutter`\n###### Pixel value\nSpace between grid items. Also used in `type-space()` for horizontal spacing units.\n\n##### `$$grid-silent-classes`\n###### Boolean\nIf set to false, actual grid classes will be output to CSS.\n\n##### `$$grid-push`, `$$grid-pull`\n###### Boolean\nDetermines whether to include extra grid classes for positional grid modifiers.\n*/\n\n$grid-columns:           13;\n$grid-gutter:            32px;\n$grid-silent-classes:\t true;\n$grid-push:              true;\n$grid-pull:              true;\n\n\n/* SG\n##### `$$grid-inline-block`\n###### Boolean\nCreate grids using an inline-block-based layout.\n\n##### `$$grid-markup-fix`\n###### Boolean\n**Only applicable to inline-block grid.** If set to `true`, html must have no white space (or comments) between grid items. Almost always set to `false`.\n\n##### `$$grid-letter-space-fix`\n###### em value\n**Only applicable to inline-block grid.** If `$$grid-markup-fix` is not used, then a negative `em` value must be set to remove whitespace between columns. Usually, `-0.45em` works, but this should be adjusted based on the natural width of the font-family set on the body element.\n\n##### `$$grid-flex`\n###### Boolean\nIf set to `true`, the grid will add markup for a flexbox-based layout. Can be combined with an inline-block-based grid to provide an older browser fallback.\n\n##### `$$grid-floats`\n###### Boolean\nIf set to `true`, the grid uses floats-based layout. **This is usually not recommended since inline-block and flexbox are much are more flexible.**\n*/\n\n$grid-inline-block:      true;\n$grid-markup-fix:        false;\n$grid-letter-space-fix:  -0.45em;\n\n$grid-flex:              true;\n$grid-floats:            false;\n\n\n/* SG\n##### `$$breakpoints-has-widths`, `$$breakpoints-has-push`, `$$breakpoints-has-pull`\n###### List (string)\nDetermines what classes (widths, pushes, pulls) get generated at `$$breakpoints`. The list's order determines the output order. This is useful if you want one breakpoint to override another.\n*/\n\n$breakpoint-has-widths: ('smalls', 'small', 'smallish', 'bigs', 'lap', 'desk');\n$breakpoint-has-push:   ('smalls', 'small', 'smallish', 'bigs', 'lap', 'desk');\n$breakpoint-has-pull:   ('smalls', 'small', 'smallish', 'bigs', 'lap', 'desk');\n\n\n/* SG\n# Config/Utility Class Settings [[dev]]\n\n##### `$$breakpoint-namespace-character`\n###### String\nUsed to define what character comes after an auto-generated responsive class. A setting of '_' would create classes like `smalls_space-v` whereas a '@' would create classes like `smalls@space-v`.\n*/\n\n$breakpoint-namespace-character: '_';\n\n/* SG\n# Config/Utility Class Settings [[dev]]\n\n##### `$$display-classes`\n###### Map (string: string)\nVariable used to generate display classes. Key value pairs determine the class name and the display value.\n\n**Example**\n```scss\n//SCSS input\n$display-classes: ('show':'block');\n\n//CSS output\n.show { display: block; }\n```\n\n##### `$$spacing-classes`\n###### Map (`string: string`)\nVariable used to generate utility (override) spacing classes. Classes are created via `@spacing-utilities()`.\n\n**Keys and Values**\n* 'directions': Direction class suffixes.\n* 'units': Numeric multiples (e.g. `2` or `-1`) of your spacing units (`$$horizontal-space` and `$$vertical-space`).\n* 'properties': Class name aliases for padding and margin.\n\n**Example**\n```scss\n//SCSS Input\n    $display-classes: (\n        'directions': (\n            '-t': 'top',\n            '-r': 'right',\n            '-v': 'top' 'bottom'\n        ),\n        'units': (\n            '-2': 2,\n            '-neg': -1\n        ),\n        'properties': (\n            'pad': 'padding',\n            'margin': 'space'\n        )\n    );\n\n//CSS output\n    // Assume spacing units are 1rem, for simplicity\n    .space-t-2, .space-v-2 { margin-top: 2rem; }\n    .space-v-2 { margin-bottom: 2rem; }\n    .space-r-2 { margin-right: 2rem; }\n    .space-t-neg { margin-top: -1rem; }\n    .space-r-neg { margin-right: -1rem; }\n\n    .pad-t-2 { padding-top: 2rem; }\n    .pad-r-2 { padding-right: 2rem;}\n    //--Negative padding classes filtered out since they are invalid---//\n\n    @media only screen and (min-width:300px){...}\n    //repeated for all media-queries defined by $breakpoints-has-spacing-classes...\n```\n*/\n\n$display-classes: (\n    'show': block,\n    'il': inline,\n    'i-block': inline-block,\n    'hide': none,\n    'flex': flex\n);\n\n// If $breakpoint-has-spacing-classes is false, this can be ignored\n$spacing-classes: (\n    directions: (\n        '': '',\n        '-t':'top',\n        '-b':'bottom',\n        '-l':'left',\n        '-r':'right',\n        '-v':'top' 'bottom',\n        '-h': 'right' 'left'\n    ),\n    units: (\n        '-0': 0,\n        '': 1,\n        '-quarter':.25,\n        '-half':.5,\n        '-2': 2,\n        '-neg-quarter': -.25,\n        '-neg-half': -.5,\n        '-neg': -1,\n        '-neg-2': -2\n    ),\n    properties: (\n        'pad': padding,\n        'space': margin\n    )\n);\n\n\n/* SG\n# Config/Utility Class Settings [[dev]]\n\n##### `$$breakpoints-has-alignment-classes`, `$$breakpoints-has-spacing-classes`, `$breakpoints-has-display-classes`, `$breakpoint-has-type-classes`\n###### List (keys from `$$breakpoints`)\nDetermines what utility classes get generated at `$$breakpoints`. The list's order determines cascade The list's order determines the output order. This is useful if you want one breakpoint to override another.\nA `false` value will output no classes of that type.\n*/\n\n$breakpoint-has-alignment-classes: \t\t\t('smalls', 'bigs', 'desk');\n$breakpoint-has-spacing-classes: \t\t\t('smalls', 'bigs', 'desk');\n$breakpoint-has-display-classes: \t\t\t('smalls', 'bigs');\n$breakpoint-has-type-classes: \t\t\t\t('smalls', 'bigs');\n\n\n/* SG\n# Config/Color Settings [[dev]]\n\n##### `$$base-colors`\n###### Map (key : color value)\nSets up consistent color names to be used for color-palette. Dark and light values will be automatically generated. Key values should be accessed through `colors()`.\n`type`, `links`, and `bg` key values are required for some starter styles. If you choose not to use them, just replace their references in the appropriate files.\n\nSupports a nested map style like the following:\n```scss\n$base-colors: (\n  'type':(\n    'base':red,\n    'light': pink,\n    'dark':maroon\n  ),\n  'links':(\n    'base':blue,\n    'light': sky,\n    'dark': navy\n  ),\n  'bg': (\n    'base': #fff,\n    'dark': #ddd\n  )\n);\n```\n*/\n\n//Create color variations based on the map, using the settings below\n$base-colors: generate-color-variations(\n    $map: (\n        'type': #0a1c2b, //Required\n\n        'links': #0d497b, //Required\n\n        'bg': #f6f8fb, //Required\n\n        //Change the following names and colors project-specific\n        'styleguide': (\n            'base': #5E839E,\n            'light': #CADDE2,\n            'lighter': #F5D1DD,\n            'lightest': #E0ECF0,\n            'highlight':#f60255,\n            'dark': #175CA2,\n            'darker': #114a84,\n            'darkest': #081D33\n        ),\n\n        'accent': mix(#d40026, #AD0909, 45%),\n\n        'success': #bada55\n    ),\n    $variations: ( //Color variation names\n        'light', 'lighter', 'lightest',\n        'dark', 'darker', 'darkest'\n    ),\n    $functions: ( //functions to use when creating variations\n        'linearlight', 'lineardodge', 'tint',\n        'darken', 'linearburn', 'linearburn'\n    ),\n    $blending-colors: ( //Allows for more uniform colors\n        #bfccd6, #dee9ec, null,\n        null, #4c5a66, #323d42\n    ),\n    $increments: ( //How strongly each color should be blended\n        50%,   60%,   80%,\n        5%,   40%,   70%\n    )\n);\n\n\n/* SG\n# Config/Debug Settings [[dev]]\n\n_NOTE: These settings, when set to `true`, will slow down compilation somewhat._\n\n##### `$$debug-fonts`\n###### Boolean\nWhether to include debug statements about font sizes and line-heights as they're generated. Useful if you're getting weird values on auto-generated line-heights.\n\n* %: Distance from the lowest font-size.\n* ub: Line-height upperbounds\n* lb: Line-height lowerbounds\n* lh: Final line-height (in pixels and unit-less).\n* loops: Number of times it took to process the line-height. High numbers can indicate font-sizes that are very difficult to process.\n\n##### `$$debug-baseline`\n###### Boolean\nAdds style for a `baseline-on` class that will show a grid of the baseline on any element (most useful on the `body` or `html` tag). Makes vertical alignment easier.\n\n\n##### `$$debug-silent-classes`\n###### Boolean\nStores all auto-generated silent classes into a map that is then output as a comment at the end of the final css. Useful for getting an overview of values that are stored by the framework.\n\n##### `$$debug-breakpoints`\n###### Boolean\nDisplays the current breakpoint (from `$$breakpoints`) name on a psuedo element on the body. Makes debugging media queries a little simpler.\n\n*/\n\n$debug-fonts: \t\t\t\tfalse;\n\n$debug-baseline:       \t \ttrue;\n\n$debug-silent-classes: \t\tfalse;\n\n$debug-breakpoints:         true;\n\n\n/* SG\n# Config/Slick Settings [[dev]]\n\n##### `$$slick-[]-[]`\nConfiguration for slick carousel jQuery plugin.\n[See Slick documentation for more](https://github.com/kenwheeler/slick/#sass-variables)\n\n*/\n\n$include-slider: \t\t\t\t\tfalse;\n\n$slick-font-path: \"fonts/\";\n$slick-loader-path: \"../images/\";\n$slick-arrow-color: white;\n$slick-dot-color: black;\n$slick-prev-character: '\\2190';\n$slick-next-character: '\\2192';\n$slick-dot-character: '\\2022';\n\n//Tab-box settings\n\n//Do you want to create styles for tabs?\n//Might be unnecessary for certain projects.\n$include-tabs: \t\t\t\t\t\ttrue;\n\n$tab-invert-active:                 false;\n$tab-border:                        color(links);\n$tab-button-bg:                     color(links, light);\n$tab-button-secondary: \t\t\t\trgb(153,17,37);\n$tab-content-bg:                    #fff;\n$tab-button-text:                   #fff;\n$tab-border-radius:                 2px;\n$tab-spacing:                       2px;\n\n\n// Initialize and propogate framework variables\n@include globalize-config();\n","$grid-columns: 12 !default;\n\n/* SG\n# Grid System/Variables [[dev]]\n\n##### `$$human-readable-numerators`\n###### List (string)\nFirst words used to represent numbers in a fraction; Corresponds to grid interval names (one, two, three, etc.).\n\n\n##### `$$human-readable-denominators`\n###### List (string)\nSecond words used to represent numbers in a fraction; Corresponds to grid interval names (whole, half, third, etc.).\n*/\n\n//Grid\n$human-readable-numerators: one, two, three, four, five, six, seven, eight, nine, ten, eleven, twelve, thirteen, fourteen, fifteen, sixteen, seventeen, eighteen, nineteen, twenty;\n\n$human-readable-denominators: whole, half, third, quarter, fifth, sixth, seventh, eighth, ninth, tenth, eleventh, twelfth, thirteenth, fourteenth, fifteenth, sixteenth, seventeenth, eighteenth, nineteenth, twentieth, twentyfirst, twentysecond, twentythird, twentyfourth, twentyfifth, twentysixth, twentyseventh,twentyeigth, twentyninth;\n\n\n/* SG\n# Grid System/Functions [[dev]]\n\n##### `grid-size()`\n###### function(`$size, $total:` `$$grid-columns`)\nCreates a percentage based on the `$size / $total`.\n@requires `$$grid-columns`\n\n*/\n\n@function grid-size($size, $total: $grid-columns) {\n    @return percentage($size / $total);\n}\n\n\n/* SG\n# Grid System/Mixins [[dev]]\n\n##### `@grid-width()`\n###### mixin(`$columns, $total:` `$$grid-columns`)\nCreates a width property with a percentage based on the `$columns / $total`.\n@requires `grid-size()`, `$$grid-columns`\n@alias `@width()`\n\n*/\n\n@mixin grid-width($columns, $total:$grid-columns) {\n    width: #{percentage($columns/$total)};\n    @if $grid-flex {\n        flex-basis: #{percentage($columns/$grid-columns)};\n        max-width: #{percentage($columns/$grid-columns)};\n    }\n}\n\n@mixin width($columns, $total:$grid-columns) {\n    @include grid-width($columns, $total);\n}\n\n\n/* SG\n\n\n##### `@width-setup()`\n###### mixin(`$namespace:\"\", $silent:` `$$grid-silent-classes`, $property:\"width\")\n Uses `$$human-readable-numerators` and `$$human-readable-denominators` to create percentages based on `$$grid-columns`. `$property` accepts any property, as well as lists of properties.\n\n@requires `grid-size()`, `$$human-readable-numerators`, `$$human-readable-denominators`\n\n*/\n\n\n@mixin width-setup(\n    $namespace:\"\",\n    $silent: $grid-silent-classes,\n    $property: \"width\",\n    $important: false,\n    $columns: $grid-columns\n) {\n\n    // [1] Loop through the $grid-columns.\n    // [2] Loop through $divisor (same number as $grid-columns). This acts as the second number in our column fraction.\n    // [3a]Loop through $divisor before it decreases by 1 from the previous loop.\n    // [3b]After widths are defined, subtract 1 from $divisor.\n    // [4] Assign the numerator and denominator of our fraction to human-readable versions (e.g. three, four, third, quarter, etc.).\n    // [5] Check if the numerator equals 1 (one). If so, we keep our singular human-readable numerators and denominators (e.g. one_twelfth).\n    // [6] If the numerator is larger than 1(one), add an 's' to our selector (e.g. two_eighths).\n    //\n    // Same system used for pushes and pulls.\n    $class-type: if($silent, \"%\", \".\");\n    $divisor: $columns;\n\t$class-name-list: ();\n    $prefix: \"#{$class-type}#{$namespace}\";\n    $important: if($important, \"!important\", \"\");\n\n    //To prevent stuff like 12/12 (five-fifths, etc.), we need to declare 1/1 here\n    #{$prefix}one_whole {\n        @each $type in $property {\n            #{$type}: 100% #{$important};\n        }\n    }\n\n    @for $i from 1 through $columns {                                         // [1]\n\n        @while $divisor > 0 {                                                // [2]\n\n            @for $dividen from 1 to $divisor {                              // [3a]\n\t\t\t\t//Create numerator (first number, e.g. 'two').\n                $numerator: nth($human-readable-numerators, $dividen);      // [4]\n\n\t\t\t\t//Create denominator (second number, e.g. 'thirds').\n                $denominator: nth($human-readable-denominators, $divisor);\n\n\t\t\t\t//Divide first number(numerator) by second number(denominator).\n                $size: grid-size($dividen, $divisor);\n\n                //Create class name\n                $class-name: \"#{$prefix}#{$numerator}_#{$denominator}\";\n\n                //Pluralize anything other than ratios with a numerator of 1\n                @if $numerator != \"one\" {                                    // [5]\n\t\t\t\t\t$class-name: \"#{$class-name}s\";                          // [6]\n                }\n\n\t\t\t\t#{$class-name} {\n                    @each $type in $property {\n                        @if index(\"top\" \"right\" \"bottom\" \"left\", $type) != null {\n                            position: relative;\n                        }\n                        #{$type}: $size #{$important};\n                    }\n                }\n\n\t\t\t\t@if $grid-silent-classes and $debug-silent-classes {\n\t\t\t\t\t$class-name-list: map-merge($class-name-list, ($class-name:$size));\n\t\t\t\t}\n\n            }\n\n            $divisor: $divisor - 1; //[3b]\n        }\n    }\n\n    //Allow for fourths as an alias to quarters\n    #{$prefix}one_fourth {\n\t\t@extend #{$prefix}one_quarter;\n    }\n\n    #{$prefix}two_fourths {\n\t\t@extend #{$prefix}two_quarters;\n    }\n\n    #{$prefix}three_fourths {\n\t\t@extend #{$prefix}three_quarters;\n    }\n\n\n\t@if $silent and $debug-silent-classes {\n\t\t$class-name-list: map-merge($class-name-list,(\n\t\t\t#{$prefix}one_whole: 100%\n\t\t));\n\t\t$silent-class-registry: silents-register($class-name-list, $type) !global;\n\t}\n}\n","//------------------------------------\n//\t$MEDIA QUERIES\n//------------------------------------\n\n/* SG\n# Mixins/Media Queries [[dev]]\n\n@file globals/tools/_t-media-queries.scss\n\n##### `@media-query()`\n###### mixin(`$media-queries...`)\nEnclose a block of code with a media query as named in `$breakpoints`. To create more consolodated code, most (if not all) media queries should be called through this mixin. Multiple media-queries can be defined, separated by a comma. This will place your content into multiple separate media-queries at once (useful if you need the same css at different breakpoints).\n\n**Alternative Uses:**\n\n* Passing multiple media queries separated by an `'and'` (quoted) to combine them, compiles to something like `@media screen and (min-width: 500px) and (max-width: 900px){}`.\n\n* Passing a value like `min-width 1200px` or `max-height 300px` allows for arbitrary breakpoints.\n\n* Passing `max 1200px 'and' smalls` will create a combined media-query with a predefined one from `$$breakpoints`.\n\n* Passing `height smalls` will replace `width` with `height` within the `smalls` breakpoint. Similarly, using `min smalls` would replace 'max' with 'min'.\n\n@requires `mq-arglist-to-map()`, `mq-parse-query-args()` `$$breakpoints`\n@alias @mq(), @breakpoint(), @bp()\n\n*/\n\n//Accepted media-query expression types\n$media-query-expressions: (\n\t'device-width', 'orientation', 'aspect-ratio', 'device-aspect-ratio',\n\t'color', 'color-index', 'monochrome', 'resolution', 'scan', 'grid'\n);\n//Accepted media-query device types\n$media-query-devices: (\n\t'screen','all','print','tv','handheld','braille',\n\t'embossed','projection','speech','tty'\n);\n//Accepted media-query operator arguments\n$media-query-operators: (\n\t'max-width',\n\t'max-height',\n\t'min-width',\n\t'min-height',\n\t'device-width',\n\t'min-device-width',\n\t'max-device-width',\n\t'min-device-height',\n\t'max-device-height',\n\t'aspect-ratio',\n\t'device-aspect-ratio',\n\t'resolution'\n);\n\n//Used to switch a media-query from one type to another\n$media-query-switch: (\n\t'max',\n\t'min',\n\t'height',\n\t'width',\n\t'landscape',\n\t'portrait'\n);\n\n//Values to increase media-queries by\n$media-query-intervals: (\n\t'px'\t\t: \t  1,\n\t'em'\t\t: \t.01,\n\t'rem'\t\t: \t.01,\n\t'vh'\t\t: \t.01,\n\t'vw'\t\t:\t.01\n);\n\n\n@mixin media-query($mq...) {\n\n    //Stored for switching on and off\n    $rem-px-default: $rem-px-fallback;\n\n\t//format arglist into maps with key-value pairs\n\t//Should return (1:(operator:...,value:...,'device':...), 2:(...));\n\t$arguments-map: mq-arglist-to-map($mq);\n\n\t//Use a string storage for multiple media-queries\n\t$media-query-string: '';\n\n\t//Turn off px-fallback inside media-queries\n\t// since 99% of mobile browsers support rems\n\t$rem-px-fallback: false !global;\n\n\t@each $mq-id, $mq-group in $arguments-map {\n\n\t\t//Extract each value from the arguments map\n\t\t$operator: map-get($mq-group, 'operator');\n\n\t\t$value: map-get($mq-group, 'value');\n\n\t\t$device: map-get($mq-group, 'device');\n\n\t\t$device: if($device, $device, 'screen'); //Default to screen if no device specified\n\n\t\t$logical-operator: unquote('#{$operator}#{$value}');\n\n\t\t//Multiple media-queries in the map indicates an 'or' media-query\n\t\t// So let's concatenate those media-queries together\n\t\t@if length($arguments-map) > 1 {\n\n\t\t\t$media-query-string: $media-query-string + '#{$device} and #{$logical-operator}';\n\n\t\t\t//Use the IDs assigned to each media-query as a way to compare length\n\t\t\t// (Libsass has an issue with indexes in maps)\n\t\t\t@if $mq-id != length($arguments-map) {\n\n\t\t\t\t//Add a comma to the end of all but the last query\n\t\t\t\t$media-query-string: $media-query-string + ', ';\n\n\t\t\t}@else {\n\n\t\t\t\t@media only #{$media-query-string}  {\n\t\t\t\t\t@content;\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\t\t@else {\n\n\t\t\t@if $operator { //Only output media-queries with operators\n\n\t\t\t\t@media only #{$device} and #{$logical-operator} {\n\t\t\t\t\t@content;\n\t\t\t\t}\n\n\t\t\t}@else {\n\t\t\t\t@warn \"the media-query mixin requires a logical-operator and a value (min-width 2px). You will have to write your own media query if you'd like something else\";\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t//Change back to user setting\n\t$rem-px-fallback: $rem-px-default !global;\n\n}\n\n//Aliases: Same as above, but shorter\n@mixin media        ($mq...)\t{ @include media-query($mq...) { @content; } }\n@mixin mq           ($mq...)    { @include media-query($mq...) { @content; } }\n@mixin breakpoint   ($mq...)\t{ @include media-query($mq...) { @content; } }\n@mixin bp           ($mq...)\t{ @include media-query($mq...) { @content; } }\n\n//-------------------------\n// Private media-query functions\n//-------------------------\n\n//Check for proper media-query arguments\n// Converting them to proper CSS values\n@function mq-arglist-to-map($arguments-list) {\n\t$stored: ();\n\t$arg-map: ();\n\t$structure: ();\n\n\t//For loop used because each loops produce different results in Ruby and LibSass\n\t@for $i from 1 through length($arguments-list) {\n\t\t$argument: nth($arguments-list, $i);\n\n\t\t//Check all values in the argument for valid media-query arguments\n\t\t$structure: map-merge($structure, mq-parse-query-args($argument));\n\n\t\t//Since value should be last, we can assume the grouping is done\n\t\t@if (map-get($structure, 'value')) {\n\t\t\t//Wrap arguments into an array-object-like structure (1:(key:value, key:value))\n\t\t\t$key: $i * 1; //Fixes a libSass error.\n\t\t\t$arg-map: map-merge($arg-map, ($key: ($structure)));\n\t\t\t//Empty the map so we can rewrite it\n\t\t\t$structure: ();\n\t\t}\n\t}\n\n\t@return $arg-map;\n}\n\n// Test each argument for its type and match it up to a proper map key\n@function mq-parse-query-args($argument, $call: 0, $check: null){\n\t$query-map: ();\n\t//Check global $breakpoints config variable for matches\n\t@if\t(map-get($breakpoints, $argument)){\n\t\t$query-map: map-merge($query-map, ('operator': map-get($breakpoints, $argument)));\n\t\t//Also set value to nothing since we already have it\n\t\t$query-map: map-merge($query-map, ('value': ''));\n\t}\n\t//Check operators for matches\n\t@elseif (index($media-query-operators, $argument)) {\n\t\t//Format operator as the beginning of a parenthesis\n\t\t$query-map: map-merge($query-map, ('operator': \"(#{$argument}\"));\n\t}\n\t//If its a number, assume its a value\n\t@elseif(type-of($argument) == number){\n\t\t//Format value with a colon and closing parenthesis\n\t\t$query-map: map-merge($query-map, ('value': \":#{$argument})\"));\n\t}\n\t//Check devices for matches\n\t@elseif(index($media-query-devices, $argument)) {\n\t\t$query-map: map-merge($query-map, ('device': $argument));\n\t}\n\t@else {\n\t\t//if not a device, $breakpoint, value, or operator, it's probably a nested list\n\t\t//We'll need to loop through that list and re-call this function until we get to the bottom\n\t\t@for $i from 1 through length($argument) {\n\t\t\t$arg: nth($argument, $i);\n\t\t\t//Set a reasonable number so we don't loop forever\n\t\t\t//Only set if nothing has been set before\n\t\t\t$check: if($check, $check, length($argument));\n\t\t\t//If we've looped through this more times than the length of the argument,\n\t\t\t//we can assume an error and return nothing.\n\t\t\t@if $call > ($check + 1) {\n\t\t\t\t@warn \"#{$arg} is not valid argument for media-query mixin\";\n\t\t\t\t@return ();\n\t\t\t}\n\t\t\t//Add to the loop count\n\t\t\t$call: $call + 1;\n\t\t\t//Re-run this function through all arguments\n\t\t\t$query-map: map-merge($query-map, mq-parse-query-args($arg, $call, $check));\n\t\t}\n\t}\n\n\t@return $query-map;\n}\n","/* SG\n# Functions/General [[dev]]\n\n##### `safe-get-function()`\n###### function(`$function-name`)\nWrapper for Sass' internal `get-function` that allows for compatibility across Sass versions. If version is higher than 3.5, then the function is returned, otherwise, just the name.\n\n@returns function\n\n\n##### `cache()`\n###### function(`$function-name, $args...`)\nMemoize (cache) a function's return values and arguments. Speeds up processing on intensive functions that get called many times (with the same arguments).\n\n_NOTE: This can actually **increase** processing time if used too often or on simple functions as the lookup process isn't free. Every cached value is unique._\n\n@returns function result\n\n*/\n/* SG\n# Functions/Conversion [[dev]]\n\n##### `strip-units()`\n###### function(`$value`)\nRemove lengths (`px`, `em`, `rem`, etc.) from a value. Usually a variable. This is sometimes required because Sass cannot calculate incompatible units (`px * rem` for instance).\n[Reference](http://stackoverflow.com/questions/12328259/how-do-you-strip-the-unit-from-any-number-in-sass)\n\n##### `percentage-to-decimal()`\n###### function(`$percentage`)\nChanges percent value to decimal.\n@returns number\n\n##### `px-to-vw()`\n###### function(`$pixels`)\nConverts pixel dimensions to viewport width (vw) dimensions.\n@returns number (vw)\n\n##### `px-to-rems()`\n###### function(`$pixels, $base-font:` `$$base-font-size`)\nFunction for calculating `rem` values. Used by `@px-to-rems()`. The `$base-size` is used to calculate the value (e.g. if the body's font-size is `16px`, then the rem value of `24px` would be `1.5rem`).\n@returns number (rems)\n@alias rems()\n\n##### `px-to-ems()`\n###### function(`$pixels, $context:` `$base-font-size`)\nFunction for calculating `em` values. The `$context` is used to calculate the final value. Different from `px-to-rems()` by generating a value with an `em`. `$context` is often necessary based on the situation.\n@returns number(ems)\n@alias ems()\n\n##### `list-to-string()`\n###### function(`$list, $separator:','`)\nConverts a list to a string with an optional separator.\n@returns string\n@alias str-join()\n\n##### `str-to-number()`\n###### function(`$string, $unitless: false`)\nConverts a number-like string to a number. Since Sass accepts quoted and non-quoted values like `\"10px\"` and `10px`, but can only do math on the unquoted (number) value, it is sometimes necessary to convert/cast a string to a number.\n@returns number\n*/\n/* SG\n# Functions/Strings & Lists [[dev]]\n\n[Reference](https://github.com/devatrox/Sunglass)\n\n##### `contains()`\n###### function(`$data, $value`)\nGeneric `contains` function(similar to javascript's `indexOf`). Parses a variable(`$data`) for a `$value`. Returns boolean.\n@returns boolean\n@requires `str-contains()`, `list-contains()`\n\n##### `str-join()`\n###### function(`$list, $separator:','`)\nConverts a map or list to a string (`('this', 'and', 'this')` becomes `'this,and,this'`).\n@returns string\n\n##### `str-contains()`\n###### function(`$string, $value, $pos: 0`)\nChecks if a `$string` contains a `$value`. Optionally accepts a start positon.\n@returns boolean\n\n##### `str-append()`\n###### function(`$data, $separator:','`)\nAdds one string to another (e.g. `str-append('hello', 'world')` becomes `hello world`).\n@returns string\n\n##### `list-contains()`\n###### function(`$list, $value`)\nChecks whether a `$list` contains a `$value`.\n@returns boolean\n\n##### `list-print()`\n###### function(`$list, $depth: 1`)\nUsed to turn a list into a flat string. For debug purposes.\n@returns string\n\n##### `to-list()`\n###### function(`$string, $keep: 'both'`)\nConvert a value to a list. `$keep` accepts `'keys'`, `'values'`, or `'both'` for map conversion.\n@returns list\n\n*/\n/* SG\n# Functions/Maps [[dev]]\n\n@file globals/_gl-functions.scss\n\n[Reference](http://www.sitepoint.com/extra-map-functions-sass/)\n\n##### `map-deep-set()`\n###### function(`$map, $keys... [, $value]`)\nAdd to a deeply nested map key. Accepts any number of keys, but the final value is the new key.\n@returns map\n\n##### `map-depth()`\n###### function(`$map`)\nFind depth of a `$map`.\n@returns number\n\n##### `map-has-keys()`\n###### `[map], [key(s) to be checked ...]`\nDetermine whether a map contains certain keys.\n@returns boolean\n@alias map-contains-keys()\n\n##### `map-has-nested-keys()`\n###### function(`$map`, `$keys...`)\nCheck for the value of a nested key.\n@returns boolean\n@alias map-contains-nested-keys()\n\n##### `map-get-nested()`\n###### function(`$map`, `$keys...`)\nReturns nested map values. A deep version of Sass' `map-get()`.\n@returns string, boolean, list, or map\n\n##### `map-extend()`\n###### function(`$map`, `$maps...`(`$deep:true`))\nMerges multiple maps. Similar to jQuery's .extend().\n@returns map\n\n##### `map-add-depth()`\n###### function(`$map`, `$new-key:'base'`)\nAdds one level to a map using the new key to a map. Used by `generate_color_varations()`. (e.g. `(key: value, key: value)` becomes `(key:(new-key: value), key:(new-key: value))` )\n@returns map\n\n##### `map-print()`\n###### function(`$map`, `$level:1`)\nPrints map into a string (in a JSON-esque format). Useful for debugging.\n@returns string\n@alias map-inspect()\n\n*/\n/* SG\n# Typography/Sizing [[dev]]\n\n##### `modular-scale()`\n###### function(`$scale`, `$ratio:``$$scale-ratio`)\nGenerates a pixel value that is an exponent of a ratio (`$ratio` defaults to `$$scale-ratio` value).\n@requires `pow()`, `cache()`, `strip-units()`\n@returns number (pixels)\n\n*/\n/* SG\n# Typography/Line-height [[dev]]\n\n##### `baseline()`\n###### function(`$font-size`, `$baseline`, `$multiple:1`)\n\nAligns a font-size to a baseline (`$baseline`). Returns a unitless value relative to the font-size (equivilent to ems). An optional multiple can be used to make a variation on the given baseline (using decimals will divide the the baseline).\n@returns number (unitless)\n\n*/\n/* SG\n\n##### `baseline-curve()`\n###### function(`$x` , `$accel`: `1`)\n\nCalculates a where a number(`$x`) sits along a parabolic arc (curve). Change the curve's severity by changing its `$accel`.\nAn `$accel` of 1 is a smooth arc.\n`$accel` accepts any number between -2 and 2.35. A negative will invert the curve.\n\nThe formula: `y = (sqrt((x^1)+x) - sqrt(x^1)) / .4142135623730951`\n( [Visual](https://www.desmos.com/calculator/qswvc6q9kt) )\n\n@returns number\n@requires `sqrt()`, `pow()`\n\n*/\n/*SG\n\n##### `baseline-calc()`\n###### function(`$font-size: $base-font-size, $font-base: $base-font-size, $basline-slack: $font-looseness`)\n\nCreates unitless line-heights that align to the baseline grid with consideration to the aesthetics of a given font size. Essentially makes sure larger font-sizes have smaller line-heights, while smaller font-sizes have larger ones.\nUses constraints based on upper and lower limits of pleasing line-heights, and finds where a given font-size should sit within those constraints. `$$font-looseness` increases the upper constraints, allowing for taller line heights on larger font sizes.\nDepends on `baseline()` for calculation and `baseline-curve()` to determine the deviance from the upper and lower constraints.\n\n@returns number (unitless)\n@requires `baseline()`, `baseline-curve()`\n\n*/\n/* SG\n\n# Functions/Math [[dev]]\n\nMost functions taken from [Sassy Math](https://github.com/Team-Sass/Sassy-math/blob/master/sass/math.scss).\n\n*/\n/* SG\n\n##### `pow()`\n###### function(`$number`, `$exponent`, `$precision:12`)\n\nA more robust exponent multiplication which allows for decimal-based exponents. This **fully** replaces Compass' pow() function (allows for float-based exponents).\n\n[Reference](https://gist.github.com/nathancrank/7539155)\n\n@returns number\n@requires log()\n@alias exponent()\n\n*/\n/* SG\n\n##### `log()`\n###### function(`$x`)\nReturns the natural logarithm of a number.\n\n```scss\n$value:   log(2)  // 0.69315\n$value2:  log(10) // 2.30259\n```\n\n@returns number\n\n*/\n/* SG\n\n##### `frexp()`\n###### function(`$x`)\nReturns a two-element list containing the normalized fraction and exponent of number.\n\n@returns list (fraction, exponent)\n\n*/\n/* SG\n\n##### `ldexp()`\n###### function(`$x, $exp`)\n\nReturns $x * 2^$exp\n\n*/\n/* SG\n\n##### `exp()`\n###### function(`$x`)\n\nReturns E^x, where x is the argument, and E is Euler's constant, the base of the natural logarithms.\n\n```scss\n$value: exp(1)  // 2.71828\n$value2: exp(-1) // 0.36788\n```\n\n@returns Number\n\n*/\n/* SG\n\n##### `fact()`\n###### function(`$x`)\n\nReturns the factorial of a non-negative integer.\n\n```scss\n$value:  fact(0) // 1\n$value2: fact(8) // 40320\n```\n@return Number\n\n*/\n/* SG\n\n##### `gcd()`\n###### function(`$number-1`, `$number-2`)\n\nGreatest Common Divisor calculation (useful for calculating grids and widths).\n@returns number\n\n*/\n/* SG\n\n##### `lcm()`\n###### function(`$a`, `$b`)\n\nFinds the least common multiple. Use with caution...if there is no LCM, then you compilation will error out.\n\n@returns number\n\n*/\n/* SG\n\n##### `nth_root()`\n###### function(`$base`, `$n:2`, `$precision:12`)\n\nAdvanced calculation for square roots, cube roots, etc. of a value.\n[Reference](http://rosettacode.org/wiki/Nth_root#JavaScript)\n\n@returns number\n\n*/\n/* SG\n\n##### `sqrt()`\n###### function(`$base`, `$precision:12`)\n\nFind the square root of a value.\n\n@returns number\n@alias `sqroot()`\n\n*/\n/* SG\n\n##### `sin()`\n###### function(`$angle`)\n\nDetermines the Sine of an angle.\n[Reference](https://unindented.org/articles/trigonometry-in-sass/)\n\n@returns number\n*/\n/* SG\n\n##### `cos()`\n###### function(`$angle`)\n\nDetermines the Cosine of an angle.\n@returns number\n\n*/\n/* SG\n##### `tan()`\n###### function(`$angle`)\n\nDetermines the Tangent of an angle.\n@returns number\n\n*/\n/* SG\n\n##### `golden()`\n###### function(`$base: 1`)\n\nGet the golden ratio from `$base`.\n@returns number\n@alias `$$golden_ratio`\n\n*/\n/* SG\n# Colors/Lookup [[dev]]\n\n@file tools/_t-color-functions.scss\n\n@priority 99\n\n##### `colors()`\n###### function(`$color-name, $tone: 'base', $opacity: 1`)\nGet a color value from the global `$$base-colors` map. Darker and lighter tones are available by passing a second string.\n\n```scss\n.foo {\n    background-color: colors(links, light));\n}\n```\n\nPassing only a color name will default to the 'base' color.\n\n@alias color(), clr()\n@requires `$$base-colors`\n\n[Reference](http://blog.12spokes.com/web-design-development/simple-css-color-management-with-sass/)\n*/\n/* SG\n# Colors/Lookup [[dev]]\n\n##### `combine-color-maps()`\n###### function(`$map1 , $map2`)\nSpecialized function used by `generate-color-variations()` to merge two color maps.\n\n@returns map\n\n*/\n/* SG\n# Colors/Manipulation [[dev]]\n\n##### `generate-color-varations()`\n###### function( `$map: $colors, $functions: (tint, tint, tint, shade, shade, shade), $increments: (20%, 40%, 80%, 20%, 40%, 80%), $variations: (light, lighter, lightest, dark, darker, darkest), $blending-colors: null`)\n\nTakes base color values and generates a full color palette. Used by the `$$base-colors` map to create a project's palette, accessible via `colors()`.\n\n**Arguments:**\n* `$map`: Color map you want to create variations of. Defaults to `$$base-colors`.\n* `$functions`: color functions used to generate variations (e.g. lighten or darken). Can use any `blend` function, provided `$blending-colors` are provided.\n* `$increments`: percentage amount to apply `$function` to each `$variations`.\n* `$variations`: actual names for each color tone when `colors()` used.\n* `$blending-colors`: used when a function is a `blend`. Can be a list or a single color.\n\n@requires `combine-color-maps()`\n\n*/\n/* SG\n# Colors/Manipulation [[dev]]\n\n\n##### `black-or-white()`\n###### function(`$color`)\nChange text color based on background-color's darkness.\n\n```scss\ndiv {\n    background-color: #f8cd12;\n    color: set_text_color(#f8cd12);\n}\n// Your text color would be black because #f8cd12 and #00000 have more contrast.\n```\n@alias set-text-color()\n@requires `color-luminance`\n\n*/\n/* SG\n##### `pick-best-color()`\n###### function(`$base, $colors, $tolerance: 0`)\nCompares a set of colors against `$base` and returns the color with the most contrast. `$colors` should be a list.\n[Taken from here](https://gist.github.com/voxpelli/6304812)\n\n```scss\ndiv {\n    color: pick_best_color(#f8cd12, (#a0a0c0, #fff, #2c2c2c));\n}\n// The function would test the colors and find that #2c2c2c is the best.\n```\n@requires `color-contrast()`, `color-luminance()`\n@returns color\n*/\n/* SG\n##### `color-contrast()`\n###### function(`$color1, $color2`)\nFind contrast between two colors.\n[Adapted from color.js](https://github.com/LeaVerou/contrast-ratio/blob/gh-pages/color.js)\n\n@requires `color-luminance()`\n@returns number(0 - 1)\n*/\n/* SG\n##### `color-luminance()`\n###### function(`$color1`)\nFind the relative luminance of a color. Used by `color-contrast()`. [Adapted from color.js](https://github.com/LeaVerou/contrast-ratio/blob/gh-pages/color.js)\n@alias luma()\n@returns number(0 - 1)\n*/\n/* SG\n# Colors/Debugging [[dev]]\n\n@file tools/_t-color-functions.scss\n\n##### `@color-palette-output()`\n###### mixin(`$selector`, `$color-map:` `$$base-colors`)\nDebugging tool that creates a pretty color palette (in columns) using psuedo selectors (nth-child required). Used for \"color blocks\" output, in style guide.\n\n@requires `map-add-depth()`, `black-or-white()`\n\n*/\n/* SG\n\n# Colors/Blending Modes [[dev]]\n\n@file tools/_t-blend-modes.scss\n\n@priority 1\n\n[Taken from Sass Blend Modes](https://github.com/heygrady/scss-blend-modes/blob/master/stylesheets/_blend-modes.scss)\n\n##### `blend-normal()`\n###### function(`$forground, $background, $amount:0`)\n\n##### `blend-multiply()`\n###### function(`$forground, $background, $amount:0`)\n\n##### `blend-lighten()`\n###### function(`$forground, $background, $amount:0`)\n\n##### `blend-darken()`\n###### function(`$forground, $background, $amount:0`)\n\n##### `blend-lineardodge()`\n###### function(`$forground, $background, $amount:0`)\n\n##### `blend-linearburn()`\n###### function(`$forground, $background, $amount:0`)\n\n##### `blend-difference`\n###### function(`$forground, $background, $amount:0`)\n\n##### `blend-screen()`\n###### function(`$forground, $background, $amount:0`)\n\n##### `blend-exclusion()`\n###### function(`$forground, $background, $amount:0`)\n\n##### `blend-multiply()`\n###### function(`$forground, $background, $amount:0`)\n\n*/\n/* SG\n# Variables/Easing [[dev]]\n\nEach easing variable is a cubic-bezier value that specifies rate of change of an animation. [See easings for more](http://www.easings.net).\n\n[Reference](https://github.com/matthewlein/Ceaser/blob/master/developer/)\n\n*/\n/* SG\n# Config/Propagation [[dev]]\n\n#### `@globalize-config()`\nPulls together config variables and routes them into structures expected by the framework, then makes them global.\nFor instance, the `$$type-h1-size` variable is accepted as a list, but will be available as a single size, while making `$type-h1-lh` available.\n\n*/\n/* SG\n# Typography/Font Face [[dev]]\n\n##### `@fonts()`\n###### mixin(`$name`: `$$font-file-name`, `$path: $$font-file-location`, `$weights`: `$$font-weights`, `$italics`: `$$font-italics`)\nA wrapper function for `@font-face()`. Takes global configuration variables and passes them to `@font-face()`. Loops through each `$name` based on `$weights` and `$italics`. Uses `$path` and `$name` to point to font files. Formats these variables so they can be passed to `@font-face()`.\n\nFont file names must be the same as their CSS font-family values. Example: arial font, 400 weight would be arial400.ttf and the CSS value would be font-family: 'arial'; font-weight: 400.\n\n@requires `@font-face()`\n\n##### `@font-face()`\n###### mixin(`$name`, `$font-files`, `$weight:false`,` $style:false`, `$eot:false`)\nGenerates cross-browser font-face declarations when called.\n$name is required, arbitrary, and what you will use in font stacks.\n**Arguments:**\n* $font-files is required using font-files('relative/location', 'format'). For best results use this order: woff, opentype/truetype, svg\n* $eot is required by IE, and is a relative location of the eot file.\n* $weight shows if the font is bold, defaults to normal\n* $style defaults to normal, might be also italic\n\nBased on [Compass' font-face mixin](http://compass-style.org/reference/compass/css3/font_face/).\n\n*/\n/* SG\n# Mixins/Media Queries [[dev]]\n\n@file globals/tools/_t-media-queries.scss\n\n##### `@media-query()`\n###### mixin(`$media-queries...`)\nEnclose a block of code with a media query as named in `$breakpoints`. To create more consolodated code, most (if not all) media queries should be called through this mixin. Multiple media-queries can be defined, separated by a comma. This will place your content into multiple separate media-queries at once (useful if you need the same css at different breakpoints).\n\n**Alternative Uses:**\n\n* Passing multiple media queries separated by an `'and'` (quoted) to combine them, compiles to something like `@media screen and (min-width: 500px) and (max-width: 900px){}`.\n\n* Passing a value like `min-width 1200px` or `max-height 300px` allows for arbitrary breakpoints.\n\n* Passing `max 1200px 'and' smalls` will create a combined media-query with a predefined one from `$$breakpoints`.\n\n* Passing `height smalls` will replace `width` with `height` within the `smalls` breakpoint. Similarly, using `min smalls` would replace 'max' with 'min'.\n\n@requires `mq-arglist-to-map()`, `mq-parse-query-args()` `$$breakpoints`\n@alias @mq(), @breakpoint(), @bp()\n\n*/\n/* SG\n# Mixins/Overrides [[dev]]\n\n##### `@create-overrides()`\n###### mixin(`$map, $breakpoints, $namespace: \"\"`)\nTakes a map of class names and style properties and outputs utility (override) classes over a specified number of breakpoints. Useful for creating a number of single-use classes over multiple breakpoints. Always makes property declarations `!important`.\n\nExample:\n```scss\n//Input\n@include creat-overrides(\n    (\n        \"class-name\": (\n            \"property\": \"value\",\n        ),\n        \"float-right, align_right\": (\n            \"float\": \"right\"\n        )\n    ),\n    ('smalls', 'bigs')\n);\n\n//CSS-output\n.float-left {\n    float: left !important;\n}\n.float-right,\n.align_right {\n    float: right !important;\n}\n@media (max-width: 600px) {\n    .float-left {\n        float: left !important;\n    }\n    .float-right,\n    .align_right {\n        float: right !important;\n    }\n}\n@media (min-width: 601px) {\n    ...\n}\n```\n##### `@_override-output()`\n###### mixin(`$map, $namespace: \"\"`)\nUsed exclusively by `@create-overrides()` to iterate through a map of classes, properties, and values to create responsive classes.\n\n*/\n/* SG\n\n# Mixins/CSS Helpers [[dev]]\n\n##### `@specificity()`\n###### mixin(`$specificity: 1`)\nSpecificity increaser. Useful for increasing specificity of a selector instead of using `!important`.\n```scss\n.class {\n    @include specificity(2) {\n        color: red;\n    }\n}\n\n//css\n.class.class {\n    color: red;\n}\n\n```\n[Reference](http://www.sitepoint.com/selector-specificity-css-preprocessors/)\n\n*/\n/* SG\n##### `@opacity()`\n###### mixin(`$opacity`)\nCross-browser (including IE8-) opacity.\n[Reference](https://gist.github.com/jgv/745754)\n\n*/\n/* SG\n##### `@border()`\n###### mixin(`$border`)\nAllows creating many border properties at once. Works like the standard border shorthand style but allows varied styles on different border directions.\n\n```scss\n\t//scss\n\t.foo {\n\t\t@include border(2px 3px solid dashed dotted blue currentColor yellow);\n\t}\n\n\t//css\n\t.foo {\n\t\tborder-width: 2px 3px;\n\t\tborder-style: solid dashed dotted;\n\t\tborder-color: blue currentColor yellow;\n\t}\n```\n*/\n/* SG\n\n# Mixins/Buttons [[dev]]\n\n##### `@button()`\n###### mixin(`$bg-color`: `color('links')`, `$text-color`: `null`, `$border`: `null`, `$radius`: `null`, `$text-radius`: `null`, `$style`: `null`, `$inset`: `false`)\nGenerates common button styles, allowing for simple creation of more complex gradient styles. Intelligently excludes unnecessary styles from states like hover, focus, and active. _Does not generate hover, focus, or active psuedo selectors on its own._\n\n**Accepted arguments**\n* `$bg-color`: Color values. This cannot accept null.\n* `$text-color`: Color or null (null will let the mixin decide the best color based on contrast).\n* `$border`: Any border properties (colors, styles, widths) or `null`. Uses the `@border()` mixin.\n* `$radius`: `border-radius` values. `null` produces no border-radius property.\n* `$style`: `null`, `shiny` or `reflective`.\n   `shiny` creates a simple gradient backgroud based on the `$bg-color`.\n   `reflective` creates a stacked gradient based on the `$bg-color`.\n* `$inset`: Boolean. `True` adds a dark box-shadow inset.\n   If combined with 'shiny' or 'reflective' `$style`, background gradients are inverted.\n\n*/\n/* SG\n# Tools/Z-Index [[dev]]\n\n@file globals/tools/_t-zindex.scss\n\n##### `z()`\n###### function(`$layer`, `$modifier: false`)\nReturns a numeric value (used for z-index) from a named layer, stored in `$$z-index`. Changing the modifier to anything other than `false` will add 1 plus however many times the value has been called. So, if you've called `z(head, true)` 5 times, and `head`'s default value is 100, you would get a value of 105.\n\nThe `$modifier` is useful if you'd like to closely layer z-indexes within the same module. It is rarely necessary, though since z-indexes stack.\n\n*/\n/* SG\n# Tools/Display Utilities [[dev]]\n\n@file globals/tools/_t-display.scss\n\n##### `@display-utilities()`\n###### mixin(`$namespace:\"\", $silent:false, $important:true, $class-list:$display-classes`)\nGenerates classes with display properties defined in `$class-list`. Intelligently extends duplicated display properties.\n\n\n##### `@display-utilities-init()`\n###### mixin(`$breakpoints: $all-breakpoints, $namespace: '', $silent: true, $important: false`)\nThe responsive component to `@display-utilities()`. Invoke `@display-utilites()` with that loops through a set of media-queries defined in `$$breakpoints`. This is most useful for creating responsive display classes.\n\n*/\n/* SG\n# Grid System/Variables [[dev]]\n\n##### `$$human-readable-numerators`\n###### List (string)\nFirst words used to represent numbers in a fraction; Corresponds to grid interval names (one, two, three, etc.).\n\n\n##### `$$human-readable-denominators`\n###### List (string)\nSecond words used to represent numbers in a fraction; Corresponds to grid interval names (whole, half, third, etc.).\n*/\n/* SG\n# Grid System/Functions [[dev]]\n\n##### `grid-size()`\n###### function(`$size, $total:` `$$grid-columns`)\nCreates a percentage based on the `$size / $total`.\n@requires `$$grid-columns`\n\n*/\n/* SG\n# Grid System/Mixins [[dev]]\n\n##### `@grid-width()`\n###### mixin(`$columns, $total:` `$$grid-columns`)\nCreates a width property with a percentage based on the `$columns / $total`.\n@requires `grid-size()`, `$$grid-columns`\n@alias `@width()`\n\n*/\n/* SG\n\n\n##### `@width-setup()`\n###### mixin(`$namespace:\"\", $silent:` `$$grid-silent-classes`, $property:\"width\")\n Uses `$$human-readable-numerators` and `$$human-readable-denominators` to create percentages based on `$$grid-columns`. `$property` accepts any property, as well as lists of properties.\n\n@requires `grid-size()`, `$$human-readable-numerators`, `$$human-readable-denominators`\n\n*/\n/* SG\n# Grid System/Mixins [[dev]]\n\n##### `@grid-setup()`\n###### mixin(`$silent:` `$$grid-silent-classes`)\nCreates basic grid classes (listed below), called by `@grid-init()`.\n\n_Note: `[% || .]` denotes a class that is either silent(`%`) or standard CSS(`.`). Based on the `$$grid-silent-classes` setting._\n\n* ###### `%grid_reset`\n Useful for resetting the grid's effects without making full grid items.\n\n* ###### `[% || .]grid`\n Wrapper class for grid widths. Puts a negative left margin of one unit. When not using floats, adds appropriate letter-spacing (for inline-block-based grid).\n\n* ###### `[% || .]grid_item`\n Sets up a grid column. Uses column padding inherited from parent `%/.grid`.\n\n* ###### `[% || .]grid_rev`\n Makes grid columns start from the right.\n\n* ###### `[% || .]grid_right`\n Makes all grid columns align to the right.\n\n* ###### `[% || .]grid_center`\n Makes all grid columns align to the center.\n\n* ###### `[% || .]grid_middle`\n Makes all grid columns vertical align to the middle.\n\n* ###### `[% || .]grid_bottom`\n Makes all grid columns vertical align to the bottom.\n\n* ###### `[% || .]grid_full`\n Eliminates padding between grid columns.\n\n* ###### `[% || .]grid_narrow`\n Reduces the padding between grid columns.\n\n* ###### `[% || .]grid_wide`\n Increases the padding between grid columns.\n\n*/\n/* SG\n# Grid System/Mixins [[dev]]\n\n##### `@grid-row()`\n###### mixin()\nCreates a grid container (row) based on your grid configuration.\n@requires `@type-space()`\n\n##### `@grid-item()`\n###### mixin(`$columns: $grid-columns`)\nCreates a grid item (column) based on your grid configuration set to a width based on the `$columns` passed in.\n@requires `@type-space()`, `@grid-width()`\n*/\n/* SG\n##### `@grid-init()`\n###### mixin(`$silent:` `$$grid-silent-classes`, `$important:false`)\nCreates responsive grid classes by running through all the grid-setup mixins. Uses the media-queries defined in the `$breakpoint-has-` variables to create media-query-scoped classes.\n@requires `@grid-classes()`, `@width-classes()`, `@push-classes()`, `@pull-classes()`\n\n*/\n/* SG\n##### `@grid-classes()`\n###### mixin(`$silent:` `$$grid-silent-classes`)\nRuns `@grid-setup()`.\n@requires `@grid-setup()`\n\n##### `@width-classes()`\n###### mixin(`$silent:` `$$grid-silent-classes`, `$important: false`)\nRuns `@width-setup()`, looping across all breakpoints in `$$breakpoint-has-widths`. Creates classes with `width` property values (`flex-basis` and `max-width` for flex-based grids) based on the grid.\n@requires `@media-query()`, `@width-setup()`\n\n##### `@push-classes()`\n###### mixin(`$silent:` `$$grid-silent-classes`, `$important: false`)\nRuns `@width-setup()`, looping across all breakpoints in `$$breakpoint-has-push`. Creates classes with `push_` and `left` property values based on the grid.\n@requires `@media-query()`, `@width-setup()`\n\n##### `@pull-classes()`\n###### mixin(`$silent:` `$$grid-silent-classes`, `$important: false`)\nRuns `@pull-setup()`, looping across all breakpoints in `$$breakpoint-has-pull`. Creates classes with `pull_` and `right` property values based on the grid.\n@requires `@media-query()`, `@width-setup()`\n\n*/\n/* SG\n# Tools/Spacing Utilities [[dev]]\n\n##### `@spacing-utilities()`\n###### mixin(`$namespace:''`, `$config`)\nGenerates responsive spacing and padding classes. The `$namespace` argument is the media query's name, which will be appended to all generated classes. The `$config` argument is a map that allows JS-style arguments. Outputs class name as: `breakpoint_prefix_direction_amount`.\n\n**`$config` Keys:**\n* `silent:` boolean for outputting silent/non-silent classes.\n* `important:` whether to output !important after each declaration.\n* `directions:` names that get appended to class names.\n* `amounts:` how much to multiply spacing unit by `$$base-line-height`.\n* `names:` corresponding names for each `amounts` that gets appended to class names.\n* `prefixes:` first word in the class name. Must contain the words 'pad' and 'space'. Used by `layout-type()` to determine padding or margin.\n\n\n##### `@spacing-utilities-init()`\n###### mixin(`$breakpoints:` `$$all-breakpoints`, `$namespace:''`, `$config:(silent:true)`)\nThe responsive component to `@spacing-utilities()`. Invoke `@spacing-utilites()` with that loops through a set of media-queries defined in `$$breakpoints`. This is most useful for creating responsive spacing classes.\n\n*/\n/* SG\n# Typography/Conversion [[dev]]\n\n##### `@px-to-rems()`\n###### mixin(`$property`, `$sizes`, `$important`: `false`, `$base-font`: `$$base-font-size`)\nTakes a pixel value and creates a property with a `rem` value. If `$$rem-px-fallback` is `true`, a pixel fallback is also included. `$sizes` also accepts 'auto'.\n@alias `@rems()`\n@requires `px-to-rems()`\n\n*/\n/* SG\n\n# Typography/Sizing [[dev]]\n\n##### `@type-font-size()`\n###### mixin(`$font-size, $line-height: auto, $font-base:``$$base-font-size`)\nQuickly generate a font-size in rems, with a pixel fallback, based on the value we pass into the mixin. Optionally calculates line-height using `$$base-line-height`.\n\n_`$line-height` also accepts a pixel value and will be converted to a unitless one._\n\n@alias `@font-size()`\n@requires `@px-to-rems()`, `cache()`, `baseline-calc()`\n\n*/\n/* SG\n# Typography/Spacing [[dev]]\n\n##### `@type-space()`\n###### mixin(`$properties, $multipliers, $important: false`)\nOutput REM values using the typographic grid. This is the prefered method of adding padding and margins because it enforces consistent spacing around all elements.\n\n**Arguments:**\n* `$properties`: Can be any `CSS` property that accepts a length value (e.g. `rem`). Also accepts multiple properties as a nested list (e.g. `(padding-left, padding-right)`).\n* `$multipliers`: Accepts unitless values that get converted to `rem` units which are a multiple of the typographic grid. Can be multiple values, **separated by spaces**, in the case of `margin` or `padding`.\n* `$important`: Accepts `true` or `!important`.\n\n**Example**\n```scss\n// SCSS input\n.foo {\n    @include type-space(padding, 1 .25 .5 auto, '!important');\n}\n\n// CSS output\n.foo {\n    padding: 24px 8px 12px auto !important;\n    padding: 1.5rem .375rem .75rem auto !important;\n}\n```\n\n@requires `@px-to-rems()`, `str-contains()`\n@alias `@space()`\n\n*/\n/* SG\n# Config/Typography Settings [[dev]]\n\n##### `$$base-font-size`\n###### Pixel value\nFont size all other values will use for calculation. Will be converted to `rems`.\n\n##### `$$base-line-height`\n###### Pixel value\nLine-height for base font-size. Will be used to determine the vertical spacing values when `type-space()` is used.\n\n##### `$$font-looseness`\n###### Percentage\nWhat to base the tightness/looseness of automatically-generated `line-heights`.\n\n##### `$$auto-scale-type`\n###### Boolean\nUses `$$scale-ratio` to create font sizes for headings starting from the `$$base-font-size`. Overwrites `$$type-[h#]-size`.\n\n##### `$$scale-ratio`\n###### Numeric (float)\nUsed for `$$auto-scale-type` and for `modular-scale()`.\n\n##### `$$rem-px-fallback`\n###### Boolean\nDetermines whether `rems()` conversion includes a pixel-value fallback for older browsers like IE8.\n\n##### `$$indented-paragraphs`\n###### Boolean\nDetermines whether to generate css for paragraphs with a text indent, rather than paragraphs with margins between them.\n\n*/\n/* SG\n# Config/Typography Settings [[dev]]\n\n##### `$$type-[h#]-size`\n###### List (pixel value [, pixel or unitless value])\nVariables used to generate heading (and small) font-sizes and line-heights. A secondary value will force the line-height to that base-value.\n\n_NOTE: First value must be pixel values(or a function that generates a pixel value like `modular-scale()`), but the optional secondary value can be unitless._\n*/\n/* SG\n# Config/Typography Settings [[dev]]\n\n##### `$$primary-font-stack`, `$$secondary-font-stack`, `$$monospace-font-stack`, `$$icon-font-stack`\n###### String\nUsed wherever font-families are declared. Use `null` if nothing exists.\n\n##### `$$use-web-fonts`\n###### Boolean\nWhether to generate `@font-face` values based on `$$font-file-name` (and the other `$font-` variables).\n\n##### `$$font-file-name`\n###### List (string)\nUses for automatically generated `@font-face` declarations. Describes the filename as well as the font-family name reference. _File names and @font-face values must be the same (e.g. 'opensans' and 'opensans.ttf').**Casing matters**._\n\n##### `$$font-weights`\n###### List (nested)\nEach parenthesis corresponds to each name in `$$font-file-name`. Determines how many `@font-face` weights are generated per font.\n\n##### `$$font-italics`\n###### List (nested) (boolean)\nCorresponds to each value in `$$font-weights`. (e.g. if `$font-weights: (400,700),(200,400)` and `$font-italics: (true),(false,true)` then the first font will have italics in the 400 and 700 weights while second font will have italics in the 400 weight).\n\n##### `$$font-include-woff2`\n###### Boolean (list)\nDetermines whether woff2 formats be included in the `@font-face` generation. Can be a list if each font has different values (not recommended since woff2 is the most performant font-file format).\n\n##### `$$font-include-eot`\n###### Boolean (list)\nDetermines whether to generate `@font-face` values that point at an .eot file. Fallback for IE8.\n\n*/\n/* SG\n# Config/Responsive Settings [[dev]]\n\n##### `$$max-site-width`\n###### Pixel value\nMaximum desktop width for the site wrapper.\n_This value is also useful as a breakpoint, since this is the point at which your site is going to squish._\n\n##### `$$max-content-width`\n###### Pixel value\nMaximum width for content set at the `$$base-font-size`. This should be set to whatever creates the ideal line-length for standard content (Usually 45-75 characters).\n_Also useful as a breakpoint, since it is typical that your viewport is now smaller than your ideal line-length._\n\n##### `$$max-wide-content-width`\n###### Pixel value\nSimilar to `$$max-content-width`, but for type that might be a little larger, but smaller than your maximum site width(`$$max-site-width`). Useful for hero-style text treatments and content blocks that need a bit of constraint.\n\n*/\n/* SG\n# Config/Breakpoints [[dev]]\n\n##### `$$breakpoints`\n###### Map (`breakpoint-name: 'breakpoint-value'`)\nSets up variables for media-queries. Used in `@media-query()`.\n\n_Note: It's usually good to convert your pixel values to ems to ensure best browser behavior. Can be accomplished via `0.625em`_\n\n**Example**\n```scss\n$breakpoints: (\n  'small':'(min-width: 320px)',\n  'bigs':'(min-width: 850px)'\n);\n```\n*/\n/* SG\n# Config/Grid Settings [[dev]]\n\n##### `$$grid-columns`\n###### Number\nBase number of grid columns to be generated. Note that any column number will include all fractions of the fewer columns. For instance, a 12-column grid would also include all fractions of 1-12 (including things like three-sevenths).\n\n##### `$$grid-gutter`\n###### Pixel value\nSpace between grid items. Also used in `type-space()` for horizontal spacing units.\n\n##### `$$grid-silent-classes`\n###### Boolean\nIf set to false, actual grid classes will be output to CSS.\n\n##### `$$grid-push`, `$$grid-pull`\n###### Boolean\nDetermines whether to include extra grid classes for positional grid modifiers.\n*/\n/* SG\n##### `$$grid-inline-block`\n###### Boolean\nCreate grids using an inline-block-based layout.\n\n##### `$$grid-markup-fix`\n###### Boolean\n**Only applicable to inline-block grid.** If set to `true`, html must have no white space (or comments) between grid items. Almost always set to `false`.\n\n##### `$$grid-letter-space-fix`\n###### em value\n**Only applicable to inline-block grid.** If `$$grid-markup-fix` is not used, then a negative `em` value must be set to remove whitespace between columns. Usually, `-0.45em` works, but this should be adjusted based on the natural width of the font-family set on the body element.\n\n##### `$$grid-flex`\n###### Boolean\nIf set to `true`, the grid will add markup for a flexbox-based layout. Can be combined with an inline-block-based grid to provide an older browser fallback.\n\n##### `$$grid-floats`\n###### Boolean\nIf set to `true`, the grid uses floats-based layout. **This is usually not recommended since inline-block and flexbox are much are more flexible.**\n*/\n/* SG\n##### `$$breakpoints-has-widths`, `$$breakpoints-has-push`, `$$breakpoints-has-pull`\n###### List (string)\nDetermines what classes (widths, pushes, pulls) get generated at `$$breakpoints`. The list's order determines the output order. This is useful if you want one breakpoint to override another.\n*/\n/* SG\n# Config/Utility Class Settings [[dev]]\n\n##### `$$breakpoint-namespace-character`\n###### String\nUsed to define what character comes after an auto-generated responsive class. A setting of '_' would create classes like `smalls_space-v` whereas a '@' would create classes like `smalls@space-v`.\n*/\n/* SG\n# Config/Utility Class Settings [[dev]]\n\n##### `$$display-classes`\n###### Map (string: string)\nVariable used to generate display classes. Key value pairs determine the class name and the display value.\n\n**Example**\n```scss\n//SCSS input\n$display-classes: ('show':'block');\n\n//CSS output\n.show { display: block; }\n```\n\n##### `$$spacing-classes`\n###### Map (`string: string`)\nVariable used to generate utility (override) spacing classes. Classes are created via `@spacing-utilities()`.\n\n**Keys and Values**\n* 'directions': Direction class suffixes.\n* 'units': Numeric multiples (e.g. `2` or `-1`) of your spacing units (`$$horizontal-space` and `$$vertical-space`).\n* 'properties': Class name aliases for padding and margin.\n\n**Example**\n```scss\n//SCSS Input\n    $display-classes: (\n        'directions': (\n            '-t': 'top',\n            '-r': 'right',\n            '-v': 'top' 'bottom'\n        ),\n        'units': (\n            '-2': 2,\n            '-neg': -1\n        ),\n        'properties': (\n            'pad': 'padding',\n            'margin': 'space'\n        )\n    );\n\n//CSS output\n    // Assume spacing units are 1rem, for simplicity\n    .space-t-2, .space-v-2 { margin-top: 2rem; }\n    .space-v-2 { margin-bottom: 2rem; }\n    .space-r-2 { margin-right: 2rem; }\n    .space-t-neg { margin-top: -1rem; }\n    .space-r-neg { margin-right: -1rem; }\n\n    .pad-t-2 { padding-top: 2rem; }\n    .pad-r-2 { padding-right: 2rem;}\n    //--Negative padding classes filtered out since they are invalid---//\n\n    @media only screen and (min-width:300px){...}\n    //repeated for all media-queries defined by $breakpoints-has-spacing-classes...\n```\n*/\n/* SG\n# Config/Utility Class Settings [[dev]]\n\n##### `$$breakpoints-has-alignment-classes`, `$$breakpoints-has-spacing-classes`, `$breakpoints-has-display-classes`, `$breakpoint-has-type-classes`\n###### List (keys from `$$breakpoints`)\nDetermines what utility classes get generated at `$$breakpoints`. The list's order determines cascade The list's order determines the output order. This is useful if you want one breakpoint to override another.\nA `false` value will output no classes of that type.\n*/\n/* SG\n# Config/Color Settings [[dev]]\n\n##### `$$base-colors`\n###### Map (key : color value)\nSets up consistent color names to be used for color-palette. Dark and light values will be automatically generated. Key values should be accessed through `colors()`.\n`type`, `links`, and `bg` key values are required for some starter styles. If you choose not to use them, just replace their references in the appropriate files.\n\nSupports a nested map style like the following:\n```scss\n$base-colors: (\n  'type':(\n    'base':red,\n    'light': pink,\n    'dark':maroon\n  ),\n  'links':(\n    'base':blue,\n    'light': sky,\n    'dark': navy\n  ),\n  'bg': (\n    'base': #fff,\n    'dark': #ddd\n  )\n);\n```\n*/\n/* SG\n# Config/Debug Settings [[dev]]\n\n_NOTE: These settings, when set to `true`, will slow down compilation somewhat._\n\n##### `$$debug-fonts`\n###### Boolean\nWhether to include debug statements about font sizes and line-heights as they're generated. Useful if you're getting weird values on auto-generated line-heights.\n\n* %: Distance from the lowest font-size.\n* ub: Line-height upperbounds\n* lb: Line-height lowerbounds\n* lh: Final line-height (in pixels and unit-less).\n* loops: Number of times it took to process the line-height. High numbers can indicate font-sizes that are very difficult to process.\n\n##### `$$debug-baseline`\n###### Boolean\nAdds style for a `baseline-on` class that will show a grid of the baseline on any element (most useful on the `body` or `html` tag). Makes vertical alignment easier.\n\n\n##### `$$debug-silent-classes`\n###### Boolean\nStores all auto-generated silent classes into a map that is then output as a comment at the end of the final css. Useful for getting an overview of values that are stored by the framework.\n\n##### `$$debug-breakpoints`\n###### Boolean\nDisplays the current breakpoint (from `$$breakpoints`) name on a psuedo element on the body. Makes debugging media queries a little simpler.\n\n*/\n/* SG\n# Config/Slick Settings [[dev]]\n\n##### `$$slick-[]-[]`\nConfiguration for slick carousel jQuery plugin.\n[See Slick documentation for more](https://github.com/kenwheeler/slick/#sass-variables)\n\n*/\n/* SG\n# Variables/Globals [[dev]]\nThe variables here are created based on the config variables passed by the user. These are generally abstracted to make them a little easier to parse, programmatically.\n\n##### `$$type-[h1-6,p,small]-lh`\n###### boolean/unitless/pixel value\nParses `$$type-h[#]-size` for an optional line-height value, if none exists, pass it along to `baseline-calc()`.\n@alias `$$h[#]-lh`\n\n##### `$$type-[h1-6,p,small]-size`\n###### Number (pixel)\nFont sizes, as defined by the user or `$$auto-scale-type`.\n*/\n/* SG\n##### `$$type-base-unit`\n###### Number\nAbstraction of the base spacing unit used in any mixin or function that defines spacing units.\n\n##### `$$type-base-ratio`\n###### Number\nRatio used to calculate the difference between font sizes and spacing units.\n\n##### `$$type-headings`\n###### List (number)\nUsed for defining automatic headings functions.\n\n##### `$$type-modular-scale`\n###### Number\nAbstracts the `$$scale-ratio` and makes sure it's a positive number.\n*/\n/*\n##### `$$all-breakpoints`\n###### List\nStores all the names defined in `$$breakpoints` for use in abstract framework components so that if names are chagned, boilerplate media queries won't fail.\n\n##### `$$breakpoint-smallest`\n###### String\nGrabs the first `$$breakpoints` name.\n\n##### `$$breakpoint-largest`\n###### String\nGrabs the last `$$breakpoints` name.\n*/\n/* SG\n# Color Palette\n\n```html_example\n<div class=\"color-block\"></div><div class=\"color-block\"></div><div class=\"color-block\"></div><div class=\"color-block\"></div><div class=\"color-block\"></div><div class=\"color-block\"></div><div class=\"color-block\"></div>\n<div class=\"color-block\"></div><div class=\"color-block\"></div><div class=\"color-block\"></div><div class=\"color-block\"></div><div class=\"color-block\"></div><div class=\"color-block\"></div><div class=\"color-block\"></div>\n<div class=\"color-block\"></div><div class=\"color-block\"></div><div class=\"color-block\"></div><div class=\"color-block\"></div><div class=\"color-block\"></div><div class=\"color-block\"></div><div class=\"color-block\"></div>\n<div class=\"color-block\"></div><div class=\"color-block\"></div><div class=\"color-block\"></div><div class=\"color-block\"></div><div class=\"color-block\"></div><div class=\"color-block\"></div><div class=\"color-block\"></div>\n<div class=\"color-block\"></div><div class=\"color-block\"></div><div class=\"color-block\"></div><div class=\"color-block\"></div><div class=\"color-block\"></div><div class=\"color-block\"></div><div class=\"color-block\"></div>\n<div class=\"color-block\"></div><div class=\"color-block\"></div><div class=\"color-block\"></div><div class=\"color-block\"></div><div class=\"color-block\"></div><div class=\"color-block\"></div><div class=\"color-block\"></div>\n<div class=\"color-block\"></div><div class=\"color-block\"></div><div class=\"color-block\"></div><div class=\"color-block\"></div><div class=\"color-block\"></div><div class=\"color-block\"></div><div class=\"color-block\"></div>\n```\n*/\n.color-block:nth-child(1) {\n  background-color: #0a1c2b;\n  color: #fff;\n  padding: 2% 1% 2.5%;\n}\n\n.color-block:nth-child(1):before {\n  content: \"type\";\n}\n\n.color-block:nth-child(1):after {\n  content: \"#0a1c2b\";\n}\n\n.color-block:nth-child(2) {\n  background-color: #0d497b;\n  color: #fff;\n  padding: 2% 1% 2.5%;\n}\n\n.color-block:nth-child(2):before {\n  content: \"links\";\n}\n\n.color-block:nth-child(2):after {\n  content: \"#0d497b\";\n}\n\n.color-block:nth-child(3) {\n  background-color: #f6f8fb;\n  color: #000;\n  padding: 2% 1% 2.5%;\n}\n\n.color-block:nth-child(3):before {\n  content: \"bg\";\n}\n\n.color-block:nth-child(3):after {\n  content: \"#f6f8fb\";\n}\n\n.color-block:nth-child(4) {\n  background-color: #5E839E;\n  color: #fff;\n  padding: 2% 1% 2.5%;\n}\n\n.color-block:nth-child(4):before {\n  content: \"styleguide\";\n}\n\n.color-block:nth-child(4):after {\n  content: \"#5E839E\";\n}\n\n.color-block:nth-child(5) {\n  background-color: #081D33;\n  color: #fff;\n  padding: 2% 1% 2.5%;\n}\n\n.color-block:nth-child(5):before {\n  content: \"styleguide darkest\";\n}\n\n.color-block:nth-child(5):after {\n  content: \"#081D33\";\n}\n\n.color-block:nth-child(6) {\n  background-color: #390207;\n  color: #fff;\n  padding: 2% 1% 2.5%;\n}\n\n.color-block:nth-child(6):before {\n  content: \"accent darkest\";\n}\n\n.color-block:nth-child(6):after {\n  content: \"#390207\";\n}\n\n.color-block:nth-child(7) {\n  background-color: #496881;\n  color: #fff;\n}\n\n.color-block:nth-child(7):before {\n  content: \"type light\";\n}\n\n.color-block:nth-child(7):after {\n  content: \"#496881\";\n}\n\n.color-block:nth-child(8) {\n  background-color: #4c95bd;\n  color: #fff;\n}\n\n.color-block:nth-child(8):before {\n  content: \"links light\";\n}\n\n.color-block:nth-child(8):after {\n  content: \"#4c95bd\";\n}\n\n.color-block:nth-child(9) {\n  background-color: #fbfcfd;\n  color: #000;\n}\n\n.color-block:nth-child(9):before {\n  content: \"bg light\";\n}\n\n.color-block:nth-child(9):after {\n  content: \"#fbfcfd\";\n}\n\n.color-block:nth-child(10) {\n  background-color: #CADDE2;\n  color: #000;\n}\n\n.color-block:nth-child(10):before {\n  content: \"styleguide light\";\n}\n\n.color-block:nth-child(10):after {\n  content: \"#CADDE2\";\n}\n\n.color-block:nth-child(11) {\n  background-color: #bf0516;\n  color: #fff;\n}\n\n.color-block:nth-child(11):before {\n  content: \"accent\";\n}\n\n.color-block:nth-child(11):after {\n  content: \"#bf0516\";\n}\n\n.color-block:nth-child(12) {\n  background-color: #bada55;\n  color: #000;\n}\n\n.color-block:nth-child(12):before {\n  content: \"success\";\n}\n\n.color-block:nth-child(12):after {\n  content: \"#bada55\";\n}\n\n.color-block:nth-child(13) {\n  background-color: #8fa4aa;\n  color: #fff;\n}\n\n.color-block:nth-child(13):before {\n  content: \"type lighter\";\n}\n\n.color-block:nth-child(13):after {\n  content: \"#8fa4aa\";\n}\n\n.color-block:nth-child(14) {\n  background-color: #92b6ca;\n  color: #fff;\n}\n\n.color-block:nth-child(14):before {\n  content: \"links lighter\";\n}\n\n.color-block:nth-child(14):after {\n  content: \"#92b6ca\";\n}\n\n.color-block:nth-child(15) {\n  background-color: #fbfcfd;\n  color: #000;\n}\n\n.color-block:nth-child(15):before {\n  content: \"bg lighter\";\n}\n\n.color-block:nth-child(15):after {\n  content: \"#fbfcfd\";\n}\n\n.color-block:nth-child(16) {\n  background-color: #F5D1DD;\n  color: #000;\n}\n\n.color-block:nth-child(16):before {\n  content: \"styleguide lighter\";\n}\n\n.color-block:nth-child(16):after {\n  content: \"#F5D1DD\";\n}\n\n.color-block:nth-child(17) {\n  background-color: #df516c;\n  color: #fff;\n}\n\n.color-block:nth-child(17):before {\n  content: \"accent light\";\n}\n\n.color-block:nth-child(17):after {\n  content: \"#df516c\";\n}\n\n.color-block:nth-child(18) {\n  background-color: #ddedaa;\n  color: #000;\n}\n\n.color-block:nth-child(18):before {\n  content: \"success light\";\n}\n\n.color-block:nth-child(18):after {\n  content: \"#ddedaa\";\n}\n\n.color-block:nth-child(19) {\n  background-color: #ced2d5;\n  color: #000;\n}\n\n.color-block:nth-child(19):before {\n  content: \"type lightest\";\n}\n\n.color-block:nth-child(19):after {\n  content: \"#ced2d5\";\n}\n\n.color-block:nth-child(20) {\n  background-color: #cfdbe5;\n  color: #000;\n}\n\n.color-block:nth-child(20):before {\n  content: \"links lightest\";\n}\n\n.color-block:nth-child(20):after {\n  content: \"#cfdbe5\";\n}\n\n.color-block:nth-child(21) {\n  background-color: #fdfefe;\n  color: #000;\n}\n\n.color-block:nth-child(21):before {\n  content: \"bg lightest\";\n}\n\n.color-block:nth-child(21):after {\n  content: \"#fdfefe\";\n}\n\n.color-block:nth-child(22) {\n  background-color: #E0ECF0;\n  color: #000;\n}\n\n.color-block:nth-child(22):before {\n  content: \"styleguide lightest\";\n}\n\n.color-block:nth-child(22):after {\n  content: \"#E0ECF0\";\n}\n\n.color-block:nth-child(23) {\n  background-color: #e591a2;\n  color: #fff;\n}\n\n.color-block:nth-child(23):before {\n  content: \"accent lighter\";\n}\n\n.color-block:nth-child(23):after {\n  content: \"#e591a2\";\n}\n\n.color-block:nth-child(24) {\n  background-color: #e3f0bb;\n  color: #000;\n}\n\n.color-block:nth-child(24):before {\n  content: \"success lighter\";\n}\n\n.color-block:nth-child(24):after {\n  content: \"#e3f0bb\";\n}\n\n.color-block:nth-child(25) {\n  background-color: #050f16;\n  color: #fff;\n}\n\n.color-block:nth-child(25):before {\n  content: \"type dark\";\n}\n\n.color-block:nth-child(25):after {\n  content: \"#050f16\";\n}\n\n.color-block:nth-child(26) {\n  background-color: #0b3b64;\n  color: #fff;\n}\n\n.color-block:nth-child(26):before {\n  content: \"links dark\";\n}\n\n.color-block:nth-child(26):after {\n  content: \"#0b3b64\";\n}\n\n.color-block:nth-child(27) {\n  background-color: #e4eaf3;\n  color: #000;\n}\n\n.color-block:nth-child(27):before {\n  content: \"bg dark\";\n}\n\n.color-block:nth-child(27):after {\n  content: \"#e4eaf3\";\n}\n\n.color-block:nth-child(28) {\n  background-color: #f60255;\n  color: #fff;\n}\n\n.color-block:nth-child(28):before {\n  content: \"styleguide highlight\";\n}\n\n.color-block:nth-child(28):after {\n  content: \"#f60255\";\n}\n\n.color-block:nth-child(29) {\n  background-color: #f2cdd0;\n  color: #000;\n}\n\n.color-block:nth-child(29):before {\n  content: \"accent lightest\";\n}\n\n.color-block:nth-child(29):after {\n  content: \"#f2cdd0\";\n}\n\n.color-block:nth-child(30) {\n  background-color: #f1f8dd;\n  color: #000;\n}\n\n.color-block:nth-child(30):before {\n  content: \"success lightest\";\n}\n\n.color-block:nth-child(30):after {\n  content: \"#f1f8dd\";\n}\n\n.color-block:nth-child(31) {\n  background-color: #06111a;\n  color: #fff;\n}\n\n.color-block:nth-child(31):before {\n  content: \"type darker\";\n}\n\n.color-block:nth-child(31):after {\n  content: \"#06111a\";\n}\n\n.color-block:nth-child(32) {\n  background-color: #082c4a;\n  color: #fff;\n}\n\n.color-block:nth-child(32):before {\n  content: \"links darker\";\n}\n\n.color-block:nth-child(32):after {\n  content: \"#082c4a\";\n}\n\n.color-block:nth-child(33) {\n  background-color: #aeb6be;\n  color: #000;\n}\n\n.color-block:nth-child(33):before {\n  content: \"bg darker\";\n}\n\n.color-block:nth-child(33):after {\n  content: \"#aeb6be\";\n}\n\n.color-block:nth-child(34) {\n  background-color: #175CA2;\n  color: #fff;\n}\n\n.color-block:nth-child(34):before {\n  content: \"styleguide dark\";\n}\n\n.color-block:nth-child(34):after {\n  content: \"#175CA2\";\n}\n\n.color-block:nth-child(35) {\n  background-color: #a60413;\n  color: #fff;\n}\n\n.color-block:nth-child(35):before {\n  content: \"accent dark\";\n}\n\n.color-block:nth-child(35):after {\n  content: \"#a60413\";\n}\n\n.color-block:nth-child(36) {\n  background-color: #b2d540;\n  color: #000;\n}\n\n.color-block:nth-child(36):before {\n  content: \"success dark\";\n}\n\n.color-block:nth-child(36):after {\n  content: \"#b2d540\";\n}\n\n.color-block:nth-child(37) {\n  background-color: #03080d;\n  color: #fff;\n}\n\n.color-block:nth-child(37):before {\n  content: \"type darkest\";\n}\n\n.color-block:nth-child(37):after {\n  content: \"#03080d\";\n}\n\n.color-block:nth-child(38) {\n  background-color: #041625;\n  color: #fff;\n}\n\n.color-block:nth-child(38):before {\n  content: \"links darkest\";\n}\n\n.color-block:nth-child(38):after {\n  content: \"#041625\";\n}\n\n.color-block:nth-child(39) {\n  background-color: #677077;\n  color: #fff;\n}\n\n.color-block:nth-child(39):before {\n  content: \"bg darkest\";\n}\n\n.color-block:nth-child(39):after {\n  content: \"#677077\";\n}\n\n.color-block:nth-child(40) {\n  background-color: #114a84;\n  color: #fff;\n}\n\n.color-block:nth-child(40):before {\n  content: \"styleguide darker\";\n}\n\n.color-block:nth-child(40):after {\n  content: \"#114a84\";\n}\n\n.color-block:nth-child(41) {\n  background-color: #77030d;\n  color: #fff;\n}\n\n.color-block:nth-child(41):before {\n  content: \"accent darker\";\n}\n\n.color-block:nth-child(41):after {\n  content: \"#77030d\";\n}\n\n.color-block:nth-child(42) {\n  background-color: #729833;\n  color: #fff;\n}\n\n.color-block:nth-child(42):before {\n  content: \"success darker\";\n}\n\n.color-block:nth-child(42):after {\n  content: \"#729833\";\n}\n\n.color-block:nth-child(43) {\n  background-color: #0d497b;\n  color: #fff;\n}\n\n.color-block:nth-child(43):before {\n  content: \"links\";\n}\n\n.color-block:nth-child(43):after {\n  content: \"#0d497b\";\n}\n\n.color-block {\n  width: 15.66667%;\n  padding: 1%;\n  margin-right: .95%;\n  float: left;\n  overflow: hidden;\n}\n\n.color-block:before {\n  font-size: 0.74074rem;\n  display: block;\n  white-space: nowrap;\n}\n\n.color-block:after {\n  font-size: 0.5487rem;\n  display: block;\n}\n\n.color-block:before {\n  text-transform: capitalize;\n}\n\n.color-block:after {\n  letter-spacing: 0.1em;\n}\n\n/* SG\n# Grid/Basics\n\n@priority 1\n\nThis is an example of a flex-box-based grid system with an inline-block fallback.\n\nAll grids start with a `grid` or `row` element, with nested `grid_item` or `column` element(s). All columns start at 100% width, so adding width classes to columns is required to make them to sit next to each other.\n\n_NOTE: The following width classes are out of the box. If you'd like to use your own classes for widths and grid items, then set `$grid-silent-classes` is set to true and use extends for style inheritence._\n\n```html_example\n<div class=\"grid\">\n    <div class=\"grid_item\">Column (100% width)</div>\n\n    <div class=\"grid_item one_half\">1/2 Column</div>\n    <div class=\"grid_item one_half\">1/2 Column</div>\n\n    <div class=\"grid_item one_third\">1/3 Column</div>\n    <div class=\"grid_item one_third\">1/3 Column</div>\n    <div class=\"grid_item one_third\">1/3 Column</div>\n\n    <div class=\"grid_item one_fourth\"> 1/4 Column</div>\n    <div class=\"grid_item one_quarter\">1/4 Column</div>\n    <div class=\"grid_item one_fourth\"> 1/4 Column</div>\n    <div class=\"grid_item one_fourth\"> 1/4 Column</div>\n</div>\n```\n*/\n/* SG\n# Grid/Automatic columns\n\n@priority 2\n\nGrids/rows set with a `grid_auto` class will create columns that have automatic widths based on their content.\n\nYou can also combine automatic columns with width-based one. The automatic columns with fill the space around the set-width column.\n\n_Note: Flexbox handles this a little differently than inline-block, so check older browsers before using this style of grid to be sure you're getting a similar result._\n\n```html_example\n<div class=\"grid grid_auto\">\n    <div class=\"grid_item\">Auto Column</div>\n    <div class=\"grid_item\">Auto Column</div>\n    <div class=\"grid_item\">Auto Column</div>\n    <div class=\"grid_item\">Auto Column</div>\n    <div class=\"grid_item one_third\">Set Width (1/3)</div>\n    <div class=\"grid_item\">Auto Column</div>\n    <div class=\"grid_item\">Auto Column</div>\n    <div class=\"grid_item\">Auto Column</div>\n    <div class=\"grid_item one_half\">Set Width (1/2)</div>\n    <div class=\"grid_item\">Auto Column</div>\n    <div class=\"grid_item\">Auto Column</div>\n    <div class=\"grid_item\">Auto Column</div>\n</div>\n```\n*/\n/* SG\n# Grid/Gutter Control\n\n@priority 3\n\nGutters (spaces between grid items) default to 1.5rem. However, there are three grid gutter classes to alter this behavior.\n\n* `grid_full` will set gutters to 0.\n* `grid_wide` will double the width of gutters.\n* `grid_narrow` will halve the width of gutters.\n\n```html_example\n<div class=\"grid grid_full\">\n    <div class=\"grid_item one_third\">No gutter</div>\n    <div class=\"grid_item one_third\">No gutter</div>\n    <div class=\"grid_item one_third\">No gutter</div>\n</div>\n<div class=\"grid grid_wide\">\n    <div class=\"grid_item one_third\">Wide gutter</div>\n    <div class=\"grid_item one_third\">Wide gutter</div>\n    <div class=\"grid_item one_third\">Wide gutter</div>\n</div>\n<div class=\"grid grid_narrow\">\n    <div class=\"grid_item one_third\">Narrow gutter</div>\n    <div class=\"grid_item one_third\">Narrow gutter</div>\n    <div class=\"grid_item one_third\">Narrow gutter</div>\n</div>\n```\n*/\n.grid, .grid_reset_item {\n  list-style: none;\n  margin: 0;\n  padding: 0;\n  margin-left: -2rem;\n  letter-spacing: -0.45em;\n  display: flex;\n  flex-wrap: wrap;\n}\n\n.grid .opera:-o-prefocus, .grid_reset_item .opera:-o-prefocus, .grid, .grid_reset_item {\n  word-spacing: -0.45em;\n}\n\n.grid_item {\n  padding-left: 2rem;\n  width: 100%;\n  min-height: 1px;\n  display: inline-block;\n  vertical-align: top;\n  letter-spacing: normal;\n  word-spacing: normal;\n  flex: 0 0 100%;\n  width: 100%;\n  flex-basis: 100%;\n  max-width: 100%;\n}\n\n.grid_reset_item {\n  padding-left: 2rem;\n  width: 100%;\n  min-height: 1px;\n  display: inline-block;\n  vertical-align: top;\n  letter-spacing: normal;\n  word-spacing: normal;\n  flex: 0 0 100%;\n  width: 100%;\n  flex-basis: 100%;\n  max-width: 100%;\n}\n\n.grid_rev,\n.grid_reverse {\n  direction: rtl;\n  text-align: left;\n}\n\n.grid_rev > .grid_item,\n.grid_reverse > .grid_item {\n  direction: ltr;\n  text-align: left;\n}\n\n.grid_right {\n  text-align: right;\n  justify-content: flex-end;\n}\n\n.grid_right > .grid_item {\n  text-align: left;\n}\n\n.grid_center {\n  justify-content: center;\n  text-align: center;\n}\n\n.grid_center > .grid_item {\n  text-align: left;\n}\n\n.grid_middle > .grid_item {\n  align-self: center;\n  vertical-align: middle;\n}\n\n.grid_bottom > .grid_item {\n  align-self: flex-end;\n  vertical-align: bottom;\n}\n\n.grid_full {\n  margin-left: 0;\n}\n\n.grid_full > .grid_item {\n  padding-left: 0;\n}\n\n.grid_narrow {\n  margin-left: -1rem;\n}\n\n.grid_narrow > .grid_item {\n  padding-left: 1rem;\n}\n\n.grid_wide {\n  margin-left: -4rem;\n}\n\n.grid_wide > .grid_item {\n  padding-left: 4rem;\n}\n\n.grid_auto {\n  text-align: justify;\n}\n\n.grid_auto:after {\n  content: \" \";\n  display: inline-block;\n  width: 100%;\n  height: 1px;\n}\n\n.grid_auto > .grid_item,\n.grid_auto .grid_item_auto {\n  width: auto;\n  text-align: left;\n  flex-grow: 1;\n  flex-basis: auto;\n}\n\n.one_whole {\n  width: 100% !important;\n  max-width: 100% !important;\n  flex-basis: 100% !important;\n}\n\n.one_thirteenth {\n  width: 7.69231% !important;\n  max-width: 7.69231% !important;\n  flex-basis: 7.69231% !important;\n}\n\n.two_thirteenths {\n  width: 15.38462% !important;\n  max-width: 15.38462% !important;\n  flex-basis: 15.38462% !important;\n}\n\n.three_thirteenths {\n  width: 23.07692% !important;\n  max-width: 23.07692% !important;\n  flex-basis: 23.07692% !important;\n}\n\n.four_thirteenths {\n  width: 30.76923% !important;\n  max-width: 30.76923% !important;\n  flex-basis: 30.76923% !important;\n}\n\n.five_thirteenths {\n  width: 38.46154% !important;\n  max-width: 38.46154% !important;\n  flex-basis: 38.46154% !important;\n}\n\n.six_thirteenths {\n  width: 46.15385% !important;\n  max-width: 46.15385% !important;\n  flex-basis: 46.15385% !important;\n}\n\n.seven_thirteenths {\n  width: 53.84615% !important;\n  max-width: 53.84615% !important;\n  flex-basis: 53.84615% !important;\n}\n\n.eight_thirteenths {\n  width: 61.53846% !important;\n  max-width: 61.53846% !important;\n  flex-basis: 61.53846% !important;\n}\n\n.nine_thirteenths {\n  width: 69.23077% !important;\n  max-width: 69.23077% !important;\n  flex-basis: 69.23077% !important;\n}\n\n.ten_thirteenths {\n  width: 76.92308% !important;\n  max-width: 76.92308% !important;\n  flex-basis: 76.92308% !important;\n}\n\n.eleven_thirteenths {\n  width: 84.61538% !important;\n  max-width: 84.61538% !important;\n  flex-basis: 84.61538% !important;\n}\n\n.twelve_thirteenths {\n  width: 92.30769% !important;\n  max-width: 92.30769% !important;\n  flex-basis: 92.30769% !important;\n}\n\n.one_twelfth {\n  width: 8.33333% !important;\n  max-width: 8.33333% !important;\n  flex-basis: 8.33333% !important;\n}\n\n.two_twelfths {\n  width: 16.66667% !important;\n  max-width: 16.66667% !important;\n  flex-basis: 16.66667% !important;\n}\n\n.three_twelfths {\n  width: 25% !important;\n  max-width: 25% !important;\n  flex-basis: 25% !important;\n}\n\n.four_twelfths {\n  width: 33.33333% !important;\n  max-width: 33.33333% !important;\n  flex-basis: 33.33333% !important;\n}\n\n.five_twelfths {\n  width: 41.66667% !important;\n  max-width: 41.66667% !important;\n  flex-basis: 41.66667% !important;\n}\n\n.six_twelfths {\n  width: 50% !important;\n  max-width: 50% !important;\n  flex-basis: 50% !important;\n}\n\n.seven_twelfths {\n  width: 58.33333% !important;\n  max-width: 58.33333% !important;\n  flex-basis: 58.33333% !important;\n}\n\n.eight_twelfths {\n  width: 66.66667% !important;\n  max-width: 66.66667% !important;\n  flex-basis: 66.66667% !important;\n}\n\n.nine_twelfths {\n  width: 75% !important;\n  max-width: 75% !important;\n  flex-basis: 75% !important;\n}\n\n.ten_twelfths {\n  width: 83.33333% !important;\n  max-width: 83.33333% !important;\n  flex-basis: 83.33333% !important;\n}\n\n.eleven_twelfths {\n  width: 91.66667% !important;\n  max-width: 91.66667% !important;\n  flex-basis: 91.66667% !important;\n}\n\n.one_eleventh {\n  width: 9.09091% !important;\n  max-width: 9.09091% !important;\n  flex-basis: 9.09091% !important;\n}\n\n.two_elevenths {\n  width: 18.18182% !important;\n  max-width: 18.18182% !important;\n  flex-basis: 18.18182% !important;\n}\n\n.three_elevenths {\n  width: 27.27273% !important;\n  max-width: 27.27273% !important;\n  flex-basis: 27.27273% !important;\n}\n\n.four_elevenths {\n  width: 36.36364% !important;\n  max-width: 36.36364% !important;\n  flex-basis: 36.36364% !important;\n}\n\n.five_elevenths {\n  width: 45.45455% !important;\n  max-width: 45.45455% !important;\n  flex-basis: 45.45455% !important;\n}\n\n.six_elevenths {\n  width: 54.54545% !important;\n  max-width: 54.54545% !important;\n  flex-basis: 54.54545% !important;\n}\n\n.seven_elevenths {\n  width: 63.63636% !important;\n  max-width: 63.63636% !important;\n  flex-basis: 63.63636% !important;\n}\n\n.eight_elevenths {\n  width: 72.72727% !important;\n  max-width: 72.72727% !important;\n  flex-basis: 72.72727% !important;\n}\n\n.nine_elevenths {\n  width: 81.81818% !important;\n  max-width: 81.81818% !important;\n  flex-basis: 81.81818% !important;\n}\n\n.ten_elevenths {\n  width: 90.90909% !important;\n  max-width: 90.90909% !important;\n  flex-basis: 90.90909% !important;\n}\n\n.one_tenth {\n  width: 10% !important;\n  max-width: 10% !important;\n  flex-basis: 10% !important;\n}\n\n.two_tenths {\n  width: 20% !important;\n  max-width: 20% !important;\n  flex-basis: 20% !important;\n}\n\n.three_tenths {\n  width: 30% !important;\n  max-width: 30% !important;\n  flex-basis: 30% !important;\n}\n\n.four_tenths {\n  width: 40% !important;\n  max-width: 40% !important;\n  flex-basis: 40% !important;\n}\n\n.five_tenths {\n  width: 50% !important;\n  max-width: 50% !important;\n  flex-basis: 50% !important;\n}\n\n.six_tenths {\n  width: 60% !important;\n  max-width: 60% !important;\n  flex-basis: 60% !important;\n}\n\n.seven_tenths {\n  width: 70% !important;\n  max-width: 70% !important;\n  flex-basis: 70% !important;\n}\n\n.eight_tenths {\n  width: 80% !important;\n  max-width: 80% !important;\n  flex-basis: 80% !important;\n}\n\n.nine_tenths {\n  width: 90% !important;\n  max-width: 90% !important;\n  flex-basis: 90% !important;\n}\n\n.one_ninth {\n  width: 11.11111% !important;\n  max-width: 11.11111% !important;\n  flex-basis: 11.11111% !important;\n}\n\n.two_ninths {\n  width: 22.22222% !important;\n  max-width: 22.22222% !important;\n  flex-basis: 22.22222% !important;\n}\n\n.three_ninths {\n  width: 33.33333% !important;\n  max-width: 33.33333% !important;\n  flex-basis: 33.33333% !important;\n}\n\n.four_ninths {\n  width: 44.44444% !important;\n  max-width: 44.44444% !important;\n  flex-basis: 44.44444% !important;\n}\n\n.five_ninths {\n  width: 55.55556% !important;\n  max-width: 55.55556% !important;\n  flex-basis: 55.55556% !important;\n}\n\n.six_ninths {\n  width: 66.66667% !important;\n  max-width: 66.66667% !important;\n  flex-basis: 66.66667% !important;\n}\n\n.seven_ninths {\n  width: 77.77778% !important;\n  max-width: 77.77778% !important;\n  flex-basis: 77.77778% !important;\n}\n\n.eight_ninths {\n  width: 88.88889% !important;\n  max-width: 88.88889% !important;\n  flex-basis: 88.88889% !important;\n}\n\n.one_eighth {\n  width: 12.5% !important;\n  max-width: 12.5% !important;\n  flex-basis: 12.5% !important;\n}\n\n.two_eighths {\n  width: 25% !important;\n  max-width: 25% !important;\n  flex-basis: 25% !important;\n}\n\n.three_eighths {\n  width: 37.5% !important;\n  max-width: 37.5% !important;\n  flex-basis: 37.5% !important;\n}\n\n.four_eighths {\n  width: 50% !important;\n  max-width: 50% !important;\n  flex-basis: 50% !important;\n}\n\n.five_eighths {\n  width: 62.5% !important;\n  max-width: 62.5% !important;\n  flex-basis: 62.5% !important;\n}\n\n.six_eighths {\n  width: 75% !important;\n  max-width: 75% !important;\n  flex-basis: 75% !important;\n}\n\n.seven_eighths {\n  width: 87.5% !important;\n  max-width: 87.5% !important;\n  flex-basis: 87.5% !important;\n}\n\n.one_seventh {\n  width: 14.28571% !important;\n  max-width: 14.28571% !important;\n  flex-basis: 14.28571% !important;\n}\n\n.two_sevenths {\n  width: 28.57143% !important;\n  max-width: 28.57143% !important;\n  flex-basis: 28.57143% !important;\n}\n\n.three_sevenths {\n  width: 42.85714% !important;\n  max-width: 42.85714% !important;\n  flex-basis: 42.85714% !important;\n}\n\n.four_sevenths {\n  width: 57.14286% !important;\n  max-width: 57.14286% !important;\n  flex-basis: 57.14286% !important;\n}\n\n.five_sevenths {\n  width: 71.42857% !important;\n  max-width: 71.42857% !important;\n  flex-basis: 71.42857% !important;\n}\n\n.six_sevenths {\n  width: 85.71429% !important;\n  max-width: 85.71429% !important;\n  flex-basis: 85.71429% !important;\n}\n\n.one_sixth {\n  width: 16.66667% !important;\n  max-width: 16.66667% !important;\n  flex-basis: 16.66667% !important;\n}\n\n.two_sixths {\n  width: 33.33333% !important;\n  max-width: 33.33333% !important;\n  flex-basis: 33.33333% !important;\n}\n\n.three_sixths {\n  width: 50% !important;\n  max-width: 50% !important;\n  flex-basis: 50% !important;\n}\n\n.four_sixths {\n  width: 66.66667% !important;\n  max-width: 66.66667% !important;\n  flex-basis: 66.66667% !important;\n}\n\n.five_sixths {\n  width: 83.33333% !important;\n  max-width: 83.33333% !important;\n  flex-basis: 83.33333% !important;\n}\n\n.one_fifth {\n  width: 20% !important;\n  max-width: 20% !important;\n  flex-basis: 20% !important;\n}\n\n.two_fifths {\n  width: 40% !important;\n  max-width: 40% !important;\n  flex-basis: 40% !important;\n}\n\n.three_fifths {\n  width: 60% !important;\n  max-width: 60% !important;\n  flex-basis: 60% !important;\n}\n\n.four_fifths {\n  width: 80% !important;\n  max-width: 80% !important;\n  flex-basis: 80% !important;\n}\n\n.one_quarter, .one_fourth {\n  width: 25% !important;\n  max-width: 25% !important;\n  flex-basis: 25% !important;\n}\n\n.two_quarters, .two_fourths {\n  width: 50% !important;\n  max-width: 50% !important;\n  flex-basis: 50% !important;\n}\n\n.three_quarters, .three_fourths {\n  width: 75% !important;\n  max-width: 75% !important;\n  flex-basis: 75% !important;\n}\n\n.one_third {\n  width: 33.33333% !important;\n  max-width: 33.33333% !important;\n  flex-basis: 33.33333% !important;\n}\n\n.two_thirds {\n  width: 66.66667% !important;\n  max-width: 66.66667% !important;\n  flex-basis: 66.66667% !important;\n}\n\n.one_half {\n  width: 50% !important;\n  max-width: 50% !important;\n  flex-basis: 50% !important;\n}\n\n@media only screen and (max-width: 56.875em) {\n  .smalls_one_whole {\n    width: 100% !important;\n    max-width: 100% !important;\n    flex-basis: 100% !important;\n  }\n  .smalls_one_thirteenth {\n    width: 7.69231% !important;\n    max-width: 7.69231% !important;\n    flex-basis: 7.69231% !important;\n  }\n  .smalls_two_thirteenths {\n    width: 15.38462% !important;\n    max-width: 15.38462% !important;\n    flex-basis: 15.38462% !important;\n  }\n  .smalls_three_thirteenths {\n    width: 23.07692% !important;\n    max-width: 23.07692% !important;\n    flex-basis: 23.07692% !important;\n  }\n  .smalls_four_thirteenths {\n    width: 30.76923% !important;\n    max-width: 30.76923% !important;\n    flex-basis: 30.76923% !important;\n  }\n  .smalls_five_thirteenths {\n    width: 38.46154% !important;\n    max-width: 38.46154% !important;\n    flex-basis: 38.46154% !important;\n  }\n  .smalls_six_thirteenths {\n    width: 46.15385% !important;\n    max-width: 46.15385% !important;\n    flex-basis: 46.15385% !important;\n  }\n  .smalls_seven_thirteenths {\n    width: 53.84615% !important;\n    max-width: 53.84615% !important;\n    flex-basis: 53.84615% !important;\n  }\n  .smalls_eight_thirteenths {\n    width: 61.53846% !important;\n    max-width: 61.53846% !important;\n    flex-basis: 61.53846% !important;\n  }\n  .smalls_nine_thirteenths {\n    width: 69.23077% !important;\n    max-width: 69.23077% !important;\n    flex-basis: 69.23077% !important;\n  }\n  .smalls_ten_thirteenths {\n    width: 76.92308% !important;\n    max-width: 76.92308% !important;\n    flex-basis: 76.92308% !important;\n  }\n  .smalls_eleven_thirteenths {\n    width: 84.61538% !important;\n    max-width: 84.61538% !important;\n    flex-basis: 84.61538% !important;\n  }\n  .smalls_twelve_thirteenths {\n    width: 92.30769% !important;\n    max-width: 92.30769% !important;\n    flex-basis: 92.30769% !important;\n  }\n  .smalls_one_twelfth {\n    width: 8.33333% !important;\n    max-width: 8.33333% !important;\n    flex-basis: 8.33333% !important;\n  }\n  .smalls_two_twelfths {\n    width: 16.66667% !important;\n    max-width: 16.66667% !important;\n    flex-basis: 16.66667% !important;\n  }\n  .smalls_three_twelfths {\n    width: 25% !important;\n    max-width: 25% !important;\n    flex-basis: 25% !important;\n  }\n  .smalls_four_twelfths {\n    width: 33.33333% !important;\n    max-width: 33.33333% !important;\n    flex-basis: 33.33333% !important;\n  }\n  .smalls_five_twelfths {\n    width: 41.66667% !important;\n    max-width: 41.66667% !important;\n    flex-basis: 41.66667% !important;\n  }\n  .smalls_six_twelfths {\n    width: 50% !important;\n    max-width: 50% !important;\n    flex-basis: 50% !important;\n  }\n  .smalls_seven_twelfths {\n    width: 58.33333% !important;\n    max-width: 58.33333% !important;\n    flex-basis: 58.33333% !important;\n  }\n  .smalls_eight_twelfths {\n    width: 66.66667% !important;\n    max-width: 66.66667% !important;\n    flex-basis: 66.66667% !important;\n  }\n  .smalls_nine_twelfths {\n    width: 75% !important;\n    max-width: 75% !important;\n    flex-basis: 75% !important;\n  }\n  .smalls_ten_twelfths {\n    width: 83.33333% !important;\n    max-width: 83.33333% !important;\n    flex-basis: 83.33333% !important;\n  }\n  .smalls_eleven_twelfths {\n    width: 91.66667% !important;\n    max-width: 91.66667% !important;\n    flex-basis: 91.66667% !important;\n  }\n  .smalls_one_eleventh {\n    width: 9.09091% !important;\n    max-width: 9.09091% !important;\n    flex-basis: 9.09091% !important;\n  }\n  .smalls_two_elevenths {\n    width: 18.18182% !important;\n    max-width: 18.18182% !important;\n    flex-basis: 18.18182% !important;\n  }\n  .smalls_three_elevenths {\n    width: 27.27273% !important;\n    max-width: 27.27273% !important;\n    flex-basis: 27.27273% !important;\n  }\n  .smalls_four_elevenths {\n    width: 36.36364% !important;\n    max-width: 36.36364% !important;\n    flex-basis: 36.36364% !important;\n  }\n  .smalls_five_elevenths {\n    width: 45.45455% !important;\n    max-width: 45.45455% !important;\n    flex-basis: 45.45455% !important;\n  }\n  .smalls_six_elevenths {\n    width: 54.54545% !important;\n    max-width: 54.54545% !important;\n    flex-basis: 54.54545% !important;\n  }\n  .smalls_seven_elevenths {\n    width: 63.63636% !important;\n    max-width: 63.63636% !important;\n    flex-basis: 63.63636% !important;\n  }\n  .smalls_eight_elevenths {\n    width: 72.72727% !important;\n    max-width: 72.72727% !important;\n    flex-basis: 72.72727% !important;\n  }\n  .smalls_nine_elevenths {\n    width: 81.81818% !important;\n    max-width: 81.81818% !important;\n    flex-basis: 81.81818% !important;\n  }\n  .smalls_ten_elevenths {\n    width: 90.90909% !important;\n    max-width: 90.90909% !important;\n    flex-basis: 90.90909% !important;\n  }\n  .smalls_one_tenth {\n    width: 10% !important;\n    max-width: 10% !important;\n    flex-basis: 10% !important;\n  }\n  .smalls_two_tenths {\n    width: 20% !important;\n    max-width: 20% !important;\n    flex-basis: 20% !important;\n  }\n  .smalls_three_tenths {\n    width: 30% !important;\n    max-width: 30% !important;\n    flex-basis: 30% !important;\n  }\n  .smalls_four_tenths {\n    width: 40% !important;\n    max-width: 40% !important;\n    flex-basis: 40% !important;\n  }\n  .smalls_five_tenths {\n    width: 50% !important;\n    max-width: 50% !important;\n    flex-basis: 50% !important;\n  }\n  .smalls_six_tenths {\n    width: 60% !important;\n    max-width: 60% !important;\n    flex-basis: 60% !important;\n  }\n  .smalls_seven_tenths {\n    width: 70% !important;\n    max-width: 70% !important;\n    flex-basis: 70% !important;\n  }\n  .smalls_eight_tenths {\n    width: 80% !important;\n    max-width: 80% !important;\n    flex-basis: 80% !important;\n  }\n  .smalls_nine_tenths {\n    width: 90% !important;\n    max-width: 90% !important;\n    flex-basis: 90% !important;\n  }\n  .smalls_one_ninth {\n    width: 11.11111% !important;\n    max-width: 11.11111% !important;\n    flex-basis: 11.11111% !important;\n  }\n  .smalls_two_ninths {\n    width: 22.22222% !important;\n    max-width: 22.22222% !important;\n    flex-basis: 22.22222% !important;\n  }\n  .smalls_three_ninths {\n    width: 33.33333% !important;\n    max-width: 33.33333% !important;\n    flex-basis: 33.33333% !important;\n  }\n  .smalls_four_ninths {\n    width: 44.44444% !important;\n    max-width: 44.44444% !important;\n    flex-basis: 44.44444% !important;\n  }\n  .smalls_five_ninths {\n    width: 55.55556% !important;\n    max-width: 55.55556% !important;\n    flex-basis: 55.55556% !important;\n  }\n  .smalls_six_ninths {\n    width: 66.66667% !important;\n    max-width: 66.66667% !important;\n    flex-basis: 66.66667% !important;\n  }\n  .smalls_seven_ninths {\n    width: 77.77778% !important;\n    max-width: 77.77778% !important;\n    flex-basis: 77.77778% !important;\n  }\n  .smalls_eight_ninths {\n    width: 88.88889% !important;\n    max-width: 88.88889% !important;\n    flex-basis: 88.88889% !important;\n  }\n  .smalls_one_eighth {\n    width: 12.5% !important;\n    max-width: 12.5% !important;\n    flex-basis: 12.5% !important;\n  }\n  .smalls_two_eighths {\n    width: 25% !important;\n    max-width: 25% !important;\n    flex-basis: 25% !important;\n  }\n  .smalls_three_eighths {\n    width: 37.5% !important;\n    max-width: 37.5% !important;\n    flex-basis: 37.5% !important;\n  }\n  .smalls_four_eighths {\n    width: 50% !important;\n    max-width: 50% !important;\n    flex-basis: 50% !important;\n  }\n  .smalls_five_eighths {\n    width: 62.5% !important;\n    max-width: 62.5% !important;\n    flex-basis: 62.5% !important;\n  }\n  .smalls_six_eighths {\n    width: 75% !important;\n    max-width: 75% !important;\n    flex-basis: 75% !important;\n  }\n  .smalls_seven_eighths {\n    width: 87.5% !important;\n    max-width: 87.5% !important;\n    flex-basis: 87.5% !important;\n  }\n  .smalls_one_seventh {\n    width: 14.28571% !important;\n    max-width: 14.28571% !important;\n    flex-basis: 14.28571% !important;\n  }\n  .smalls_two_sevenths {\n    width: 28.57143% !important;\n    max-width: 28.57143% !important;\n    flex-basis: 28.57143% !important;\n  }\n  .smalls_three_sevenths {\n    width: 42.85714% !important;\n    max-width: 42.85714% !important;\n    flex-basis: 42.85714% !important;\n  }\n  .smalls_four_sevenths {\n    width: 57.14286% !important;\n    max-width: 57.14286% !important;\n    flex-basis: 57.14286% !important;\n  }\n  .smalls_five_sevenths {\n    width: 71.42857% !important;\n    max-width: 71.42857% !important;\n    flex-basis: 71.42857% !important;\n  }\n  .smalls_six_sevenths {\n    width: 85.71429% !important;\n    max-width: 85.71429% !important;\n    flex-basis: 85.71429% !important;\n  }\n  .smalls_one_sixth {\n    width: 16.66667% !important;\n    max-width: 16.66667% !important;\n    flex-basis: 16.66667% !important;\n  }\n  .smalls_two_sixths {\n    width: 33.33333% !important;\n    max-width: 33.33333% !important;\n    flex-basis: 33.33333% !important;\n  }\n  .smalls_three_sixths {\n    width: 50% !important;\n    max-width: 50% !important;\n    flex-basis: 50% !important;\n  }\n  .smalls_four_sixths {\n    width: 66.66667% !important;\n    max-width: 66.66667% !important;\n    flex-basis: 66.66667% !important;\n  }\n  .smalls_five_sixths {\n    width: 83.33333% !important;\n    max-width: 83.33333% !important;\n    flex-basis: 83.33333% !important;\n  }\n  .smalls_one_fifth {\n    width: 20% !important;\n    max-width: 20% !important;\n    flex-basis: 20% !important;\n  }\n  .smalls_two_fifths {\n    width: 40% !important;\n    max-width: 40% !important;\n    flex-basis: 40% !important;\n  }\n  .smalls_three_fifths {\n    width: 60% !important;\n    max-width: 60% !important;\n    flex-basis: 60% !important;\n  }\n  .smalls_four_fifths {\n    width: 80% !important;\n    max-width: 80% !important;\n    flex-basis: 80% !important;\n  }\n  .smalls_one_quarter, .smalls_one_fourth {\n    width: 25% !important;\n    max-width: 25% !important;\n    flex-basis: 25% !important;\n  }\n  .smalls_two_quarters, .smalls_two_fourths {\n    width: 50% !important;\n    max-width: 50% !important;\n    flex-basis: 50% !important;\n  }\n  .smalls_three_quarters, .smalls_three_fourths {\n    width: 75% !important;\n    max-width: 75% !important;\n    flex-basis: 75% !important;\n  }\n  .smalls_one_third {\n    width: 33.33333% !important;\n    max-width: 33.33333% !important;\n    flex-basis: 33.33333% !important;\n  }\n  .smalls_two_thirds {\n    width: 66.66667% !important;\n    max-width: 66.66667% !important;\n    flex-basis: 66.66667% !important;\n  }\n  .smalls_one_half {\n    width: 50% !important;\n    max-width: 50% !important;\n    flex-basis: 50% !important;\n  }\n}\n\n@media only screen and (max-width: 43.125em) {\n  .small_one_whole {\n    width: 100% !important;\n    max-width: 100% !important;\n    flex-basis: 100% !important;\n  }\n  .small_one_thirteenth {\n    width: 7.69231% !important;\n    max-width: 7.69231% !important;\n    flex-basis: 7.69231% !important;\n  }\n  .small_two_thirteenths {\n    width: 15.38462% !important;\n    max-width: 15.38462% !important;\n    flex-basis: 15.38462% !important;\n  }\n  .small_three_thirteenths {\n    width: 23.07692% !important;\n    max-width: 23.07692% !important;\n    flex-basis: 23.07692% !important;\n  }\n  .small_four_thirteenths {\n    width: 30.76923% !important;\n    max-width: 30.76923% !important;\n    flex-basis: 30.76923% !important;\n  }\n  .small_five_thirteenths {\n    width: 38.46154% !important;\n    max-width: 38.46154% !important;\n    flex-basis: 38.46154% !important;\n  }\n  .small_six_thirteenths {\n    width: 46.15385% !important;\n    max-width: 46.15385% !important;\n    flex-basis: 46.15385% !important;\n  }\n  .small_seven_thirteenths {\n    width: 53.84615% !important;\n    max-width: 53.84615% !important;\n    flex-basis: 53.84615% !important;\n  }\n  .small_eight_thirteenths {\n    width: 61.53846% !important;\n    max-width: 61.53846% !important;\n    flex-basis: 61.53846% !important;\n  }\n  .small_nine_thirteenths {\n    width: 69.23077% !important;\n    max-width: 69.23077% !important;\n    flex-basis: 69.23077% !important;\n  }\n  .small_ten_thirteenths {\n    width: 76.92308% !important;\n    max-width: 76.92308% !important;\n    flex-basis: 76.92308% !important;\n  }\n  .small_eleven_thirteenths {\n    width: 84.61538% !important;\n    max-width: 84.61538% !important;\n    flex-basis: 84.61538% !important;\n  }\n  .small_twelve_thirteenths {\n    width: 92.30769% !important;\n    max-width: 92.30769% !important;\n    flex-basis: 92.30769% !important;\n  }\n  .small_one_twelfth {\n    width: 8.33333% !important;\n    max-width: 8.33333% !important;\n    flex-basis: 8.33333% !important;\n  }\n  .small_two_twelfths {\n    width: 16.66667% !important;\n    max-width: 16.66667% !important;\n    flex-basis: 16.66667% !important;\n  }\n  .small_three_twelfths {\n    width: 25% !important;\n    max-width: 25% !important;\n    flex-basis: 25% !important;\n  }\n  .small_four_twelfths {\n    width: 33.33333% !important;\n    max-width: 33.33333% !important;\n    flex-basis: 33.33333% !important;\n  }\n  .small_five_twelfths {\n    width: 41.66667% !important;\n    max-width: 41.66667% !important;\n    flex-basis: 41.66667% !important;\n  }\n  .small_six_twelfths {\n    width: 50% !important;\n    max-width: 50% !important;\n    flex-basis: 50% !important;\n  }\n  .small_seven_twelfths {\n    width: 58.33333% !important;\n    max-width: 58.33333% !important;\n    flex-basis: 58.33333% !important;\n  }\n  .small_eight_twelfths {\n    width: 66.66667% !important;\n    max-width: 66.66667% !important;\n    flex-basis: 66.66667% !important;\n  }\n  .small_nine_twelfths {\n    width: 75% !important;\n    max-width: 75% !important;\n    flex-basis: 75% !important;\n  }\n  .small_ten_twelfths {\n    width: 83.33333% !important;\n    max-width: 83.33333% !important;\n    flex-basis: 83.33333% !important;\n  }\n  .small_eleven_twelfths {\n    width: 91.66667% !important;\n    max-width: 91.66667% !important;\n    flex-basis: 91.66667% !important;\n  }\n  .small_one_eleventh {\n    width: 9.09091% !important;\n    max-width: 9.09091% !important;\n    flex-basis: 9.09091% !important;\n  }\n  .small_two_elevenths {\n    width: 18.18182% !important;\n    max-width: 18.18182% !important;\n    flex-basis: 18.18182% !important;\n  }\n  .small_three_elevenths {\n    width: 27.27273% !important;\n    max-width: 27.27273% !important;\n    flex-basis: 27.27273% !important;\n  }\n  .small_four_elevenths {\n    width: 36.36364% !important;\n    max-width: 36.36364% !important;\n    flex-basis: 36.36364% !important;\n  }\n  .small_five_elevenths {\n    width: 45.45455% !important;\n    max-width: 45.45455% !important;\n    flex-basis: 45.45455% !important;\n  }\n  .small_six_elevenths {\n    width: 54.54545% !important;\n    max-width: 54.54545% !important;\n    flex-basis: 54.54545% !important;\n  }\n  .small_seven_elevenths {\n    width: 63.63636% !important;\n    max-width: 63.63636% !important;\n    flex-basis: 63.63636% !important;\n  }\n  .small_eight_elevenths {\n    width: 72.72727% !important;\n    max-width: 72.72727% !important;\n    flex-basis: 72.72727% !important;\n  }\n  .small_nine_elevenths {\n    width: 81.81818% !important;\n    max-width: 81.81818% !important;\n    flex-basis: 81.81818% !important;\n  }\n  .small_ten_elevenths {\n    width: 90.90909% !important;\n    max-width: 90.90909% !important;\n    flex-basis: 90.90909% !important;\n  }\n  .small_one_tenth {\n    width: 10% !important;\n    max-width: 10% !important;\n    flex-basis: 10% !important;\n  }\n  .small_two_tenths {\n    width: 20% !important;\n    max-width: 20% !important;\n    flex-basis: 20% !important;\n  }\n  .small_three_tenths {\n    width: 30% !important;\n    max-width: 30% !important;\n    flex-basis: 30% !important;\n  }\n  .small_four_tenths {\n    width: 40% !important;\n    max-width: 40% !important;\n    flex-basis: 40% !important;\n  }\n  .small_five_tenths {\n    width: 50% !important;\n    max-width: 50% !important;\n    flex-basis: 50% !important;\n  }\n  .small_six_tenths {\n    width: 60% !important;\n    max-width: 60% !important;\n    flex-basis: 60% !important;\n  }\n  .small_seven_tenths {\n    width: 70% !important;\n    max-width: 70% !important;\n    flex-basis: 70% !important;\n  }\n  .small_eight_tenths {\n    width: 80% !important;\n    max-width: 80% !important;\n    flex-basis: 80% !important;\n  }\n  .small_nine_tenths {\n    width: 90% !important;\n    max-width: 90% !important;\n    flex-basis: 90% !important;\n  }\n  .small_one_ninth {\n    width: 11.11111% !important;\n    max-width: 11.11111% !important;\n    flex-basis: 11.11111% !important;\n  }\n  .small_two_ninths {\n    width: 22.22222% !important;\n    max-width: 22.22222% !important;\n    flex-basis: 22.22222% !important;\n  }\n  .small_three_ninths {\n    width: 33.33333% !important;\n    max-width: 33.33333% !important;\n    flex-basis: 33.33333% !important;\n  }\n  .small_four_ninths {\n    width: 44.44444% !important;\n    max-width: 44.44444% !important;\n    flex-basis: 44.44444% !important;\n  }\n  .small_five_ninths {\n    width: 55.55556% !important;\n    max-width: 55.55556% !important;\n    flex-basis: 55.55556% !important;\n  }\n  .small_six_ninths {\n    width: 66.66667% !important;\n    max-width: 66.66667% !important;\n    flex-basis: 66.66667% !important;\n  }\n  .small_seven_ninths {\n    width: 77.77778% !important;\n    max-width: 77.77778% !important;\n    flex-basis: 77.77778% !important;\n  }\n  .small_eight_ninths {\n    width: 88.88889% !important;\n    max-width: 88.88889% !important;\n    flex-basis: 88.88889% !important;\n  }\n  .small_one_eighth {\n    width: 12.5% !important;\n    max-width: 12.5% !important;\n    flex-basis: 12.5% !important;\n  }\n  .small_two_eighths {\n    width: 25% !important;\n    max-width: 25% !important;\n    flex-basis: 25% !important;\n  }\n  .small_three_eighths {\n    width: 37.5% !important;\n    max-width: 37.5% !important;\n    flex-basis: 37.5% !important;\n  }\n  .small_four_eighths {\n    width: 50% !important;\n    max-width: 50% !important;\n    flex-basis: 50% !important;\n  }\n  .small_five_eighths {\n    width: 62.5% !important;\n    max-width: 62.5% !important;\n    flex-basis: 62.5% !important;\n  }\n  .small_six_eighths {\n    width: 75% !important;\n    max-width: 75% !important;\n    flex-basis: 75% !important;\n  }\n  .small_seven_eighths {\n    width: 87.5% !important;\n    max-width: 87.5% !important;\n    flex-basis: 87.5% !important;\n  }\n  .small_one_seventh {\n    width: 14.28571% !important;\n    max-width: 14.28571% !important;\n    flex-basis: 14.28571% !important;\n  }\n  .small_two_sevenths {\n    width: 28.57143% !important;\n    max-width: 28.57143% !important;\n    flex-basis: 28.57143% !important;\n  }\n  .small_three_sevenths {\n    width: 42.85714% !important;\n    max-width: 42.85714% !important;\n    flex-basis: 42.85714% !important;\n  }\n  .small_four_sevenths {\n    width: 57.14286% !important;\n    max-width: 57.14286% !important;\n    flex-basis: 57.14286% !important;\n  }\n  .small_five_sevenths {\n    width: 71.42857% !important;\n    max-width: 71.42857% !important;\n    flex-basis: 71.42857% !important;\n  }\n  .small_six_sevenths {\n    width: 85.71429% !important;\n    max-width: 85.71429% !important;\n    flex-basis: 85.71429% !important;\n  }\n  .small_one_sixth {\n    width: 16.66667% !important;\n    max-width: 16.66667% !important;\n    flex-basis: 16.66667% !important;\n  }\n  .small_two_sixths {\n    width: 33.33333% !important;\n    max-width: 33.33333% !important;\n    flex-basis: 33.33333% !important;\n  }\n  .small_three_sixths {\n    width: 50% !important;\n    max-width: 50% !important;\n    flex-basis: 50% !important;\n  }\n  .small_four_sixths {\n    width: 66.66667% !important;\n    max-width: 66.66667% !important;\n    flex-basis: 66.66667% !important;\n  }\n  .small_five_sixths {\n    width: 83.33333% !important;\n    max-width: 83.33333% !important;\n    flex-basis: 83.33333% !important;\n  }\n  .small_one_fifth {\n    width: 20% !important;\n    max-width: 20% !important;\n    flex-basis: 20% !important;\n  }\n  .small_two_fifths {\n    width: 40% !important;\n    max-width: 40% !important;\n    flex-basis: 40% !important;\n  }\n  .small_three_fifths {\n    width: 60% !important;\n    max-width: 60% !important;\n    flex-basis: 60% !important;\n  }\n  .small_four_fifths {\n    width: 80% !important;\n    max-width: 80% !important;\n    flex-basis: 80% !important;\n  }\n  .small_one_quarter, .small_one_fourth {\n    width: 25% !important;\n    max-width: 25% !important;\n    flex-basis: 25% !important;\n  }\n  .small_two_quarters, .small_two_fourths {\n    width: 50% !important;\n    max-width: 50% !important;\n    flex-basis: 50% !important;\n  }\n  .small_three_quarters, .small_three_fourths {\n    width: 75% !important;\n    max-width: 75% !important;\n    flex-basis: 75% !important;\n  }\n  .small_one_third {\n    width: 33.33333% !important;\n    max-width: 33.33333% !important;\n    flex-basis: 33.33333% !important;\n  }\n  .small_two_thirds {\n    width: 66.66667% !important;\n    max-width: 66.66667% !important;\n    flex-basis: 66.66667% !important;\n  }\n  .small_one_half {\n    width: 50% !important;\n    max-width: 50% !important;\n    flex-basis: 50% !important;\n  }\n}\n\n@media only screen and (min-width: 43.1875em) and (max-width: 56.875em) {\n  .smallish_one_whole {\n    width: 100% !important;\n    max-width: 100% !important;\n    flex-basis: 100% !important;\n  }\n  .smallish_one_thirteenth {\n    width: 7.69231% !important;\n    max-width: 7.69231% !important;\n    flex-basis: 7.69231% !important;\n  }\n  .smallish_two_thirteenths {\n    width: 15.38462% !important;\n    max-width: 15.38462% !important;\n    flex-basis: 15.38462% !important;\n  }\n  .smallish_three_thirteenths {\n    width: 23.07692% !important;\n    max-width: 23.07692% !important;\n    flex-basis: 23.07692% !important;\n  }\n  .smallish_four_thirteenths {\n    width: 30.76923% !important;\n    max-width: 30.76923% !important;\n    flex-basis: 30.76923% !important;\n  }\n  .smallish_five_thirteenths {\n    width: 38.46154% !important;\n    max-width: 38.46154% !important;\n    flex-basis: 38.46154% !important;\n  }\n  .smallish_six_thirteenths {\n    width: 46.15385% !important;\n    max-width: 46.15385% !important;\n    flex-basis: 46.15385% !important;\n  }\n  .smallish_seven_thirteenths {\n    width: 53.84615% !important;\n    max-width: 53.84615% !important;\n    flex-basis: 53.84615% !important;\n  }\n  .smallish_eight_thirteenths {\n    width: 61.53846% !important;\n    max-width: 61.53846% !important;\n    flex-basis: 61.53846% !important;\n  }\n  .smallish_nine_thirteenths {\n    width: 69.23077% !important;\n    max-width: 69.23077% !important;\n    flex-basis: 69.23077% !important;\n  }\n  .smallish_ten_thirteenths {\n    width: 76.92308% !important;\n    max-width: 76.92308% !important;\n    flex-basis: 76.92308% !important;\n  }\n  .smallish_eleven_thirteenths {\n    width: 84.61538% !important;\n    max-width: 84.61538% !important;\n    flex-basis: 84.61538% !important;\n  }\n  .smallish_twelve_thirteenths {\n    width: 92.30769% !important;\n    max-width: 92.30769% !important;\n    flex-basis: 92.30769% !important;\n  }\n  .smallish_one_twelfth {\n    width: 8.33333% !important;\n    max-width: 8.33333% !important;\n    flex-basis: 8.33333% !important;\n  }\n  .smallish_two_twelfths {\n    width: 16.66667% !important;\n    max-width: 16.66667% !important;\n    flex-basis: 16.66667% !important;\n  }\n  .smallish_three_twelfths {\n    width: 25% !important;\n    max-width: 25% !important;\n    flex-basis: 25% !important;\n  }\n  .smallish_four_twelfths {\n    width: 33.33333% !important;\n    max-width: 33.33333% !important;\n    flex-basis: 33.33333% !important;\n  }\n  .smallish_five_twelfths {\n    width: 41.66667% !important;\n    max-width: 41.66667% !important;\n    flex-basis: 41.66667% !important;\n  }\n  .smallish_six_twelfths {\n    width: 50% !important;\n    max-width: 50% !important;\n    flex-basis: 50% !important;\n  }\n  .smallish_seven_twelfths {\n    width: 58.33333% !important;\n    max-width: 58.33333% !important;\n    flex-basis: 58.33333% !important;\n  }\n  .smallish_eight_twelfths {\n    width: 66.66667% !important;\n    max-width: 66.66667% !important;\n    flex-basis: 66.66667% !important;\n  }\n  .smallish_nine_twelfths {\n    width: 75% !important;\n    max-width: 75% !important;\n    flex-basis: 75% !important;\n  }\n  .smallish_ten_twelfths {\n    width: 83.33333% !important;\n    max-width: 83.33333% !important;\n    flex-basis: 83.33333% !important;\n  }\n  .smallish_eleven_twelfths {\n    width: 91.66667% !important;\n    max-width: 91.66667% !important;\n    flex-basis: 91.66667% !important;\n  }\n  .smallish_one_eleventh {\n    width: 9.09091% !important;\n    max-width: 9.09091% !important;\n    flex-basis: 9.09091% !important;\n  }\n  .smallish_two_elevenths {\n    width: 18.18182% !important;\n    max-width: 18.18182% !important;\n    flex-basis: 18.18182% !important;\n  }\n  .smallish_three_elevenths {\n    width: 27.27273% !important;\n    max-width: 27.27273% !important;\n    flex-basis: 27.27273% !important;\n  }\n  .smallish_four_elevenths {\n    width: 36.36364% !important;\n    max-width: 36.36364% !important;\n    flex-basis: 36.36364% !important;\n  }\n  .smallish_five_elevenths {\n    width: 45.45455% !important;\n    max-width: 45.45455% !important;\n    flex-basis: 45.45455% !important;\n  }\n  .smallish_six_elevenths {\n    width: 54.54545% !important;\n    max-width: 54.54545% !important;\n    flex-basis: 54.54545% !important;\n  }\n  .smallish_seven_elevenths {\n    width: 63.63636% !important;\n    max-width: 63.63636% !important;\n    flex-basis: 63.63636% !important;\n  }\n  .smallish_eight_elevenths {\n    width: 72.72727% !important;\n    max-width: 72.72727% !important;\n    flex-basis: 72.72727% !important;\n  }\n  .smallish_nine_elevenths {\n    width: 81.81818% !important;\n    max-width: 81.81818% !important;\n    flex-basis: 81.81818% !important;\n  }\n  .smallish_ten_elevenths {\n    width: 90.90909% !important;\n    max-width: 90.90909% !important;\n    flex-basis: 90.90909% !important;\n  }\n  .smallish_one_tenth {\n    width: 10% !important;\n    max-width: 10% !important;\n    flex-basis: 10% !important;\n  }\n  .smallish_two_tenths {\n    width: 20% !important;\n    max-width: 20% !important;\n    flex-basis: 20% !important;\n  }\n  .smallish_three_tenths {\n    width: 30% !important;\n    max-width: 30% !important;\n    flex-basis: 30% !important;\n  }\n  .smallish_four_tenths {\n    width: 40% !important;\n    max-width: 40% !important;\n    flex-basis: 40% !important;\n  }\n  .smallish_five_tenths {\n    width: 50% !important;\n    max-width: 50% !important;\n    flex-basis: 50% !important;\n  }\n  .smallish_six_tenths {\n    width: 60% !important;\n    max-width: 60% !important;\n    flex-basis: 60% !important;\n  }\n  .smallish_seven_tenths {\n    width: 70% !important;\n    max-width: 70% !important;\n    flex-basis: 70% !important;\n  }\n  .smallish_eight_tenths {\n    width: 80% !important;\n    max-width: 80% !important;\n    flex-basis: 80% !important;\n  }\n  .smallish_nine_tenths {\n    width: 90% !important;\n    max-width: 90% !important;\n    flex-basis: 90% !important;\n  }\n  .smallish_one_ninth {\n    width: 11.11111% !important;\n    max-width: 11.11111% !important;\n    flex-basis: 11.11111% !important;\n  }\n  .smallish_two_ninths {\n    width: 22.22222% !important;\n    max-width: 22.22222% !important;\n    flex-basis: 22.22222% !important;\n  }\n  .smallish_three_ninths {\n    width: 33.33333% !important;\n    max-width: 33.33333% !important;\n    flex-basis: 33.33333% !important;\n  }\n  .smallish_four_ninths {\n    width: 44.44444% !important;\n    max-width: 44.44444% !important;\n    flex-basis: 44.44444% !important;\n  }\n  .smallish_five_ninths {\n    width: 55.55556% !important;\n    max-width: 55.55556% !important;\n    flex-basis: 55.55556% !important;\n  }\n  .smallish_six_ninths {\n    width: 66.66667% !important;\n    max-width: 66.66667% !important;\n    flex-basis: 66.66667% !important;\n  }\n  .smallish_seven_ninths {\n    width: 77.77778% !important;\n    max-width: 77.77778% !important;\n    flex-basis: 77.77778% !important;\n  }\n  .smallish_eight_ninths {\n    width: 88.88889% !important;\n    max-width: 88.88889% !important;\n    flex-basis: 88.88889% !important;\n  }\n  .smallish_one_eighth {\n    width: 12.5% !important;\n    max-width: 12.5% !important;\n    flex-basis: 12.5% !important;\n  }\n  .smallish_two_eighths {\n    width: 25% !important;\n    max-width: 25% !important;\n    flex-basis: 25% !important;\n  }\n  .smallish_three_eighths {\n    width: 37.5% !important;\n    max-width: 37.5% !important;\n    flex-basis: 37.5% !important;\n  }\n  .smallish_four_eighths {\n    width: 50% !important;\n    max-width: 50% !important;\n    flex-basis: 50% !important;\n  }\n  .smallish_five_eighths {\n    width: 62.5% !important;\n    max-width: 62.5% !important;\n    flex-basis: 62.5% !important;\n  }\n  .smallish_six_eighths {\n    width: 75% !important;\n    max-width: 75% !important;\n    flex-basis: 75% !important;\n  }\n  .smallish_seven_eighths {\n    width: 87.5% !important;\n    max-width: 87.5% !important;\n    flex-basis: 87.5% !important;\n  }\n  .smallish_one_seventh {\n    width: 14.28571% !important;\n    max-width: 14.28571% !important;\n    flex-basis: 14.28571% !important;\n  }\n  .smallish_two_sevenths {\n    width: 28.57143% !important;\n    max-width: 28.57143% !important;\n    flex-basis: 28.57143% !important;\n  }\n  .smallish_three_sevenths {\n    width: 42.85714% !important;\n    max-width: 42.85714% !important;\n    flex-basis: 42.85714% !important;\n  }\n  .smallish_four_sevenths {\n    width: 57.14286% !important;\n    max-width: 57.14286% !important;\n    flex-basis: 57.14286% !important;\n  }\n  .smallish_five_sevenths {\n    width: 71.42857% !important;\n    max-width: 71.42857% !important;\n    flex-basis: 71.42857% !important;\n  }\n  .smallish_six_sevenths {\n    width: 85.71429% !important;\n    max-width: 85.71429% !important;\n    flex-basis: 85.71429% !important;\n  }\n  .smallish_one_sixth {\n    width: 16.66667% !important;\n    max-width: 16.66667% !important;\n    flex-basis: 16.66667% !important;\n  }\n  .smallish_two_sixths {\n    width: 33.33333% !important;\n    max-width: 33.33333% !important;\n    flex-basis: 33.33333% !important;\n  }\n  .smallish_three_sixths {\n    width: 50% !important;\n    max-width: 50% !important;\n    flex-basis: 50% !important;\n  }\n  .smallish_four_sixths {\n    width: 66.66667% !important;\n    max-width: 66.66667% !important;\n    flex-basis: 66.66667% !important;\n  }\n  .smallish_five_sixths {\n    width: 83.33333% !important;\n    max-width: 83.33333% !important;\n    flex-basis: 83.33333% !important;\n  }\n  .smallish_one_fifth {\n    width: 20% !important;\n    max-width: 20% !important;\n    flex-basis: 20% !important;\n  }\n  .smallish_two_fifths {\n    width: 40% !important;\n    max-width: 40% !important;\n    flex-basis: 40% !important;\n  }\n  .smallish_three_fifths {\n    width: 60% !important;\n    max-width: 60% !important;\n    flex-basis: 60% !important;\n  }\n  .smallish_four_fifths {\n    width: 80% !important;\n    max-width: 80% !important;\n    flex-basis: 80% !important;\n  }\n  .smallish_one_quarter, .smallish_one_fourth {\n    width: 25% !important;\n    max-width: 25% !important;\n    flex-basis: 25% !important;\n  }\n  .smallish_two_quarters, .smallish_two_fourths {\n    width: 50% !important;\n    max-width: 50% !important;\n    flex-basis: 50% !important;\n  }\n  .smallish_three_quarters, .smallish_three_fourths {\n    width: 75% !important;\n    max-width: 75% !important;\n    flex-basis: 75% !important;\n  }\n  .smallish_one_third {\n    width: 33.33333% !important;\n    max-width: 33.33333% !important;\n    flex-basis: 33.33333% !important;\n  }\n  .smallish_two_thirds {\n    width: 66.66667% !important;\n    max-width: 66.66667% !important;\n    flex-basis: 66.66667% !important;\n  }\n  .smallish_one_half {\n    width: 50% !important;\n    max-width: 50% !important;\n    flex-basis: 50% !important;\n  }\n}\n\n@media only screen and (min-width: 56.9375em) {\n  .bigs_one_whole {\n    width: 100% !important;\n    max-width: 100% !important;\n    flex-basis: 100% !important;\n  }\n  .bigs_one_thirteenth {\n    width: 7.69231% !important;\n    max-width: 7.69231% !important;\n    flex-basis: 7.69231% !important;\n  }\n  .bigs_two_thirteenths {\n    width: 15.38462% !important;\n    max-width: 15.38462% !important;\n    flex-basis: 15.38462% !important;\n  }\n  .bigs_three_thirteenths {\n    width: 23.07692% !important;\n    max-width: 23.07692% !important;\n    flex-basis: 23.07692% !important;\n  }\n  .bigs_four_thirteenths {\n    width: 30.76923% !important;\n    max-width: 30.76923% !important;\n    flex-basis: 30.76923% !important;\n  }\n  .bigs_five_thirteenths {\n    width: 38.46154% !important;\n    max-width: 38.46154% !important;\n    flex-basis: 38.46154% !important;\n  }\n  .bigs_six_thirteenths {\n    width: 46.15385% !important;\n    max-width: 46.15385% !important;\n    flex-basis: 46.15385% !important;\n  }\n  .bigs_seven_thirteenths {\n    width: 53.84615% !important;\n    max-width: 53.84615% !important;\n    flex-basis: 53.84615% !important;\n  }\n  .bigs_eight_thirteenths {\n    width: 61.53846% !important;\n    max-width: 61.53846% !important;\n    flex-basis: 61.53846% !important;\n  }\n  .bigs_nine_thirteenths {\n    width: 69.23077% !important;\n    max-width: 69.23077% !important;\n    flex-basis: 69.23077% !important;\n  }\n  .bigs_ten_thirteenths {\n    width: 76.92308% !important;\n    max-width: 76.92308% !important;\n    flex-basis: 76.92308% !important;\n  }\n  .bigs_eleven_thirteenths {\n    width: 84.61538% !important;\n    max-width: 84.61538% !important;\n    flex-basis: 84.61538% !important;\n  }\n  .bigs_twelve_thirteenths {\n    width: 92.30769% !important;\n    max-width: 92.30769% !important;\n    flex-basis: 92.30769% !important;\n  }\n  .bigs_one_twelfth {\n    width: 8.33333% !important;\n    max-width: 8.33333% !important;\n    flex-basis: 8.33333% !important;\n  }\n  .bigs_two_twelfths {\n    width: 16.66667% !important;\n    max-width: 16.66667% !important;\n    flex-basis: 16.66667% !important;\n  }\n  .bigs_three_twelfths {\n    width: 25% !important;\n    max-width: 25% !important;\n    flex-basis: 25% !important;\n  }\n  .bigs_four_twelfths {\n    width: 33.33333% !important;\n    max-width: 33.33333% !important;\n    flex-basis: 33.33333% !important;\n  }\n  .bigs_five_twelfths {\n    width: 41.66667% !important;\n    max-width: 41.66667% !important;\n    flex-basis: 41.66667% !important;\n  }\n  .bigs_six_twelfths {\n    width: 50% !important;\n    max-width: 50% !important;\n    flex-basis: 50% !important;\n  }\n  .bigs_seven_twelfths {\n    width: 58.33333% !important;\n    max-width: 58.33333% !important;\n    flex-basis: 58.33333% !important;\n  }\n  .bigs_eight_twelfths {\n    width: 66.66667% !important;\n    max-width: 66.66667% !important;\n    flex-basis: 66.66667% !important;\n  }\n  .bigs_nine_twelfths {\n    width: 75% !important;\n    max-width: 75% !important;\n    flex-basis: 75% !important;\n  }\n  .bigs_ten_twelfths {\n    width: 83.33333% !important;\n    max-width: 83.33333% !important;\n    flex-basis: 83.33333% !important;\n  }\n  .bigs_eleven_twelfths {\n    width: 91.66667% !important;\n    max-width: 91.66667% !important;\n    flex-basis: 91.66667% !important;\n  }\n  .bigs_one_eleventh {\n    width: 9.09091% !important;\n    max-width: 9.09091% !important;\n    flex-basis: 9.09091% !important;\n  }\n  .bigs_two_elevenths {\n    width: 18.18182% !important;\n    max-width: 18.18182% !important;\n    flex-basis: 18.18182% !important;\n  }\n  .bigs_three_elevenths {\n    width: 27.27273% !important;\n    max-width: 27.27273% !important;\n    flex-basis: 27.27273% !important;\n  }\n  .bigs_four_elevenths {\n    width: 36.36364% !important;\n    max-width: 36.36364% !important;\n    flex-basis: 36.36364% !important;\n  }\n  .bigs_five_elevenths {\n    width: 45.45455% !important;\n    max-width: 45.45455% !important;\n    flex-basis: 45.45455% !important;\n  }\n  .bigs_six_elevenths {\n    width: 54.54545% !important;\n    max-width: 54.54545% !important;\n    flex-basis: 54.54545% !important;\n  }\n  .bigs_seven_elevenths {\n    width: 63.63636% !important;\n    max-width: 63.63636% !important;\n    flex-basis: 63.63636% !important;\n  }\n  .bigs_eight_elevenths {\n    width: 72.72727% !important;\n    max-width: 72.72727% !important;\n    flex-basis: 72.72727% !important;\n  }\n  .bigs_nine_elevenths {\n    width: 81.81818% !important;\n    max-width: 81.81818% !important;\n    flex-basis: 81.81818% !important;\n  }\n  .bigs_ten_elevenths {\n    width: 90.90909% !important;\n    max-width: 90.90909% !important;\n    flex-basis: 90.90909% !important;\n  }\n  .bigs_one_tenth {\n    width: 10% !important;\n    max-width: 10% !important;\n    flex-basis: 10% !important;\n  }\n  .bigs_two_tenths {\n    width: 20% !important;\n    max-width: 20% !important;\n    flex-basis: 20% !important;\n  }\n  .bigs_three_tenths {\n    width: 30% !important;\n    max-width: 30% !important;\n    flex-basis: 30% !important;\n  }\n  .bigs_four_tenths {\n    width: 40% !important;\n    max-width: 40% !important;\n    flex-basis: 40% !important;\n  }\n  .bigs_five_tenths {\n    width: 50% !important;\n    max-width: 50% !important;\n    flex-basis: 50% !important;\n  }\n  .bigs_six_tenths {\n    width: 60% !important;\n    max-width: 60% !important;\n    flex-basis: 60% !important;\n  }\n  .bigs_seven_tenths {\n    width: 70% !important;\n    max-width: 70% !important;\n    flex-basis: 70% !important;\n  }\n  .bigs_eight_tenths {\n    width: 80% !important;\n    max-width: 80% !important;\n    flex-basis: 80% !important;\n  }\n  .bigs_nine_tenths {\n    width: 90% !important;\n    max-width: 90% !important;\n    flex-basis: 90% !important;\n  }\n  .bigs_one_ninth {\n    width: 11.11111% !important;\n    max-width: 11.11111% !important;\n    flex-basis: 11.11111% !important;\n  }\n  .bigs_two_ninths {\n    width: 22.22222% !important;\n    max-width: 22.22222% !important;\n    flex-basis: 22.22222% !important;\n  }\n  .bigs_three_ninths {\n    width: 33.33333% !important;\n    max-width: 33.33333% !important;\n    flex-basis: 33.33333% !important;\n  }\n  .bigs_four_ninths {\n    width: 44.44444% !important;\n    max-width: 44.44444% !important;\n    flex-basis: 44.44444% !important;\n  }\n  .bigs_five_ninths {\n    width: 55.55556% !important;\n    max-width: 55.55556% !important;\n    flex-basis: 55.55556% !important;\n  }\n  .bigs_six_ninths {\n    width: 66.66667% !important;\n    max-width: 66.66667% !important;\n    flex-basis: 66.66667% !important;\n  }\n  .bigs_seven_ninths {\n    width: 77.77778% !important;\n    max-width: 77.77778% !important;\n    flex-basis: 77.77778% !important;\n  }\n  .bigs_eight_ninths {\n    width: 88.88889% !important;\n    max-width: 88.88889% !important;\n    flex-basis: 88.88889% !important;\n  }\n  .bigs_one_eighth {\n    width: 12.5% !important;\n    max-width: 12.5% !important;\n    flex-basis: 12.5% !important;\n  }\n  .bigs_two_eighths {\n    width: 25% !important;\n    max-width: 25% !important;\n    flex-basis: 25% !important;\n  }\n  .bigs_three_eighths {\n    width: 37.5% !important;\n    max-width: 37.5% !important;\n    flex-basis: 37.5% !important;\n  }\n  .bigs_four_eighths {\n    width: 50% !important;\n    max-width: 50% !important;\n    flex-basis: 50% !important;\n  }\n  .bigs_five_eighths {\n    width: 62.5% !important;\n    max-width: 62.5% !important;\n    flex-basis: 62.5% !important;\n  }\n  .bigs_six_eighths {\n    width: 75% !important;\n    max-width: 75% !important;\n    flex-basis: 75% !important;\n  }\n  .bigs_seven_eighths {\n    width: 87.5% !important;\n    max-width: 87.5% !important;\n    flex-basis: 87.5% !important;\n  }\n  .bigs_one_seventh {\n    width: 14.28571% !important;\n    max-width: 14.28571% !important;\n    flex-basis: 14.28571% !important;\n  }\n  .bigs_two_sevenths {\n    width: 28.57143% !important;\n    max-width: 28.57143% !important;\n    flex-basis: 28.57143% !important;\n  }\n  .bigs_three_sevenths {\n    width: 42.85714% !important;\n    max-width: 42.85714% !important;\n    flex-basis: 42.85714% !important;\n  }\n  .bigs_four_sevenths {\n    width: 57.14286% !important;\n    max-width: 57.14286% !important;\n    flex-basis: 57.14286% !important;\n  }\n  .bigs_five_sevenths {\n    width: 71.42857% !important;\n    max-width: 71.42857% !important;\n    flex-basis: 71.42857% !important;\n  }\n  .bigs_six_sevenths {\n    width: 85.71429% !important;\n    max-width: 85.71429% !important;\n    flex-basis: 85.71429% !important;\n  }\n  .bigs_one_sixth {\n    width: 16.66667% !important;\n    max-width: 16.66667% !important;\n    flex-basis: 16.66667% !important;\n  }\n  .bigs_two_sixths {\n    width: 33.33333% !important;\n    max-width: 33.33333% !important;\n    flex-basis: 33.33333% !important;\n  }\n  .bigs_three_sixths {\n    width: 50% !important;\n    max-width: 50% !important;\n    flex-basis: 50% !important;\n  }\n  .bigs_four_sixths {\n    width: 66.66667% !important;\n    max-width: 66.66667% !important;\n    flex-basis: 66.66667% !important;\n  }\n  .bigs_five_sixths {\n    width: 83.33333% !important;\n    max-width: 83.33333% !important;\n    flex-basis: 83.33333% !important;\n  }\n  .bigs_one_fifth {\n    width: 20% !important;\n    max-width: 20% !important;\n    flex-basis: 20% !important;\n  }\n  .bigs_two_fifths {\n    width: 40% !important;\n    max-width: 40% !important;\n    flex-basis: 40% !important;\n  }\n  .bigs_three_fifths {\n    width: 60% !important;\n    max-width: 60% !important;\n    flex-basis: 60% !important;\n  }\n  .bigs_four_fifths {\n    width: 80% !important;\n    max-width: 80% !important;\n    flex-basis: 80% !important;\n  }\n  .bigs_one_quarter, .bigs_one_fourth {\n    width: 25% !important;\n    max-width: 25% !important;\n    flex-basis: 25% !important;\n  }\n  .bigs_two_quarters, .bigs_two_fourths {\n    width: 50% !important;\n    max-width: 50% !important;\n    flex-basis: 50% !important;\n  }\n  .bigs_three_quarters, .bigs_three_fourths {\n    width: 75% !important;\n    max-width: 75% !important;\n    flex-basis: 75% !important;\n  }\n  .bigs_one_third {\n    width: 33.33333% !important;\n    max-width: 33.33333% !important;\n    flex-basis: 33.33333% !important;\n  }\n  .bigs_two_thirds {\n    width: 66.66667% !important;\n    max-width: 66.66667% !important;\n    flex-basis: 66.66667% !important;\n  }\n  .bigs_one_half {\n    width: 50% !important;\n    max-width: 50% !important;\n    flex-basis: 50% !important;\n  }\n}\n\n@media only screen and (min-width: 56.9375em) and (max-width: 85em) {\n  .lap_one_whole {\n    width: 100% !important;\n    max-width: 100% !important;\n    flex-basis: 100% !important;\n  }\n  .lap_one_thirteenth {\n    width: 7.69231% !important;\n    max-width: 7.69231% !important;\n    flex-basis: 7.69231% !important;\n  }\n  .lap_two_thirteenths {\n    width: 15.38462% !important;\n    max-width: 15.38462% !important;\n    flex-basis: 15.38462% !important;\n  }\n  .lap_three_thirteenths {\n    width: 23.07692% !important;\n    max-width: 23.07692% !important;\n    flex-basis: 23.07692% !important;\n  }\n  .lap_four_thirteenths {\n    width: 30.76923% !important;\n    max-width: 30.76923% !important;\n    flex-basis: 30.76923% !important;\n  }\n  .lap_five_thirteenths {\n    width: 38.46154% !important;\n    max-width: 38.46154% !important;\n    flex-basis: 38.46154% !important;\n  }\n  .lap_six_thirteenths {\n    width: 46.15385% !important;\n    max-width: 46.15385% !important;\n    flex-basis: 46.15385% !important;\n  }\n  .lap_seven_thirteenths {\n    width: 53.84615% !important;\n    max-width: 53.84615% !important;\n    flex-basis: 53.84615% !important;\n  }\n  .lap_eight_thirteenths {\n    width: 61.53846% !important;\n    max-width: 61.53846% !important;\n    flex-basis: 61.53846% !important;\n  }\n  .lap_nine_thirteenths {\n    width: 69.23077% !important;\n    max-width: 69.23077% !important;\n    flex-basis: 69.23077% !important;\n  }\n  .lap_ten_thirteenths {\n    width: 76.92308% !important;\n    max-width: 76.92308% !important;\n    flex-basis: 76.92308% !important;\n  }\n  .lap_eleven_thirteenths {\n    width: 84.61538% !important;\n    max-width: 84.61538% !important;\n    flex-basis: 84.61538% !important;\n  }\n  .lap_twelve_thirteenths {\n    width: 92.30769% !important;\n    max-width: 92.30769% !important;\n    flex-basis: 92.30769% !important;\n  }\n  .lap_one_twelfth {\n    width: 8.33333% !important;\n    max-width: 8.33333% !important;\n    flex-basis: 8.33333% !important;\n  }\n  .lap_two_twelfths {\n    width: 16.66667% !important;\n    max-width: 16.66667% !important;\n    flex-basis: 16.66667% !important;\n  }\n  .lap_three_twelfths {\n    width: 25% !important;\n    max-width: 25% !important;\n    flex-basis: 25% !important;\n  }\n  .lap_four_twelfths {\n    width: 33.33333% !important;\n    max-width: 33.33333% !important;\n    flex-basis: 33.33333% !important;\n  }\n  .lap_five_twelfths {\n    width: 41.66667% !important;\n    max-width: 41.66667% !important;\n    flex-basis: 41.66667% !important;\n  }\n  .lap_six_twelfths {\n    width: 50% !important;\n    max-width: 50% !important;\n    flex-basis: 50% !important;\n  }\n  .lap_seven_twelfths {\n    width: 58.33333% !important;\n    max-width: 58.33333% !important;\n    flex-basis: 58.33333% !important;\n  }\n  .lap_eight_twelfths {\n    width: 66.66667% !important;\n    max-width: 66.66667% !important;\n    flex-basis: 66.66667% !important;\n  }\n  .lap_nine_twelfths {\n    width: 75% !important;\n    max-width: 75% !important;\n    flex-basis: 75% !important;\n  }\n  .lap_ten_twelfths {\n    width: 83.33333% !important;\n    max-width: 83.33333% !important;\n    flex-basis: 83.33333% !important;\n  }\n  .lap_eleven_twelfths {\n    width: 91.66667% !important;\n    max-width: 91.66667% !important;\n    flex-basis: 91.66667% !important;\n  }\n  .lap_one_eleventh {\n    width: 9.09091% !important;\n    max-width: 9.09091% !important;\n    flex-basis: 9.09091% !important;\n  }\n  .lap_two_elevenths {\n    width: 18.18182% !important;\n    max-width: 18.18182% !important;\n    flex-basis: 18.18182% !important;\n  }\n  .lap_three_elevenths {\n    width: 27.27273% !important;\n    max-width: 27.27273% !important;\n    flex-basis: 27.27273% !important;\n  }\n  .lap_four_elevenths {\n    width: 36.36364% !important;\n    max-width: 36.36364% !important;\n    flex-basis: 36.36364% !important;\n  }\n  .lap_five_elevenths {\n    width: 45.45455% !important;\n    max-width: 45.45455% !important;\n    flex-basis: 45.45455% !important;\n  }\n  .lap_six_elevenths {\n    width: 54.54545% !important;\n    max-width: 54.54545% !important;\n    flex-basis: 54.54545% !important;\n  }\n  .lap_seven_elevenths {\n    width: 63.63636% !important;\n    max-width: 63.63636% !important;\n    flex-basis: 63.63636% !important;\n  }\n  .lap_eight_elevenths {\n    width: 72.72727% !important;\n    max-width: 72.72727% !important;\n    flex-basis: 72.72727% !important;\n  }\n  .lap_nine_elevenths {\n    width: 81.81818% !important;\n    max-width: 81.81818% !important;\n    flex-basis: 81.81818% !important;\n  }\n  .lap_ten_elevenths {\n    width: 90.90909% !important;\n    max-width: 90.90909% !important;\n    flex-basis: 90.90909% !important;\n  }\n  .lap_one_tenth {\n    width: 10% !important;\n    max-width: 10% !important;\n    flex-basis: 10% !important;\n  }\n  .lap_two_tenths {\n    width: 20% !important;\n    max-width: 20% !important;\n    flex-basis: 20% !important;\n  }\n  .lap_three_tenths {\n    width: 30% !important;\n    max-width: 30% !important;\n    flex-basis: 30% !important;\n  }\n  .lap_four_tenths {\n    width: 40% !important;\n    max-width: 40% !important;\n    flex-basis: 40% !important;\n  }\n  .lap_five_tenths {\n    width: 50% !important;\n    max-width: 50% !important;\n    flex-basis: 50% !important;\n  }\n  .lap_six_tenths {\n    width: 60% !important;\n    max-width: 60% !important;\n    flex-basis: 60% !important;\n  }\n  .lap_seven_tenths {\n    width: 70% !important;\n    max-width: 70% !important;\n    flex-basis: 70% !important;\n  }\n  .lap_eight_tenths {\n    width: 80% !important;\n    max-width: 80% !important;\n    flex-basis: 80% !important;\n  }\n  .lap_nine_tenths {\n    width: 90% !important;\n    max-width: 90% !important;\n    flex-basis: 90% !important;\n  }\n  .lap_one_ninth {\n    width: 11.11111% !important;\n    max-width: 11.11111% !important;\n    flex-basis: 11.11111% !important;\n  }\n  .lap_two_ninths {\n    width: 22.22222% !important;\n    max-width: 22.22222% !important;\n    flex-basis: 22.22222% !important;\n  }\n  .lap_three_ninths {\n    width: 33.33333% !important;\n    max-width: 33.33333% !important;\n    flex-basis: 33.33333% !important;\n  }\n  .lap_four_ninths {\n    width: 44.44444% !important;\n    max-width: 44.44444% !important;\n    flex-basis: 44.44444% !important;\n  }\n  .lap_five_ninths {\n    width: 55.55556% !important;\n    max-width: 55.55556% !important;\n    flex-basis: 55.55556% !important;\n  }\n  .lap_six_ninths {\n    width: 66.66667% !important;\n    max-width: 66.66667% !important;\n    flex-basis: 66.66667% !important;\n  }\n  .lap_seven_ninths {\n    width: 77.77778% !important;\n    max-width: 77.77778% !important;\n    flex-basis: 77.77778% !important;\n  }\n  .lap_eight_ninths {\n    width: 88.88889% !important;\n    max-width: 88.88889% !important;\n    flex-basis: 88.88889% !important;\n  }\n  .lap_one_eighth {\n    width: 12.5% !important;\n    max-width: 12.5% !important;\n    flex-basis: 12.5% !important;\n  }\n  .lap_two_eighths {\n    width: 25% !important;\n    max-width: 25% !important;\n    flex-basis: 25% !important;\n  }\n  .lap_three_eighths {\n    width: 37.5% !important;\n    max-width: 37.5% !important;\n    flex-basis: 37.5% !important;\n  }\n  .lap_four_eighths {\n    width: 50% !important;\n    max-width: 50% !important;\n    flex-basis: 50% !important;\n  }\n  .lap_five_eighths {\n    width: 62.5% !important;\n    max-width: 62.5% !important;\n    flex-basis: 62.5% !important;\n  }\n  .lap_six_eighths {\n    width: 75% !important;\n    max-width: 75% !important;\n    flex-basis: 75% !important;\n  }\n  .lap_seven_eighths {\n    width: 87.5% !important;\n    max-width: 87.5% !important;\n    flex-basis: 87.5% !important;\n  }\n  .lap_one_seventh {\n    width: 14.28571% !important;\n    max-width: 14.28571% !important;\n    flex-basis: 14.28571% !important;\n  }\n  .lap_two_sevenths {\n    width: 28.57143% !important;\n    max-width: 28.57143% !important;\n    flex-basis: 28.57143% !important;\n  }\n  .lap_three_sevenths {\n    width: 42.85714% !important;\n    max-width: 42.85714% !important;\n    flex-basis: 42.85714% !important;\n  }\n  .lap_four_sevenths {\n    width: 57.14286% !important;\n    max-width: 57.14286% !important;\n    flex-basis: 57.14286% !important;\n  }\n  .lap_five_sevenths {\n    width: 71.42857% !important;\n    max-width: 71.42857% !important;\n    flex-basis: 71.42857% !important;\n  }\n  .lap_six_sevenths {\n    width: 85.71429% !important;\n    max-width: 85.71429% !important;\n    flex-basis: 85.71429% !important;\n  }\n  .lap_one_sixth {\n    width: 16.66667% !important;\n    max-width: 16.66667% !important;\n    flex-basis: 16.66667% !important;\n  }\n  .lap_two_sixths {\n    width: 33.33333% !important;\n    max-width: 33.33333% !important;\n    flex-basis: 33.33333% !important;\n  }\n  .lap_three_sixths {\n    width: 50% !important;\n    max-width: 50% !important;\n    flex-basis: 50% !important;\n  }\n  .lap_four_sixths {\n    width: 66.66667% !important;\n    max-width: 66.66667% !important;\n    flex-basis: 66.66667% !important;\n  }\n  .lap_five_sixths {\n    width: 83.33333% !important;\n    max-width: 83.33333% !important;\n    flex-basis: 83.33333% !important;\n  }\n  .lap_one_fifth {\n    width: 20% !important;\n    max-width: 20% !important;\n    flex-basis: 20% !important;\n  }\n  .lap_two_fifths {\n    width: 40% !important;\n    max-width: 40% !important;\n    flex-basis: 40% !important;\n  }\n  .lap_three_fifths {\n    width: 60% !important;\n    max-width: 60% !important;\n    flex-basis: 60% !important;\n  }\n  .lap_four_fifths {\n    width: 80% !important;\n    max-width: 80% !important;\n    flex-basis: 80% !important;\n  }\n  .lap_one_quarter, .lap_one_fourth {\n    width: 25% !important;\n    max-width: 25% !important;\n    flex-basis: 25% !important;\n  }\n  .lap_two_quarters, .lap_two_fourths {\n    width: 50% !important;\n    max-width: 50% !important;\n    flex-basis: 50% !important;\n  }\n  .lap_three_quarters, .lap_three_fourths {\n    width: 75% !important;\n    max-width: 75% !important;\n    flex-basis: 75% !important;\n  }\n  .lap_one_third {\n    width: 33.33333% !important;\n    max-width: 33.33333% !important;\n    flex-basis: 33.33333% !important;\n  }\n  .lap_two_thirds {\n    width: 66.66667% !important;\n    max-width: 66.66667% !important;\n    flex-basis: 66.66667% !important;\n  }\n  .lap_one_half {\n    width: 50% !important;\n    max-width: 50% !important;\n    flex-basis: 50% !important;\n  }\n}\n\n@media only screen and (min-width: 85em) {\n  .desk_one_whole {\n    width: 100% !important;\n    max-width: 100% !important;\n    flex-basis: 100% !important;\n  }\n  .desk_one_thirteenth {\n    width: 7.69231% !important;\n    max-width: 7.69231% !important;\n    flex-basis: 7.69231% !important;\n  }\n  .desk_two_thirteenths {\n    width: 15.38462% !important;\n    max-width: 15.38462% !important;\n    flex-basis: 15.38462% !important;\n  }\n  .desk_three_thirteenths {\n    width: 23.07692% !important;\n    max-width: 23.07692% !important;\n    flex-basis: 23.07692% !important;\n  }\n  .desk_four_thirteenths {\n    width: 30.76923% !important;\n    max-width: 30.76923% !important;\n    flex-basis: 30.76923% !important;\n  }\n  .desk_five_thirteenths {\n    width: 38.46154% !important;\n    max-width: 38.46154% !important;\n    flex-basis: 38.46154% !important;\n  }\n  .desk_six_thirteenths {\n    width: 46.15385% !important;\n    max-width: 46.15385% !important;\n    flex-basis: 46.15385% !important;\n  }\n  .desk_seven_thirteenths {\n    width: 53.84615% !important;\n    max-width: 53.84615% !important;\n    flex-basis: 53.84615% !important;\n  }\n  .desk_eight_thirteenths {\n    width: 61.53846% !important;\n    max-width: 61.53846% !important;\n    flex-basis: 61.53846% !important;\n  }\n  .desk_nine_thirteenths {\n    width: 69.23077% !important;\n    max-width: 69.23077% !important;\n    flex-basis: 69.23077% !important;\n  }\n  .desk_ten_thirteenths {\n    width: 76.92308% !important;\n    max-width: 76.92308% !important;\n    flex-basis: 76.92308% !important;\n  }\n  .desk_eleven_thirteenths {\n    width: 84.61538% !important;\n    max-width: 84.61538% !important;\n    flex-basis: 84.61538% !important;\n  }\n  .desk_twelve_thirteenths {\n    width: 92.30769% !important;\n    max-width: 92.30769% !important;\n    flex-basis: 92.30769% !important;\n  }\n  .desk_one_twelfth {\n    width: 8.33333% !important;\n    max-width: 8.33333% !important;\n    flex-basis: 8.33333% !important;\n  }\n  .desk_two_twelfths {\n    width: 16.66667% !important;\n    max-width: 16.66667% !important;\n    flex-basis: 16.66667% !important;\n  }\n  .desk_three_twelfths {\n    width: 25% !important;\n    max-width: 25% !important;\n    flex-basis: 25% !important;\n  }\n  .desk_four_twelfths {\n    width: 33.33333% !important;\n    max-width: 33.33333% !important;\n    flex-basis: 33.33333% !important;\n  }\n  .desk_five_twelfths {\n    width: 41.66667% !important;\n    max-width: 41.66667% !important;\n    flex-basis: 41.66667% !important;\n  }\n  .desk_six_twelfths {\n    width: 50% !important;\n    max-width: 50% !important;\n    flex-basis: 50% !important;\n  }\n  .desk_seven_twelfths {\n    width: 58.33333% !important;\n    max-width: 58.33333% !important;\n    flex-basis: 58.33333% !important;\n  }\n  .desk_eight_twelfths {\n    width: 66.66667% !important;\n    max-width: 66.66667% !important;\n    flex-basis: 66.66667% !important;\n  }\n  .desk_nine_twelfths {\n    width: 75% !important;\n    max-width: 75% !important;\n    flex-basis: 75% !important;\n  }\n  .desk_ten_twelfths {\n    width: 83.33333% !important;\n    max-width: 83.33333% !important;\n    flex-basis: 83.33333% !important;\n  }\n  .desk_eleven_twelfths {\n    width: 91.66667% !important;\n    max-width: 91.66667% !important;\n    flex-basis: 91.66667% !important;\n  }\n  .desk_one_eleventh {\n    width: 9.09091% !important;\n    max-width: 9.09091% !important;\n    flex-basis: 9.09091% !important;\n  }\n  .desk_two_elevenths {\n    width: 18.18182% !important;\n    max-width: 18.18182% !important;\n    flex-basis: 18.18182% !important;\n  }\n  .desk_three_elevenths {\n    width: 27.27273% !important;\n    max-width: 27.27273% !important;\n    flex-basis: 27.27273% !important;\n  }\n  .desk_four_elevenths {\n    width: 36.36364% !important;\n    max-width: 36.36364% !important;\n    flex-basis: 36.36364% !important;\n  }\n  .desk_five_elevenths {\n    width: 45.45455% !important;\n    max-width: 45.45455% !important;\n    flex-basis: 45.45455% !important;\n  }\n  .desk_six_elevenths {\n    width: 54.54545% !important;\n    max-width: 54.54545% !important;\n    flex-basis: 54.54545% !important;\n  }\n  .desk_seven_elevenths {\n    width: 63.63636% !important;\n    max-width: 63.63636% !important;\n    flex-basis: 63.63636% !important;\n  }\n  .desk_eight_elevenths {\n    width: 72.72727% !important;\n    max-width: 72.72727% !important;\n    flex-basis: 72.72727% !important;\n  }\n  .desk_nine_elevenths {\n    width: 81.81818% !important;\n    max-width: 81.81818% !important;\n    flex-basis: 81.81818% !important;\n  }\n  .desk_ten_elevenths {\n    width: 90.90909% !important;\n    max-width: 90.90909% !important;\n    flex-basis: 90.90909% !important;\n  }\n  .desk_one_tenth {\n    width: 10% !important;\n    max-width: 10% !important;\n    flex-basis: 10% !important;\n  }\n  .desk_two_tenths {\n    width: 20% !important;\n    max-width: 20% !important;\n    flex-basis: 20% !important;\n  }\n  .desk_three_tenths {\n    width: 30% !important;\n    max-width: 30% !important;\n    flex-basis: 30% !important;\n  }\n  .desk_four_tenths {\n    width: 40% !important;\n    max-width: 40% !important;\n    flex-basis: 40% !important;\n  }\n  .desk_five_tenths {\n    width: 50% !important;\n    max-width: 50% !important;\n    flex-basis: 50% !important;\n  }\n  .desk_six_tenths {\n    width: 60% !important;\n    max-width: 60% !important;\n    flex-basis: 60% !important;\n  }\n  .desk_seven_tenths {\n    width: 70% !important;\n    max-width: 70% !important;\n    flex-basis: 70% !important;\n  }\n  .desk_eight_tenths {\n    width: 80% !important;\n    max-width: 80% !important;\n    flex-basis: 80% !important;\n  }\n  .desk_nine_tenths {\n    width: 90% !important;\n    max-width: 90% !important;\n    flex-basis: 90% !important;\n  }\n  .desk_one_ninth {\n    width: 11.11111% !important;\n    max-width: 11.11111% !important;\n    flex-basis: 11.11111% !important;\n  }\n  .desk_two_ninths {\n    width: 22.22222% !important;\n    max-width: 22.22222% !important;\n    flex-basis: 22.22222% !important;\n  }\n  .desk_three_ninths {\n    width: 33.33333% !important;\n    max-width: 33.33333% !important;\n    flex-basis: 33.33333% !important;\n  }\n  .desk_four_ninths {\n    width: 44.44444% !important;\n    max-width: 44.44444% !important;\n    flex-basis: 44.44444% !important;\n  }\n  .desk_five_ninths {\n    width: 55.55556% !important;\n    max-width: 55.55556% !important;\n    flex-basis: 55.55556% !important;\n  }\n  .desk_six_ninths {\n    width: 66.66667% !important;\n    max-width: 66.66667% !important;\n    flex-basis: 66.66667% !important;\n  }\n  .desk_seven_ninths {\n    width: 77.77778% !important;\n    max-width: 77.77778% !important;\n    flex-basis: 77.77778% !important;\n  }\n  .desk_eight_ninths {\n    width: 88.88889% !important;\n    max-width: 88.88889% !important;\n    flex-basis: 88.88889% !important;\n  }\n  .desk_one_eighth {\n    width: 12.5% !important;\n    max-width: 12.5% !important;\n    flex-basis: 12.5% !important;\n  }\n  .desk_two_eighths {\n    width: 25% !important;\n    max-width: 25% !important;\n    flex-basis: 25% !important;\n  }\n  .desk_three_eighths {\n    width: 37.5% !important;\n    max-width: 37.5% !important;\n    flex-basis: 37.5% !important;\n  }\n  .desk_four_eighths {\n    width: 50% !important;\n    max-width: 50% !important;\n    flex-basis: 50% !important;\n  }\n  .desk_five_eighths {\n    width: 62.5% !important;\n    max-width: 62.5% !important;\n    flex-basis: 62.5% !important;\n  }\n  .desk_six_eighths {\n    width: 75% !important;\n    max-width: 75% !important;\n    flex-basis: 75% !important;\n  }\n  .desk_seven_eighths {\n    width: 87.5% !important;\n    max-width: 87.5% !important;\n    flex-basis: 87.5% !important;\n  }\n  .desk_one_seventh {\n    width: 14.28571% !important;\n    max-width: 14.28571% !important;\n    flex-basis: 14.28571% !important;\n  }\n  .desk_two_sevenths {\n    width: 28.57143% !important;\n    max-width: 28.57143% !important;\n    flex-basis: 28.57143% !important;\n  }\n  .desk_three_sevenths {\n    width: 42.85714% !important;\n    max-width: 42.85714% !important;\n    flex-basis: 42.85714% !important;\n  }\n  .desk_four_sevenths {\n    width: 57.14286% !important;\n    max-width: 57.14286% !important;\n    flex-basis: 57.14286% !important;\n  }\n  .desk_five_sevenths {\n    width: 71.42857% !important;\n    max-width: 71.42857% !important;\n    flex-basis: 71.42857% !important;\n  }\n  .desk_six_sevenths {\n    width: 85.71429% !important;\n    max-width: 85.71429% !important;\n    flex-basis: 85.71429% !important;\n  }\n  .desk_one_sixth {\n    width: 16.66667% !important;\n    max-width: 16.66667% !important;\n    flex-basis: 16.66667% !important;\n  }\n  .desk_two_sixths {\n    width: 33.33333% !important;\n    max-width: 33.33333% !important;\n    flex-basis: 33.33333% !important;\n  }\n  .desk_three_sixths {\n    width: 50% !important;\n    max-width: 50% !important;\n    flex-basis: 50% !important;\n  }\n  .desk_four_sixths {\n    width: 66.66667% !important;\n    max-width: 66.66667% !important;\n    flex-basis: 66.66667% !important;\n  }\n  .desk_five_sixths {\n    width: 83.33333% !important;\n    max-width: 83.33333% !important;\n    flex-basis: 83.33333% !important;\n  }\n  .desk_one_fifth {\n    width: 20% !important;\n    max-width: 20% !important;\n    flex-basis: 20% !important;\n  }\n  .desk_two_fifths {\n    width: 40% !important;\n    max-width: 40% !important;\n    flex-basis: 40% !important;\n  }\n  .desk_three_fifths {\n    width: 60% !important;\n    max-width: 60% !important;\n    flex-basis: 60% !important;\n  }\n  .desk_four_fifths {\n    width: 80% !important;\n    max-width: 80% !important;\n    flex-basis: 80% !important;\n  }\n  .desk_one_quarter, .desk_one_fourth {\n    width: 25% !important;\n    max-width: 25% !important;\n    flex-basis: 25% !important;\n  }\n  .desk_two_quarters, .desk_two_fourths {\n    width: 50% !important;\n    max-width: 50% !important;\n    flex-basis: 50% !important;\n  }\n  .desk_three_quarters, .desk_three_fourths {\n    width: 75% !important;\n    max-width: 75% !important;\n    flex-basis: 75% !important;\n  }\n  .desk_one_third {\n    width: 33.33333% !important;\n    max-width: 33.33333% !important;\n    flex-basis: 33.33333% !important;\n  }\n  .desk_two_thirds {\n    width: 66.66667% !important;\n    max-width: 66.66667% !important;\n    flex-basis: 66.66667% !important;\n  }\n  .desk_one_half {\n    width: 50% !important;\n    max-width: 50% !important;\n    flex-basis: 50% !important;\n  }\n}\n\n.push_one_whole {\n  left: 100% ;\n}\n\n.push_one_thirteenth {\n  position: relative;\n  left: 7.69231% ;\n}\n\n.push_two_thirteenths {\n  position: relative;\n  left: 15.38462% ;\n}\n\n.push_three_thirteenths {\n  position: relative;\n  left: 23.07692% ;\n}\n\n.push_four_thirteenths {\n  position: relative;\n  left: 30.76923% ;\n}\n\n.push_five_thirteenths {\n  position: relative;\n  left: 38.46154% ;\n}\n\n.push_six_thirteenths {\n  position: relative;\n  left: 46.15385% ;\n}\n\n.push_seven_thirteenths {\n  position: relative;\n  left: 53.84615% ;\n}\n\n.push_eight_thirteenths {\n  position: relative;\n  left: 61.53846% ;\n}\n\n.push_nine_thirteenths {\n  position: relative;\n  left: 69.23077% ;\n}\n\n.push_ten_thirteenths {\n  position: relative;\n  left: 76.92308% ;\n}\n\n.push_eleven_thirteenths {\n  position: relative;\n  left: 84.61538% ;\n}\n\n.push_twelve_thirteenths {\n  position: relative;\n  left: 92.30769% ;\n}\n\n.push_one_twelfth {\n  position: relative;\n  left: 8.33333% ;\n}\n\n.push_two_twelfths {\n  position: relative;\n  left: 16.66667% ;\n}\n\n.push_three_twelfths {\n  position: relative;\n  left: 25% ;\n}\n\n.push_four_twelfths {\n  position: relative;\n  left: 33.33333% ;\n}\n\n.push_five_twelfths {\n  position: relative;\n  left: 41.66667% ;\n}\n\n.push_six_twelfths {\n  position: relative;\n  left: 50% ;\n}\n\n.push_seven_twelfths {\n  position: relative;\n  left: 58.33333% ;\n}\n\n.push_eight_twelfths {\n  position: relative;\n  left: 66.66667% ;\n}\n\n.push_nine_twelfths {\n  position: relative;\n  left: 75% ;\n}\n\n.push_ten_twelfths {\n  position: relative;\n  left: 83.33333% ;\n}\n\n.push_eleven_twelfths {\n  position: relative;\n  left: 91.66667% ;\n}\n\n.push_one_eleventh {\n  position: relative;\n  left: 9.09091% ;\n}\n\n.push_two_elevenths {\n  position: relative;\n  left: 18.18182% ;\n}\n\n.push_three_elevenths {\n  position: relative;\n  left: 27.27273% ;\n}\n\n.push_four_elevenths {\n  position: relative;\n  left: 36.36364% ;\n}\n\n.push_five_elevenths {\n  position: relative;\n  left: 45.45455% ;\n}\n\n.push_six_elevenths {\n  position: relative;\n  left: 54.54545% ;\n}\n\n.push_seven_elevenths {\n  position: relative;\n  left: 63.63636% ;\n}\n\n.push_eight_elevenths {\n  position: relative;\n  left: 72.72727% ;\n}\n\n.push_nine_elevenths {\n  position: relative;\n  left: 81.81818% ;\n}\n\n.push_ten_elevenths {\n  position: relative;\n  left: 90.90909% ;\n}\n\n.push_one_tenth {\n  position: relative;\n  left: 10% ;\n}\n\n.push_two_tenths {\n  position: relative;\n  left: 20% ;\n}\n\n.push_three_tenths {\n  position: relative;\n  left: 30% ;\n}\n\n.push_four_tenths {\n  position: relative;\n  left: 40% ;\n}\n\n.push_five_tenths {\n  position: relative;\n  left: 50% ;\n}\n\n.push_six_tenths {\n  position: relative;\n  left: 60% ;\n}\n\n.push_seven_tenths {\n  position: relative;\n  left: 70% ;\n}\n\n.push_eight_tenths {\n  position: relative;\n  left: 80% ;\n}\n\n.push_nine_tenths {\n  position: relative;\n  left: 90% ;\n}\n\n.push_one_ninth {\n  position: relative;\n  left: 11.11111% ;\n}\n\n.push_two_ninths {\n  position: relative;\n  left: 22.22222% ;\n}\n\n.push_three_ninths {\n  position: relative;\n  left: 33.33333% ;\n}\n\n.push_four_ninths {\n  position: relative;\n  left: 44.44444% ;\n}\n\n.push_five_ninths {\n  position: relative;\n  left: 55.55556% ;\n}\n\n.push_six_ninths {\n  position: relative;\n  left: 66.66667% ;\n}\n\n.push_seven_ninths {\n  position: relative;\n  left: 77.77778% ;\n}\n\n.push_eight_ninths {\n  position: relative;\n  left: 88.88889% ;\n}\n\n.push_one_eighth {\n  position: relative;\n  left: 12.5% ;\n}\n\n.push_two_eighths {\n  position: relative;\n  left: 25% ;\n}\n\n.push_three_eighths {\n  position: relative;\n  left: 37.5% ;\n}\n\n.push_four_eighths {\n  position: relative;\n  left: 50% ;\n}\n\n.push_five_eighths {\n  position: relative;\n  left: 62.5% ;\n}\n\n.push_six_eighths {\n  position: relative;\n  left: 75% ;\n}\n\n.push_seven_eighths {\n  position: relative;\n  left: 87.5% ;\n}\n\n.push_one_seventh {\n  position: relative;\n  left: 14.28571% ;\n}\n\n.push_two_sevenths {\n  position: relative;\n  left: 28.57143% ;\n}\n\n.push_three_sevenths {\n  position: relative;\n  left: 42.85714% ;\n}\n\n.push_four_sevenths {\n  position: relative;\n  left: 57.14286% ;\n}\n\n.push_five_sevenths {\n  position: relative;\n  left: 71.42857% ;\n}\n\n.push_six_sevenths {\n  position: relative;\n  left: 85.71429% ;\n}\n\n.push_one_sixth {\n  position: relative;\n  left: 16.66667% ;\n}\n\n.push_two_sixths {\n  position: relative;\n  left: 33.33333% ;\n}\n\n.push_three_sixths {\n  position: relative;\n  left: 50% ;\n}\n\n.push_four_sixths {\n  position: relative;\n  left: 66.66667% ;\n}\n\n.push_five_sixths {\n  position: relative;\n  left: 83.33333% ;\n}\n\n.push_one_fifth {\n  position: relative;\n  left: 20% ;\n}\n\n.push_two_fifths {\n  position: relative;\n  left: 40% ;\n}\n\n.push_three_fifths {\n  position: relative;\n  left: 60% ;\n}\n\n.push_four_fifths {\n  position: relative;\n  left: 80% ;\n}\n\n.push_one_quarter, .push_one_fourth {\n  position: relative;\n  left: 25% ;\n}\n\n.push_two_quarters, .push_two_fourths {\n  position: relative;\n  left: 50% ;\n}\n\n.push_three_quarters, .push_three_fourths {\n  position: relative;\n  left: 75% ;\n}\n\n.push_one_third {\n  position: relative;\n  left: 33.33333% ;\n}\n\n.push_two_thirds {\n  position: relative;\n  left: 66.66667% ;\n}\n\n.push_one_half {\n  position: relative;\n  left: 50% ;\n}\n\n@media only screen and (max-width: 56.875em) {\n  .smalls_push_one_whole {\n    left: 100% !important;\n  }\n  .smalls_push_one_thirteenth {\n    position: relative;\n    left: 7.69231% !important;\n  }\n  .smalls_push_two_thirteenths {\n    position: relative;\n    left: 15.38462% !important;\n  }\n  .smalls_push_three_thirteenths {\n    position: relative;\n    left: 23.07692% !important;\n  }\n  .smalls_push_four_thirteenths {\n    position: relative;\n    left: 30.76923% !important;\n  }\n  .smalls_push_five_thirteenths {\n    position: relative;\n    left: 38.46154% !important;\n  }\n  .smalls_push_six_thirteenths {\n    position: relative;\n    left: 46.15385% !important;\n  }\n  .smalls_push_seven_thirteenths {\n    position: relative;\n    left: 53.84615% !important;\n  }\n  .smalls_push_eight_thirteenths {\n    position: relative;\n    left: 61.53846% !important;\n  }\n  .smalls_push_nine_thirteenths {\n    position: relative;\n    left: 69.23077% !important;\n  }\n  .smalls_push_ten_thirteenths {\n    position: relative;\n    left: 76.92308% !important;\n  }\n  .smalls_push_eleven_thirteenths {\n    position: relative;\n    left: 84.61538% !important;\n  }\n  .smalls_push_twelve_thirteenths {\n    position: relative;\n    left: 92.30769% !important;\n  }\n  .smalls_push_one_twelfth {\n    position: relative;\n    left: 8.33333% !important;\n  }\n  .smalls_push_two_twelfths {\n    position: relative;\n    left: 16.66667% !important;\n  }\n  .smalls_push_three_twelfths {\n    position: relative;\n    left: 25% !important;\n  }\n  .smalls_push_four_twelfths {\n    position: relative;\n    left: 33.33333% !important;\n  }\n  .smalls_push_five_twelfths {\n    position: relative;\n    left: 41.66667% !important;\n  }\n  .smalls_push_six_twelfths {\n    position: relative;\n    left: 50% !important;\n  }\n  .smalls_push_seven_twelfths {\n    position: relative;\n    left: 58.33333% !important;\n  }\n  .smalls_push_eight_twelfths {\n    position: relative;\n    left: 66.66667% !important;\n  }\n  .smalls_push_nine_twelfths {\n    position: relative;\n    left: 75% !important;\n  }\n  .smalls_push_ten_twelfths {\n    position: relative;\n    left: 83.33333% !important;\n  }\n  .smalls_push_eleven_twelfths {\n    position: relative;\n    left: 91.66667% !important;\n  }\n  .smalls_push_one_eleventh {\n    position: relative;\n    left: 9.09091% !important;\n  }\n  .smalls_push_two_elevenths {\n    position: relative;\n    left: 18.18182% !important;\n  }\n  .smalls_push_three_elevenths {\n    position: relative;\n    left: 27.27273% !important;\n  }\n  .smalls_push_four_elevenths {\n    position: relative;\n    left: 36.36364% !important;\n  }\n  .smalls_push_five_elevenths {\n    position: relative;\n    left: 45.45455% !important;\n  }\n  .smalls_push_six_elevenths {\n    position: relative;\n    left: 54.54545% !important;\n  }\n  .smalls_push_seven_elevenths {\n    position: relative;\n    left: 63.63636% !important;\n  }\n  .smalls_push_eight_elevenths {\n    position: relative;\n    left: 72.72727% !important;\n  }\n  .smalls_push_nine_elevenths {\n    position: relative;\n    left: 81.81818% !important;\n  }\n  .smalls_push_ten_elevenths {\n    position: relative;\n    left: 90.90909% !important;\n  }\n  .smalls_push_one_tenth {\n    position: relative;\n    left: 10% !important;\n  }\n  .smalls_push_two_tenths {\n    position: relative;\n    left: 20% !important;\n  }\n  .smalls_push_three_tenths {\n    position: relative;\n    left: 30% !important;\n  }\n  .smalls_push_four_tenths {\n    position: relative;\n    left: 40% !important;\n  }\n  .smalls_push_five_tenths {\n    position: relative;\n    left: 50% !important;\n  }\n  .smalls_push_six_tenths {\n    position: relative;\n    left: 60% !important;\n  }\n  .smalls_push_seven_tenths {\n    position: relative;\n    left: 70% !important;\n  }\n  .smalls_push_eight_tenths {\n    position: relative;\n    left: 80% !important;\n  }\n  .smalls_push_nine_tenths {\n    position: relative;\n    left: 90% !important;\n  }\n  .smalls_push_one_ninth {\n    position: relative;\n    left: 11.11111% !important;\n  }\n  .smalls_push_two_ninths {\n    position: relative;\n    left: 22.22222% !important;\n  }\n  .smalls_push_three_ninths {\n    position: relative;\n    left: 33.33333% !important;\n  }\n  .smalls_push_four_ninths {\n    position: relative;\n    left: 44.44444% !important;\n  }\n  .smalls_push_five_ninths {\n    position: relative;\n    left: 55.55556% !important;\n  }\n  .smalls_push_six_ninths {\n    position: relative;\n    left: 66.66667% !important;\n  }\n  .smalls_push_seven_ninths {\n    position: relative;\n    left: 77.77778% !important;\n  }\n  .smalls_push_eight_ninths {\n    position: relative;\n    left: 88.88889% !important;\n  }\n  .smalls_push_one_eighth {\n    position: relative;\n    left: 12.5% !important;\n  }\n  .smalls_push_two_eighths {\n    position: relative;\n    left: 25% !important;\n  }\n  .smalls_push_three_eighths {\n    position: relative;\n    left: 37.5% !important;\n  }\n  .smalls_push_four_eighths {\n    position: relative;\n    left: 50% !important;\n  }\n  .smalls_push_five_eighths {\n    position: relative;\n    left: 62.5% !important;\n  }\n  .smalls_push_six_eighths {\n    position: relative;\n    left: 75% !important;\n  }\n  .smalls_push_seven_eighths {\n    position: relative;\n    left: 87.5% !important;\n  }\n  .smalls_push_one_seventh {\n    position: relative;\n    left: 14.28571% !important;\n  }\n  .smalls_push_two_sevenths {\n    position: relative;\n    left: 28.57143% !important;\n  }\n  .smalls_push_three_sevenths {\n    position: relative;\n    left: 42.85714% !important;\n  }\n  .smalls_push_four_sevenths {\n    position: relative;\n    left: 57.14286% !important;\n  }\n  .smalls_push_five_sevenths {\n    position: relative;\n    left: 71.42857% !important;\n  }\n  .smalls_push_six_sevenths {\n    position: relative;\n    left: 85.71429% !important;\n  }\n  .smalls_push_one_sixth {\n    position: relative;\n    left: 16.66667% !important;\n  }\n  .smalls_push_two_sixths {\n    position: relative;\n    left: 33.33333% !important;\n  }\n  .smalls_push_three_sixths {\n    position: relative;\n    left: 50% !important;\n  }\n  .smalls_push_four_sixths {\n    position: relative;\n    left: 66.66667% !important;\n  }\n  .smalls_push_five_sixths {\n    position: relative;\n    left: 83.33333% !important;\n  }\n  .smalls_push_one_fifth {\n    position: relative;\n    left: 20% !important;\n  }\n  .smalls_push_two_fifths {\n    position: relative;\n    left: 40% !important;\n  }\n  .smalls_push_three_fifths {\n    position: relative;\n    left: 60% !important;\n  }\n  .smalls_push_four_fifths {\n    position: relative;\n    left: 80% !important;\n  }\n  .smalls_push_one_quarter, .smalls_push_one_fourth {\n    position: relative;\n    left: 25% !important;\n  }\n  .smalls_push_two_quarters, .smalls_push_two_fourths {\n    position: relative;\n    left: 50% !important;\n  }\n  .smalls_push_three_quarters, .smalls_push_three_fourths {\n    position: relative;\n    left: 75% !important;\n  }\n  .smalls_push_one_third {\n    position: relative;\n    left: 33.33333% !important;\n  }\n  .smalls_push_two_thirds {\n    position: relative;\n    left: 66.66667% !important;\n  }\n  .smalls_push_one_half {\n    position: relative;\n    left: 50% !important;\n  }\n}\n\n@media only screen and (max-width: 43.125em) {\n  .small_push_one_whole {\n    left: 100% !important;\n  }\n  .small_push_one_thirteenth {\n    position: relative;\n    left: 7.69231% !important;\n  }\n  .small_push_two_thirteenths {\n    position: relative;\n    left: 15.38462% !important;\n  }\n  .small_push_three_thirteenths {\n    position: relative;\n    left: 23.07692% !important;\n  }\n  .small_push_four_thirteenths {\n    position: relative;\n    left: 30.76923% !important;\n  }\n  .small_push_five_thirteenths {\n    position: relative;\n    left: 38.46154% !important;\n  }\n  .small_push_six_thirteenths {\n    position: relative;\n    left: 46.15385% !important;\n  }\n  .small_push_seven_thirteenths {\n    position: relative;\n    left: 53.84615% !important;\n  }\n  .small_push_eight_thirteenths {\n    position: relative;\n    left: 61.53846% !important;\n  }\n  .small_push_nine_thirteenths {\n    position: relative;\n    left: 69.23077% !important;\n  }\n  .small_push_ten_thirteenths {\n    position: relative;\n    left: 76.92308% !important;\n  }\n  .small_push_eleven_thirteenths {\n    position: relative;\n    left: 84.61538% !important;\n  }\n  .small_push_twelve_thirteenths {\n    position: relative;\n    left: 92.30769% !important;\n  }\n  .small_push_one_twelfth {\n    position: relative;\n    left: 8.33333% !important;\n  }\n  .small_push_two_twelfths {\n    position: relative;\n    left: 16.66667% !important;\n  }\n  .small_push_three_twelfths {\n    position: relative;\n    left: 25% !important;\n  }\n  .small_push_four_twelfths {\n    position: relative;\n    left: 33.33333% !important;\n  }\n  .small_push_five_twelfths {\n    position: relative;\n    left: 41.66667% !important;\n  }\n  .small_push_six_twelfths {\n    position: relative;\n    left: 50% !important;\n  }\n  .small_push_seven_twelfths {\n    position: relative;\n    left: 58.33333% !important;\n  }\n  .small_push_eight_twelfths {\n    position: relative;\n    left: 66.66667% !important;\n  }\n  .small_push_nine_twelfths {\n    position: relative;\n    left: 75% !important;\n  }\n  .small_push_ten_twelfths {\n    position: relative;\n    left: 83.33333% !important;\n  }\n  .small_push_eleven_twelfths {\n    position: relative;\n    left: 91.66667% !important;\n  }\n  .small_push_one_eleventh {\n    position: relative;\n    left: 9.09091% !important;\n  }\n  .small_push_two_elevenths {\n    position: relative;\n    left: 18.18182% !important;\n  }\n  .small_push_three_elevenths {\n    position: relative;\n    left: 27.27273% !important;\n  }\n  .small_push_four_elevenths {\n    position: relative;\n    left: 36.36364% !important;\n  }\n  .small_push_five_elevenths {\n    position: relative;\n    left: 45.45455% !important;\n  }\n  .small_push_six_elevenths {\n    position: relative;\n    left: 54.54545% !important;\n  }\n  .small_push_seven_elevenths {\n    position: relative;\n    left: 63.63636% !important;\n  }\n  .small_push_eight_elevenths {\n    position: relative;\n    left: 72.72727% !important;\n  }\n  .small_push_nine_elevenths {\n    position: relative;\n    left: 81.81818% !important;\n  }\n  .small_push_ten_elevenths {\n    position: relative;\n    left: 90.90909% !important;\n  }\n  .small_push_one_tenth {\n    position: relative;\n    left: 10% !important;\n  }\n  .small_push_two_tenths {\n    position: relative;\n    left: 20% !important;\n  }\n  .small_push_three_tenths {\n    position: relative;\n    left: 30% !important;\n  }\n  .small_push_four_tenths {\n    position: relative;\n    left: 40% !important;\n  }\n  .small_push_five_tenths {\n    position: relative;\n    left: 50% !important;\n  }\n  .small_push_six_tenths {\n    position: relative;\n    left: 60% !important;\n  }\n  .small_push_seven_tenths {\n    position: relative;\n    left: 70% !important;\n  }\n  .small_push_eight_tenths {\n    position: relative;\n    left: 80% !important;\n  }\n  .small_push_nine_tenths {\n    position: relative;\n    left: 90% !important;\n  }\n  .small_push_one_ninth {\n    position: relative;\n    left: 11.11111% !important;\n  }\n  .small_push_two_ninths {\n    position: relative;\n    left: 22.22222% !important;\n  }\n  .small_push_three_ninths {\n    position: relative;\n    left: 33.33333% !important;\n  }\n  .small_push_four_ninths {\n    position: relative;\n    left: 44.44444% !important;\n  }\n  .small_push_five_ninths {\n    position: relative;\n    left: 55.55556% !important;\n  }\n  .small_push_six_ninths {\n    position: relative;\n    left: 66.66667% !important;\n  }\n  .small_push_seven_ninths {\n    position: relative;\n    left: 77.77778% !important;\n  }\n  .small_push_eight_ninths {\n    position: relative;\n    left: 88.88889% !important;\n  }\n  .small_push_one_eighth {\n    position: relative;\n    left: 12.5% !important;\n  }\n  .small_push_two_eighths {\n    position: relative;\n    left: 25% !important;\n  }\n  .small_push_three_eighths {\n    position: relative;\n    left: 37.5% !important;\n  }\n  .small_push_four_eighths {\n    position: relative;\n    left: 50% !important;\n  }\n  .small_push_five_eighths {\n    position: relative;\n    left: 62.5% !important;\n  }\n  .small_push_six_eighths {\n    position: relative;\n    left: 75% !important;\n  }\n  .small_push_seven_eighths {\n    position: relative;\n    left: 87.5% !important;\n  }\n  .small_push_one_seventh {\n    position: relative;\n    left: 14.28571% !important;\n  }\n  .small_push_two_sevenths {\n    position: relative;\n    left: 28.57143% !important;\n  }\n  .small_push_three_sevenths {\n    position: relative;\n    left: 42.85714% !important;\n  }\n  .small_push_four_sevenths {\n    position: relative;\n    left: 57.14286% !important;\n  }\n  .small_push_five_sevenths {\n    position: relative;\n    left: 71.42857% !important;\n  }\n  .small_push_six_sevenths {\n    position: relative;\n    left: 85.71429% !important;\n  }\n  .small_push_one_sixth {\n    position: relative;\n    left: 16.66667% !important;\n  }\n  .small_push_two_sixths {\n    position: relative;\n    left: 33.33333% !important;\n  }\n  .small_push_three_sixths {\n    position: relative;\n    left: 50% !important;\n  }\n  .small_push_four_sixths {\n    position: relative;\n    left: 66.66667% !important;\n  }\n  .small_push_five_sixths {\n    position: relative;\n    left: 83.33333% !important;\n  }\n  .small_push_one_fifth {\n    position: relative;\n    left: 20% !important;\n  }\n  .small_push_two_fifths {\n    position: relative;\n    left: 40% !important;\n  }\n  .small_push_three_fifths {\n    position: relative;\n    left: 60% !important;\n  }\n  .small_push_four_fifths {\n    position: relative;\n    left: 80% !important;\n  }\n  .small_push_one_quarter, .small_push_one_fourth {\n    position: relative;\n    left: 25% !important;\n  }\n  .small_push_two_quarters, .small_push_two_fourths {\n    position: relative;\n    left: 50% !important;\n  }\n  .small_push_three_quarters, .small_push_three_fourths {\n    position: relative;\n    left: 75% !important;\n  }\n  .small_push_one_third {\n    position: relative;\n    left: 33.33333% !important;\n  }\n  .small_push_two_thirds {\n    position: relative;\n    left: 66.66667% !important;\n  }\n  .small_push_one_half {\n    position: relative;\n    left: 50% !important;\n  }\n}\n\n@media only screen and (min-width: 43.1875em) and (max-width: 56.875em) {\n  .smallish_push_one_whole {\n    left: 100% !important;\n  }\n  .smallish_push_one_thirteenth {\n    position: relative;\n    left: 7.69231% !important;\n  }\n  .smallish_push_two_thirteenths {\n    position: relative;\n    left: 15.38462% !important;\n  }\n  .smallish_push_three_thirteenths {\n    position: relative;\n    left: 23.07692% !important;\n  }\n  .smallish_push_four_thirteenths {\n    position: relative;\n    left: 30.76923% !important;\n  }\n  .smallish_push_five_thirteenths {\n    position: relative;\n    left: 38.46154% !important;\n  }\n  .smallish_push_six_thirteenths {\n    position: relative;\n    left: 46.15385% !important;\n  }\n  .smallish_push_seven_thirteenths {\n    position: relative;\n    left: 53.84615% !important;\n  }\n  .smallish_push_eight_thirteenths {\n    position: relative;\n    left: 61.53846% !important;\n  }\n  .smallish_push_nine_thirteenths {\n    position: relative;\n    left: 69.23077% !important;\n  }\n  .smallish_push_ten_thirteenths {\n    position: relative;\n    left: 76.92308% !important;\n  }\n  .smallish_push_eleven_thirteenths {\n    position: relative;\n    left: 84.61538% !important;\n  }\n  .smallish_push_twelve_thirteenths {\n    position: relative;\n    left: 92.30769% !important;\n  }\n  .smallish_push_one_twelfth {\n    position: relative;\n    left: 8.33333% !important;\n  }\n  .smallish_push_two_twelfths {\n    position: relative;\n    left: 16.66667% !important;\n  }\n  .smallish_push_three_twelfths {\n    position: relative;\n    left: 25% !important;\n  }\n  .smallish_push_four_twelfths {\n    position: relative;\n    left: 33.33333% !important;\n  }\n  .smallish_push_five_twelfths {\n    position: relative;\n    left: 41.66667% !important;\n  }\n  .smallish_push_six_twelfths {\n    position: relative;\n    left: 50% !important;\n  }\n  .smallish_push_seven_twelfths {\n    position: relative;\n    left: 58.33333% !important;\n  }\n  .smallish_push_eight_twelfths {\n    position: relative;\n    left: 66.66667% !important;\n  }\n  .smallish_push_nine_twelfths {\n    position: relative;\n    left: 75% !important;\n  }\n  .smallish_push_ten_twelfths {\n    position: relative;\n    left: 83.33333% !important;\n  }\n  .smallish_push_eleven_twelfths {\n    position: relative;\n    left: 91.66667% !important;\n  }\n  .smallish_push_one_eleventh {\n    position: relative;\n    left: 9.09091% !important;\n  }\n  .smallish_push_two_elevenths {\n    position: relative;\n    left: 18.18182% !important;\n  }\n  .smallish_push_three_elevenths {\n    position: relative;\n    left: 27.27273% !important;\n  }\n  .smallish_push_four_elevenths {\n    position: relative;\n    left: 36.36364% !important;\n  }\n  .smallish_push_five_elevenths {\n    position: relative;\n    left: 45.45455% !important;\n  }\n  .smallish_push_six_elevenths {\n    position: relative;\n    left: 54.54545% !important;\n  }\n  .smallish_push_seven_elevenths {\n    position: relative;\n    left: 63.63636% !important;\n  }\n  .smallish_push_eight_elevenths {\n    position: relative;\n    left: 72.72727% !important;\n  }\n  .smallish_push_nine_elevenths {\n    position: relative;\n    left: 81.81818% !important;\n  }\n  .smallish_push_ten_elevenths {\n    position: relative;\n    left: 90.90909% !important;\n  }\n  .smallish_push_one_tenth {\n    position: relative;\n    left: 10% !important;\n  }\n  .smallish_push_two_tenths {\n    position: relative;\n    left: 20% !important;\n  }\n  .smallish_push_three_tenths {\n    position: relative;\n    left: 30% !important;\n  }\n  .smallish_push_four_tenths {\n    position: relative;\n    left: 40% !important;\n  }\n  .smallish_push_five_tenths {\n    position: relative;\n    left: 50% !important;\n  }\n  .smallish_push_six_tenths {\n    position: relative;\n    left: 60% !important;\n  }\n  .smallish_push_seven_tenths {\n    position: relative;\n    left: 70% !important;\n  }\n  .smallish_push_eight_tenths {\n    position: relative;\n    left: 80% !important;\n  }\n  .smallish_push_nine_tenths {\n    position: relative;\n    left: 90% !important;\n  }\n  .smallish_push_one_ninth {\n    position: relative;\n    left: 11.11111% !important;\n  }\n  .smallish_push_two_ninths {\n    position: relative;\n    left: 22.22222% !important;\n  }\n  .smallish_push_three_ninths {\n    position: relative;\n    left: 33.33333% !important;\n  }\n  .smallish_push_four_ninths {\n    position: relative;\n    left: 44.44444% !important;\n  }\n  .smallish_push_five_ninths {\n    position: relative;\n    left: 55.55556% !important;\n  }\n  .smallish_push_six_ninths {\n    position: relative;\n    left: 66.66667% !important;\n  }\n  .smallish_push_seven_ninths {\n    position: relative;\n    left: 77.77778% !important;\n  }\n  .smallish_push_eight_ninths {\n    position: relative;\n    left: 88.88889% !important;\n  }\n  .smallish_push_one_eighth {\n    position: relative;\n    left: 12.5% !important;\n  }\n  .smallish_push_two_eighths {\n    position: relative;\n    left: 25% !important;\n  }\n  .smallish_push_three_eighths {\n    position: relative;\n    left: 37.5% !important;\n  }\n  .smallish_push_four_eighths {\n    position: relative;\n    left: 50% !important;\n  }\n  .smallish_push_five_eighths {\n    position: relative;\n    left: 62.5% !important;\n  }\n  .smallish_push_six_eighths {\n    position: relative;\n    left: 75% !important;\n  }\n  .smallish_push_seven_eighths {\n    position: relative;\n    left: 87.5% !important;\n  }\n  .smallish_push_one_seventh {\n    position: relative;\n    left: 14.28571% !important;\n  }\n  .smallish_push_two_sevenths {\n    position: relative;\n    left: 28.57143% !important;\n  }\n  .smallish_push_three_sevenths {\n    position: relative;\n    left: 42.85714% !important;\n  }\n  .smallish_push_four_sevenths {\n    position: relative;\n    left: 57.14286% !important;\n  }\n  .smallish_push_five_sevenths {\n    position: relative;\n    left: 71.42857% !important;\n  }\n  .smallish_push_six_sevenths {\n    position: relative;\n    left: 85.71429% !important;\n  }\n  .smallish_push_one_sixth {\n    position: relative;\n    left: 16.66667% !important;\n  }\n  .smallish_push_two_sixths {\n    position: relative;\n    left: 33.33333% !important;\n  }\n  .smallish_push_three_sixths {\n    position: relative;\n    left: 50% !important;\n  }\n  .smallish_push_four_sixths {\n    position: relative;\n    left: 66.66667% !important;\n  }\n  .smallish_push_five_sixths {\n    position: relative;\n    left: 83.33333% !important;\n  }\n  .smallish_push_one_fifth {\n    position: relative;\n    left: 20% !important;\n  }\n  .smallish_push_two_fifths {\n    position: relative;\n    left: 40% !important;\n  }\n  .smallish_push_three_fifths {\n    position: relative;\n    left: 60% !important;\n  }\n  .smallish_push_four_fifths {\n    position: relative;\n    left: 80% !important;\n  }\n  .smallish_push_one_quarter, .smallish_push_one_fourth {\n    position: relative;\n    left: 25% !important;\n  }\n  .smallish_push_two_quarters, .smallish_push_two_fourths {\n    position: relative;\n    left: 50% !important;\n  }\n  .smallish_push_three_quarters, .smallish_push_three_fourths {\n    position: relative;\n    left: 75% !important;\n  }\n  .smallish_push_one_third {\n    position: relative;\n    left: 33.33333% !important;\n  }\n  .smallish_push_two_thirds {\n    position: relative;\n    left: 66.66667% !important;\n  }\n  .smallish_push_one_half {\n    position: relative;\n    left: 50% !important;\n  }\n}\n\n@media only screen and (min-width: 56.9375em) {\n  .bigs_push_one_whole {\n    left: 100% !important;\n  }\n  .bigs_push_one_thirteenth {\n    position: relative;\n    left: 7.69231% !important;\n  }\n  .bigs_push_two_thirteenths {\n    position: relative;\n    left: 15.38462% !important;\n  }\n  .bigs_push_three_thirteenths {\n    position: relative;\n    left: 23.07692% !important;\n  }\n  .bigs_push_four_thirteenths {\n    position: relative;\n    left: 30.76923% !important;\n  }\n  .bigs_push_five_thirteenths {\n    position: relative;\n    left: 38.46154% !important;\n  }\n  .bigs_push_six_thirteenths {\n    position: relative;\n    left: 46.15385% !important;\n  }\n  .bigs_push_seven_thirteenths {\n    position: relative;\n    left: 53.84615% !important;\n  }\n  .bigs_push_eight_thirteenths {\n    position: relative;\n    left: 61.53846% !important;\n  }\n  .bigs_push_nine_thirteenths {\n    position: relative;\n    left: 69.23077% !important;\n  }\n  .bigs_push_ten_thirteenths {\n    position: relative;\n    left: 76.92308% !important;\n  }\n  .bigs_push_eleven_thirteenths {\n    position: relative;\n    left: 84.61538% !important;\n  }\n  .bigs_push_twelve_thirteenths {\n    position: relative;\n    left: 92.30769% !important;\n  }\n  .bigs_push_one_twelfth {\n    position: relative;\n    left: 8.33333% !important;\n  }\n  .bigs_push_two_twelfths {\n    position: relative;\n    left: 16.66667% !important;\n  }\n  .bigs_push_three_twelfths {\n    position: relative;\n    left: 25% !important;\n  }\n  .bigs_push_four_twelfths {\n    position: relative;\n    left: 33.33333% !important;\n  }\n  .bigs_push_five_twelfths {\n    position: relative;\n    left: 41.66667% !important;\n  }\n  .bigs_push_six_twelfths {\n    position: relative;\n    left: 50% !important;\n  }\n  .bigs_push_seven_twelfths {\n    position: relative;\n    left: 58.33333% !important;\n  }\n  .bigs_push_eight_twelfths {\n    position: relative;\n    left: 66.66667% !important;\n  }\n  .bigs_push_nine_twelfths {\n    position: relative;\n    left: 75% !important;\n  }\n  .bigs_push_ten_twelfths {\n    position: relative;\n    left: 83.33333% !important;\n  }\n  .bigs_push_eleven_twelfths {\n    position: relative;\n    left: 91.66667% !important;\n  }\n  .bigs_push_one_eleventh {\n    position: relative;\n    left: 9.09091% !important;\n  }\n  .bigs_push_two_elevenths {\n    position: relative;\n    left: 18.18182% !important;\n  }\n  .bigs_push_three_elevenths {\n    position: relative;\n    left: 27.27273% !important;\n  }\n  .bigs_push_four_elevenths {\n    position: relative;\n    left: 36.36364% !important;\n  }\n  .bigs_push_five_elevenths {\n    position: relative;\n    left: 45.45455% !important;\n  }\n  .bigs_push_six_elevenths {\n    position: relative;\n    left: 54.54545% !important;\n  }\n  .bigs_push_seven_elevenths {\n    position: relative;\n    left: 63.63636% !important;\n  }\n  .bigs_push_eight_elevenths {\n    position: relative;\n    left: 72.72727% !important;\n  }\n  .bigs_push_nine_elevenths {\n    position: relative;\n    left: 81.81818% !important;\n  }\n  .bigs_push_ten_elevenths {\n    position: relative;\n    left: 90.90909% !important;\n  }\n  .bigs_push_one_tenth {\n    position: relative;\n    left: 10% !important;\n  }\n  .bigs_push_two_tenths {\n    position: relative;\n    left: 20% !important;\n  }\n  .bigs_push_three_tenths {\n    position: relative;\n    left: 30% !important;\n  }\n  .bigs_push_four_tenths {\n    position: relative;\n    left: 40% !important;\n  }\n  .bigs_push_five_tenths {\n    position: relative;\n    left: 50% !important;\n  }\n  .bigs_push_six_tenths {\n    position: relative;\n    left: 60% !important;\n  }\n  .bigs_push_seven_tenths {\n    position: relative;\n    left: 70% !important;\n  }\n  .bigs_push_eight_tenths {\n    position: relative;\n    left: 80% !important;\n  }\n  .bigs_push_nine_tenths {\n    position: relative;\n    left: 90% !important;\n  }\n  .bigs_push_one_ninth {\n    position: relative;\n    left: 11.11111% !important;\n  }\n  .bigs_push_two_ninths {\n    position: relative;\n    left: 22.22222% !important;\n  }\n  .bigs_push_three_ninths {\n    position: relative;\n    left: 33.33333% !important;\n  }\n  .bigs_push_four_ninths {\n    position: relative;\n    left: 44.44444% !important;\n  }\n  .bigs_push_five_ninths {\n    position: relative;\n    left: 55.55556% !important;\n  }\n  .bigs_push_six_ninths {\n    position: relative;\n    left: 66.66667% !important;\n  }\n  .bigs_push_seven_ninths {\n    position: relative;\n    left: 77.77778% !important;\n  }\n  .bigs_push_eight_ninths {\n    position: relative;\n    left: 88.88889% !important;\n  }\n  .bigs_push_one_eighth {\n    position: relative;\n    left: 12.5% !important;\n  }\n  .bigs_push_two_eighths {\n    position: relative;\n    left: 25% !important;\n  }\n  .bigs_push_three_eighths {\n    position: relative;\n    left: 37.5% !important;\n  }\n  .bigs_push_four_eighths {\n    position: relative;\n    left: 50% !important;\n  }\n  .bigs_push_five_eighths {\n    position: relative;\n    left: 62.5% !important;\n  }\n  .bigs_push_six_eighths {\n    position: relative;\n    left: 75% !important;\n  }\n  .bigs_push_seven_eighths {\n    position: relative;\n    left: 87.5% !important;\n  }\n  .bigs_push_one_seventh {\n    position: relative;\n    left: 14.28571% !important;\n  }\n  .bigs_push_two_sevenths {\n    position: relative;\n    left: 28.57143% !important;\n  }\n  .bigs_push_three_sevenths {\n    position: relative;\n    left: 42.85714% !important;\n  }\n  .bigs_push_four_sevenths {\n    position: relative;\n    left: 57.14286% !important;\n  }\n  .bigs_push_five_sevenths {\n    position: relative;\n    left: 71.42857% !important;\n  }\n  .bigs_push_six_sevenths {\n    position: relative;\n    left: 85.71429% !important;\n  }\n  .bigs_push_one_sixth {\n    position: relative;\n    left: 16.66667% !important;\n  }\n  .bigs_push_two_sixths {\n    position: relative;\n    left: 33.33333% !important;\n  }\n  .bigs_push_three_sixths {\n    position: relative;\n    left: 50% !important;\n  }\n  .bigs_push_four_sixths {\n    position: relative;\n    left: 66.66667% !important;\n  }\n  .bigs_push_five_sixths {\n    position: relative;\n    left: 83.33333% !important;\n  }\n  .bigs_push_one_fifth {\n    position: relative;\n    left: 20% !important;\n  }\n  .bigs_push_two_fifths {\n    position: relative;\n    left: 40% !important;\n  }\n  .bigs_push_three_fifths {\n    position: relative;\n    left: 60% !important;\n  }\n  .bigs_push_four_fifths {\n    position: relative;\n    left: 80% !important;\n  }\n  .bigs_push_one_quarter, .bigs_push_one_fourth {\n    position: relative;\n    left: 25% !important;\n  }\n  .bigs_push_two_quarters, .bigs_push_two_fourths {\n    position: relative;\n    left: 50% !important;\n  }\n  .bigs_push_three_quarters, .bigs_push_three_fourths {\n    position: relative;\n    left: 75% !important;\n  }\n  .bigs_push_one_third {\n    position: relative;\n    left: 33.33333% !important;\n  }\n  .bigs_push_two_thirds {\n    position: relative;\n    left: 66.66667% !important;\n  }\n  .bigs_push_one_half {\n    position: relative;\n    left: 50% !important;\n  }\n}\n\n@media only screen and (min-width: 56.9375em) and (max-width: 85em) {\n  .lap_push_one_whole {\n    left: 100% !important;\n  }\n  .lap_push_one_thirteenth {\n    position: relative;\n    left: 7.69231% !important;\n  }\n  .lap_push_two_thirteenths {\n    position: relative;\n    left: 15.38462% !important;\n  }\n  .lap_push_three_thirteenths {\n    position: relative;\n    left: 23.07692% !important;\n  }\n  .lap_push_four_thirteenths {\n    position: relative;\n    left: 30.76923% !important;\n  }\n  .lap_push_five_thirteenths {\n    position: relative;\n    left: 38.46154% !important;\n  }\n  .lap_push_six_thirteenths {\n    position: relative;\n    left: 46.15385% !important;\n  }\n  .lap_push_seven_thirteenths {\n    position: relative;\n    left: 53.84615% !important;\n  }\n  .lap_push_eight_thirteenths {\n    position: relative;\n    left: 61.53846% !important;\n  }\n  .lap_push_nine_thirteenths {\n    position: relative;\n    left: 69.23077% !important;\n  }\n  .lap_push_ten_thirteenths {\n    position: relative;\n    left: 76.92308% !important;\n  }\n  .lap_push_eleven_thirteenths {\n    position: relative;\n    left: 84.61538% !important;\n  }\n  .lap_push_twelve_thirteenths {\n    position: relative;\n    left: 92.30769% !important;\n  }\n  .lap_push_one_twelfth {\n    position: relative;\n    left: 8.33333% !important;\n  }\n  .lap_push_two_twelfths {\n    position: relative;\n    left: 16.66667% !important;\n  }\n  .lap_push_three_twelfths {\n    position: relative;\n    left: 25% !important;\n  }\n  .lap_push_four_twelfths {\n    position: relative;\n    left: 33.33333% !important;\n  }\n  .lap_push_five_twelfths {\n    position: relative;\n    left: 41.66667% !important;\n  }\n  .lap_push_six_twelfths {\n    position: relative;\n    left: 50% !important;\n  }\n  .lap_push_seven_twelfths {\n    position: relative;\n    left: 58.33333% !important;\n  }\n  .lap_push_eight_twelfths {\n    position: relative;\n    left: 66.66667% !important;\n  }\n  .lap_push_nine_twelfths {\n    position: relative;\n    left: 75% !important;\n  }\n  .lap_push_ten_twelfths {\n    position: relative;\n    left: 83.33333% !important;\n  }\n  .lap_push_eleven_twelfths {\n    position: relative;\n    left: 91.66667% !important;\n  }\n  .lap_push_one_eleventh {\n    position: relative;\n    left: 9.09091% !important;\n  }\n  .lap_push_two_elevenths {\n    position: relative;\n    left: 18.18182% !important;\n  }\n  .lap_push_three_elevenths {\n    position: relative;\n    left: 27.27273% !important;\n  }\n  .lap_push_four_elevenths {\n    position: relative;\n    left: 36.36364% !important;\n  }\n  .lap_push_five_elevenths {\n    position: relative;\n    left: 45.45455% !important;\n  }\n  .lap_push_six_elevenths {\n    position: relative;\n    left: 54.54545% !important;\n  }\n  .lap_push_seven_elevenths {\n    position: relative;\n    left: 63.63636% !important;\n  }\n  .lap_push_eight_elevenths {\n    position: relative;\n    left: 72.72727% !important;\n  }\n  .lap_push_nine_elevenths {\n    position: relative;\n    left: 81.81818% !important;\n  }\n  .lap_push_ten_elevenths {\n    position: relative;\n    left: 90.90909% !important;\n  }\n  .lap_push_one_tenth {\n    position: relative;\n    left: 10% !important;\n  }\n  .lap_push_two_tenths {\n    position: relative;\n    left: 20% !important;\n  }\n  .lap_push_three_tenths {\n    position: relative;\n    left: 30% !important;\n  }\n  .lap_push_four_tenths {\n    position: relative;\n    left: 40% !important;\n  }\n  .lap_push_five_tenths {\n    position: relative;\n    left: 50% !important;\n  }\n  .lap_push_six_tenths {\n    position: relative;\n    left: 60% !important;\n  }\n  .lap_push_seven_tenths {\n    position: relative;\n    left: 70% !important;\n  }\n  .lap_push_eight_tenths {\n    position: relative;\n    left: 80% !important;\n  }\n  .lap_push_nine_tenths {\n    position: relative;\n    left: 90% !important;\n  }\n  .lap_push_one_ninth {\n    position: relative;\n    left: 11.11111% !important;\n  }\n  .lap_push_two_ninths {\n    position: relative;\n    left: 22.22222% !important;\n  }\n  .lap_push_three_ninths {\n    position: relative;\n    left: 33.33333% !important;\n  }\n  .lap_push_four_ninths {\n    position: relative;\n    left: 44.44444% !important;\n  }\n  .lap_push_five_ninths {\n    position: relative;\n    left: 55.55556% !important;\n  }\n  .lap_push_six_ninths {\n    position: relative;\n    left: 66.66667% !important;\n  }\n  .lap_push_seven_ninths {\n    position: relative;\n    left: 77.77778% !important;\n  }\n  .lap_push_eight_ninths {\n    position: relative;\n    left: 88.88889% !important;\n  }\n  .lap_push_one_eighth {\n    position: relative;\n    left: 12.5% !important;\n  }\n  .lap_push_two_eighths {\n    position: relative;\n    left: 25% !important;\n  }\n  .lap_push_three_eighths {\n    position: relative;\n    left: 37.5% !important;\n  }\n  .lap_push_four_eighths {\n    position: relative;\n    left: 50% !important;\n  }\n  .lap_push_five_eighths {\n    position: relative;\n    left: 62.5% !important;\n  }\n  .lap_push_six_eighths {\n    position: relative;\n    left: 75% !important;\n  }\n  .lap_push_seven_eighths {\n    position: relative;\n    left: 87.5% !important;\n  }\n  .lap_push_one_seventh {\n    position: relative;\n    left: 14.28571% !important;\n  }\n  .lap_push_two_sevenths {\n    position: relative;\n    left: 28.57143% !important;\n  }\n  .lap_push_three_sevenths {\n    position: relative;\n    left: 42.85714% !important;\n  }\n  .lap_push_four_sevenths {\n    position: relative;\n    left: 57.14286% !important;\n  }\n  .lap_push_five_sevenths {\n    position: relative;\n    left: 71.42857% !important;\n  }\n  .lap_push_six_sevenths {\n    position: relative;\n    left: 85.71429% !important;\n  }\n  .lap_push_one_sixth {\n    position: relative;\n    left: 16.66667% !important;\n  }\n  .lap_push_two_sixths {\n    position: relative;\n    left: 33.33333% !important;\n  }\n  .lap_push_three_sixths {\n    position: relative;\n    left: 50% !important;\n  }\n  .lap_push_four_sixths {\n    position: relative;\n    left: 66.66667% !important;\n  }\n  .lap_push_five_sixths {\n    position: relative;\n    left: 83.33333% !important;\n  }\n  .lap_push_one_fifth {\n    position: relative;\n    left: 20% !important;\n  }\n  .lap_push_two_fifths {\n    position: relative;\n    left: 40% !important;\n  }\n  .lap_push_three_fifths {\n    position: relative;\n    left: 60% !important;\n  }\n  .lap_push_four_fifths {\n    position: relative;\n    left: 80% !important;\n  }\n  .lap_push_one_quarter, .lap_push_one_fourth {\n    position: relative;\n    left: 25% !important;\n  }\n  .lap_push_two_quarters, .lap_push_two_fourths {\n    position: relative;\n    left: 50% !important;\n  }\n  .lap_push_three_quarters, .lap_push_three_fourths {\n    position: relative;\n    left: 75% !important;\n  }\n  .lap_push_one_third {\n    position: relative;\n    left: 33.33333% !important;\n  }\n  .lap_push_two_thirds {\n    position: relative;\n    left: 66.66667% !important;\n  }\n  .lap_push_one_half {\n    position: relative;\n    left: 50% !important;\n  }\n}\n\n@media only screen and (min-width: 85em) {\n  .desk_push_one_whole {\n    left: 100% !important;\n  }\n  .desk_push_one_thirteenth {\n    position: relative;\n    left: 7.69231% !important;\n  }\n  .desk_push_two_thirteenths {\n    position: relative;\n    left: 15.38462% !important;\n  }\n  .desk_push_three_thirteenths {\n    position: relative;\n    left: 23.07692% !important;\n  }\n  .desk_push_four_thirteenths {\n    position: relative;\n    left: 30.76923% !important;\n  }\n  .desk_push_five_thirteenths {\n    position: relative;\n    left: 38.46154% !important;\n  }\n  .desk_push_six_thirteenths {\n    position: relative;\n    left: 46.15385% !important;\n  }\n  .desk_push_seven_thirteenths {\n    position: relative;\n    left: 53.84615% !important;\n  }\n  .desk_push_eight_thirteenths {\n    position: relative;\n    left: 61.53846% !important;\n  }\n  .desk_push_nine_thirteenths {\n    position: relative;\n    left: 69.23077% !important;\n  }\n  .desk_push_ten_thirteenths {\n    position: relative;\n    left: 76.92308% !important;\n  }\n  .desk_push_eleven_thirteenths {\n    position: relative;\n    left: 84.61538% !important;\n  }\n  .desk_push_twelve_thirteenths {\n    position: relative;\n    left: 92.30769% !important;\n  }\n  .desk_push_one_twelfth {\n    position: relative;\n    left: 8.33333% !important;\n  }\n  .desk_push_two_twelfths {\n    position: relative;\n    left: 16.66667% !important;\n  }\n  .desk_push_three_twelfths {\n    position: relative;\n    left: 25% !important;\n  }\n  .desk_push_four_twelfths {\n    position: relative;\n    left: 33.33333% !important;\n  }\n  .desk_push_five_twelfths {\n    position: relative;\n    left: 41.66667% !important;\n  }\n  .desk_push_six_twelfths {\n    position: relative;\n    left: 50% !important;\n  }\n  .desk_push_seven_twelfths {\n    position: relative;\n    left: 58.33333% !important;\n  }\n  .desk_push_eight_twelfths {\n    position: relative;\n    left: 66.66667% !important;\n  }\n  .desk_push_nine_twelfths {\n    position: relative;\n    left: 75% !important;\n  }\n  .desk_push_ten_twelfths {\n    position: relative;\n    left: 83.33333% !important;\n  }\n  .desk_push_eleven_twelfths {\n    position: relative;\n    left: 91.66667% !important;\n  }\n  .desk_push_one_eleventh {\n    position: relative;\n    left: 9.09091% !important;\n  }\n  .desk_push_two_elevenths {\n    position: relative;\n    left: 18.18182% !important;\n  }\n  .desk_push_three_elevenths {\n    position: relative;\n    left: 27.27273% !important;\n  }\n  .desk_push_four_elevenths {\n    position: relative;\n    left: 36.36364% !important;\n  }\n  .desk_push_five_elevenths {\n    position: relative;\n    left: 45.45455% !important;\n  }\n  .desk_push_six_elevenths {\n    position: relative;\n    left: 54.54545% !important;\n  }\n  .desk_push_seven_elevenths {\n    position: relative;\n    left: 63.63636% !important;\n  }\n  .desk_push_eight_elevenths {\n    position: relative;\n    left: 72.72727% !important;\n  }\n  .desk_push_nine_elevenths {\n    position: relative;\n    left: 81.81818% !important;\n  }\n  .desk_push_ten_elevenths {\n    position: relative;\n    left: 90.90909% !important;\n  }\n  .desk_push_one_tenth {\n    position: relative;\n    left: 10% !important;\n  }\n  .desk_push_two_tenths {\n    position: relative;\n    left: 20% !important;\n  }\n  .desk_push_three_tenths {\n    position: relative;\n    left: 30% !important;\n  }\n  .desk_push_four_tenths {\n    position: relative;\n    left: 40% !important;\n  }\n  .desk_push_five_tenths {\n    position: relative;\n    left: 50% !important;\n  }\n  .desk_push_six_tenths {\n    position: relative;\n    left: 60% !important;\n  }\n  .desk_push_seven_tenths {\n    position: relative;\n    left: 70% !important;\n  }\n  .desk_push_eight_tenths {\n    position: relative;\n    left: 80% !important;\n  }\n  .desk_push_nine_tenths {\n    position: relative;\n    left: 90% !important;\n  }\n  .desk_push_one_ninth {\n    position: relative;\n    left: 11.11111% !important;\n  }\n  .desk_push_two_ninths {\n    position: relative;\n    left: 22.22222% !important;\n  }\n  .desk_push_three_ninths {\n    position: relative;\n    left: 33.33333% !important;\n  }\n  .desk_push_four_ninths {\n    position: relative;\n    left: 44.44444% !important;\n  }\n  .desk_push_five_ninths {\n    position: relative;\n    left: 55.55556% !important;\n  }\n  .desk_push_six_ninths {\n    position: relative;\n    left: 66.66667% !important;\n  }\n  .desk_push_seven_ninths {\n    position: relative;\n    left: 77.77778% !important;\n  }\n  .desk_push_eight_ninths {\n    position: relative;\n    left: 88.88889% !important;\n  }\n  .desk_push_one_eighth {\n    position: relative;\n    left: 12.5% !important;\n  }\n  .desk_push_two_eighths {\n    position: relative;\n    left: 25% !important;\n  }\n  .desk_push_three_eighths {\n    position: relative;\n    left: 37.5% !important;\n  }\n  .desk_push_four_eighths {\n    position: relative;\n    left: 50% !important;\n  }\n  .desk_push_five_eighths {\n    position: relative;\n    left: 62.5% !important;\n  }\n  .desk_push_six_eighths {\n    position: relative;\n    left: 75% !important;\n  }\n  .desk_push_seven_eighths {\n    position: relative;\n    left: 87.5% !important;\n  }\n  .desk_push_one_seventh {\n    position: relative;\n    left: 14.28571% !important;\n  }\n  .desk_push_two_sevenths {\n    position: relative;\n    left: 28.57143% !important;\n  }\n  .desk_push_three_sevenths {\n    position: relative;\n    left: 42.85714% !important;\n  }\n  .desk_push_four_sevenths {\n    position: relative;\n    left: 57.14286% !important;\n  }\n  .desk_push_five_sevenths {\n    position: relative;\n    left: 71.42857% !important;\n  }\n  .desk_push_six_sevenths {\n    position: relative;\n    left: 85.71429% !important;\n  }\n  .desk_push_one_sixth {\n    position: relative;\n    left: 16.66667% !important;\n  }\n  .desk_push_two_sixths {\n    position: relative;\n    left: 33.33333% !important;\n  }\n  .desk_push_three_sixths {\n    position: relative;\n    left: 50% !important;\n  }\n  .desk_push_four_sixths {\n    position: relative;\n    left: 66.66667% !important;\n  }\n  .desk_push_five_sixths {\n    position: relative;\n    left: 83.33333% !important;\n  }\n  .desk_push_one_fifth {\n    position: relative;\n    left: 20% !important;\n  }\n  .desk_push_two_fifths {\n    position: relative;\n    left: 40% !important;\n  }\n  .desk_push_three_fifths {\n    position: relative;\n    left: 60% !important;\n  }\n  .desk_push_four_fifths {\n    position: relative;\n    left: 80% !important;\n  }\n  .desk_push_one_quarter, .desk_push_one_fourth {\n    position: relative;\n    left: 25% !important;\n  }\n  .desk_push_two_quarters, .desk_push_two_fourths {\n    position: relative;\n    left: 50% !important;\n  }\n  .desk_push_three_quarters, .desk_push_three_fourths {\n    position: relative;\n    left: 75% !important;\n  }\n  .desk_push_one_third {\n    position: relative;\n    left: 33.33333% !important;\n  }\n  .desk_push_two_thirds {\n    position: relative;\n    left: 66.66667% !important;\n  }\n  .desk_push_one_half {\n    position: relative;\n    left: 50% !important;\n  }\n}\n\n.pull_one_whole {\n  right: 100% !important;\n}\n\n.pull_one_thirteenth {\n  position: relative;\n  right: 7.69231% !important;\n}\n\n.pull_two_thirteenths {\n  position: relative;\n  right: 15.38462% !important;\n}\n\n.pull_three_thirteenths {\n  position: relative;\n  right: 23.07692% !important;\n}\n\n.pull_four_thirteenths {\n  position: relative;\n  right: 30.76923% !important;\n}\n\n.pull_five_thirteenths {\n  position: relative;\n  right: 38.46154% !important;\n}\n\n.pull_six_thirteenths {\n  position: relative;\n  right: 46.15385% !important;\n}\n\n.pull_seven_thirteenths {\n  position: relative;\n  right: 53.84615% !important;\n}\n\n.pull_eight_thirteenths {\n  position: relative;\n  right: 61.53846% !important;\n}\n\n.pull_nine_thirteenths {\n  position: relative;\n  right: 69.23077% !important;\n}\n\n.pull_ten_thirteenths {\n  position: relative;\n  right: 76.92308% !important;\n}\n\n.pull_eleven_thirteenths {\n  position: relative;\n  right: 84.61538% !important;\n}\n\n.pull_twelve_thirteenths {\n  position: relative;\n  right: 92.30769% !important;\n}\n\n.pull_one_twelfth {\n  position: relative;\n  right: 8.33333% !important;\n}\n\n.pull_two_twelfths {\n  position: relative;\n  right: 16.66667% !important;\n}\n\n.pull_three_twelfths {\n  position: relative;\n  right: 25% !important;\n}\n\n.pull_four_twelfths {\n  position: relative;\n  right: 33.33333% !important;\n}\n\n.pull_five_twelfths {\n  position: relative;\n  right: 41.66667% !important;\n}\n\n.pull_six_twelfths {\n  position: relative;\n  right: 50% !important;\n}\n\n.pull_seven_twelfths {\n  position: relative;\n  right: 58.33333% !important;\n}\n\n.pull_eight_twelfths {\n  position: relative;\n  right: 66.66667% !important;\n}\n\n.pull_nine_twelfths {\n  position: relative;\n  right: 75% !important;\n}\n\n.pull_ten_twelfths {\n  position: relative;\n  right: 83.33333% !important;\n}\n\n.pull_eleven_twelfths {\n  position: relative;\n  right: 91.66667% !important;\n}\n\n.pull_one_eleventh {\n  position: relative;\n  right: 9.09091% !important;\n}\n\n.pull_two_elevenths {\n  position: relative;\n  right: 18.18182% !important;\n}\n\n.pull_three_elevenths {\n  position: relative;\n  right: 27.27273% !important;\n}\n\n.pull_four_elevenths {\n  position: relative;\n  right: 36.36364% !important;\n}\n\n.pull_five_elevenths {\n  position: relative;\n  right: 45.45455% !important;\n}\n\n.pull_six_elevenths {\n  position: relative;\n  right: 54.54545% !important;\n}\n\n.pull_seven_elevenths {\n  position: relative;\n  right: 63.63636% !important;\n}\n\n.pull_eight_elevenths {\n  position: relative;\n  right: 72.72727% !important;\n}\n\n.pull_nine_elevenths {\n  position: relative;\n  right: 81.81818% !important;\n}\n\n.pull_ten_elevenths {\n  position: relative;\n  right: 90.90909% !important;\n}\n\n.pull_one_tenth {\n  position: relative;\n  right: 10% !important;\n}\n\n.pull_two_tenths {\n  position: relative;\n  right: 20% !important;\n}\n\n.pull_three_tenths {\n  position: relative;\n  right: 30% !important;\n}\n\n.pull_four_tenths {\n  position: relative;\n  right: 40% !important;\n}\n\n.pull_five_tenths {\n  position: relative;\n  right: 50% !important;\n}\n\n.pull_six_tenths {\n  position: relative;\n  right: 60% !important;\n}\n\n.pull_seven_tenths {\n  position: relative;\n  right: 70% !important;\n}\n\n.pull_eight_tenths {\n  position: relative;\n  right: 80% !important;\n}\n\n.pull_nine_tenths {\n  position: relative;\n  right: 90% !important;\n}\n\n.pull_one_ninth {\n  position: relative;\n  right: 11.11111% !important;\n}\n\n.pull_two_ninths {\n  position: relative;\n  right: 22.22222% !important;\n}\n\n.pull_three_ninths {\n  position: relative;\n  right: 33.33333% !important;\n}\n\n.pull_four_ninths {\n  position: relative;\n  right: 44.44444% !important;\n}\n\n.pull_five_ninths {\n  position: relative;\n  right: 55.55556% !important;\n}\n\n.pull_six_ninths {\n  position: relative;\n  right: 66.66667% !important;\n}\n\n.pull_seven_ninths {\n  position: relative;\n  right: 77.77778% !important;\n}\n\n.pull_eight_ninths {\n  position: relative;\n  right: 88.88889% !important;\n}\n\n.pull_one_eighth {\n  position: relative;\n  right: 12.5% !important;\n}\n\n.pull_two_eighths {\n  position: relative;\n  right: 25% !important;\n}\n\n.pull_three_eighths {\n  position: relative;\n  right: 37.5% !important;\n}\n\n.pull_four_eighths {\n  position: relative;\n  right: 50% !important;\n}\n\n.pull_five_eighths {\n  position: relative;\n  right: 62.5% !important;\n}\n\n.pull_six_eighths {\n  position: relative;\n  right: 75% !important;\n}\n\n.pull_seven_eighths {\n  position: relative;\n  right: 87.5% !important;\n}\n\n.pull_one_seventh {\n  position: relative;\n  right: 14.28571% !important;\n}\n\n.pull_two_sevenths {\n  position: relative;\n  right: 28.57143% !important;\n}\n\n.pull_three_sevenths {\n  position: relative;\n  right: 42.85714% !important;\n}\n\n.pull_four_sevenths {\n  position: relative;\n  right: 57.14286% !important;\n}\n\n.pull_five_sevenths {\n  position: relative;\n  right: 71.42857% !important;\n}\n\n.pull_six_sevenths {\n  position: relative;\n  right: 85.71429% !important;\n}\n\n.pull_one_sixth {\n  position: relative;\n  right: 16.66667% !important;\n}\n\n.pull_two_sixths {\n  position: relative;\n  right: 33.33333% !important;\n}\n\n.pull_three_sixths {\n  position: relative;\n  right: 50% !important;\n}\n\n.pull_four_sixths {\n  position: relative;\n  right: 66.66667% !important;\n}\n\n.pull_five_sixths {\n  position: relative;\n  right: 83.33333% !important;\n}\n\n.pull_one_fifth {\n  position: relative;\n  right: 20% !important;\n}\n\n.pull_two_fifths {\n  position: relative;\n  right: 40% !important;\n}\n\n.pull_three_fifths {\n  position: relative;\n  right: 60% !important;\n}\n\n.pull_four_fifths {\n  position: relative;\n  right: 80% !important;\n}\n\n.pull_one_quarter, .pull_one_fourth {\n  position: relative;\n  right: 25% !important;\n}\n\n.pull_two_quarters, .pull_two_fourths {\n  position: relative;\n  right: 50% !important;\n}\n\n.pull_three_quarters, .pull_three_fourths {\n  position: relative;\n  right: 75% !important;\n}\n\n.pull_one_third {\n  position: relative;\n  right: 33.33333% !important;\n}\n\n.pull_two_thirds {\n  position: relative;\n  right: 66.66667% !important;\n}\n\n.pull_one_half {\n  position: relative;\n  right: 50% !important;\n}\n\n@media only screen and (max-width: 56.875em) {\n  .smalls_pull_one_whole {\n    right: 100% !important;\n  }\n  .smalls_pull_one_thirteenth {\n    position: relative;\n    right: 7.69231% !important;\n  }\n  .smalls_pull_two_thirteenths {\n    position: relative;\n    right: 15.38462% !important;\n  }\n  .smalls_pull_three_thirteenths {\n    position: relative;\n    right: 23.07692% !important;\n  }\n  .smalls_pull_four_thirteenths {\n    position: relative;\n    right: 30.76923% !important;\n  }\n  .smalls_pull_five_thirteenths {\n    position: relative;\n    right: 38.46154% !important;\n  }\n  .smalls_pull_six_thirteenths {\n    position: relative;\n    right: 46.15385% !important;\n  }\n  .smalls_pull_seven_thirteenths {\n    position: relative;\n    right: 53.84615% !important;\n  }\n  .smalls_pull_eight_thirteenths {\n    position: relative;\n    right: 61.53846% !important;\n  }\n  .smalls_pull_nine_thirteenths {\n    position: relative;\n    right: 69.23077% !important;\n  }\n  .smalls_pull_ten_thirteenths {\n    position: relative;\n    right: 76.92308% !important;\n  }\n  .smalls_pull_eleven_thirteenths {\n    position: relative;\n    right: 84.61538% !important;\n  }\n  .smalls_pull_twelve_thirteenths {\n    position: relative;\n    right: 92.30769% !important;\n  }\n  .smalls_pull_one_twelfth {\n    position: relative;\n    right: 8.33333% !important;\n  }\n  .smalls_pull_two_twelfths {\n    position: relative;\n    right: 16.66667% !important;\n  }\n  .smalls_pull_three_twelfths {\n    position: relative;\n    right: 25% !important;\n  }\n  .smalls_pull_four_twelfths {\n    position: relative;\n    right: 33.33333% !important;\n  }\n  .smalls_pull_five_twelfths {\n    position: relative;\n    right: 41.66667% !important;\n  }\n  .smalls_pull_six_twelfths {\n    position: relative;\n    right: 50% !important;\n  }\n  .smalls_pull_seven_twelfths {\n    position: relative;\n    right: 58.33333% !important;\n  }\n  .smalls_pull_eight_twelfths {\n    position: relative;\n    right: 66.66667% !important;\n  }\n  .smalls_pull_nine_twelfths {\n    position: relative;\n    right: 75% !important;\n  }\n  .smalls_pull_ten_twelfths {\n    position: relative;\n    right: 83.33333% !important;\n  }\n  .smalls_pull_eleven_twelfths {\n    position: relative;\n    right: 91.66667% !important;\n  }\n  .smalls_pull_one_eleventh {\n    position: relative;\n    right: 9.09091% !important;\n  }\n  .smalls_pull_two_elevenths {\n    position: relative;\n    right: 18.18182% !important;\n  }\n  .smalls_pull_three_elevenths {\n    position: relative;\n    right: 27.27273% !important;\n  }\n  .smalls_pull_four_elevenths {\n    position: relative;\n    right: 36.36364% !important;\n  }\n  .smalls_pull_five_elevenths {\n    position: relative;\n    right: 45.45455% !important;\n  }\n  .smalls_pull_six_elevenths {\n    position: relative;\n    right: 54.54545% !important;\n  }\n  .smalls_pull_seven_elevenths {\n    position: relative;\n    right: 63.63636% !important;\n  }\n  .smalls_pull_eight_elevenths {\n    position: relative;\n    right: 72.72727% !important;\n  }\n  .smalls_pull_nine_elevenths {\n    position: relative;\n    right: 81.81818% !important;\n  }\n  .smalls_pull_ten_elevenths {\n    position: relative;\n    right: 90.90909% !important;\n  }\n  .smalls_pull_one_tenth {\n    position: relative;\n    right: 10% !important;\n  }\n  .smalls_pull_two_tenths {\n    position: relative;\n    right: 20% !important;\n  }\n  .smalls_pull_three_tenths {\n    position: relative;\n    right: 30% !important;\n  }\n  .smalls_pull_four_tenths {\n    position: relative;\n    right: 40% !important;\n  }\n  .smalls_pull_five_tenths {\n    position: relative;\n    right: 50% !important;\n  }\n  .smalls_pull_six_tenths {\n    position: relative;\n    right: 60% !important;\n  }\n  .smalls_pull_seven_tenths {\n    position: relative;\n    right: 70% !important;\n  }\n  .smalls_pull_eight_tenths {\n    position: relative;\n    right: 80% !important;\n  }\n  .smalls_pull_nine_tenths {\n    position: relative;\n    right: 90% !important;\n  }\n  .smalls_pull_one_ninth {\n    position: relative;\n    right: 11.11111% !important;\n  }\n  .smalls_pull_two_ninths {\n    position: relative;\n    right: 22.22222% !important;\n  }\n  .smalls_pull_three_ninths {\n    position: relative;\n    right: 33.33333% !important;\n  }\n  .smalls_pull_four_ninths {\n    position: relative;\n    right: 44.44444% !important;\n  }\n  .smalls_pull_five_ninths {\n    position: relative;\n    right: 55.55556% !important;\n  }\n  .smalls_pull_six_ninths {\n    position: relative;\n    right: 66.66667% !important;\n  }\n  .smalls_pull_seven_ninths {\n    position: relative;\n    right: 77.77778% !important;\n  }\n  .smalls_pull_eight_ninths {\n    position: relative;\n    right: 88.88889% !important;\n  }\n  .smalls_pull_one_eighth {\n    position: relative;\n    right: 12.5% !important;\n  }\n  .smalls_pull_two_eighths {\n    position: relative;\n    right: 25% !important;\n  }\n  .smalls_pull_three_eighths {\n    position: relative;\n    right: 37.5% !important;\n  }\n  .smalls_pull_four_eighths {\n    position: relative;\n    right: 50% !important;\n  }\n  .smalls_pull_five_eighths {\n    position: relative;\n    right: 62.5% !important;\n  }\n  .smalls_pull_six_eighths {\n    position: relative;\n    right: 75% !important;\n  }\n  .smalls_pull_seven_eighths {\n    position: relative;\n    right: 87.5% !important;\n  }\n  .smalls_pull_one_seventh {\n    position: relative;\n    right: 14.28571% !important;\n  }\n  .smalls_pull_two_sevenths {\n    position: relative;\n    right: 28.57143% !important;\n  }\n  .smalls_pull_three_sevenths {\n    position: relative;\n    right: 42.85714% !important;\n  }\n  .smalls_pull_four_sevenths {\n    position: relative;\n    right: 57.14286% !important;\n  }\n  .smalls_pull_five_sevenths {\n    position: relative;\n    right: 71.42857% !important;\n  }\n  .smalls_pull_six_sevenths {\n    position: relative;\n    right: 85.71429% !important;\n  }\n  .smalls_pull_one_sixth {\n    position: relative;\n    right: 16.66667% !important;\n  }\n  .smalls_pull_two_sixths {\n    position: relative;\n    right: 33.33333% !important;\n  }\n  .smalls_pull_three_sixths {\n    position: relative;\n    right: 50% !important;\n  }\n  .smalls_pull_four_sixths {\n    position: relative;\n    right: 66.66667% !important;\n  }\n  .smalls_pull_five_sixths {\n    position: relative;\n    right: 83.33333% !important;\n  }\n  .smalls_pull_one_fifth {\n    position: relative;\n    right: 20% !important;\n  }\n  .smalls_pull_two_fifths {\n    position: relative;\n    right: 40% !important;\n  }\n  .smalls_pull_three_fifths {\n    position: relative;\n    right: 60% !important;\n  }\n  .smalls_pull_four_fifths {\n    position: relative;\n    right: 80% !important;\n  }\n  .smalls_pull_one_quarter, .smalls_pull_one_fourth {\n    position: relative;\n    right: 25% !important;\n  }\n  .smalls_pull_two_quarters, .smalls_pull_two_fourths {\n    position: relative;\n    right: 50% !important;\n  }\n  .smalls_pull_three_quarters, .smalls_pull_three_fourths {\n    position: relative;\n    right: 75% !important;\n  }\n  .smalls_pull_one_third {\n    position: relative;\n    right: 33.33333% !important;\n  }\n  .smalls_pull_two_thirds {\n    position: relative;\n    right: 66.66667% !important;\n  }\n  .smalls_pull_one_half {\n    position: relative;\n    right: 50% !important;\n  }\n}\n\n@media only screen and (max-width: 43.125em) {\n  .small_pull_one_whole {\n    right: 100% !important;\n  }\n  .small_pull_one_thirteenth {\n    position: relative;\n    right: 7.69231% !important;\n  }\n  .small_pull_two_thirteenths {\n    position: relative;\n    right: 15.38462% !important;\n  }\n  .small_pull_three_thirteenths {\n    position: relative;\n    right: 23.07692% !important;\n  }\n  .small_pull_four_thirteenths {\n    position: relative;\n    right: 30.76923% !important;\n  }\n  .small_pull_five_thirteenths {\n    position: relative;\n    right: 38.46154% !important;\n  }\n  .small_pull_six_thirteenths {\n    position: relative;\n    right: 46.15385% !important;\n  }\n  .small_pull_seven_thirteenths {\n    position: relative;\n    right: 53.84615% !important;\n  }\n  .small_pull_eight_thirteenths {\n    position: relative;\n    right: 61.53846% !important;\n  }\n  .small_pull_nine_thirteenths {\n    position: relative;\n    right: 69.23077% !important;\n  }\n  .small_pull_ten_thirteenths {\n    position: relative;\n    right: 76.92308% !important;\n  }\n  .small_pull_eleven_thirteenths {\n    position: relative;\n    right: 84.61538% !important;\n  }\n  .small_pull_twelve_thirteenths {\n    position: relative;\n    right: 92.30769% !important;\n  }\n  .small_pull_one_twelfth {\n    position: relative;\n    right: 8.33333% !important;\n  }\n  .small_pull_two_twelfths {\n    position: relative;\n    right: 16.66667% !important;\n  }\n  .small_pull_three_twelfths {\n    position: relative;\n    right: 25% !important;\n  }\n  .small_pull_four_twelfths {\n    position: relative;\n    right: 33.33333% !important;\n  }\n  .small_pull_five_twelfths {\n    position: relative;\n    right: 41.66667% !important;\n  }\n  .small_pull_six_twelfths {\n    position: relative;\n    right: 50% !important;\n  }\n  .small_pull_seven_twelfths {\n    position: relative;\n    right: 58.33333% !important;\n  }\n  .small_pull_eight_twelfths {\n    position: relative;\n    right: 66.66667% !important;\n  }\n  .small_pull_nine_twelfths {\n    position: relative;\n    right: 75% !important;\n  }\n  .small_pull_ten_twelfths {\n    position: relative;\n    right: 83.33333% !important;\n  }\n  .small_pull_eleven_twelfths {\n    position: relative;\n    right: 91.66667% !important;\n  }\n  .small_pull_one_eleventh {\n    position: relative;\n    right: 9.09091% !important;\n  }\n  .small_pull_two_elevenths {\n    position: relative;\n    right: 18.18182% !important;\n  }\n  .small_pull_three_elevenths {\n    position: relative;\n    right: 27.27273% !important;\n  }\n  .small_pull_four_elevenths {\n    position: relative;\n    right: 36.36364% !important;\n  }\n  .small_pull_five_elevenths {\n    position: relative;\n    right: 45.45455% !important;\n  }\n  .small_pull_six_elevenths {\n    position: relative;\n    right: 54.54545% !important;\n  }\n  .small_pull_seven_elevenths {\n    position: relative;\n    right: 63.63636% !important;\n  }\n  .small_pull_eight_elevenths {\n    position: relative;\n    right: 72.72727% !important;\n  }\n  .small_pull_nine_elevenths {\n    position: relative;\n    right: 81.81818% !important;\n  }\n  .small_pull_ten_elevenths {\n    position: relative;\n    right: 90.90909% !important;\n  }\n  .small_pull_one_tenth {\n    position: relative;\n    right: 10% !important;\n  }\n  .small_pull_two_tenths {\n    position: relative;\n    right: 20% !important;\n  }\n  .small_pull_three_tenths {\n    position: relative;\n    right: 30% !important;\n  }\n  .small_pull_four_tenths {\n    position: relative;\n    right: 40% !important;\n  }\n  .small_pull_five_tenths {\n    position: relative;\n    right: 50% !important;\n  }\n  .small_pull_six_tenths {\n    position: relative;\n    right: 60% !important;\n  }\n  .small_pull_seven_tenths {\n    position: relative;\n    right: 70% !important;\n  }\n  .small_pull_eight_tenths {\n    position: relative;\n    right: 80% !important;\n  }\n  .small_pull_nine_tenths {\n    position: relative;\n    right: 90% !important;\n  }\n  .small_pull_one_ninth {\n    position: relative;\n    right: 11.11111% !important;\n  }\n  .small_pull_two_ninths {\n    position: relative;\n    right: 22.22222% !important;\n  }\n  .small_pull_three_ninths {\n    position: relative;\n    right: 33.33333% !important;\n  }\n  .small_pull_four_ninths {\n    position: relative;\n    right: 44.44444% !important;\n  }\n  .small_pull_five_ninths {\n    position: relative;\n    right: 55.55556% !important;\n  }\n  .small_pull_six_ninths {\n    position: relative;\n    right: 66.66667% !important;\n  }\n  .small_pull_seven_ninths {\n    position: relative;\n    right: 77.77778% !important;\n  }\n  .small_pull_eight_ninths {\n    position: relative;\n    right: 88.88889% !important;\n  }\n  .small_pull_one_eighth {\n    position: relative;\n    right: 12.5% !important;\n  }\n  .small_pull_two_eighths {\n    position: relative;\n    right: 25% !important;\n  }\n  .small_pull_three_eighths {\n    position: relative;\n    right: 37.5% !important;\n  }\n  .small_pull_four_eighths {\n    position: relative;\n    right: 50% !important;\n  }\n  .small_pull_five_eighths {\n    position: relative;\n    right: 62.5% !important;\n  }\n  .small_pull_six_eighths {\n    position: relative;\n    right: 75% !important;\n  }\n  .small_pull_seven_eighths {\n    position: relative;\n    right: 87.5% !important;\n  }\n  .small_pull_one_seventh {\n    position: relative;\n    right: 14.28571% !important;\n  }\n  .small_pull_two_sevenths {\n    position: relative;\n    right: 28.57143% !important;\n  }\n  .small_pull_three_sevenths {\n    position: relative;\n    right: 42.85714% !important;\n  }\n  .small_pull_four_sevenths {\n    position: relative;\n    right: 57.14286% !important;\n  }\n  .small_pull_five_sevenths {\n    position: relative;\n    right: 71.42857% !important;\n  }\n  .small_pull_six_sevenths {\n    position: relative;\n    right: 85.71429% !important;\n  }\n  .small_pull_one_sixth {\n    position: relative;\n    right: 16.66667% !important;\n  }\n  .small_pull_two_sixths {\n    position: relative;\n    right: 33.33333% !important;\n  }\n  .small_pull_three_sixths {\n    position: relative;\n    right: 50% !important;\n  }\n  .small_pull_four_sixths {\n    position: relative;\n    right: 66.66667% !important;\n  }\n  .small_pull_five_sixths {\n    position: relative;\n    right: 83.33333% !important;\n  }\n  .small_pull_one_fifth {\n    position: relative;\n    right: 20% !important;\n  }\n  .small_pull_two_fifths {\n    position: relative;\n    right: 40% !important;\n  }\n  .small_pull_three_fifths {\n    position: relative;\n    right: 60% !important;\n  }\n  .small_pull_four_fifths {\n    position: relative;\n    right: 80% !important;\n  }\n  .small_pull_one_quarter, .small_pull_one_fourth {\n    position: relative;\n    right: 25% !important;\n  }\n  .small_pull_two_quarters, .small_pull_two_fourths {\n    position: relative;\n    right: 50% !important;\n  }\n  .small_pull_three_quarters, .small_pull_three_fourths {\n    position: relative;\n    right: 75% !important;\n  }\n  .small_pull_one_third {\n    position: relative;\n    right: 33.33333% !important;\n  }\n  .small_pull_two_thirds {\n    position: relative;\n    right: 66.66667% !important;\n  }\n  .small_pull_one_half {\n    position: relative;\n    right: 50% !important;\n  }\n}\n\n@media only screen and (min-width: 43.1875em) and (max-width: 56.875em) {\n  .smallish_pull_one_whole {\n    right: 100% !important;\n  }\n  .smallish_pull_one_thirteenth {\n    position: relative;\n    right: 7.69231% !important;\n  }\n  .smallish_pull_two_thirteenths {\n    position: relative;\n    right: 15.38462% !important;\n  }\n  .smallish_pull_three_thirteenths {\n    position: relative;\n    right: 23.07692% !important;\n  }\n  .smallish_pull_four_thirteenths {\n    position: relative;\n    right: 30.76923% !important;\n  }\n  .smallish_pull_five_thirteenths {\n    position: relative;\n    right: 38.46154% !important;\n  }\n  .smallish_pull_six_thirteenths {\n    position: relative;\n    right: 46.15385% !important;\n  }\n  .smallish_pull_seven_thirteenths {\n    position: relative;\n    right: 53.84615% !important;\n  }\n  .smallish_pull_eight_thirteenths {\n    position: relative;\n    right: 61.53846% !important;\n  }\n  .smallish_pull_nine_thirteenths {\n    position: relative;\n    right: 69.23077% !important;\n  }\n  .smallish_pull_ten_thirteenths {\n    position: relative;\n    right: 76.92308% !important;\n  }\n  .smallish_pull_eleven_thirteenths {\n    position: relative;\n    right: 84.61538% !important;\n  }\n  .smallish_pull_twelve_thirteenths {\n    position: relative;\n    right: 92.30769% !important;\n  }\n  .smallish_pull_one_twelfth {\n    position: relative;\n    right: 8.33333% !important;\n  }\n  .smallish_pull_two_twelfths {\n    position: relative;\n    right: 16.66667% !important;\n  }\n  .smallish_pull_three_twelfths {\n    position: relative;\n    right: 25% !important;\n  }\n  .smallish_pull_four_twelfths {\n    position: relative;\n    right: 33.33333% !important;\n  }\n  .smallish_pull_five_twelfths {\n    position: relative;\n    right: 41.66667% !important;\n  }\n  .smallish_pull_six_twelfths {\n    position: relative;\n    right: 50% !important;\n  }\n  .smallish_pull_seven_twelfths {\n    position: relative;\n    right: 58.33333% !important;\n  }\n  .smallish_pull_eight_twelfths {\n    position: relative;\n    right: 66.66667% !important;\n  }\n  .smallish_pull_nine_twelfths {\n    position: relative;\n    right: 75% !important;\n  }\n  .smallish_pull_ten_twelfths {\n    position: relative;\n    right: 83.33333% !important;\n  }\n  .smallish_pull_eleven_twelfths {\n    position: relative;\n    right: 91.66667% !important;\n  }\n  .smallish_pull_one_eleventh {\n    position: relative;\n    right: 9.09091% !important;\n  }\n  .smallish_pull_two_elevenths {\n    position: relative;\n    right: 18.18182% !important;\n  }\n  .smallish_pull_three_elevenths {\n    position: relative;\n    right: 27.27273% !important;\n  }\n  .smallish_pull_four_elevenths {\n    position: relative;\n    right: 36.36364% !important;\n  }\n  .smallish_pull_five_elevenths {\n    position: relative;\n    right: 45.45455% !important;\n  }\n  .smallish_pull_six_elevenths {\n    position: relative;\n    right: 54.54545% !important;\n  }\n  .smallish_pull_seven_elevenths {\n    position: relative;\n    right: 63.63636% !important;\n  }\n  .smallish_pull_eight_elevenths {\n    position: relative;\n    right: 72.72727% !important;\n  }\n  .smallish_pull_nine_elevenths {\n    position: relative;\n    right: 81.81818% !important;\n  }\n  .smallish_pull_ten_elevenths {\n    position: relative;\n    right: 90.90909% !important;\n  }\n  .smallish_pull_one_tenth {\n    position: relative;\n    right: 10% !important;\n  }\n  .smallish_pull_two_tenths {\n    position: relative;\n    right: 20% !important;\n  }\n  .smallish_pull_three_tenths {\n    position: relative;\n    right: 30% !important;\n  }\n  .smallish_pull_four_tenths {\n    position: relative;\n    right: 40% !important;\n  }\n  .smallish_pull_five_tenths {\n    position: relative;\n    right: 50% !important;\n  }\n  .smallish_pull_six_tenths {\n    position: relative;\n    right: 60% !important;\n  }\n  .smallish_pull_seven_tenths {\n    position: relative;\n    right: 70% !important;\n  }\n  .smallish_pull_eight_tenths {\n    position: relative;\n    right: 80% !important;\n  }\n  .smallish_pull_nine_tenths {\n    position: relative;\n    right: 90% !important;\n  }\n  .smallish_pull_one_ninth {\n    position: relative;\n    right: 11.11111% !important;\n  }\n  .smallish_pull_two_ninths {\n    position: relative;\n    right: 22.22222% !important;\n  }\n  .smallish_pull_three_ninths {\n    position: relative;\n    right: 33.33333% !important;\n  }\n  .smallish_pull_four_ninths {\n    position: relative;\n    right: 44.44444% !important;\n  }\n  .smallish_pull_five_ninths {\n    position: relative;\n    right: 55.55556% !important;\n  }\n  .smallish_pull_six_ninths {\n    position: relative;\n    right: 66.66667% !important;\n  }\n  .smallish_pull_seven_ninths {\n    position: relative;\n    right: 77.77778% !important;\n  }\n  .smallish_pull_eight_ninths {\n    position: relative;\n    right: 88.88889% !important;\n  }\n  .smallish_pull_one_eighth {\n    position: relative;\n    right: 12.5% !important;\n  }\n  .smallish_pull_two_eighths {\n    position: relative;\n    right: 25% !important;\n  }\n  .smallish_pull_three_eighths {\n    position: relative;\n    right: 37.5% !important;\n  }\n  .smallish_pull_four_eighths {\n    position: relative;\n    right: 50% !important;\n  }\n  .smallish_pull_five_eighths {\n    position: relative;\n    right: 62.5% !important;\n  }\n  .smallish_pull_six_eighths {\n    position: relative;\n    right: 75% !important;\n  }\n  .smallish_pull_seven_eighths {\n    position: relative;\n    right: 87.5% !important;\n  }\n  .smallish_pull_one_seventh {\n    position: relative;\n    right: 14.28571% !important;\n  }\n  .smallish_pull_two_sevenths {\n    position: relative;\n    right: 28.57143% !important;\n  }\n  .smallish_pull_three_sevenths {\n    position: relative;\n    right: 42.85714% !important;\n  }\n  .smallish_pull_four_sevenths {\n    position: relative;\n    right: 57.14286% !important;\n  }\n  .smallish_pull_five_sevenths {\n    position: relative;\n    right: 71.42857% !important;\n  }\n  .smallish_pull_six_sevenths {\n    position: relative;\n    right: 85.71429% !important;\n  }\n  .smallish_pull_one_sixth {\n    position: relative;\n    right: 16.66667% !important;\n  }\n  .smallish_pull_two_sixths {\n    position: relative;\n    right: 33.33333% !important;\n  }\n  .smallish_pull_three_sixths {\n    position: relative;\n    right: 50% !important;\n  }\n  .smallish_pull_four_sixths {\n    position: relative;\n    right: 66.66667% !important;\n  }\n  .smallish_pull_five_sixths {\n    position: relative;\n    right: 83.33333% !important;\n  }\n  .smallish_pull_one_fifth {\n    position: relative;\n    right: 20% !important;\n  }\n  .smallish_pull_two_fifths {\n    position: relative;\n    right: 40% !important;\n  }\n  .smallish_pull_three_fifths {\n    position: relative;\n    right: 60% !important;\n  }\n  .smallish_pull_four_fifths {\n    position: relative;\n    right: 80% !important;\n  }\n  .smallish_pull_one_quarter, .smallish_pull_one_fourth {\n    position: relative;\n    right: 25% !important;\n  }\n  .smallish_pull_two_quarters, .smallish_pull_two_fourths {\n    position: relative;\n    right: 50% !important;\n  }\n  .smallish_pull_three_quarters, .smallish_pull_three_fourths {\n    position: relative;\n    right: 75% !important;\n  }\n  .smallish_pull_one_third {\n    position: relative;\n    right: 33.33333% !important;\n  }\n  .smallish_pull_two_thirds {\n    position: relative;\n    right: 66.66667% !important;\n  }\n  .smallish_pull_one_half {\n    position: relative;\n    right: 50% !important;\n  }\n}\n\n@media only screen and (min-width: 56.9375em) {\n  .bigs_pull_one_whole {\n    right: 100% !important;\n  }\n  .bigs_pull_one_thirteenth {\n    position: relative;\n    right: 7.69231% !important;\n  }\n  .bigs_pull_two_thirteenths {\n    position: relative;\n    right: 15.38462% !important;\n  }\n  .bigs_pull_three_thirteenths {\n    position: relative;\n    right: 23.07692% !important;\n  }\n  .bigs_pull_four_thirteenths {\n    position: relative;\n    right: 30.76923% !important;\n  }\n  .bigs_pull_five_thirteenths {\n    position: relative;\n    right: 38.46154% !important;\n  }\n  .bigs_pull_six_thirteenths {\n    position: relative;\n    right: 46.15385% !important;\n  }\n  .bigs_pull_seven_thirteenths {\n    position: relative;\n    right: 53.84615% !important;\n  }\n  .bigs_pull_eight_thirteenths {\n    position: relative;\n    right: 61.53846% !important;\n  }\n  .bigs_pull_nine_thirteenths {\n    position: relative;\n    right: 69.23077% !important;\n  }\n  .bigs_pull_ten_thirteenths {\n    position: relative;\n    right: 76.92308% !important;\n  }\n  .bigs_pull_eleven_thirteenths {\n    position: relative;\n    right: 84.61538% !important;\n  }\n  .bigs_pull_twelve_thirteenths {\n    position: relative;\n    right: 92.30769% !important;\n  }\n  .bigs_pull_one_twelfth {\n    position: relative;\n    right: 8.33333% !important;\n  }\n  .bigs_pull_two_twelfths {\n    position: relative;\n    right: 16.66667% !important;\n  }\n  .bigs_pull_three_twelfths {\n    position: relative;\n    right: 25% !important;\n  }\n  .bigs_pull_four_twelfths {\n    position: relative;\n    right: 33.33333% !important;\n  }\n  .bigs_pull_five_twelfths {\n    position: relative;\n    right: 41.66667% !important;\n  }\n  .bigs_pull_six_twelfths {\n    position: relative;\n    right: 50% !important;\n  }\n  .bigs_pull_seven_twelfths {\n    position: relative;\n    right: 58.33333% !important;\n  }\n  .bigs_pull_eight_twelfths {\n    position: relative;\n    right: 66.66667% !important;\n  }\n  .bigs_pull_nine_twelfths {\n    position: relative;\n    right: 75% !important;\n  }\n  .bigs_pull_ten_twelfths {\n    position: relative;\n    right: 83.33333% !important;\n  }\n  .bigs_pull_eleven_twelfths {\n    position: relative;\n    right: 91.66667% !important;\n  }\n  .bigs_pull_one_eleventh {\n    position: relative;\n    right: 9.09091% !important;\n  }\n  .bigs_pull_two_elevenths {\n    position: relative;\n    right: 18.18182% !important;\n  }\n  .bigs_pull_three_elevenths {\n    position: relative;\n    right: 27.27273% !important;\n  }\n  .bigs_pull_four_elevenths {\n    position: relative;\n    right: 36.36364% !important;\n  }\n  .bigs_pull_five_elevenths {\n    position: relative;\n    right: 45.45455% !important;\n  }\n  .bigs_pull_six_elevenths {\n    position: relative;\n    right: 54.54545% !important;\n  }\n  .bigs_pull_seven_elevenths {\n    position: relative;\n    right: 63.63636% !important;\n  }\n  .bigs_pull_eight_elevenths {\n    position: relative;\n    right: 72.72727% !important;\n  }\n  .bigs_pull_nine_elevenths {\n    position: relative;\n    right: 81.81818% !important;\n  }\n  .bigs_pull_ten_elevenths {\n    position: relative;\n    right: 90.90909% !important;\n  }\n  .bigs_pull_one_tenth {\n    position: relative;\n    right: 10% !important;\n  }\n  .bigs_pull_two_tenths {\n    position: relative;\n    right: 20% !important;\n  }\n  .bigs_pull_three_tenths {\n    position: relative;\n    right: 30% !important;\n  }\n  .bigs_pull_four_tenths {\n    position: relative;\n    right: 40% !important;\n  }\n  .bigs_pull_five_tenths {\n    position: relative;\n    right: 50% !important;\n  }\n  .bigs_pull_six_tenths {\n    position: relative;\n    right: 60% !important;\n  }\n  .bigs_pull_seven_tenths {\n    position: relative;\n    right: 70% !important;\n  }\n  .bigs_pull_eight_tenths {\n    position: relative;\n    right: 80% !important;\n  }\n  .bigs_pull_nine_tenths {\n    position: relative;\n    right: 90% !important;\n  }\n  .bigs_pull_one_ninth {\n    position: relative;\n    right: 11.11111% !important;\n  }\n  .bigs_pull_two_ninths {\n    position: relative;\n    right: 22.22222% !important;\n  }\n  .bigs_pull_three_ninths {\n    position: relative;\n    right: 33.33333% !important;\n  }\n  .bigs_pull_four_ninths {\n    position: relative;\n    right: 44.44444% !important;\n  }\n  .bigs_pull_five_ninths {\n    position: relative;\n    right: 55.55556% !important;\n  }\n  .bigs_pull_six_ninths {\n    position: relative;\n    right: 66.66667% !important;\n  }\n  .bigs_pull_seven_ninths {\n    position: relative;\n    right: 77.77778% !important;\n  }\n  .bigs_pull_eight_ninths {\n    position: relative;\n    right: 88.88889% !important;\n  }\n  .bigs_pull_one_eighth {\n    position: relative;\n    right: 12.5% !important;\n  }\n  .bigs_pull_two_eighths {\n    position: relative;\n    right: 25% !important;\n  }\n  .bigs_pull_three_eighths {\n    position: relative;\n    right: 37.5% !important;\n  }\n  .bigs_pull_four_eighths {\n    position: relative;\n    right: 50% !important;\n  }\n  .bigs_pull_five_eighths {\n    position: relative;\n    right: 62.5% !important;\n  }\n  .bigs_pull_six_eighths {\n    position: relative;\n    right: 75% !important;\n  }\n  .bigs_pull_seven_eighths {\n    position: relative;\n    right: 87.5% !important;\n  }\n  .bigs_pull_one_seventh {\n    position: relative;\n    right: 14.28571% !important;\n  }\n  .bigs_pull_two_sevenths {\n    position: relative;\n    right: 28.57143% !important;\n  }\n  .bigs_pull_three_sevenths {\n    position: relative;\n    right: 42.85714% !important;\n  }\n  .bigs_pull_four_sevenths {\n    position: relative;\n    right: 57.14286% !important;\n  }\n  .bigs_pull_five_sevenths {\n    position: relative;\n    right: 71.42857% !important;\n  }\n  .bigs_pull_six_sevenths {\n    position: relative;\n    right: 85.71429% !important;\n  }\n  .bigs_pull_one_sixth {\n    position: relative;\n    right: 16.66667% !important;\n  }\n  .bigs_pull_two_sixths {\n    position: relative;\n    right: 33.33333% !important;\n  }\n  .bigs_pull_three_sixths {\n    position: relative;\n    right: 50% !important;\n  }\n  .bigs_pull_four_sixths {\n    position: relative;\n    right: 66.66667% !important;\n  }\n  .bigs_pull_five_sixths {\n    position: relative;\n    right: 83.33333% !important;\n  }\n  .bigs_pull_one_fifth {\n    position: relative;\n    right: 20% !important;\n  }\n  .bigs_pull_two_fifths {\n    position: relative;\n    right: 40% !important;\n  }\n  .bigs_pull_three_fifths {\n    position: relative;\n    right: 60% !important;\n  }\n  .bigs_pull_four_fifths {\n    position: relative;\n    right: 80% !important;\n  }\n  .bigs_pull_one_quarter, .bigs_pull_one_fourth {\n    position: relative;\n    right: 25% !important;\n  }\n  .bigs_pull_two_quarters, .bigs_pull_two_fourths {\n    position: relative;\n    right: 50% !important;\n  }\n  .bigs_pull_three_quarters, .bigs_pull_three_fourths {\n    position: relative;\n    right: 75% !important;\n  }\n  .bigs_pull_one_third {\n    position: relative;\n    right: 33.33333% !important;\n  }\n  .bigs_pull_two_thirds {\n    position: relative;\n    right: 66.66667% !important;\n  }\n  .bigs_pull_one_half {\n    position: relative;\n    right: 50% !important;\n  }\n}\n\n@media only screen and (min-width: 56.9375em) and (max-width: 85em) {\n  .lap_pull_one_whole {\n    right: 100% !important;\n  }\n  .lap_pull_one_thirteenth {\n    position: relative;\n    right: 7.69231% !important;\n  }\n  .lap_pull_two_thirteenths {\n    position: relative;\n    right: 15.38462% !important;\n  }\n  .lap_pull_three_thirteenths {\n    position: relative;\n    right: 23.07692% !important;\n  }\n  .lap_pull_four_thirteenths {\n    position: relative;\n    right: 30.76923% !important;\n  }\n  .lap_pull_five_thirteenths {\n    position: relative;\n    right: 38.46154% !important;\n  }\n  .lap_pull_six_thirteenths {\n    position: relative;\n    right: 46.15385% !important;\n  }\n  .lap_pull_seven_thirteenths {\n    position: relative;\n    right: 53.84615% !important;\n  }\n  .lap_pull_eight_thirteenths {\n    position: relative;\n    right: 61.53846% !important;\n  }\n  .lap_pull_nine_thirteenths {\n    position: relative;\n    right: 69.23077% !important;\n  }\n  .lap_pull_ten_thirteenths {\n    position: relative;\n    right: 76.92308% !important;\n  }\n  .lap_pull_eleven_thirteenths {\n    position: relative;\n    right: 84.61538% !important;\n  }\n  .lap_pull_twelve_thirteenths {\n    position: relative;\n    right: 92.30769% !important;\n  }\n  .lap_pull_one_twelfth {\n    position: relative;\n    right: 8.33333% !important;\n  }\n  .lap_pull_two_twelfths {\n    position: relative;\n    right: 16.66667% !important;\n  }\n  .lap_pull_three_twelfths {\n    position: relative;\n    right: 25% !important;\n  }\n  .lap_pull_four_twelfths {\n    position: relative;\n    right: 33.33333% !important;\n  }\n  .lap_pull_five_twelfths {\n    position: relative;\n    right: 41.66667% !important;\n  }\n  .lap_pull_six_twelfths {\n    position: relative;\n    right: 50% !important;\n  }\n  .lap_pull_seven_twelfths {\n    position: relative;\n    right: 58.33333% !important;\n  }\n  .lap_pull_eight_twelfths {\n    position: relative;\n    right: 66.66667% !important;\n  }\n  .lap_pull_nine_twelfths {\n    position: relative;\n    right: 75% !important;\n  }\n  .lap_pull_ten_twelfths {\n    position: relative;\n    right: 83.33333% !important;\n  }\n  .lap_pull_eleven_twelfths {\n    position: relative;\n    right: 91.66667% !important;\n  }\n  .lap_pull_one_eleventh {\n    position: relative;\n    right: 9.09091% !important;\n  }\n  .lap_pull_two_elevenths {\n    position: relative;\n    right: 18.18182% !important;\n  }\n  .lap_pull_three_elevenths {\n    position: relative;\n    right: 27.27273% !important;\n  }\n  .lap_pull_four_elevenths {\n    position: relative;\n    right: 36.36364% !important;\n  }\n  .lap_pull_five_elevenths {\n    position: relative;\n    right: 45.45455% !important;\n  }\n  .lap_pull_six_elevenths {\n    position: relative;\n    right: 54.54545% !important;\n  }\n  .lap_pull_seven_elevenths {\n    position: relative;\n    right: 63.63636% !important;\n  }\n  .lap_pull_eight_elevenths {\n    position: relative;\n    right: 72.72727% !important;\n  }\n  .lap_pull_nine_elevenths {\n    position: relative;\n    right: 81.81818% !important;\n  }\n  .lap_pull_ten_elevenths {\n    position: relative;\n    right: 90.90909% !important;\n  }\n  .lap_pull_one_tenth {\n    position: relative;\n    right: 10% !important;\n  }\n  .lap_pull_two_tenths {\n    position: relative;\n    right: 20% !important;\n  }\n  .lap_pull_three_tenths {\n    position: relative;\n    right: 30% !important;\n  }\n  .lap_pull_four_tenths {\n    position: relative;\n    right: 40% !important;\n  }\n  .lap_pull_five_tenths {\n    position: relative;\n    right: 50% !important;\n  }\n  .lap_pull_six_tenths {\n    position: relative;\n    right: 60% !important;\n  }\n  .lap_pull_seven_tenths {\n    position: relative;\n    right: 70% !important;\n  }\n  .lap_pull_eight_tenths {\n    position: relative;\n    right: 80% !important;\n  }\n  .lap_pull_nine_tenths {\n    position: relative;\n    right: 90% !important;\n  }\n  .lap_pull_one_ninth {\n    position: relative;\n    right: 11.11111% !important;\n  }\n  .lap_pull_two_ninths {\n    position: relative;\n    right: 22.22222% !important;\n  }\n  .lap_pull_three_ninths {\n    position: relative;\n    right: 33.33333% !important;\n  }\n  .lap_pull_four_ninths {\n    position: relative;\n    right: 44.44444% !important;\n  }\n  .lap_pull_five_ninths {\n    position: relative;\n    right: 55.55556% !important;\n  }\n  .lap_pull_six_ninths {\n    position: relative;\n    right: 66.66667% !important;\n  }\n  .lap_pull_seven_ninths {\n    position: relative;\n    right: 77.77778% !important;\n  }\n  .lap_pull_eight_ninths {\n    position: relative;\n    right: 88.88889% !important;\n  }\n  .lap_pull_one_eighth {\n    position: relative;\n    right: 12.5% !important;\n  }\n  .lap_pull_two_eighths {\n    position: relative;\n    right: 25% !important;\n  }\n  .lap_pull_three_eighths {\n    position: relative;\n    right: 37.5% !important;\n  }\n  .lap_pull_four_eighths {\n    position: relative;\n    right: 50% !important;\n  }\n  .lap_pull_five_eighths {\n    position: relative;\n    right: 62.5% !important;\n  }\n  .lap_pull_six_eighths {\n    position: relative;\n    right: 75% !important;\n  }\n  .lap_pull_seven_eighths {\n    position: relative;\n    right: 87.5% !important;\n  }\n  .lap_pull_one_seventh {\n    position: relative;\n    right: 14.28571% !important;\n  }\n  .lap_pull_two_sevenths {\n    position: relative;\n    right: 28.57143% !important;\n  }\n  .lap_pull_three_sevenths {\n    position: relative;\n    right: 42.85714% !important;\n  }\n  .lap_pull_four_sevenths {\n    position: relative;\n    right: 57.14286% !important;\n  }\n  .lap_pull_five_sevenths {\n    position: relative;\n    right: 71.42857% !important;\n  }\n  .lap_pull_six_sevenths {\n    position: relative;\n    right: 85.71429% !important;\n  }\n  .lap_pull_one_sixth {\n    position: relative;\n    right: 16.66667% !important;\n  }\n  .lap_pull_two_sixths {\n    position: relative;\n    right: 33.33333% !important;\n  }\n  .lap_pull_three_sixths {\n    position: relative;\n    right: 50% !important;\n  }\n  .lap_pull_four_sixths {\n    position: relative;\n    right: 66.66667% !important;\n  }\n  .lap_pull_five_sixths {\n    position: relative;\n    right: 83.33333% !important;\n  }\n  .lap_pull_one_fifth {\n    position: relative;\n    right: 20% !important;\n  }\n  .lap_pull_two_fifths {\n    position: relative;\n    right: 40% !important;\n  }\n  .lap_pull_three_fifths {\n    position: relative;\n    right: 60% !important;\n  }\n  .lap_pull_four_fifths {\n    position: relative;\n    right: 80% !important;\n  }\n  .lap_pull_one_quarter, .lap_pull_one_fourth {\n    position: relative;\n    right: 25% !important;\n  }\n  .lap_pull_two_quarters, .lap_pull_two_fourths {\n    position: relative;\n    right: 50% !important;\n  }\n  .lap_pull_three_quarters, .lap_pull_three_fourths {\n    position: relative;\n    right: 75% !important;\n  }\n  .lap_pull_one_third {\n    position: relative;\n    right: 33.33333% !important;\n  }\n  .lap_pull_two_thirds {\n    position: relative;\n    right: 66.66667% !important;\n  }\n  .lap_pull_one_half {\n    position: relative;\n    right: 50% !important;\n  }\n}\n\n@media only screen and (min-width: 85em) {\n  .desk_pull_one_whole {\n    right: 100% !important;\n  }\n  .desk_pull_one_thirteenth {\n    position: relative;\n    right: 7.69231% !important;\n  }\n  .desk_pull_two_thirteenths {\n    position: relative;\n    right: 15.38462% !important;\n  }\n  .desk_pull_three_thirteenths {\n    position: relative;\n    right: 23.07692% !important;\n  }\n  .desk_pull_four_thirteenths {\n    position: relative;\n    right: 30.76923% !important;\n  }\n  .desk_pull_five_thirteenths {\n    position: relative;\n    right: 38.46154% !important;\n  }\n  .desk_pull_six_thirteenths {\n    position: relative;\n    right: 46.15385% !important;\n  }\n  .desk_pull_seven_thirteenths {\n    position: relative;\n    right: 53.84615% !important;\n  }\n  .desk_pull_eight_thirteenths {\n    position: relative;\n    right: 61.53846% !important;\n  }\n  .desk_pull_nine_thirteenths {\n    position: relative;\n    right: 69.23077% !important;\n  }\n  .desk_pull_ten_thirteenths {\n    position: relative;\n    right: 76.92308% !important;\n  }\n  .desk_pull_eleven_thirteenths {\n    position: relative;\n    right: 84.61538% !important;\n  }\n  .desk_pull_twelve_thirteenths {\n    position: relative;\n    right: 92.30769% !important;\n  }\n  .desk_pull_one_twelfth {\n    position: relative;\n    right: 8.33333% !important;\n  }\n  .desk_pull_two_twelfths {\n    position: relative;\n    right: 16.66667% !important;\n  }\n  .desk_pull_three_twelfths {\n    position: relative;\n    right: 25% !important;\n  }\n  .desk_pull_four_twelfths {\n    position: relative;\n    right: 33.33333% !important;\n  }\n  .desk_pull_five_twelfths {\n    position: relative;\n    right: 41.66667% !important;\n  }\n  .desk_pull_six_twelfths {\n    position: relative;\n    right: 50% !important;\n  }\n  .desk_pull_seven_twelfths {\n    position: relative;\n    right: 58.33333% !important;\n  }\n  .desk_pull_eight_twelfths {\n    position: relative;\n    right: 66.66667% !important;\n  }\n  .desk_pull_nine_twelfths {\n    position: relative;\n    right: 75% !important;\n  }\n  .desk_pull_ten_twelfths {\n    position: relative;\n    right: 83.33333% !important;\n  }\n  .desk_pull_eleven_twelfths {\n    position: relative;\n    right: 91.66667% !important;\n  }\n  .desk_pull_one_eleventh {\n    position: relative;\n    right: 9.09091% !important;\n  }\n  .desk_pull_two_elevenths {\n    position: relative;\n    right: 18.18182% !important;\n  }\n  .desk_pull_three_elevenths {\n    position: relative;\n    right: 27.27273% !important;\n  }\n  .desk_pull_four_elevenths {\n    position: relative;\n    right: 36.36364% !important;\n  }\n  .desk_pull_five_elevenths {\n    position: relative;\n    right: 45.45455% !important;\n  }\n  .desk_pull_six_elevenths {\n    position: relative;\n    right: 54.54545% !important;\n  }\n  .desk_pull_seven_elevenths {\n    position: relative;\n    right: 63.63636% !important;\n  }\n  .desk_pull_eight_elevenths {\n    position: relative;\n    right: 72.72727% !important;\n  }\n  .desk_pull_nine_elevenths {\n    position: relative;\n    right: 81.81818% !important;\n  }\n  .desk_pull_ten_elevenths {\n    position: relative;\n    right: 90.90909% !important;\n  }\n  .desk_pull_one_tenth {\n    position: relative;\n    right: 10% !important;\n  }\n  .desk_pull_two_tenths {\n    position: relative;\n    right: 20% !important;\n  }\n  .desk_pull_three_tenths {\n    position: relative;\n    right: 30% !important;\n  }\n  .desk_pull_four_tenths {\n    position: relative;\n    right: 40% !important;\n  }\n  .desk_pull_five_tenths {\n    position: relative;\n    right: 50% !important;\n  }\n  .desk_pull_six_tenths {\n    position: relative;\n    right: 60% !important;\n  }\n  .desk_pull_seven_tenths {\n    position: relative;\n    right: 70% !important;\n  }\n  .desk_pull_eight_tenths {\n    position: relative;\n    right: 80% !important;\n  }\n  .desk_pull_nine_tenths {\n    position: relative;\n    right: 90% !important;\n  }\n  .desk_pull_one_ninth {\n    position: relative;\n    right: 11.11111% !important;\n  }\n  .desk_pull_two_ninths {\n    position: relative;\n    right: 22.22222% !important;\n  }\n  .desk_pull_three_ninths {\n    position: relative;\n    right: 33.33333% !important;\n  }\n  .desk_pull_four_ninths {\n    position: relative;\n    right: 44.44444% !important;\n  }\n  .desk_pull_five_ninths {\n    position: relative;\n    right: 55.55556% !important;\n  }\n  .desk_pull_six_ninths {\n    position: relative;\n    right: 66.66667% !important;\n  }\n  .desk_pull_seven_ninths {\n    position: relative;\n    right: 77.77778% !important;\n  }\n  .desk_pull_eight_ninths {\n    position: relative;\n    right: 88.88889% !important;\n  }\n  .desk_pull_one_eighth {\n    position: relative;\n    right: 12.5% !important;\n  }\n  .desk_pull_two_eighths {\n    position: relative;\n    right: 25% !important;\n  }\n  .desk_pull_three_eighths {\n    position: relative;\n    right: 37.5% !important;\n  }\n  .desk_pull_four_eighths {\n    position: relative;\n    right: 50% !important;\n  }\n  .desk_pull_five_eighths {\n    position: relative;\n    right: 62.5% !important;\n  }\n  .desk_pull_six_eighths {\n    position: relative;\n    right: 75% !important;\n  }\n  .desk_pull_seven_eighths {\n    position: relative;\n    right: 87.5% !important;\n  }\n  .desk_pull_one_seventh {\n    position: relative;\n    right: 14.28571% !important;\n  }\n  .desk_pull_two_sevenths {\n    position: relative;\n    right: 28.57143% !important;\n  }\n  .desk_pull_three_sevenths {\n    position: relative;\n    right: 42.85714% !important;\n  }\n  .desk_pull_four_sevenths {\n    position: relative;\n    right: 57.14286% !important;\n  }\n  .desk_pull_five_sevenths {\n    position: relative;\n    right: 71.42857% !important;\n  }\n  .desk_pull_six_sevenths {\n    position: relative;\n    right: 85.71429% !important;\n  }\n  .desk_pull_one_sixth {\n    position: relative;\n    right: 16.66667% !important;\n  }\n  .desk_pull_two_sixths {\n    position: relative;\n    right: 33.33333% !important;\n  }\n  .desk_pull_three_sixths {\n    position: relative;\n    right: 50% !important;\n  }\n  .desk_pull_four_sixths {\n    position: relative;\n    right: 66.66667% !important;\n  }\n  .desk_pull_five_sixths {\n    position: relative;\n    right: 83.33333% !important;\n  }\n  .desk_pull_one_fifth {\n    position: relative;\n    right: 20% !important;\n  }\n  .desk_pull_two_fifths {\n    position: relative;\n    right: 40% !important;\n  }\n  .desk_pull_three_fifths {\n    position: relative;\n    right: 60% !important;\n  }\n  .desk_pull_four_fifths {\n    position: relative;\n    right: 80% !important;\n  }\n  .desk_pull_one_quarter, .desk_pull_one_fourth {\n    position: relative;\n    right: 25% !important;\n  }\n  .desk_pull_two_quarters, .desk_pull_two_fourths {\n    position: relative;\n    right: 50% !important;\n  }\n  .desk_pull_three_quarters, .desk_pull_three_fourths {\n    position: relative;\n    right: 75% !important;\n  }\n  .desk_pull_one_third {\n    position: relative;\n    right: 33.33333% !important;\n  }\n  .desk_pull_two_thirds {\n    position: relative;\n    right: 66.66667% !important;\n  }\n  .desk_pull_one_half {\n    position: relative;\n    right: 50% !important;\n  }\n}\n\n/* Style-guide-specific grid styling */\n.sg-body .column,\n.sg-body .grid_item {\n  padding-top: 1.5rem;\n  padding-bottom: 1.5rem;\n  margin-top: 0.75rem;\n  margin-bottom: 0.75rem;\n  position: relative;\n  text-align: center;\n  font-size: 0.75rem;\n}\n\n.sg-body .column:before,\n.sg-body .grid_item:before {\n  content: \"\";\n  position: absolute;\n  display: block;\n  width: calc(100% - 2rem);\n  left: 2rem;\n  top: 0;\n  bottom: 0;\n  background-color: rgba(13, 73, 123, 0.1);\n}\n\n.grid_full .grid_item:before {\n  width: 100%;\n  left: 0;\n}\n\n.grid_wide .grid_item:before {\n  width: calc(100% - 4rem);\n  left: 4rem;\n}\n\n.grid_narrow .grid_item:before {\n  width: calc(100% - 1rem);\n  left: 1rem;\n}\n\n/******Base Layout******/\n.sg-body {\n  margin: 0;\n}\n\n.sg-wrap {\n  display: block;\n  width: 100%;\n  min-height: 100vh;\n  margin: 0;\n  overflow: auto;\n}\n\n.sg-menu {\n  position: absolute;\n  vertical-align: top;\n  background-color: #081D33;\n  width: 18rem;\n  top: 0;\n  left: 0;\n  bottom: 0;\n  font-size: .9em;\n}\n\n.sg-main {\n  padding-left: 18rem;\n  transition: padding .15s ease-out;\n}\n\n.sg-category {\n  padding-left: 5%;\n  padding-right: 5%;\n  overflow: auto;\n}\n\n.sg-category_wrap {\n  max-width: 58em;\n  /* Should be wider for universal box-sizing: border-box */\n  margin: auto;\n}\n\n.sg-example {\n  width: 110%;\n  margin-left: -5%;\n}\n\n@media only screen and (max-width: 1100px) {\n  .sg-menu {\n    width: 10rem;\n  }\n  .sg-main {\n    padding-left: 10rem;\n  }\n}\n\n@media only screen and (max-width: 700px) {\n  .sg-menu {\n    width: 0;\n  }\n  .sg-main {\n    padding-left: 0;\n  }\n}\n\n/******Menu******/\n.sg-menu {\n  transition: all .2s ease-out;\n  overflow: auto;\n}\n\n.sg_menu_list,\n.sg-menu_item {\n  padding: 0;\n  margin: 0;\n  position: relative;\n}\n\n.sg-menu_list {\n  list-style: none;\n  padding: 0;\n  color: rgba(245, 209, 221, 0.1);\n  /* Used for border colors */\n}\n\n.sg-menu_section {\n  border-top: 1px solid;\n}\n\n.sg-menu_article > .sg-menu_link {\n  color: rgba(202, 221, 226, 0.65);\n}\n\n.sg-category-active {\n  background: rgba(94, 131, 158, 0.04);\n}\n\n/* Menu links */\n.sg-menu_link {\n  display: block;\n  padding: .75rem 1.65rem .65rem;\n  text-decoration: none;\n  color: #CADDE2;\n}\n\n.sg-menu_link:hover,\n.sg-menu_link:focus {\n  background-color: rgba(202, 221, 226, 0.05);\n  color: #CADDE2;\n}\n\n.sg-toc-active > .sg-menu_link {\n  background-color: rgba(245, 209, 221, 0.1);\n}\n\n.sg-menu_section > .sg-menu_link {\n  color: #f60255;\n}\n\n.sg-menu_article .sg-menu_link {\n  padding-left: 2.5rem;\n  padding-right: 2rem;\n}\n\n@media only screen and (max-width: 1100px) {\n  .sg-menu_link {\n    padding-left: .5rem;\n  }\n  .sg-menu_article .sg-menu_link {\n    padding-left: .75rem;\n  }\n}\n\n.sg-menu_article {\n  display: none;\n}\n\n.sg-category-active .sg-menu_article,\n.sg-menu_article.sg-toc-active {\n  display: block;\n}\n\n.sg-category-active > .sg-menu_link {\n  border-left: 2px solid #f60255;\n  text-indent: -2px;\n}\n\n/******Project Logo******/\n.sg-logo {\n  font-weight: normal;\n  background-color: #f60255;\n  background-image: url(\"images/logo.svg\");\n  background-attachment: fixed;\n  background-size: 100vw;\n  color: #fff;\n  margin: 0;\n  font-size: 1.5em;\n}\n\n.sg-logo:hover,\n.sg-logo:focus {\n  background-color: #fd246e;\n}\n\n.sg-logo .sg-menu_link {\n  color: inherit;\n  padding-top: 1em;\n  padding-bottom: .75em;\n  opacity: 0;\n  transition: opacity .3s ease-out;\n}\n\n.sg-menu[style*=\"fixed\"] .sg-logo .sg-menu_link {\n  opacity: 1;\n}\n\n/******Headings******/\n.sg-heading-section {\n  color: #5E839E;\n  font-size: 2.8587rem;\n  line-height: 1.57414;\n  font-weight: normal;\n}\n\n.sg-heading-category {\n  color: #175CA2;\n  font-weight: normal;\n  font-size: 1.6em;\n}\n\n.sg-heading-category-article,\n.sg-heading-article {\n  font-size: 3.32151rem;\n  line-height: 1.12901;\n}\n\n.sg-heading-article {\n  color: #175CA2;\n  font-weight: normal;\n}\n\n.sg-heading .sg-code {\n  color: #435270;\n}\n\n.sg-heading-6 {\n  font-weight: normal;\n}\n\n.sg-heading-5 + .sg-heading-6 {\n  margin-top: -1rem;\n  padding-bottom: .25rem;\n}\n\n/******Section, Category & Article Layout******/\n.sg-section:nth-child(even) {\n  padding-bottom: 1.5em;\n}\n\n.sg-section:first-child {\n  padding-top: 10rem;\n}\n\n.sg-section:first-child .sg-category {\n  border-top: 0;\n}\n\n/* Article spacing */\n.sg-article_comment,\n.sg-example {\n  margin-bottom: 1.5rem;\n}\n\n.sg-section {\n  padding-bottom: 3rem;\n}\n\n.sg-section:nth-child(odd) {\n  background-color: rgba(224, 229, 235, 0.3);\n}\n\n.sg-category:nth-child(odd):last-child {\n  margin-bottom: -3rem;\n  padding-bottom: 4.5rem;\n}\n\n.sg-category + .sg-category {\n  background-color: transparent;\n  border-top: 1px solid #e0e5eb;\n}\n\n.sg-article {\n  margin-bottom: 3em;\n}\n\n.sg-category,\n.sg-article {\n  padding-top: 3em;\n}\n\n.sg-article_comment {\n  margin-top: -1.5rem;\n}\n\n.sg-article_head {\n  padding-bottom: 1.5em;\n}\n\n.sg-example {\n  background-color: rgba(255, 255, 255, 0.8);\n  border-top: 1px solid #fff;\n}\n\n.sg-example:before {\n  content: 'Example';\n  background-color: #EDF0F2;\n  color: #647582;\n  display: inline-block;\n  font-size: .9em;\n  padding: .45em .5em;\n  margin-bottom: .5em;\n  margin-left: 1px;\n  clear: both;\n}\n\n.sg-example_wrap {\n  padding: .75em 1.25em;\n  position: relative;\n}\n\n/* Clearfix */\n.sg-example_wrap:after {\n  content: \" \";\n  display: table;\n  height: 0;\n  width: 100%;\n}\n\n.sg-example_wrap:after {\n  clear: both;\n}\n\n.sg-markup_wrap {\n  margin: 0;\n}\n\n.sg-markup-block {\n  border-top: 1px solid #E0ECF0;\n}\n\n.sg-codespan {\n  color: #5E839E;\n}\n\n.sg-file {\n  color: #5E839E;\n}\n\n.sg-codeblock {\n  margin-bottom: 1.5rem;\n}\n\n.sg-code-meta + .sg-code-meta {\n  margin-top: -1.5rem;\n}\n\n.sg-code-meta:before {\n  content: attr(data-code-meta) \": \";\n  text-transform: capitalize;\n}\n\n/* Highlight.js Code Blocks */\n#styleguide .sg-markup_wrap,\n#styleguide .sg-markup code {\n  overflow: auto;\n}\n\n#styleguide .sg-markup_wrap {\n  max-height: 30em;\n}\n\n#styleguide .sg-markup code {\n  display: block;\n  word-wrap: normal;\n  white-space: pre;\n  padding: 1em;\n}\n\n/* Custom background color to match nav. Overwrites highlight.js default */\n#styleguide .hljs {\n  background-color: #40476B;\n  font-size: .9em;\n}\n\n#styleguide .hljs-comment {\n  color: #8aaeb7;\n}\n\ncode {\n  font-family: 'Roboto Mono', monospace;\n}\n","/* SG\n# Functions/General [[dev]]\n\n##### `safe-get-function()`\n###### function(`$function-name`)\nWrapper for Sass' internal `get-function` that allows for compatibility across Sass versions. If version is higher than 3.5, then the function is returned, otherwise, just the name.\n\n@returns function\n\n\n##### `cache()`\n###### function(`$function-name, $args...`)\nMemoize (cache) a function's return values and arguments. Speeds up processing on intensive functions that get called many times (with the same arguments).\n\n_NOTE: This can actually **increase** processing time if used too often or on simple functions as the lookup process isn't free. Every cached value is unique._\n\n@returns function result\n\n*/\n\n@function safe-get-function($name) {\n    @if function-exists('get-function') {\n        @return get-function($name);\n    } @else {\n        @return $name;\n    }\n}\n\n\n$c-i: 0;\n$cached-values: ();\n\n@function cache($function-name, $args...) {\n    $cache-map: '#{$function-name}, #{$args}';\n    $cached-value: map-get($cached-values, $cache-map);\n\n    @if $cached-value != null and $cached-value != '' {\n        @return $cached-value;\n    } @else {\n        $result: call(safe-get-function($function-name), $args...);\n        $cached-values: map-merge($cached-values, ($cache-map: $result)) !global;\n        @return $result;\n    }\n}\n\n/* SG\n# Functions/Conversion [[dev]]\n\n##### `strip-units()`\n###### function(`$value`)\nRemove lengths (`px`, `em`, `rem`, etc.) from a value. Usually a variable. This is sometimes required because Sass cannot calculate incompatible units (`px * rem` for instance).\n[Reference](http://stackoverflow.com/questions/12328259/how-do-you-strip-the-unit-from-any-number-in-sass)\n\n##### `percentage-to-decimal()`\n###### function(`$percentage`)\nChanges percent value to decimal.\n@returns number\n\n##### `px-to-vw()`\n###### function(`$pixels`)\nConverts pixel dimensions to viewport width (vw) dimensions.\n@returns number (vw)\n\n##### `px-to-rems()`\n###### function(`$pixels, $base-font:` `$$base-font-size`)\nFunction for calculating `rem` values. Used by `@px-to-rems()`. The `$base-size` is used to calculate the value (e.g. if the body's font-size is `16px`, then the rem value of `24px` would be `1.5rem`).\n@returns number (rems)\n@alias rems()\n\n##### `px-to-ems()`\n###### function(`$pixels, $context:` `$base-font-size`)\nFunction for calculating `em` values. The `$context` is used to calculate the final value. Different from `px-to-rems()` by generating a value with an `em`. `$context` is often necessary based on the situation.\n@returns number(ems)\n@alias ems()\n\n##### `list-to-string()`\n###### function(`$list, $separator:','`)\nConverts a list to a string with an optional separator.\n@returns string\n@alias str-join()\n\n##### `str-to-number()`\n###### function(`$string, $unitless: false`)\nConverts a number-like string to a number. Since Sass accepts quoted and non-quoted values like `\"10px\"` and `10px`, but can only do math on the unquoted (number) value, it is sometimes necessary to convert/cast a string to a number.\n@returns number\n*/\n\n@function strip-units($value) {\n    @return $value / ($value * 0 + 1);\n}\n\n@function percentage-to-decimal($percentage) {\n    @if unit($percentage) == '%' {\n        $percentage: $percentage/100%;\n    }\n    @return $percentage;\n}\n\n\n@function px-to-vw($pixels) {\n    $vw-context: ($max-site-width * .01) * 1px;\n    @return ($pixels / $vw-context) * 1vw;\n}\n\n@function px-to-rems($pixels, $base-size: $base-font-size) {\n    @if $pixels == 'auto' {\n        @return $pixels;\n    }\n\n    @if (unitless($pixels)) {\n        $pixels: $pixels * 1px;\n    }\n\n    //If 0, don't include units\n    @if $pixels == 0px {\n        @return 0;\n    }\n\n    $pixels: ($pixels / $base-size) * 1rem;\n\n    @return $pixels;\n\n}\n//ALIAS: Same as above\n@function rems($pixels, $base-size:$base-font-size){\n    @return px-to-rems($pixels, $base-size);\n}\n\n//Pixels to em\n@function px-to-ems($pixels, $context: $base-font-size) {\n    @if (unitless($pixels)){\n        $pixels: $pixels * 1px;\n    }\n\n    //If 0, don't include rems\n    @if $pixels == 0px {\n        @return 0;\n    }\n\n    $pixels: ($pixels / $context) * 1em;\n\n    @return $pixels;\n}\n//ALIAS: same as above\n@function ems($pixels, $context: $base-font-size) {@return px-to-ems($pixels, $context);}\n\n//List Join\n//Convert a list to a string\n@function list-to-string($list, $separator: \",\") {\n    $string: \"\";\n\n    @for $i from 1 through length($list) {\n        $string: str-append($string, #{nth($list, $i)});\n\n        @if $i != length($list) {\n            $string: str-append($string, $separator);\n        }\n    }\n\n    @return $string;\n}\n\n//String to number conversion\n// Casts a number-like string to a true number\n@function str-to-number($string, $unitless: false){\n    //Maps to check against\n    $str-numbers:('0':0,'1':1,'2':2,'3':3,'4':4,'5':5,'6':6,'7':7,'8':8,'9':9);\n    //Leading 0 allows us to loop backwards without reaching null\n    $string: 0 + $string;\n\n    $total: 0;\n    $decimal: 1;\n    $negative: 1;\n    $number-found: false;\n    $unit: -1;\n\n    //Loop backwards through string until a number is found\n    @while not $number-found {\n\n        //Break if loop is longer than string, or longer than any possible unit value\n        @if (($unit * -1) >= str-length($string)) or $unit < -6 {\n            $unit: -2;\n            //set unitless to true regardless of user input.\n            $unitless: true;\n            $number-found: 1;\n        }\n\n        $slice: str-slice($string, $unit, $unit);\n        $number-found: map-get($str-numbers, $slice);\n        $unit:  $unit - 1;\n\n    }\n    //Compensate for Sass' non-zero\n    $unit: $unit + 1;\n    $value: str-slice($string, 1, $unit);\n    $str-length: str-length($value);\n\n    //Just return value if it's length is 2\n    @if $str-length == 2 {\n        @return map-get($str-numbers, str-slice($string, 2));\n    }\n\n    //Loop forward through string\n    @for $i from 1 through $str-length {\n        //Slice at each value\n        $sub-string: str-slice($value, $i, $i);\n        //Check for known number, convert to real number\n        $number: map-get($str-numbers, $sub-string);\n\n        @if $number {\n            //multiply total by ten to give us proper number placement\n            $total: $total * 10 + $number;\n\n        }@else if $sub-string == '-' {\n            //check for negative\n            $negative: -1;\n\n        }@else if $sub-string == '.' {\n            //check for decimal\n            $decimal-pos: $str-length - $i;\n            //Create a number to multiply by to recreate decimal\n            @for $j from 1 through $decimal-pos {\n                $decimal: $decimal * 0.1;\n            }\n        }\n    }\n\n    @if $unitless or $unit == -1 {\n        $unit: 1;\n    }@else {\n        $str-units: (\n            'px':1px,'%':1%,'em':1em,'rem':1rem,'ex':1ex,\n            'cm':1cm,'mm':1mm,'ch':1ch,'pica':1pica,'in':1in,'pt':1pt,'pc':1pc,\n            'vw':1vw,'vh':1vh,'vmin':1vmin,'vmax':1vmax\n        );\n        $unit-str: str-slice($string, ($unit + 1), -1);\n        $unit: map-get($str-units, $unit-str);\n\n        @if not $unit {\n            @warn \"#{$unit-str} is not a valid CSS unit.\";\n            $unit: 1;\n        }\n    }\n    //Take number and multiply it as necessary to achieve original.\n    @return ($total * $decimal)* $negative * $unit;\n}\n\n/* SG\n# Functions/Strings & Lists [[dev]]\n\n[Reference](https://github.com/devatrox/Sunglass)\n\n##### `contains()`\n###### function(`$data, $value`)\nGeneric `contains` function(similar to javascript's `indexOf`). Parses a variable(`$data`) for a `$value`. Returns boolean.\n@returns boolean\n@requires `str-contains()`, `list-contains()`\n\n##### `str-join()`\n###### function(`$list, $separator:','`)\nConverts a map or list to a string (`('this', 'and', 'this')` becomes `'this,and,this'`).\n@returns string\n\n##### `str-contains()`\n###### function(`$string, $value, $pos: 0`)\nChecks if a `$string` contains a `$value`. Optionally accepts a start positon.\n@returns boolean\n\n##### `str-append()`\n###### function(`$data, $separator:','`)\nAdds one string to another (e.g. `str-append('hello', 'world')` becomes `hello world`).\n@returns string\n\n##### `list-contains()`\n###### function(`$list, $value`)\nChecks whether a `$list` contains a `$value`.\n@returns boolean\n\n##### `list-print()`\n###### function(`$list, $depth: 1`)\nUsed to turn a list into a flat string. For debug purposes.\n@returns string\n\n##### `to-list()`\n###### function(`$string, $keep: 'both'`)\nConvert a value to a list. `$keep` accepts `'keys'`, `'values'`, or `'both'` for map conversion.\n@returns list\n\n*/\n\n//To list\n@function to-list($value, $keep: \"both\") {\n    $keep: if(index(\"keys\" \"values\" \"both\", $keep), $keep, \"both\");\n\n    @if type-of($value) == \"map\" {\n        $keys: ();\n        $values: ();\n\n        @each $key, $val in $value {\n            $keys: append($keys, $key);\n            $values: append($values, $val);\n        }\n\n        @if $keep == \"keys\" {\n            @return $keys;\n        }\n        @else if $keep == \"values\" {\n            @return $values;\n        }\n        @else {\n            @return zip($keys, $values);\n        }\n    }\n\n    @return if(type-of($value) != list, ($value,), $value);\n}\n\n//General 'contains' checker\n// Delegates methods to the appropriate function based on variable type\n@function contains($data, $value){\n    @if type-of($data == \"map\"){\n        @return map-has-keys($data, $value);\n    }@else if type-of($data == \"list\"){\n        @return list-contains($data, $value);\n    }@else if type-of($data == \"string\"){\n        @return str-contains($data, $value);\n    }\n}\n\n//String Join\n// Converts list to a string with an optional separator\n@function str-join($list, $separator: \",\") {\n    @return list-to-string($list, $separator);\n}\n\n// String contains check\n// Outputs true/false based on inputs\n@function str-contains($string, $value, $pos: 0) {\n\n    $string: str-slice($string, $pos);\n\n    @if str-index($string, $value) != null {\n        @return true;\n    }\n    @else {\n        @return false;\n    }\n}\n\n//String Append\n// Adds string to end of another string\n@function str-append($string, $insert) {\n    $string: if($string == null, '', $string);\n\n    @return str-insert($string, $insert, str-length($string) + 1);\n}\n\n//String replace\n// Replaces a value in a string with another\n@function str-replace($string, $search, $replace: '') {\n    $index: str-index($string, $search);\n\n    @if $index {\n        @return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);\n    }\n\n    @return $string;\n}\n\n// List contains check\n// Outputs true/false\n@function list-contains($list, $value) {\n    @return not not index($list, $value);\n}\n\n//Reverse a List\n@function list-reverse($list, $recursive: false) {\n    $result: ();\n\n    @for $i from length($list)*-1 through -1 {\n        @if type-of(nth($list, abs($i))) == list and $recursive {\n            $result: append($result, reverse(nth($list, abs($i)), $recursive));\n        }\n        @else {\n            $result: append($result, nth($list, abs($i)));\n        }\n    }\n\n    @return $result;\n}\n\n//List print\n@function list-print($list, $depth: 1) {\n    $output: '';\n\n    @if $depth > 0 {\n        @for $i from 1 through $depth {\n            $output: $output + $list;\n        }\n    }\n\n    @return $output;\n}\n\n/* SG\n# Functions/Maps [[dev]]\n\n@file globals/_gl-functions.scss\n\n[Reference](http://www.sitepoint.com/extra-map-functions-sass/)\n\n##### `map-deep-set()`\n###### function(`$map, $keys... [, $value]`)\nAdd to a deeply nested map key. Accepts any number of keys, but the final value is the new key.\n@returns map\n\n##### `map-depth()`\n###### function(`$map`)\nFind depth of a `$map`.\n@returns number\n\n##### `map-has-keys()`\n###### `[map], [key(s) to be checked ...]`\nDetermine whether a map contains certain keys.\n@returns boolean\n@alias map-contains-keys()\n\n##### `map-has-nested-keys()`\n###### function(`$map`, `$keys...`)\nCheck for the value of a nested key.\n@returns boolean\n@alias map-contains-nested-keys()\n\n##### `map-get-nested()`\n###### function(`$map`, `$keys...`)\nReturns nested map values. A deep version of Sass' `map-get()`.\n@returns string, boolean, list, or map\n\n##### `map-extend()`\n###### function(`$map`, `$maps...`(`$deep:true`))\nMerges multiple maps. Similar to jQuery's .extend().\n@returns map\n\n##### `map-add-depth()`\n###### function(`$map`, `$new-key:'base'`)\nAdds one level to a map using the new key to a map. Used by `generate_color_varations()`. (e.g. `(key: value, key: value)` becomes `(key:(new-key: value), key:(new-key: value))` )\n@returns map\n\n##### `map-print()`\n###### function(`$map`, `$level:1`)\nPrints map into a string (in a JSON-esque format). Useful for debugging.\n@returns string\n@alias map-inspect()\n\n*/\n\n\n//Deep Set\n//Update a deeply nested map key.\n@function map-deep-set($map, $keys... /*, $value */) {\n    $map-list: ($map,);\n    $result: null;\n\n    @if length($keys) == 2 {\n        @return map-merge($map, (nth($keys, 1): nth($keys, -1)));\n    }\n\n    @for $i from 1 through length($keys) - 2 {\n        $map-list: append($map-list, map-get(nth($map-list, -1), nth($keys, $i)));\n    }\n\n    @for $i from length($map-list) through 1 {\n        $result: map-merge(nth($map-list, $i), (nth($keys, $i): if($i == length($map-list), nth($keys, -1), $result)));\n    }\n\n    @return $result;\n}\n\n//Map depth finder\n// Returns a map's depth. Useful for debugging maps.\n@function map-depth($map) {\n    $level: 1;\n\n    @each $key, $value in $map {\n        @if type-of($value) == \"map\" {\n            $level: max(map-depth($value) + 1, $level);\n        }\n    }\n\n    @return $level;\n}\n\n//Check multiple map keys\n@function map-has-keys($map, $keys...) {\n    @each $key in $keys {\n        @if not map-has-key($map, $key) {\n            @return false;\n        }\n    }\n\n    @return true;\n}\n\n@function map-contains-keys($map, $keys...) {\n    @return map-has-keys($map, $keys);\n}\n\n//Check for deep map keys\n@function map-has-nested-keys($map, $keys...) {\n    @each $key in $keys {\n        @if not map-has-key($map, $key) {\n            @return false;\n        }\n\n        $map: map-get($map, $key);\n    }\n\n    @return true;\n}\n//ALIAS\n@function map-contains-nested-keys($map, $keys...) {@return map-has-nested-keys($map, $keys);}\n\n//Get map value at nested or 'deep' key, per $keys list\n@function map-get-nested($map, $keys...) {\n    @each $key in $keys {\n        @if type-of($map) != 'map' {\n            @return $map;\n        }\n        $map: map-get($map, $key);\n    }\n    @return $map;\n}\n\n//Map Extend\n// Similar to jQuery's extend function but for sass maps\n// Takes two maps and merges their differences\n@function map-extend($map, $maps... /*, $deep */) {\n    $last: nth($maps, -1);\n    $deep: $last == true;\n    $max: if($deep, length($maps) - 1, length($maps));\n\n    // Loop through all maps in $maps...\n    @for $i from 1 through $max {\n        // Store current map\n        $current: nth($maps, $i);\n\n        // If not in deep mode, simply merge current map with map\n        @if not $deep {\n            $map: map-merge($map, $current);\n        } @else {\n            // If in deep mode, loop through all tuples in current map\n            @each $key, $value in $current {\n\n                // If value is a nested map and same key from map is a nested map as well\n                @if type-of($value) == \"map\" and type-of(map-get($map, $key)) == \"map\" {\n                    // Recursive extend\n                    $value: map-extend(map-get($map, $key), $value, true);\n                }\n\n                // Merge current tuple with map\n                $map: map-merge($map, ($key: $value));\n            }\n        }\n    }\n\n    @return $map;\n}\n\n\n//Map depth-adder\n//-------------------------\n// Adds 'base'(or whatever initial key that's passed in) to a color map.\n// Used by color map generator function (colors/_colorfunctions)\n//--------------------------\n// 1. Check if map is less than or equal to the depth tolerance (default: 1).\n// 2. loops through all keys and values in the map.\n// 3. Make sure value isn't alreayd a map\n//   3a. If value is a map, then check to make sure $new-key is in the map\n//     3b. Duplicate first value of map (in case there are multiple)\n//     3c. Create new map with new-key and duplicated value\n// 4. Reformats those key-value pairs into a (key: (new-key: value ))\n// 5. Merges new depthy key-key-value back into the map.\n// 6. Returns the new map.\n\n@function map-add-depth($map, $new-key: 'base'){\n    $formatted-key:();\n    $new-map:'';\n\n    @each $key, $value in $map {                 //[2]\n        $formatted-key: ();\n        @if type-of($value) != \"map\" {                      //[3]\n            $formatted-key: ($key: ($new-key: $value));     //[4]\n\n        }@else if not map-has-key($value, $new-key) {       //[3a]\n            $duplicate-value: map-get($value, nth(map-keys($value), 1)); //[3b]\n            $duplicate-map: ($new-key : $duplicate-value);               //[3c]\n\n            $formatted-key: ($key: (map-merge($value, $duplicate-map))); //[4]\n        }\n        $map: map-merge($map, $formatted-key);        //[5]\n    }\n\n    @return $map;                                     //[6]\n}\n\n//Map printer\n//Print maps into a string\n// Useful for debugging maps.\n// Taken from: https://github.com/lunelson/sass-maps-plus\n\n@function map-inspect($map, $level: 1) {\n    $tab: '    ';\n    $cr: '\n';\n\n    @if type-of($map) != 'map' {\n        @return '#{inspect($map)}';\n    }\n\n    $indent: list-print($tab, $level + 1);\n    $output: '{' + $cr + $indent; $i: 1;\n\n    @each $key, $value in $map {\n        @if type-of($value) == 'map' {\n            $output: $output + '#{$key}: #{map-inspect($value, $level+1)}';\n        } @else {\n            $output: $output + '#{$key}: #{$value}';\n        }\n\n        @if $i < length(map-keys($map)) {\n            $output: $output + ',' + $cr + $indent;\n        }\n\n        $i: $i + 1;\n    }\n\n    $outdent: list-print($tab, $level);\n\n    @return $output + $cr + $outdent + '}';\n}\n//ALIAS\n@function map-print($map, $level: 1){\n    @return map-inspect($map, $level);\n}\n\n/* SG\n# Typography/Sizing [[dev]]\n\n##### `modular-scale()`\n###### function(`$scale`, `$ratio:``$$scale-ratio`)\nGenerates a pixel value that is an exponent of a ratio (`$ratio` defaults to `$$scale-ratio` value).\n@requires `pow()`, `cache()`, `strip-units()`\n@returns number (pixels)\n\n*/\n\n// Modular scale function to scale type up or down.\n@function modular-scale($scale, $ratio: $scale-ratio){\n    $modular-scale: $ratio;\n\n    @if length($ratio) == 2 {\n    // Making sure we don't have a ratio below 1.\n        @if nth($ratio,1) < nth($ratio,2){\n            $modular-scale:   nth($ratio, 2)/nth($ratio, 1);\n        }@else{\n            $modular-scale:   nth($ratio, 1)/nth($ratio, 2);\n        }\n    }\n\n    $font-size:  strip-units($base-font-size);\n    $pow: cache(pow, $modular-scale, $scale);\n    @return $pow * ($font-size) * 1px;\n}\n\n/* SG\n# Typography/Line-height [[dev]]\n\n##### `baseline()`\n###### function(`$font-size`, `$baseline`, `$multiple:1`)\n\nAligns a font-size to a baseline (`$baseline`). Returns a unitless value relative to the font-size (equivilent to ems). An optional multiple can be used to make a variation on the given baseline (using decimals will divide the the baseline).\n@returns number (unitless)\n\n*/\n\n@function baseline($font-size, $baseline: $base-line-height, $multiple:1, $floor: false) {\n    @if ($floor) {\n        @return floor($font-size / ($baseline * $multiple)) * ($baseline * $multiple) / $font-size;\n    }\n    @return ceil($font-size / ($baseline * $multiple)) * ($baseline * $multiple) / $font-size;\n}\n\n/* SG\n\n##### `baseline-curve()`\n###### function(`$x` , `$accel`: `1`)\n\nCalculates a where a number(`$x`) sits along a parabolic arc (curve). Change the curve's severity by changing its `$accel`.\nAn `$accel` of 1 is a smooth arc.\n`$accel` accepts any number between -2 and 2.35. A negative will invert the curve.\n\nThe formula: `y = (sqrt((x^1)+x) - sqrt(x^1)) / .4142135623730951`\n( [Visual](https://www.desmos.com/calculator/qswvc6q9kt) )\n\n@returns number\n@requires `sqrt()`, `pow()`\n\n*/\n\n@function baseline-curve($x, $accel:1) {\n    //Cache this exponent since it uses a decimal and requires a lot of computation\n    $x2: cache(pow, $x, $accel);\n    $x3: $x2 + $x;\n    $x3-root: sqrt($x3);\n    $x2-root: sqrt($x2);\n    $const: $SQRT2 - 1; // value used by logarithm (.4142135623730951)\n\n    $curve: ($x3-root - $x2-root) / $const;\n\n    @return min(1, $curve);\n}\n\n\n/*SG\n\n##### `baseline-calc()`\n###### function(`$font-size: $base-font-size, $font-base: $base-font-size, $basline-slack: $font-looseness`)\n\nCreates unitless line-heights that align to the baseline grid with consideration to the aesthetics of a given font size. Essentially makes sure larger font-sizes have smaller line-heights, while smaller font-sizes have larger ones.\nUses constraints based on upper and lower limits of pleasing line-heights, and finds where a given font-size should sit within those constraints. `$$font-looseness` increases the upper constraints, allowing for taller line heights on larger font sizes.\nDepends on `baseline()` for calculation and `baseline-curve()` to determine the deviance from the upper and lower constraints.\n\n@returns number (unitless)\n@requires `baseline()`, `baseline-curve()`\n\n*/\n\n$__font-index: ();\n$__font-warn: false;\n\n// Calculate the baseline of any particular font-size.\n@function baseline-calc(\n    $font-size: $base-font-size,\n    $font-base: $base-font-size,\n    $baseline-slack: $font-looseness\n){\n    $smallest-size: if(length($type-small-size) > 1, nth($type-small-size, 1), $type-small-size);\n    $smallest-size: max(10px, $smallest-size);\n    $largest-size: if(length($type-h1-size) > 1, nth($type-h1-size, 1), $type-h1-size);\n    $i: 0;\n\n    //Make sure baseline-slack is a percentage\n    @if unit($baseline-slack) != \"%\" {\n        @warn \"Baseline-slack/font-looseness should be a percentage.\";\n        $basline-slack: strip-units($baseline-slack);\n        $baseline-slack: percentage($baseline-slack);\n    }\n\n    $slack: ($baseline-slack / 100%);\n\n    //Base Highest and lowest line-height multiples\n    $base-lh-upper-bound: 1.9;\n    $base-lh-lower-bound: 1.1;\n\n    //smallest font-size's highest/lowest line-height multiple\n    // Use global settings to help determine, where possible\n    $sm-lh-upper-bound: 2 + ($slack / 2);\n    $sm-lh-lower-bound: 1 + ($slack / 2);\n\n    //Largest font-size's highest/lowest line-height multiple\n    // Use baseline slack to determine constraints\n    $lg-lh-upper-bound: 1.02 + ($slack / 2);\n    $lg-lh-lower-bound: 0.91 + ($slack / 2);\n\n    //Smallest/Largest font sizes to calculate against\n    $sm-font-size: 9 + ($slack * 10);\n    $lg-font-size: 95 + ($slack * 50);\n\n    //Baseline-curve progress percentages\n    $percent-along-current: 0;\n    $percent-along-upper: 0;\n    $percent-along-lower: 0;\n\n    //Non-adjusted placement of the font-size between largest and smallest font sizes\n    $true-percent-along: strip-units(($font-size - $sm-font-size) / ($lg-font-size - $sm-font-size));\n\n    //Make sure handle fonts larger than our initial assumptions\n    @if $font-size <= $sm-font-size {\n        //Set progress to 0%\n        $base-lh-lower-bound: 1;\n        $base-lh-upper-bound: $sm-lh-upper-bound;\n\n        @if $font-size > $smallest-size {\n            $true-percent-along: ($slack / 10);\n        }@else {\n            $true-percent-along: .001;\n        }\n    }\n    @else if $font-size >= $lg-font-size {\n        //Set progress to 100%\n        $percent-along-current: 1;\n        $percent-along-lower: 1;\n        $percent-along-upper: 1;\n        $base-lh-lower-bound: $lg-lh-lower-bound;\n        $base-lh-upper-bound: $lg-lh-upper-bound;\n        $lg-font-size: $font-size + ($slack * 50);\n    }\n    // Determine where we're at on the curve\n    @else {\n        //Standard curve\n        $percent-along-current:cache(baseline-curve, $true-percent-along, 1);\n        //Upper boundary curve\n        $percent-along-upper:  cache(baseline-curve, $true-percent-along, 1.3);\n        //Lower boundary curve\n        $percent-along-lower:  cache(baseline-curve, $true-percent-along, 1.9);\n    }\n\n    $upper-boundary: ($sm-lh-upper-bound - $lg-lh-upper-bound);\n    $lower-boundary: ($sm-lh-lower-bound - $lg-lh-lower-bound);\n\n    //Adjust percentages to line-height values\n    $base-lh-upper-bound: $sm-lh-upper-bound - ($percent-along-upper * $upper-boundary);\n    $base-lh-lower-bound: $sm-lh-lower-bound - ($percent-along-lower * $lower-boundary);\n\n    @if $debug-fonts {\n        @if index($__font-index, $font-size) == null {\n            @debug \"font-size: #{$font-size}\";\n            @debug \"%: #{percentage($true-percent-along)}\";\n            @debug \"%u: #{percentage($percent-along-upper)}, %l: #{percentage($percent-along-lower)}\";\n            @debug \"ub: #{$base-lh-upper-bound} (#{$font-size * $base-lh-upper-bound}), lb: #{$base-lh-lower-bound} (#{$font-size * $base-lh-lower-bound})\";\n            @debug \"sm-lh-ub: #{$sm-lh-upper-bound}, sm-lh-lb: #{$sm-lh-lower-bound}\";\n            @debug \"lg-lh-ub: #{$lg-lh-upper-bound}, lg-lh-lb: #{$lg-lh-lower-bound}\";\n            @debug \"slack: #{$slack}\";\n        }\n    }\n\n    //If the lower bound is somehow higher than the upper bound,\n    // let's just reset the bounds to simple values\n    @if $base-lh-lower-bound > $base-lh-upper-bound {\n        $base-lh-lower-bound: 1;\n        $base-lh-upper-bound: 2;\n    }\n\n    //First attempt\n    $baseline: $base-line-height;\n    $line-height: baseline($font-size, $baseline);\n\n    //Second attempt\n    @if ($line-height < $base-lh-lower-bound) or ($line-height > $base-lh-upper-bound) {\n\n        //Attempt using a negative line-height for very large sizes\n        @if ($true-percent-along > .9) {\n            $line-height: baseline($font-size, $baseline, .5, $floor: true);\n        }\n        @else if $font-size < $base-font-size {\n            $line-height: baseline($font-size, $baseline, 1.5);\n        }\n        @else {\n            $line-height: baseline($font-size, $baseline, .5);\n        }\n    }\n\n    //Set up while loop\n    $quit: false;\n\n    //Test baselines until we find a match\n    @while(($line-height < $base-lh-lower-bound or $line-height > $base-lh-upper-bound)\n        and not $quit //allows for infinite loop bailout\n    ){\n        $i: $i + .5;\n        //Try baselines in half increments\n        $line-height: baseline($font-size, $baseline, $i);\n\n        //Bail-out function to prevent infinite loops\n        // Set quit to true so we can escape this hellish loop\n        @if $i > (($font-size / 1px) / 2)  {\n            @if (not $__font-warn) and ($debug-fonts) {\n                @warn \"\n                Your font-looseness might be too high or low, watch for weird baselines and slow compile times.\n                FS: #{$font-size} / LH: #{$line-height}\n                Tolerances: #{$base-lh-upper-bound} / #{$base-lh-lower-bound}\n                loops: #{$i * 2}\";\n                $__font-warn: true !global; //Prevent seeing this warning multiple times\n            }\n\n            //default to normal calculated line-height\n            $line-height: baseline($font-size, $baseline);\n            $quit: true;\n        }\n    }\n\n    @if $debug-fonts {\n        @if index($__font-index, $font-size) == null {\n            $__font-index: append($__font-index, $font-size) !global;\n            @debug \"lh: #{$line-height * $font-size} / #{$line-height} \";\n            @debug \"loops: #{$i * 2}\";\n            @debug \"-----\";\n        }\n    }\n\n    @return $line-height;\n}\n\n//Add to silent classes registry\n@function silents-register($map, $key){\n    @if $debug-silent-classes {\n        @if map-get($silent-class-registry, $key) == null {\n            $silent-class-registry: map-merge($silent-class-registry, ($key:())) !global;\n        }\n        $map: map-merge(map-get($silent-class-registry, $key), $map);\n        @return map-deep-set($silent-class-registry, $key, $map);\n    }@else {\n        @return null;\n    }\n}\n\n\n\n// Global math constants\n$pi:    3.1415926535897932384626433832795028841971693993751;\n$π:     $pi;\n$PI:    $pi;\n$e:     2.71828182845904523536028747135266249775724709369995;\n$E:     $e;\n$LN2:   0.6931471805599453;\n$SQRT2: 1.4142135623730951;\n\n\n/* SG\n\n# Functions/Math [[dev]]\n\nMost functions taken from [Sassy Math](https://github.com/Team-Sass/Sassy-math/blob/master/sass/math.scss).\n\n*/\n\n\n/* SG\n\n##### `pow()`\n###### function(`$number`, `$exponent`, `$precision:12`)\n\nA more robust exponent multiplication which allows for decimal-based exponents. This **fully** replaces Compass' pow() function (allows for float-based exponents).\n\n[Reference](https://gist.github.com/nathancrank/7539155)\n\n@returns number\n@requires log()\n@alias exponent()\n\n*/\n\n@function pow($base, $exp) {\n    @if $exp == floor($exp) {\n        $r: 1;\n        $s: 0;\n        @if $exp < 0 {\n            $exp: $exp * -1;\n            $s: 1;\n        }\n        @while $exp > 0 {\n            @if $exp % 2 == 1 {\n                $r: $r * $base;\n            }\n            $exp: floor($exp * 0.5);\n            $base: $base * $base;\n        }\n        @return if($s != 0, 1 / $r, $r);\n    } @else {\n        $log: log($base);\n        $exp: cache(exp, ($log * $exp));\n        @return $exp;\n    }\n}\n\n// ALIAS\n@function exponent($base, $exponent) {\n    @return pow($base, $exponent);\n}\n\n\n/* SG\n\n##### `log()`\n###### function(`$x`)\nReturns the natural logarithm of a number.\n\n```scss\n$value:   log(2)  // 0.69315\n$value2:  log(10) // 2.30259\n```\n\n@returns number\n\n*/\n\n@function log($x) {\n    @if $x <= 0 {\n        @return 0;\n    }\n    $k-frexp: frexp(($x / $SQRT2));\n    $k: nth($k-frexp, 2);\n    $x: $x / ldexp(1, $k);\n    $x: ($x - 1) / ($x + 1);\n    $x2: $x * $x;\n    $i: 1;\n    $s: $x;\n    $sp: null;\n    @while $sp != $s {\n        $x: $x * $x2;\n        $i: $i + 2;\n        $sp: $s;\n        $s: $s + $x / $i;\n    }\n    @return $LN2 * $k + 2 * $s;\n}\n\n/* SG\n\n##### `frexp()`\n###### function(`$x`)\nReturns a two-element list containing the normalized fraction and exponent of number.\n\n@returns list (fraction, exponent)\n\n*/\n\n@function frexp($x) {\n    $exp: 0;\n    @if $x < 0 {\n        $x: $x * -1;\n    }\n    @if $x < 0.5 {\n        @while $x < 0.5 {\n            $x: $x * 2;\n            $exp: $exp - 1;\n        }\n    } @else if $x >= 1 {\n        @while $x >= 1 {\n            $x: $x / 2;\n            $exp: $exp + 1;\n        }\n    }\n    @return $x, $exp;\n}\n\n/* SG\n\n##### `ldexp()`\n###### function(`$x, $exp`)\n\nReturns $x * 2^$exp\n\n*/\n\n@function ldexp($x, $exp) {\n    $b: if($exp >= 0, 2, 1 / 2);\n    @if $exp < 0 {\n        $exp: $exp * -1;\n    }\n    @while $exp > 0 {\n        @if $exp % 2 == 1 {\n            $x: $x * $b;\n        }\n        $b: $b * $b;\n        $exp: floor($exp * 0.5);\n    }\n    @return $x;\n}\n\n/* SG\n\n##### `exp()`\n###### function(`$x`)\n\nReturns E^x, where x is the argument, and E is Euler's constant, the base of the natural logarithms.\n\n```scss\n$value: exp(1)  // 2.71828\n$value2: exp(-1) // 0.36788\n```\n\n@returns Number\n\n*/\n\n@function exp($x) {\n    $ret: 0;\n    @for $n from 0 to 24 {\n        $ret: $ret + pow($x, $n) / fact($n);\n    }\n    @return $ret;\n}\n\n/* SG\n\n##### `fact()`\n###### function(`$x`)\n\nReturns the factorial of a non-negative integer.\n\n```scss\n$value:  fact(0) // 1\n$value2: fact(8) // 40320\n```\n@return Number\n\n*/\n\n@function fact($x) {\n    @if $x < 0 or  $x != floor($x) {\n        @warn \"Argument for `fact()` must be a positive integer.\";\n        @return null;\n    }\n\n    $ret: 1;\n\n    @while $x > 0 {\n        $ret: $ret * $x;\n        $x: $x - 1;\n    }\n\n    @return $ret;\n}\n\n/* SG\n\n##### `gcd()`\n###### function(`$number-1`, `$number-2`)\n\nGreatest Common Divisor calculation (useful for calculating grids and widths).\n@returns number\n\n*/\n\n@function gcd($number-1, $number-2) {\n  // From: http://rosettacode.org/wiki/Greatest_common_divisor#JavaScript\n    @if $number-2 != 0 {\n        @return gcd($number-2, ($number-1 % $number-2));\n    }@else {\n        @return abs($number-1);\n    }\n}\n\n/* SG\n\n##### `lcm()`\n###### function(`$a`, `$b`)\n\nFinds the least common multiple. Use with caution...if there is no LCM, then you compilation will error out.\n\n@returns number\n\n*/\n\n@function lcm($a, $b) {\n    $a: round($a);\n    $b: round($b);\n    $gcd: gcd($a, $b);\n    $result: ($a * $b) / $gcd;\n    @return $result;\n}\n\n\n/* SG\n\n##### `nth_root()`\n###### function(`$base`, `$n:2`, `$precision:12`)\n\nAdvanced calculation for square roots, cube roots, etc. of a value.\n[Reference](http://rosettacode.org/wiki/Nth_root#JavaScript)\n\n@returns number\n\n*/\n\n@function nth_root($base, $n: 2, $precision: 12) {\n    $prec: $precision;\n    $x: 1;\n\n    @for $i from 0 through $prec {\n        $x: 1 / $n * (($n - 1) * $x + ($base / pow($x, $n - 1)));\n    }\n\n    @return $x;\n}\n\n/* SG\n\n##### `sqrt()`\n###### function(`$base`, `$precision:12`)\n\nFind the square root of a value.\n\n@returns number\n@alias `sqroot()`\n\n*/\n\n@function sqrt($base, $precision: 12) {\n    $guess: random(20);\n    $root: $guess;\n\n    @for $i from 1 through $precision {\n        $root: $root - (pow($root, 2) - $base) / (2 * $root);\n    }\n    @return $root;\n}\n\n@function sqroot($r) {\n  $x0: 1; // initial value\n  $solution: false;\n\n  @for $i from 1 through 10 {\n    @if abs(2 * $x0) < 0,00000000000001 { // Don't want to divide by a number smaller than this\n      $solution: false;\n    }\n\n    $x1: $x0 - ($x0 * $x0 - abs($r)) / (2 * $x0) !global;\n\n    @if ( abs($x1 - $x0) / abs($x1)) < 0,0000001 { // 7 digit accuracy is desired\n      $solution: true;\n    }\n\n    $x0: $x1;\n  }\n\n  @if $solution == true {\n    // If $r is negative, then the output will be multiplied with <a href=\"http://en.wikipedia.org/wiki/Imaginary_number\">i = √-1</a>\n    // (√xy = √x√y) => √-$r = √-1√$r\n    @if $r < 0 {\n      @return $x1 #{i};\n    }\n    @else {\n      @return $x1;\n    }\n  }\n  @else {\n    @return \"No solution\";\n  }\n}\n\n\n/* SG\n\n##### `sin()`\n###### function(`$angle`)\n\nDetermines the Sine of an angle.\n[Reference](https://unindented.org/articles/trigonometry-in-sass/)\n\n@returns number\n*/\n\n@function sin($angle) {\n    $sin: 0;\n    $angle: rad($angle);\n    // Iterate a bunch of times.\n    @for $i from 0 through 10 {\n        $sin: $sin + pow(-1, $i) * pow($angle, (2 * $i + 1)) / fact(2 * $i + 1);\n    }\n    @return $sin;\n}\n\n//Hyperbolic sine\n@function sinh($number) {\n    $top: exponent($e, (2 * $number)) - 1;\n    $bottom: 2 * exponent($e, $number);\n    @return  $top / $bottom;\n}\n\n/* SG\n\n##### `cos()`\n###### function(`$angle`)\n\nDetermines the Cosine of an angle.\n@returns number\n\n*/\n\n@function cos($angle) {\n    $cos: 0;\n    $angle: rad($angle);\n    // Iterate a bunch of times.\n    @for $i from 0 through 10 {\n        $cos: $cos + pow(-1, $i) * pow($angle, 2 * $i) / fact(2 * $i);\n    }\n    @return $cos;\n}\n\n/* SG\n##### `tan()`\n###### function(`$angle`)\n\nDetermines the Tangent of an angle.\n@returns number\n\n*/\n\n@function tan($angle) {\n    @return sin($angle) / cos($angle);\n}\n\n/* SG\n\n##### `golden()`\n###### function(`$base: 1`)\n\nGet the golden ratio from `$base`.\n@returns number\n@alias `$$golden_ratio`\n\n*/\n\n@function golden($base: 1) {\n    @return (1/2 + sqrt(5) / 2) * $base;\n}\n\n$golden_ratio: golden();\n\n\n@function rad($angle) {\n    $unit: unit($angle);\n    $unitless: $angle / ($angle * 0 + 1);\n    // If the angle has 'deg' as unit, convert to radians.\n    @if $unit == deg {\n        $unitless: $unitless / 180 * $pi;\n    }\n    @return $unitless;\n}\n\n//Alias\n@function angle-to-rad($angle) {\n    @return rad($angle);\n}\n\n\n// Math helpers\n// From https://github.com/inuitcss/tools.functions/blob/master/_tools.functions.scss\n//\n// Halve and double numbers, returning rounded integers. E.g.:\n//\n// .foo {\n//     padding: halve(3.2px);\n// }\n//\n// Outputs:\n// .foo{padding: 2px;}\n//\n@function quarter($number) {\n    @return round($number / 4);\n}\n\n@function halve($number) {\n    @return round($number / 2);\n}\n\n@function double($number) {\n    @return round($number * 2);\n}\n\n@function quadruple($number) {\n    @return round($number * 4);\n}\n"]}