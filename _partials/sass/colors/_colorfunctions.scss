//------------------------------------
//    $COLOR FUNCTIONS
//------------------------------------

//Color map functions
//====================================
//Based on:
//http://blog.12spokes.com/web-design-development/simple-css-color-management-with-sass/
//Darker and lighter darkens are available by adding
// -dark/-darker/-light/-lighter to the end of variable names.
// Get a color value from our color pallette. e.g.:
// div{
//	  background-color: colors(primary, light)
//}
// If you'd prefer to just get the base color, you do not need to declare 'base',
// just declare color([color name]). 'base' is implied.

@function colors($color, $tone: 'base') {

    @if not map-has-key($colors, $color) {
        @warn "Key `#{$key}` not found in $colors map.";
    }

    @return map-get(map-get($colors, $color), $tone);
}
//Same as above, but possibly more intuitively named
@function color($color, $tone: 'base') { @return colors($color, $tone);}
@function clr($color, $tone: 'base') { @return colors($color, $tone);}

//FUNCTION: combine-colors()
// Combines two color maps (or really any double-nested map)
@function combine-colors($map1, $map2) {
	@each $pal, $color in $map2 {
		$value: ($pal: $color);
		$map1: map-merge($map1, $value);
	}
	@return $map1;
}

//FUNCTION: generate_color_varations()
// Adds color variations to a color map
// 1a. Color functions.
// 1b. Function percentages (e.g. lighten($foo, [percentages])).
// 1c. Variation names (output to map).
// 1d. Blending color. Only used when a blending mode is used (e.g. color-dodge)
// 2a. Determine how often to switch functions.
// 2b. Make sure map is properly formatted.
// 2c. Define new map (for easier to understand return value).
// 3a. Loop through the pallets and colors of the map input.
// 3b. Store $color map in a list
//     (this is required to prevent bugs on colors with names of real colors).
// 3c. Define color function increment.
// 4a. Loop through the variation names.
// 4b. Get index and find the amount to use with the current color function.
// 5a. Divide the loop increment by the number of color functions.
// 5b. If the loop is larger than the variation frequency,
//	   move to the next color function.
// 6a. Get the current color function and current color.
// 6b. Add blending mode color if necessary (useful for mixing colors).
// 6c. If blending-color is defined, use it to blend colors (use list-value if exists)
// 7a. Call the color function, the color(s), and the amount and store that value.
// 7b. Create the variation and color definition in map format ("name": color).
// 7c. Merge the current base color map with the new variant map.
// 8a. Format the previous loop results into a nested map.
// 8b. Merge the input map with itself and the new nested map.
// 9. Return the map with the new values.

@function generate-color-variations(
	$map: null,
	$color-functions: (tint, shade),									//[1a]
	$increments: (20%, 40%, 80%, 20%, 40%, 80%), 						//[1b]
	$variation-names: (light, lighter, lightest, dark, darker, darkest),//[1c]
	$blending-color: null 												//[1d]
){
		$variation-frequency:
			length($variation-names) / length($color-functions); //[2a]

		$map: map-add-depth($map, 'base');						 //[2b]
		$new-map: $map !global;							 	     //[2c]

		@each $palette, $color in $map { 				//[3a]
			$values-list: $color !global;			//[3b]
			$color_fn-i: 1;							//[3c]

			@each $variant in $variation-names {        //[4a]
				@if not map-has-key($color, $variant) {
					$i: index($variation-names, $variant);	//[4b]
					$amount: nth($increments, $i);			//[4b]

					$color_fn_place: $i/$variation-frequency;	//[5a]
					@if $color_fn_place > $color_fn-i{ 			//[5b]
						$color_fn-i: $color_fn-i + 1;			//[5b]
					}

					$curr_fn: nth($color-functions, $color_fn-i); 		//[6a]
					$curr_color: map-get($color, base);					//[6b]

					@if $blending-color != null {						//[6c]
						$blend-value: $blending-color;

						@if type-of($blending-color) == 'list' {
							$blend-value: nth($blending-color, $color_fn-i);
						}

						$curr_color: append($curr_color, $blend-value);
					}

					$new-color: call($curr_fn, $curr_color, $amount) !global; 	//[7a]
					$value: ($variant: $new-color); 							//[7b]

					$values-list: map-merge($value, $values-list) !global;		//[7c]
				}
			}

			// This is required because sass maps are formatted
			// with double parenthesis as they get more nested.
			// (first-level: ( (second-level: value) ) )
			$inner-map: ($palette:($values-list));				  		//[8a]
			$new-map: combine-colors($new-map, $inner-map) !global; //[8b]

		}
		@return $new-map; 								//[9]
}


// Output black or white
//====================================
// Change text color based on background-color's darkness, e.g.:
// div{
//    background-color: #f8cd12;
//    color: set_text_color(#f8cd12);
//    }
//  Your text color would be black because #f8cd12 and #00000 contain enough
//  contrast to be readable.
//  This will ONLY give you black or white.
// Use color: pick_best_color(#f00, (#fff, #ccc, #666)); for better control.
@function set-text-color($color) {
    @if (lightness( $color ) > 45) {
        @return #000000;
    }
    @else {
        @return #FFFFFF;
    }
}

//Pick best color
//====================================
//Complex color calculation to determine best color based on contrast.
//Taken from: https://gist.github.com/voxpelli/6304812
//USAGE:
// div{
//    background-color: #f8cd12;
//    color: pick_best_color(#f8cd12, (#a0a0c0, #fff, #2c2c2c));
//    }
// The function would test the colors and find that #2c2c2c is the best.

@function pick-best-color($base, $colors, $tolerance: 0) {
    $contrast: color-contrast($base, nth($colors, 1));
    $best: nth($colors, 1);

    @for $i from 2 through length($colors) {
        $current_contrast: color-contrast($base, nth($colors, $i));

        @if ($current_contrast - $contrast > $tolerance) {
            $contrast: color-contrast($base, nth($colors, $i));
            $best: nth($colors, $i);
        }
    }
    @return $best;
}


//Find a color's luminance
//===============================
// Adapted from: https://github.com/LeaVerou/contrast-ratio/blob/gh-pages/color.js
// Formula: http://www.w3.org/TR/2008/REC-WCAG20-20081211/#relativeluminancedef
@function color-luminance($color) {

    $rgba: red($color), green($color), blue($color);
    $rgba2: ();

    @for $i from 1 through 3 {
        $rgb: nth($rgba, $i);
        $rgb: $rgb / 255;

        $rgb: if($rgb < .03928, $rgb / 12.92, pow(($rgb + .055) / 1.055, 2.4));

        $rgba2: append($rgba2, $rgb);
    }

    @return .2126 * nth($rgba2, 1) + .7152 * nth($rgba2, 2) + 0.0722 * nth($rgba2, 3);
}

//Calculate contrast between two colors
//===============================
@function color-contrast($color1, $color2) {
    // Adapted from: https://github.com/LeaVerou/contrast-ratio/blob/gh-pages/color.js
    // Formula: http://www.w3.org/TR/2008/REC-WCAG20-20081211/#contrast-ratiodef
    $luminance1: color-luminance($color1) + .05;
    $luminance2: color-luminance($color2) + .05;
    $ratio: $luminance1 / $luminance2;

    @if $luminance2 > $luminance1 {
        $ratio: 1 / $ratio;
    }

    $ratio: round($ratio * 10) / 10;

    @return $ratio;
}
//Creates the necessary sass map.
$colors: generate_color_variations($colors, (tint, shade)) !global;

// Prints color map to the top of the css
// @debug map-inspect($colors);
