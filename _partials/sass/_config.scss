/* SG
# Config/Typography Settings [[dev]]

@file _config.scss

##### `$$base-font-size`
###### Pixel value
Font size all other values will use for calculation. Will be converted to `rems`.

##### `$$base-line-height`
###### Pixel value
Line-height for base font-size. Will be used to determine the vertical spacing values when `type-space()` is used.

##### `$$font-looseness`
###### Percentage
What to base the tightness/looseness of automatically-generated `line-heights`.

##### `$$auto-scale-type`
###### Boolean
Uses `$$scale-ratio` to create font sizes for headings starting from the `$$base-font-size`. Overwrites `$$type-[h#]-size`.

##### `$$scale-ratio`
###### Numeric (float)
Used for `$$auto-scale-type` and for `modular-scale()`.

##### `$$rem-px-fallback`
###### Boolean
Determines whether `rems()` conversion includes a pixel-value fallback for older browsers like IE8.

*/

$base-font-size:            16px;
$base-line-height:          24px;
$font-looseness: 			35%;
$auto-scale-type:           false;
$scale-ratio:               1.35;

$rem-px-fallback: 			true;



/* SG
# Config/Typography Settings [[dev]]

@file _config.scss

##### `$$type-[h#]-size`
###### List (pixel value [, pixel or unitless value])
Variables used to generate heading (and small) font-sizes and line-heights. A secondary value will force the line-height to that base-value.

_NOTE: First value must be pixel values(or a function that generates a pixel value like `modular-scale()`), but the optional secondary value can be unitless._
*/


$type-h1-size:           (modular-scale(6));
$type-h2-size:           (modular-scale(4));
$type-h3-size:           (modular-scale(3.5));
$type-h4-size:           (modular-scale(3));
$type-h5-size:           (modular-scale(2));
$type-h6-size:           (modular-scale(1));
$type-small-size: 		 (ceil(modular-scale(-1)));


/* SG
# Config/Typography Settings [[dev]]

@file _config.scss

##### `$$primary-font-stack`, `$$secondary-font-stack`, `$$monospace-font-stack`, `$$icon-font-stack`
###### String
Used wherever font-families are declared. Use `null` if nothing exists.

##### `$$use-web-fonts`
###### Boolean
Whether to generate `@font-face` values based on `$$font-file-name` (and the other `$font-` variables).

##### `$$font-file-name`
###### List (string)
Uses for automatically generated `@font-face` declarations. Describes the filename as well as the font-family name reference. _File names and @font-face values must be the same (e.g. 'opensans' and 'opensans.ttf').**Casing matters**._

##### `$$font-weights`
###### List (nested)
Each parenthesis corresponds to each name in `$$font-file-name`. Determines how many `@font-face` weights are generated per font.

##### `$$font-italics`
###### List (nested) (boolean)
Corresponds to each value in `$$font-weights`. (e.g. if `$font-weights: (400,700),(200,400)` and `$font-italics: (true),(false,true)` then the first font will have italics in the 400 and 700 weights while second font will have italics in the 400 weight).

##### `$$font-include-woff2`
###### Boolean (list)
Determines whether woff2 formats be included in the `@font-face` generation. Can be a list if each font has different values (not recommended since woff2 is the most performant font-file format).

##### `$$font-include-eot`
###### Boolean (list)
Determines whether to generate `@font-face` values that point at an .eot file. Fallback for IE8.

*/


$primary-font-stack:      	"opensans", "Helvetica Neue", "Helvetica", "Arial", sans-serif;
$secondary-font-stack:     	"Asap", "Garamond","Baskerville", "Baskerville Old Face", "Hoefler Text", "Times New Roman", serif;
$monospace-font-stack: 		"Consolas", "Andale Mono WT", "Andale Mono", "Lucida Console", "Lucida Sans Typewriter", "DejaVu Sans Mono", "Bitstream Vera Sans Mono", "Liberation Mono", "Nimbus Mono L", "Monaco", "Courier New", "Courier", monospace;
$icon-font-stack: 			null;

//Custom web fonts
$use-web-fonts: 		true;
//Relative path to fonts from CSS file
$font-file-location: 	"fonts";
$font-file-name:        ("Asap"     ,  "opensans"       );
$font-weights:          (400 , 700 ),  (200,  400,  700 );
$font-italics:          (true, true),  (true, true, true);

$font-include-woff2:    (false      ,  false            );
$font-include-eot: 		true;


/* SG
# Config/Grid Settings [[dev]]

@file _config.scss

##### `$$max-site-width`
###### Pixel value
Maximum desktop width for the site wrapper.

##### `$$grid-columns`
###### Number
Base number of grid columns to be generated. Note that any column number will include all fractions of the fewer columns. For instance, a 12-column grid would also include all fractions of 1-12 (including things like three-sevenths).

##### `$$grid-gutter`
###### Pixel value
Space between grid items. Also used in `type-space()` for horizontal spacing units.

##### `$$grid-silent-classes`
###### Boolean
If set to false, actual grid classes will be output to CSS.

##### `$$grid-push`, `$$grid-pull`
###### Boolean
Determines whether to include extra grid classes for positional grid modifiers.

##### `$$grid-markup-fix`
###### Boolean
If set to `true`, html must have comments between grid items. Almost always set to `false`.

##### `$$grid-floats`
###### Boolean
If set to `true`, uses floats instead of inline-block.

##### `$$breakpoints-has-widths`,
##### `$$breakpoints-has-push`,
##### `$$breakpoints-has-pull`
###### List (string)
Determines what classes (widths, pushes, pulls) get generated at `$$breakpoints`. The list's order determines the output order. This is useful if you want one breakpoint to override another.

*/

$max-site-width:        1500px;

$grid-columns:          13;
$grid-gutter:           32px;
$grid-silent-classes:	true;
$grid-push:             true;
$grid-pull:             true;

$grid-markup-fix:        false;
$grid-floats:            false;

$breakpoint-has-widths: ('smalls', 'small', 'smallish', 'bigs', 'lap', 'desk');
$breakpoint-has-push:   ('smalls', 'small', 'smallish', 'bigs', 'lap', 'desk');
$breakpoint-has-pull:   ('smalls', 'small', 'smallish', 'bigs', 'lap', 'desk');


/* SG
# Config/General Settings [[dev]]

@file _config.scss

##### `$$breakpoints`
###### Map (`breakpoint-name: 'breakpoint-value'`)
Sets up variables for media-queries. Used in `@media-query()`.

**Example**
```scss
$breakpoints: (
  'small':'(min-width: 320px)',
  'bigs':'(min-width: 850px)'
);
```
*/

$breakpoints: (
	// Everything up to 640px. Mostly phones.
    'smalls':'(max-width:640px)',
	// Up to 480px. Overrides Smalls. Small Phones, including iPhone.
    'small':'(max-width: 480px)',
	// Between 480 and 640px. Overrides Smalls. Large phones/phablets.
    'smallish': '(min-width: 481px) and (max-width: 640px)',
    // Everything larger than 640px. Tablets and Desktops.
	'bigs': '(min-width: 641px)',
	// 640-940px. Overrides Bigs. Mostly Tablets and small laptops.
    'lap': '(min-width: 641px) and (max-width: 940px)',
	// 940 and Up. Overrides Bigs. Large Tablets and Desktops.
    'desk': '(min-width: 941px)'
);

/* SG
# Config/General Settings [[dev]]

@file _config.scss

##### `$$display-classes`
###### Map (string: string)
Variable used to generate display classes. Key value pairs determine the class name and the display value.

**Example**
```scss
//SCSS input
$display-classes: ('show':'block');

//CSS output
.show { display: block; }
```


##### `$$spacing-classes`
###### Map (`string: string`)
Variable used to generate spacing classes. Classes are created via `@spacing-utilities()`. Classes are named in the format of `.prefix_direction_amount`.

**Keys and Values**
* 'directions': Direction class suffixes
* 'amounts': Numeric value multiples (e.g. `2` or `-1`)
* 'names': Amount names
* 'prefixes': Prefixes for class names (for margins or padding)

**Example**
```scss
//SCSS Input
$display-classes: (
	'directions': ('t', 'r'),
	'amounts': (2, -1),
	'names': ('2', 'neg'),
	'prefixes': ('space','pad')
);

//CSS output
.space_t_2 { margin-top: 2rem; }
.space_r_2 { margin-right: 2rem; }
.space_t_neg { margin-top: -1rem; }
.space_r_neg { margin-right: -1rem; }
.pad_t_2 { padding-top: 2rem; }
.pad_r_2 { padding-right: 2rem; }
//No .pad_t/r_neg classes since negative padding is invalid

@media only screen and (min-width:300px){...}
//repeated for all media-queries defined by $breakpoints-has-spacing-classes...

```
*/

//What display types (class-name: display-type) should be output?
// If $breakpoint-has-display-classes is false, this can be ignored
$display-classes: (
	'show': block,
	'il': inline,
	'ibl': inline-block,
	'hide': none
);

//Spacing classes config
$spacing-classes: (
	directions: ('','t','l','b','r','h','v'),
	amounts: (0, 1, .5, -1, 2),
	names: ('0','', 'half', 'neg', '2'),
	prefixes: ('space', 'pad')
);

/* SG
# Config/General Settings [[dev]]

@file _config.scss

##### `$$breakpoints-has-alignment-classes`, `$$breakpoints-has-spacing-classes`, `$breakpoints-has-display-classes`, `$breakpoint-has-type-classes`
###### List (keys from `$$breakpoints`)
Determines what utility classes get generated at `$$breakpoints`. The list's order determines cascade The list's order determines the output order. This is useful if you want one breakpoint to override another.
A `false` value will output no classes of that type.

*/

$breakpoint-has-alignment-classes: 			('smalls', 'bigs', 'desk');
$breakpoint-has-spacing-classes: 			('smalls', 'bigs', 'desk');
$breakpoint-has-display-classes: 			('smalls', 'bigs');
$breakpoint-has-type-classes: 				('smalls', 'bigs');


/* SG
# Config/General Settings [[dev]]

##### `$$base-colors`
###### Map (key : color value)
Set up variable names to be used for color-palette. Dark and light values will be automatically generated. Variables can be accessed through the `colors()`. The generated styles can be modified in `colors/_color-functions.scss`
*/

$base-colors: (
	'type': #0a1c2b, //Required

	'links': #0d497b, //Required

	'bg': #f6f8fb, //Required

	//Change the following names and colors project-specific
	'styleguide': (
        'base': #5E839E,
        'light': #95C3CE,
        'lighter': #D1F5ED,
        'lightest': #29DECE,
        'dark': #475665,
        'darker': #314958,
        'darkest': #12334A
	),

	'accent': mix(#d40026, #AD0909, 45%),

	'function': #d7dde5,

	'success': #bada55

);

//Create color variations based on the map above, using the settings below
$base-colors: generate-color-variations(
	$variations: ( //Color variation names
		'light', 'lighter', 'lightest',
		'dark', 'darker', 'darkest'
	),
	$functions: ( //functions to use when creating variations
		linearlight, lineardodge, tint,
		darken, linearburn, linearburn
	),
	$blending-colors: ( //Allows for more uniform colors
		#cbcbcb, #efefef, null,
		null, #4c5a66, #323d42
	),
    $increments: ( //How strongly each color should be blended
		50%,   60%,   80%,
		5%,   40%,   70%
	)
)  !global;


/* SG
# Config/Debug Settings [[dev]]

@file _config.scss

_NOTE: These settings, when set to `true`, will slow down compilation somewhat._

##### `$$debug-fonts`
###### Boolean
Whether to include debug statements about fonts and line-heights as they're generated. Useful if you're getting weird values on auto-generated line-heights.

* %: Distance from the lowest font-size.
* ub: Line-height upperbounds
* lb: Line-height lowerbounds
* lh: Final line-height (in pixels and unit-less).
* loops: Number of times it took to process the line-height. High numbers can indicate font-sizes that are very difficult to process.


##### `$$debug-silent-classes`
###### Boolean
Stores all auto-generated silent classes into a map that is then output as a comment at the end of the final css. Useful for getting an overview of values that are stored by the framework.


##### `$$debug-baseline`
###### Boolean
Adds style for a `baseline-on` class that will show a grid of the baseline on any element (most useful on the `body` or `html` tag). Makes vertical alignment easier.

*/

$debug-silent-classes: 		false;

$debug-fonts: 				false;

$debug-baseline:       	 	true;


/* SG
# Config/Slick Settings [[dev]]

@file _config.scss

##### `$$slick-[]-[]`
Configuration for slick carousel jQuery plugin.
[See Slick documentation for more](https://github.com/kenwheeler/slick/#sass-variables)

*/

//Output Slider/Carousel?
$include-slider: 					false;

$slick-font-path: "fonts/";
$slick-loader-path: "../images/";
$slick-arrow-color: white;
$slick-dot-color: black;
$slick-prev-character: '\2190';
$slick-next-character: '\2192';
$slick-dot-character: '\2022';

//Tab-box settings

//Do you want to create styles for tabs?
//Might be unnecessary for certain projects.
$include-tabs: 						true;

$tab-invert-active:                 false;
$tab-border:                        color(links);
$tab-button-bg:                     color(links, light);
$tab-button-secondary: 				rgb(153,17,37);
$tab-content-bg:                    #fff;
$tab-button-text:                   #fff;
$tab-border-radius:                 2px;
$tab-spacing:                       2px;
