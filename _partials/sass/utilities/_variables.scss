//------------------------------------
//    $Global Variables
//------------------------------------

 // CONTENTS
 // INTRODUCTION.........What and Why.
 // TYPOGRAPHY...........Default typography variables.
 // GRID.................Default grid variables. See /grid/_grids.scss.
 // COLORS...............Default colors along with ligher/darker versions.


//------------------------------------
//    $INTRODUCTION
//------------------------------------

// All variables defined here are defaults.
// They can, therefore be overridden in config.scss.


//------------------------------------
//    $TYPOGRAPHY
//------------------------------------

//See /utilities/_helpers.scss for where these variables are most useful.

$primary-font-stack:   helvetica, arial, sans-serif !default;
$secondary-font-stack: georgia, serif 				!default;
$monospace-font-stack: Consolas, "Andale Mono WT", "Andale Mono", "Lucida Console", "Lucida Sans Typewriter", "DejaVu Sans Mono", "Bitstream Vera Sans Mono", "Liberation Mono", "Nimbus Mono L", Monaco, "Courier New", Courier, monospace !default;


//See /type/_fonts.scss for where these variables are applied.

//Use web font generator?
$use-web-fonts: 		true     !default;
//Font folder location relative to css
$font-file-location: 	'fonts'  !default;
//Font-family base name. This can be a list. e.g.
// 'asap', 'bitter'
$font-file-name: 		'Asap' 	 !default;
//Include italics?
$font-italics: 			true  	 !default;
$font-weights: 			400,700  !default;
$font-include-eot: 		true 	 !default;


// What would you like your base font-size to be? Define in pixels; the library
// will convert measurements to the most appropriate units (rems or unitless).
$base-font-size:      16px !default;
$base-line-height:    24px !default;

// Would you like to automatically scale your Heading sizes?
// This can provide a more elegant typographic rhythm and is recommended to stay at true.
$auto-scale-type:          true !default;

// Set the ratio by which your type should grow.
// Accepts two numbers, representing a ratio, typically associated with
// music intervals. You may also use floats (1.33).
// Common intervals: Perfect fourth (4,3)[default], Perfect Fifth (3,2),
// Perfect Octave (2,1), Major Third (5,4), Major Sixth (5,3).
// The Golden Ratio is (1.618,1).
$scale-ratio:               4,3   !default;

// Heading sizes if you'd rather set them yourself (set $auto-scale-type to false).
$type-h1-size:             modular-scale(7) !default;
$type-h2-size:             modular-scale(5) !default;
$type-h3-size:             modular-scale(4) !default;
$type-h4-size:             modular-scale(3) !default;
$type-h5-size:             modular-scale(2) !default;
$type-h6-size:             modular-scale(1) !default;


// Map for referencing the values of type.

$type: (
	h1: (px: $type-h1-size,
		rem: rems($type-h1-size),
		line-height: null
	),
	h2: (px: $type-h2-size,
		rem: rems($type-h2-size),
		line-height: null
	),
	h3: (px: $type-h1-size,
		rem: rems($type-h3-size),
		line-height: null
	),
	h4: (px: $type-h1-size,
		rem: rems($type-h4-size),
		line-height: null
	),
	h5: (px: $type-h1-size,
		rem: rems($type-h5-size),
		line-height: null
	),
	h6: (px: $type-h1-size,
		rem: rems($type-h5-size),
		line-height: null
	),
	p:  (px: $base-font-size,
		rem: rems($base-font-size),
		line-height: $base-line-height
	),
	small: (px: modular-scale(-1),
		rem: rems(modular-scale(-1)),
		line-height: $base-line-height/modular-scale(-1)
	)
);

//Create heading classes for sizing (e.g. .h1,.h2,etc.)?
$type-scale-classes:       true !default;

// Would you like indented (rather than spaced) paragraph delimiting?
$indented-paragraphs: false !default;

// Would you like to show a baseline grid? This is handy during development.
$show-baseline:       false !default;

// Do not modify these variables; they are internal settings upon which the
// library depends.
$type-magic-number:        $base-line-height;
$type-magic-ratio:         $base-line-height / $base-font-size;

@if $base-font-size > $base-line-height {

    $type-magic-number:        ceil($base-font-size / $base-line-height) * ($base-line-height) !global;
    $type-magic-ratio:         ceil($base-font-size / $base-line-height) * ($base-line-height) / $base-font-size !global;

    @if $type-magic-ratio < 1.2 {
        $type-magic-number:        ceil($base-font-size / ($base-line-height * 2)) * ($base-line-height * 2) !global;
        $type-magic-ratio:         ceil($base-font-size / ($base-line-height * 2)) * ($base-line-height * 2) / $base-font-size !global;

    }

}
$type-headings:            6,5,4,3,2,1;
$type-modular-scale:       0;


//Spacing variable for simple inclusion.
$type-space: 2 * $type-magic-ratio;

//Variable for easier reference:
$stripped-base-font-size:  strip-units($base-font-size) !global;

//Checking for floats in $scale-ratio
@if length($scale-ratio) == 2{
// Making sure we don't have a ratio below 1.
    @if nth($scale-ratio,1) < nth($scale-ratio,2){
        $type-modular-scale:   nth($scale-ratio, 2)/nth($scale-ratio, 1);
    }@else{
        $type-modular-scale:   nth($scale-ratio, 1)/nth($scale-ratio, 2);
    }
}
@else {
    $type-modular-scale:   $scale-ratio !global;
}

//------------------------------------
//    $GRID
//------------------------------------

// If you are building a non-responsive site but would still like to use
// csswizardry-grids, set this to ‘false’:
$responsive:            true!default;



 // Is this build mobile first? Setting to ‘true’ means that all grids will be
 // 100% width if you do not apply a more specific class to them.

$mobile-first:          true!default;



 // Set the spacing between your grid items.

$gutter:                24px!default;



 // Would you like Sass’ silent classes, or regular CSS classes?

$use-silent-classes:    false!default;


 // Would you like to use floats instead of inline block?
$use-floats:             false!default;


 // Would you like push and pull classes enabled?

$push:                  false!default;
$pull:                  false!default;

//Would you like to use margins rather than 'right' and 'left' for
//pushing and pulling?

$use-margin-adjustments:false!default;


 // Using `inline-block` means that the grid items need their whitespace removing
 // in order for them to work correctly. Set the following to true if you are
 // going to achieve this by manually removing/commenting out any whitespace in
 // your HTML yourself.

 // Setting this to false invokes a hack which cannot always be guaranteed,
 // please see the following for more detail:

 // github.com/csswizardry/csswizardry-grids/commit/744d4b23c9d2b77d605b5991e54a397df72e0688
 // github.com/csswizardry/inuit.css/issues/170#issuecomment-14859371

$use-markup-fix:        true!default;


 // Define your breakpoints. The first value is the prefix that shall be used for
 // your classes (e.g. `.small--one-half`), the second value is the media query
 // that the breakpoint fires at.

$breakpoints: (
    'small' '(max-width: 480px)',
    'lap' '(min-width: 481px) and (max-width: 1023px)',
    'port' '(max-width: 1023px)',
    'desk' '(min-width: 1024px)'
)!default;



// Define which namespaced breakpoints you would like to generate for each of
// widths, push and pull. This is handy if you only need pull on, say, desk, or
// you only need a new width breakpoint at mobile sizes. It allows you to only
// compile as much CSS as you need. All are turned on by default, but you can
// add and remove breakpoints at will.

// Push and pull shall only be used if `$push` and/or `$pull` and `$responsive`
// have been set to ‘true’.

$breakpoint-has-widths: ('small', 'lap', 'port', 'desk')!default;
$breakpoint-has-push:   ('small', 'lap', 'port', 'desk')!default;
$breakpoint-has-pull:   ('small', 'lap', 'port', 'desk')!default;



//Abstracting the largest and smallest breakpoints.

$sm-breakpoint:	nth($breakpoints, 1);
$lg-breakpoint: nth($breakpoints, length($breakpoints));

$smalls: nth($sm-breakpoint, 1);
$bigs: nth($lg-breakpoint, 1);


//------------------------------------
//		$SPACING AND ALIGNMENT
//------------------------------------

//Silent versions of these classes will always be output.
//These options control the output of the normal css classes.

$include-alignment-classes: 	false !default;
$include-spacing-classes: 		false !default;


//------------------------------------
//    $COLORS
//------------------------------------





