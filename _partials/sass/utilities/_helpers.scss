// ==========================================================================
//   Silent classes and mixins used for cleaning up and consolodating code
// ==========================================================================

//------------------------------------
//    $MEDIA QUERIES
//------------------------------------

//
// Enclose a block of code with a media query as named in `$breakpoints`.
// To create more consolodated code, most (if not all) media queries should be called through
// this mixin.
// Multiple media-queries can be defined by using:
// @include media-query((breakpoint, breakpoint)){
//         [Your code here]
// }

@mixin media-query($media-queries){
    $breakpoint-found: false;

    @each $media-query in $media-queries {

        @each $breakpoint in $breakpoints{
            $name: nth($breakpoint, 1);
            $declaration: nth($breakpoint, 2);

            @if $media-query == $name and $declaration{
                $breakpoint-found: true;

                @media only screen and #{$declaration}{
                    @content;
                }
            }
        }
    }

    @if $breakpoint-found == false{
        @warn "Breakpoint ‘#{$media-query}’ does not exist"
    }
}

//Same as above, but shorter
@mixin breakpoint($media-queries){
	@include media-query($media-queries){@content};
}
@mixin bp($media-queries){
	@include media-query($media-queries){@content};
}
@mixin media($media-queries){
	@include media-query($media-queries){@content};
}
@mixin mq($media-queries){
	@include media-query($media-queries){@content};
}


//------------------------------------
//    $MULTIPLE EXTENDS
//------------------------------------
//
// Eclose a list of extends with @includ add-style((border-box, extension, extension))
// Note the double paranthesis.
//
@mixin add-styles($items) {
    @each $item in $items {
        @extend %#{$item};
    }
}

//------------------------------------
//    $SIMPLE MIXINS
//------------------------------------

%border_box{
    box-sizing: border-box;
}
%display_block{
	display: block;
}

//
// Clear fix. Add @extend %clearfix or @extend %cf to any element that needs self-clearing.
//
%clearfix, %cf{
    *zoom: 1;
    &:before,&:after{
        display: table;
        content: " ";
    }
    &:after{
        clear: both;
        height: 0px;
        width: 0px;
    }
}

//Use an image instead of text, but keep the text in the DOM for
//screen readers.
//Particularly useful for logos. e.g.
// .logo{
//   @include %image-replace;
//   background: url(image/logo.png) no-repeat;
// }
%replace_image{
    white-space: nowrap;
    overflow: hidden;
    background-color: transparent;
    border: 0;
    *text-indent: -9999px;
}
%replace_image:before {
    content: "";
    @extend %display_block;
    width: 0;
    height: 150%;
}

//Hide Visually. Usefuly for Accessiblity.
//Used for text which describes a purely visual function.
// e.g. Adding 'Current page' to the current nav item (which is usually indicated by something visual.
%hide_visually {
  border: 0;
  clip: rect(0 0 0 0);
  height: 1px;
  margin: -1px;
  overflow: hidden;
  padding: 0;
  position: absolute;
  width: 1px;
}

// Font family declaration.
// Allows for cleaner, consolodated code.
%type_family{
    font-family: $primary-font-stack;
}
%secondary_type_family{
    font-family: $secondary-font-stack;
}

//Optimized rendering. Best saved for areas where legibility is a concern.
//Not declaring this will result in auto, allowing the browser to determine
//whether speed is best.
%text_legibility{
	text-rendering: optimizeLegibility;
}

// Create vertical rhythms that are more appropriate for headings inside text blocks.
// Adds 2/3 of the vertical rhythm to the top and 1/3 to bottom so headings appear
// closer to their sibling paragraphs. Creates better proximity.
%vertical_rhythm_headings{
    padding: 0;
    margin-bottom: $type-magic-number * .5;
    margin-bottom: ($type-magic-ratio * .5) * 1rem;
    margin-top: $type-magic-number * -.25;
    margin-top: ($type-magic-ratio * -.25) * 1rem;
}

.link_naked, %link_naked{
    color: inherit;
    text-decoration: none;

    &:hover, &:focus{
        color: inherit;
        text-decoration: none;
    }
}
%naked_link{
	@extend %link_naked;
}


//------------------------------------
//    $RESPONSIVE MIXINS
//------------------------------------
//Mixin to used for media-query-scoped extends.
//e.g.: @extend %media_block or @include %small--media_block;

@mixin responsive-helpers($namespace:""){

    //Media block.
    // Taken from: http://www.stubbornella.org/content/2010/06/25/the-media-object-saves-hundreds-of-lines-of-code/
    // Used for floating an image of any dimension to the left of a flexible-width object that will not wrap.

    %#{$namespace}media_block{
		zoom: 1;
        & .img, .media{
            float:left;
            word-break: break-word;
            display: inline-block;
            margin-right: $gutter;
        }
        & .img ~ *, & .media_body{
            overflow: hidden;
        }
    }
    //
    // Font family, normal, italic and bold silent classes/extensions.
    // Use these for DRYer CSS output.
    //

    %#{$namespace}type_normal{
        font-weight: 400;
    }
    %#{$namespace}type_italic{
        font-style: italic;
    }
    %#{$namespace}type_bold{
        font-weight: 800;
        -webkit-font-smoothing: antialiased;
    }
    %#{$namespace}naked_list{
        @include no-bullets;
    }
	%#{$namespace}show     { display: block !important; }
  	%#{$namespace}hide     { display: none !important; }

}


//Making the above mixins responsive.

@include responsive-helpers();

@if $responsive == true{
    @each $name in $breakpoint-has-widths {
        @include media-query($name) {
           @include responsive-helpers('#{$name}_');
        }
    }
}

