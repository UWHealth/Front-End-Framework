/* SG
# Grid System/Mixins [[dev]]

##### `@grid-setup()`
###### mixin(`$silent:` `$$grid-silent-classes`)
Creates basic grid classes (listed below), called by `@grid-init()`.

_Note: `[% || .]` denotes a class that is either silent(`%`) or standard CSS(`.`). Based on the `$$grid-silent-classes` setting._

* ###### `%grid_reset`
 Useful for resetting the grid's effects without making full grid items.

* ###### `[% || .]grid`
 Wrapper class for grid widths. Puts a negative left margin of one unit. When not using floats, adds appropriate letter-spacing (for inline-block-based grid).

* ###### `[% || .]grid_item`
 Sets up a grid column. Uses column padding inherited from parent `%/.grid`.

* ###### `[% || .]grid_rev`
 Makes grid columns start from the right.

* ###### `[% || .]grid_right`
 Makes all grid columns align to the right.

* ###### `[% || .]grid_center`
 Makes all grid columns align to the center.

* ###### `[% || .]grid_middle`
 Makes all grid columns vertical align to the middle.

* ###### `[% || .]grid_bottom`
 Makes all grid columns vertical align to the bottom.

* ###### `[% || .]grid_full`
 Eliminates padding between grid columns.

* ###### `[% || .]grid_narrow`
 Reduces the padding between grid columns.

* ###### `[% || .]grid_wide`
 Increases the padding between grid columns.

*/


@mixin grid-setup($silent: $grid-silent-classes) {

    $class-type: if($silent, "%", ".");

	%grid_reset {
		letter-spacing: normal;
		word-spacing: normal;
	}

	//*------------------------------------
	//    $GRID SETUP
	//*------------------------------------

	#{$class-type}grid {
	    @include grid-row();
	}

	#{$class-type}grid_item {
        @include grid-item($grid-columns);
	}

	// Special class for grid items that need to behave like both grids and grid__items.
	#{$class-type}grid_reset_item {
        @include grid-item($grid-columns);
	    @extend #{$class-type}grid;
	}

	//
	// Reversed grids allow you to structure your source in the opposite order to
	// how your rendered layout will appear. Extends `.grid`.
	//
	#{$class-type}grid_rev,
    #{$class-type}grid_reverse{
	    @if $grid-floats {
	        @extend %clearfix;

            > #{$class-type}grid_item{
	            float: right;
	        }
	    }
	    @if $grid-inline-block or
            $grid-flex
        {
	        direction: rtl;
	        text-align: left;

	        > #{$class-type}grid_item{
	            direction: ltr;
	            text-align: left;
	        }
	    }
	}


	//
	// Align the entire grid to the right. Extends `.grid`.
	//
	#{$class-type}grid_right {
	    @if $grid-inline-block {
	        text-align: right;

	        > #{$class-type}grid_item {
	            text-align: left;
	        }
	    }
        @if $grid-flex {
	        justify-content: flex-end;
	    }
	}
    //
	// Centered grids align grid items centrally without needing to use push or pull
	// classes. Extends `.grid`.
    //
	#{$class-type}grid_center{

        @if $grid-flex {
	        justify-content: center;
	    }

        @if $grid-inline-block {
            text-align: center;

            > #{$class-type}grid_item {
                text-align: left;
            }
        }
	}
    //
    //
	// Align grid cells vertically (`.grid--middle` or `.grid--bottom`). Extends
	// `.grid`.
	//
	#{$class-type}grid_middle {

	    > #{$class-type}grid_item {
            @if $grid-flex {
                align-self: center;
            }
	        vertical-align: middle;
	    }
	}

	#{$class-type}grid_bottom{

	    > #{$class-type}grid_item {
            @if $grid-flex {
                align-self: flex-end;
            }
	        vertical-align: bottom;
	    }
	}


	//
	// Gutterless grids have all the properties of regular grids, minus any spacing.
	// Extends `.grid`.
	//
	#{$class-type}grid_full{
	    margin-left: 0;

	    > #{$class-type}grid_item {
	        padding-left: 0;
	    }
	}


	//
	// Create grids with narrower gutters. Extends `.grid`.
	//
	#{$class-type}grid_narrow {
	    @include type-space(margin-left, -.5, $unit: $grid-gutter);

		> #{$class-type}grid_item {
	        @include type-space(padding-left, .5, $unit: $grid-gutter);
	    }
	}


	//
	// Create grids with wider gutters. Extends `.grid`.
	//
	#{$class-type}grid_wide {
	    @include type-space(margin-left, -2, $unit: $grid-gutter);

		> #{$class-type}grid_item {
	        @include type-space(padding-left, 2, $unit: $grid-gutter);
	    }
	}

    //
    // Cause layout items to take up a non-explicit amount of width.
    //
    #{$class-type}grid_auto {

        @if $grid-inline-block {
            text-align: justify;

            &:after {
                content: " ";
            	display: inline-block;
            	width: 100%;
            	height: 1px;
            }
        }

        & > #{$class-type}grid_item,
        #{$class-type}grid_item_auto {
            width: auto;

            @if $grid-inline-block {
                text-align: left;
            }

            @if $grid-flex {
                flex-grow: 1;
                flex-basis: auto;
            }
        }
    }
}


/* SG
# Grid System/Mixins [[dev]]

##### `@grid-row()`
###### mixin()
Creates a grid container (row) based on your grid configuration.
@requires `@type-space()`

##### `@grid-item()`
###### mixin(`$columns: $grid-columns`)
Creates a grid item (column) based on your grid configuration set to a width based on the `$columns` passed in.
@requires `@type-space()`, `@grid-width()`
*/

$grid-columns:           12      !default;
$grid-gutter:            32px    !default;
$grid-silent-classes:	 false   !default;
$grid-push:              true    !default;
$grid-pull:              true    !default;
$grid-floats:            false   !default;
$grid-flex:              true    !default;
$grid-inline-block:      true    !default;
$grid-markup-fix:        false   !default;
$grid-letter-space-fix:  -0.45em !default;

$breakpoint-has-widths: map-keys($breakpoints) !default;
$breakpoint-has-push:   map-keys($breakpoints) !default;
$breakpoint-has-pull:   map-keys($breakpoints) !default;

@mixin grid-row() {
    // 1. Allow the grid system to be used on lists.
    // 2. Remove any margins and paddings that might affect the grid system.
    // 3. Apply a negative `margin-left` to negate the columnsâ€™ gutters.

    list-style: none;                // [1]
    margin: 0;                       // [2]
    padding: 0;                      // [2]
    @include type-space(margin-left, -1, $unit:$grid-gutter);

    @if $grid-inline-block {
        letter-spacing: $grid-letter-space-fix;

        // Opera hack
        .opera:-o-prefocus,
        & {
            word-spacing: $grid-letter-space-fix;
        }
    }

    @if $grid-flex {
        display: flex;
        flex-wrap: wrap;
    }

    @if $grid-floats {
        @extend %clearfix;
    }
}


@mixin grid-item($columns: $grid-columns) {
    // 1. Space columns apart.
    // 2. Cause columns to stack side-by-side.
    // 3. Align columns to the tops of each other.
    // 4. Required to combine fluid widths and fixed gutters.

    @include type-space(padding-left, 1, $unit:$grid-gutter); // [1]
    width: 100%;
    min-height: 1px;

    @if $grid-inline-block {
        display: inline-block;            // [2]
        vertical-align: top;              // [3]

        @if $grid-markup-fix != true {    // [5]
            letter-spacing: normal;
            word-spacing: normal;
        }
    }

    @if $grid-floats {
        float: left;                     // [2]
    }

    @if $grid-flex {
        flex: 0 0 #{percentage($columns/$grid-columns)};

        //Forces flex grid to behave like inline-block
        @if $grid-inline-block != true {
            flex-grow: 1;
        }
    }

    @include grid-width($columns, $grid-columns);
}


/* SG
##### `@grid-init()`
###### mixin(`$silent:` `$$grid-silent-classes`, `$important:false`)
Creates responsive grid classes by running through all the grid-setup mixins. Uses the media-queries defined in the `$breakpoint-has-` variables to create media-query-scoped classes.
@requires `@grid-classes()`, `@width-classes()`, `@push-classes()`, `@pull-classes()`

*/

@mixin grid-init($silent: $grid-silent-classes, $important: false) {

    @if ($grid-inline-block == false and $grid-floats == false and $grid-flex == false) {
        @warn 'No grid type selected. Please make sure to set grid-inline-block, -floats, or -flex to true.'
    }

    @include grid-classes($silent);

    @include width-classes($silent, $important);

	@if $grid-push {
        @include push-classes($silent, $important);
	}

	@if $grid-pull {
        @include pull-classes($silent, $important);
	}
}


/* SG
##### `@grid-classes()`
###### mixin(`$silent:` `$$grid-silent-classes`)
Runs `@grid-setup()`.
@requires `@grid-setup()`

##### `@width-classes()`
###### mixin(`$silent:` `$$grid-silent-classes`, `$important: false`)
Runs `@width-setup()`, looping across all breakpoints in `$$breakpoint-has-widths`. Creates classes with `width` property values (`flex-basis` and `max-width` for flex-based grids) based on the grid.
@requires `@media-query()`, `@width-setup()`

##### `@push-classes()`
###### mixin(`$silent:` `$$grid-silent-classes`, `$important: false`)
Runs `@width-setup()`, looping across all breakpoints in `$$breakpoint-has-push`. Creates classes with `push_` and `left` property values based on the grid.
@requires `@media-query()`, `@width-setup()`

##### `@pull-classes()`
###### mixin(`$silent:` `$$grid-silent-classes`, `$important: false`)
Runs `@pull-setup()`, looping across all breakpoints in `$$breakpoint-has-pull`. Creates classes with `pull_` and `right` property values based on the grid.
@requires `@media-query()`, `@width-setup()`

*/

@mixin grid-classes($silent: $grid-silent-classes) {
    @include grid-setup($silent);
}

@mixin width-classes($silent: $grid-silent-classes, $important: false) {
    //Include flex-basis (and max-width) for flex-box grids

    $column-props: if($grid-flex, ("width" "max-width" "flex-basis"), "width");

    @include width-setup("", $silent, $column-props, $important);

	// Our responsive classes, if we have enabled them.
    @each $name in $breakpoint-has-widths {
        @include media-query($name) {
           @include width-setup("#{$name}_", $silent, $column-props, $important);
        }
    }
}

@mixin push-classes($silent: $grid-silent-classes, $important: false) {
    @include width-setup("push_", $silent, "left");

    @each $name in $breakpoint-has-push {
        @include media-query($name) {
           @include width-setup("#{$name}_push_", $silent, "left", $important);
        }
    }
}

@mixin pull-classes($silent: $grid-silent-classes, $important: false) {

    @include width-setup("pull_", $silent, "right", $important);

    @each $name in $breakpoint-has-pull {
        @include media-query($name) {
           @include width-setup("#{$name}_pull_", $silent, "right", $important);
        }
    }
}
