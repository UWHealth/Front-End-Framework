/* SG
# Grid System/Mixins [[dev]]

@file globals/tools/_t-grid-system.scss

##### `@silent-relative()`
###### mixin()
Allows for conditional `position: relative` for silent push or pull classes.

*/

//
// Drop relative positioning into silent classes which can’t take advantage of
// the `[class*="push--"]` and `[class*="pull--"]` selectors.
//
@mixin silent-relative($silent: true){
    @if $silent == true {
        position: relative;
    }
}

/* SG
# Grid System/Mixins [[dev]]

##### `@grid-setup()`
###### mixin(`$silent:` `$$grid-silent-classes`)
Creates basic grid classes (listed below), called by `@grid-init()`.

_Note: `[% || .]` denotes a class that is either silent(`%`) or standard CSS(`.`). Based on the `$$grid-silent-classes` setting._

* ###### `%grid_reset`
 Useful for resetting the grid's effects without making full grid items.

* ###### `[% || .]grid`
 Wrapper class for grid widths. Puts a negative left margin of one unit. When not using floats, adds appropriate letter-spacing (for inline-block-based grid).

* ###### `[% || .]grid_item`
 Sets up a grid column. Uses column padding inherited from parent `%/.grid`.

* ###### `[% || .]grid_rev`
 Makes grid columns start from the right.

* ###### `[% || .]grid_right`
 Makes all grid columns align to the right.

* ###### `[% || .]grid_center`
 Makes all grid columns align to the center.

* ###### `[% || .]grid_middle`
 Makes all grid columns vertical align to the middle.

* ###### `[% || .]grid_bottom`
 Makes all grid columns vertical align to the bottom.

* ###### `[% || .]grid_full`
 Eliminates padding between grid columns.

* ###### `[% || .]grid_narrow`
 Reduces the padding between grid columns.

* ###### `[% || .]grid_wide`
 Increases the padding between grid columns.

*/


@mixin grid-setup($silent: $grid-silent-classes) {

    $class-type: if($silent, "%", ".");

	%grid_reset {
		letter-spacing: normal;
		word-spacing: normal;
	}

	//*------------------------------------
	//    $GRID SETUP
	//*------------------------------------
	 // 1. Allow the grid system to be used on lists.
	 // 2. Remove any margins and paddings that might affect the grid system.
	 // 3. Apply a negative `margin-left` to negate the columns’ gutters.
	 //
	#{$class-type}grid {
	    list-style: none;                // [1]
	    margin: 0;                       // [2]
	    padding: 0;                      // [2]
	    @include type-space(margin-left, -1, $unit: $grid-gutter);

		@if (
            $grid-markup-fix != true
            and $grid-floats != true
        ) {
	        letter-spacing: $grid-letter-space-fix;
	    }

		@if $grid-floats {
	        @extend %clearfix;
	    }
	}

	@if (
        $grid-markup-fix != true
        and $grid-floats != true
    ) {
	    // Opera hack
	    .opera:-o-prefocus,
	    #{$class-type}grid{
	        word-spacing: $grid-letter-space-fix;
	    }
	}

	// 1. Cause columns to stack side-by-side.
	// 2. Space columns apart.
	// 3. Align columns to the tops of each other.
	// 4. Full-width unless told to behave otherwise.
	// 5. Required to combine fluid widths and fixed gutters.
	//
	#{$class-type}grid_item {
	    @if $grid-floats != true {
	        display: inline-block;             // [1]
	    }@else {
	        display: block;
	        float: left;
	    }
	    @include type-space(padding-left, 1, $unit: $grid-gutter); // [2]
	    vertical-align: top;                  // [3]

		@if $mobile-first {
	        width: 100%;                      // [4]
	    }

	    @if (
            $grid-markup-fix != true and
            $grid-floats != true
        ) {                                     //[5]
	        letter-spacing: normal;
	        word-spacing: normal;
	    }
	}

	// Special class for grid items that need to behave like both grids and grid__items.
	#{$class-type}grid_reset_item {
	    @extend #{$class-type}grid;
	    @extend #{$class-type}grid_item;
	    padding-left: 0;
	    margin-left: 0;
	}

	//
	// Reversed grids allow you to structure your source in the opposite order to
	// how your rendered layout will appear. Extends `.grid`.
	//
	#{$class-type}grid_rev,
    #{$class-type}grid_reverse{
	    @if $grid-floats {
	        @extend %clearfix;
	    }
	    @if $grid-floats != true {
	        direction: rtl;
	        text-align: left;

	        > #{$class-type}grid_item{
	            direction: ltr;
	            text-align: left;
	        }
	    }
        @else {
	        > #{$class-type}grid_item{
	            float: right;
	            text-align: left;
	        }
	    }
	}


	//
	// Align the entire grid to the right. Extends `.grid`.
	//
	#{$class-type}grid_right{
	    @if $grid-floats != true {
	        text-align:right;

	        > #{$class-type}grid_item {
	            text-align: left;
	        }
	    }
        @else {
	        float: right;
	        @extend %clearfix;

	        > #{$class-type}grid_item {
	               float: right;
	        }
	    }
	}

	@if $grid-floats != true {
        //
    	// Centered grids align grid items centrally without needing to use push or pull
    	// classes. Extends `.grid`.
        //
    	#{$class-type}grid_center{
            text-align: center;

            > #{$class-type}grid_item {
                text-align: left;
            }
    	}
        //
        //
    	// Align grid cells vertically (`.grid--middle` or `.grid--bottom`). Extends
    	// `.grid`.
    	//
    	#{$class-type}grid_middle{

    	    > #{$class-type}grid_item {
    	        vertical-align: middle;
    	    }
    	}

    	#{$class-type}grid_bottom{

    	    > #{$class-type}grid_item {
    	        vertical-align: bottom;
    	    }
    	}
    }


	//
	// Gutterless grids have all the properties of regular grids, minus any spacing.
	// Extends `.grid`.
	//
	#{$class-type}grid_full{
	    margin-left: 0;

		@if $grid-floats {
	        @extend %clearfix;
	    }

	    > #{$class-type}grid_item {
	        padding-left:0;
	    }
	}


	//
	// Create grids with narrower gutters. Extends `.grid`.
	//
	#{$class-type}grid_narrow {
	    @include type-space(margin-left, -.5, $unit: $grid-gutter);

		> #{$class-type}grid_item {
	        @include type-space(padding-left, .5, $unit: $grid-gutter);
	    }
	}


	//
	// Create grids with wider gutters. Extends `.grid`.
	//
	#{$class-type}grid_wide {
	    @include type-space(margin-left, -2, $unit: $grid-gutter);

		> #{$class-type}grid_item {
	        @include type-space(padding-left, 2, $unit: $grid-gutter);
	    }
	}

    //
    // Cause layout items to take up a non-explicit amount of width.
    //
    #{$class-type}grid_auto {

        > #{$class-type}grid_item {
            width: auto;
        }
    }
}



/* SG
# Grid System/Mixins [[dev]]

##### `@grid-init()`
###### mixin(`$silent:` `$$grid-silent-classes`, `$responsive`)
Creates responsive grid classes by running through all the grid-setup mixins. Uses the media-queries defined in the `$breakpoint-has-` variables to create media-query-scoped classes.
@requires `@media-query()`, `@grid-setup()`, `@width-setup()`, `$$breakpoints-has-push`, `$$breakpoint-has-pull`

*/

@mixin grid-init($silent: $grid-silent-classes) {

	@include grid-setup($silent);

	@include width-setup("", $silent);

	// Our responsive classes, if we have enabled them.

    @each $name in $breakpoint-has-widths {
        @include media-query($name) {
           @include width-setup("#{$name}_", $silent);
        }
    }


	@if $grid-push {

	    @include width-setup("push_", "push", $silent);


        @each $name in $breakpoint-has-push {
            @include media-query($name) {
               @include width-setup("#{$name}_push_", $silent, "push");
            }
        }

	}

	@if $grid-pull {

        @if $silent != true {
            [class*="pull_"]{ position: relative; }
        }

	    @include width-setup("pull_","pull",$silent);


        @each $name in $breakpoint-has-pull {
            @include media-query($name) {
               @include width-setup("#{$name}_pull_", $silent, "pull");
            }
        }

	}
}
