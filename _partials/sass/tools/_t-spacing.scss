//------------------------------------
//      $SPACING TOOLS
//------------------------------------

/* SG
# Tools/Spacing Utilities [[dev]]

@file tools/_t-spacing.scss

##### `layout-type()`
###### function(`$space-type:''`, `$space-direction:''`)
Parse strings to determine spacing types. Checks for certain characters within a string to determine whether to output padding or margin, followed by a direction. Private function used by `@spacing-utilities()`.


##### `@spacing-utilities()`
###### mixin(`$namespace:''`, `$config:()`)
Generates responsive spacing and padding classes. The `$namespace` argument is the media query's name, which will be appended to all generated classes. The `$config` argument is a map that allows JS-style arguments. Outputs class name as: `breakpoint_prefix_direction_amount`.

**`$config` Keys:**
* `silent:` boolean for outputting silent/non-silent classes.
* `important:` whether to output !important after each declaration.
* `directions:` names that get appended to class names.
* `amounts:` how much to multiply spacing unit by `$$base-line-height`.
* `names:` corresponding names for each `amounts` that gets appended to class names.
* `prefixes:` first word in the class name. Must contain the words 'pad' and 'space'. Used by `layout-type()` to determine padding or margin.


##### `@spacing-utilities-init()`
###### mixin(`$breakpoints:` `$$all-breakpoints`, `$namespace:''`, `$config:(silent:true)`)
The responsive component to `@spacing-utilities()`. Invoke `@spacing-utilites()` with that loops through a set of media-queries defined in `$$breakpoints`. This is most useful for creating responsive spacing classes.

*/


//Parse strings to determine spacing types
// Checks for certain characters within a string to determine
// whether to output padding or margin, followed by a direction.
// e.g.: Takes 'space' and '_t' and returns 'margin-top'

@function layout-type($space-type:'', $space-direction: ''){
	@if str-contains($space-type, 'm')
	or str-contains($space-type, 'spa') {
		$space-type: 'margin';
	}
    @else if str-contains($space-type, 'pad')
	or str-contains($space-type, 'p') {
		$space-type: 'padding';
	}

	@if str-contains($space-direction, 't') {
		$space-direction: '-top';
	}
    @else if str-contains($space-direction, 'r') {
		$space-direction: '-right';
	}
    @else if str-contains($space-direction, 'b') {
		$space-direction: '-bottom';
	}
    @else if str-contains($space-direction, 'l') {
		$space-direction: '-left';
	};

	$return-value: $space-type+$space-direction;

	@return $return-value;
}


//Spacing utility classes
//Generates responsive spacing and padding classes
// The first argument is the media query's name, which will be appended to all generated classes.
// The second argument is a map. This allows JS-style arguments.

@mixin spacing-utilities ($namespace:"", $config: ()){

	//Merge the passed map with some default values
	$config: map-extend((
		silent: true,
		important: false,
		directions: (
			'','t','b','l','r','v','h'
		),
		amounts: (
			1, .25, .5, 2, -.25, -.5, -1, -2, 0, 0
		),
		names: (
			'', 'quarter', 'half', '2', 'neg_quarter', 'neg_half', 'neg', 'neg_2', '0', 'n'
		),
		prefixes: (
			'pad', 'space'
		)
	), $config, true);


	//Convert map values to variables for simpler parsing
	$classtype: if(map-get($config, silent), unquote('%'),unquote("."));
	$spaces: map-get($config, prefixes);
	$directions: map-get($config, directions);
	$amounts: map-get($config, amounts);
	$names: map-get($config, names);
	$important: map-get($config, important);
	$important-string: if($important, '!important', null);
	$class-name-list: ();


	//Loop through base names, then amounts, then directions.
	@each $space in $spaces {
		@for $i from 1 through length($amounts) { //Using a for loop so we can have duplicate values
			$amount: nth($amounts, $i);
			$current_name: nth($names, $i);
			$amount_name: '';

			//Prepend an underscore to amount names(if not blank) for formatting.
			@if $current_name != '' {
				$amount_name: '_' + $current_name;
			}

			@each $direction in $directions {
				//Prepend an underscore to direction names(if not blank) for formatting.
				@if $direction != '' {
					$direction: '_'+$direction;
				}
				//Using function above, determine if padding or margin.
				$layout_type: layout-type($space, $direction);

				//Output the space name.
				//(e.g.: %desk_pad_t_half )
				@if not (str-contains($layout_type, 'padding') and ($amount < 0)) {
					//Don't do anything if the padding is a negative value.
					#{$classtype}#{$namespace}#{$space}#{$direction}#{$amount_name} {
						//For vertical and horizontal directions,
						// just extend previously defined directions
						@if str-contains($direction, 'v') {
							@extend #{$classtype}#{$namespace}#{$space}_t#{$amount_name};
							@extend #{$classtype}#{$namespace}#{$space}_b#{$amount_name};

						}
                        @else if str-contains($direction, 'h') {
							@extend #{$classtype}#{$namespace}#{$space}_r#{$amount_name};
							@extend #{$classtype}#{$namespace}#{$space}_l#{$amount_name};
						}
                        @else {
							@if $amount == 0 {
								//For 0 amounts, just output a 0
								#{$layout_type}:0 #{$important-string};
							}
                            @else {
								//Using type-space mixin, output the REM-based value
								@include type-space($layout_type, $amount, $important);
							}
						}
					}

					$class-name: #{$classtype}#{$namespace}#{$space}#{$direction}#{$amount_name};
					$class-name-list: map-merge($class-name-list, ($class-name: $amount));
				}
			}
		}
	}

	//Register silent classes for debugging.
	@if map-get($config, silent) {
		$silent-class-registry: silents-register($class-name-list, 'spacing') !global;
	}
}

@mixin spacing-utilities-init(
	$breakpoints: $all-breakpoints,
	$namespace: '',
	$config: (silent: true)
){

	@include spacing-utilities($namespace, $config);

	@if $responsive {
	    @each $name in $breakpoints {

	        @include media-query($name) {

				$name: $namespace+$name;
	        	@include spacing-utilities('#{$name}_', $config);

			}
	    }
	}
}
