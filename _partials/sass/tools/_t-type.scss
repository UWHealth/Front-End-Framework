//------------------------------------
//      $TYPE
//------------------------------------

/* SG
# Tools/Type Utilities [[dev]]

@file tools/_t-type.scss

##### `@type-utilities()`
###### mixin(`$namespace:''`, `$silent: true`, `$important: false)`
A set of typography-based utility classes that can be generated within media-queries via the `$namespace` argument. Can output silent or real css classes. Can also make declarations `!important`.

##### `@type-utilities-init()`
###### mixin(`$breakpoints`:`$$all-breakpoints`, `$namespace:''`, `$silent: true`, `$important: false`)
The responsive component to `@type-utilities()`. Invoke `@type-utilites()` with that loops through a set of media-queries defined in `$$breakpoints`. This is most useful for creating responsive typography-based utility classes.

*/


@mixin type-utilities(
	$namespace:"",
	$silent: true,
	$important: false
){
	$classtype: if($silent, unquote('%'), unquote("."));

	$important_str: if($important, ' !important', '');

	#{$classtype}#{$namespace}txt_normal {
		font-weight: 400 #{$important_str};
	}
	#{$classtype}#{$namespace}txt_italic{
		font-style: italic #{$important_str};
	}
	#{$classtype}#{$namespace}txt_bold {
		font-weight: 700 #{$important_str};
		-webkit-font-smoothing: antialiased;
	}
	#{$classtype}#{$namespace}txt_upper {
		text-transform: uppercase #{$important_str};
		letter-spacing: .1em #{$important_str};
	}
	#{$classtype}#{$namespace}txt_capital {
		text-transform: capitalize #{$important_str};
	}
	#{$classtype}#{$namespace}txt_lower {
		text-transform: none #{$important_str};
		letter-spacing: 0 #{$important_str};
	}
	#{$classtype}#{$namespace}txt_small {
		@include type-font-size($type-small-size, $small-lh);
	}
	#{$classtype}#{$namespace}txt_space_reset {
		letter-spacing: normal #{$important_str};
		word-spacing: normal #{$important_str};
	}
	#{$classtype}#{$namespace}txt_primary {
		font-family: $primary-font-stack;
	}
	#{$classtype}#{$namespace}txt_secondary {
		font-family: $secondary-font-stack;
	}
}

@mixin type-utilities-init(
	$breakpoints: $all-breakpoints,
	$namespace: '',
	$silent: true,
	$important: false
){
	@include type-utilities($namespace, $silent, $important);

    @each $name in $breakpoints {

        @include media-query($name) {

			$name: $namespace+$name;
        	@include type-utilities('#{$name}_', $silent, $important);

		}
    }

}


/* SG
# Mixins/Typography [[dev]]

##### `@px-to-rems()`
###### mixin(`$property`, `$sizes`, `$important`: `false`, `$base-font`: `$$base-font-size`)
Takes a pixel value and creates a property with a `rem` value. If `$$rem-px-fallback` is `true`, a pixel fallback is also included. `$sizes` also accepts 'auto'.
@alias `@rems()`
@requires `px-to-rems()`

*/

// REM generator
// Used to create a property with a rem value and PX fallback
@mixin px-to-rems($property, $sizes, $important: false, $base-font: $base-font-size) {
	$important_val: if($important, ' !important', '');
	$rem-sizes: ();
	$px-sizes: ();
    $is-zero: true;

	//Loop through sizes, combining them into single lists
	@each $size in $sizes {
		@if $size == '' or $size == null {
			$size: null;
			$px-sizes: join($px-sizes, $size, space);
		}
		@else if $size == "auto" or $size == "normal" {
			$px-sizes: join($px-sizes, $size, space);
		}
        @else {
			@if $size == 0px {
				$size: 0; //optimization
			}
            @else {
                $is-zero: false;
            }

			$px-sizes: join($px-sizes, $size, space);
			$size: if($size, px-to-rems($size, $base-font), '');
		}

		$rem-sizes: join($rem-sizes, $size, space);
	}

    @if $is-zero == false and $rem-px-fallback {
		#{$property}:#{$px-sizes}#{$important_val};
    }

    #{$property}:#{$rem-sizes}#{$important_val};

}

//ALIAS: same as above
@mixin rems($property, $sizes, $important:false, $base-font:$base-font-size){
	@include px-to-rems($property, $sizes, $important, $base-font);
}


/* SG

##### `@type-font-size()`
###### mixin(`$font-size, $line-height: auto, $font-base:``$$base-font-size`)
Quickly generate a font-size in rems, with a pixel fallback, based on the value we pass into the mixin. Optionally calculates line-height using `$$base-line-height`.

_`$line-height` also accepts a pixel value and will be converted to a unitless one._

@alias `@font-size()`
@requires `@px-to-rems()`, `cache()`, `baseline-calc()`

*/

@mixin type-font-size (
		$font-size,
		$line-height: "auto",
		$font-base: $base-font-size,
        $important: false
) {
	//Create REM-based font-size
	@include px-to-rems("font-size", $font-size);

	@if $line-height == true or $line-height == "auto" {

		$line-height: cache(baseline-calc, $font-size, $font-base);
		line-height: $line-height;

	}
	@else if type-of($line-height) == "number" {

		//Convert to unitless
		@if not unitless($line-height) {
			@if unit($line-height) == "px" {
				$line-height: $line-height / $font-size;
			}@else {
				@warn "Line-height for #{$font-size} must be unitless or in pixel values";
			}
		}

		line-height: $line-height;

	}
	@else if $line-height == "inherit" or $line-height == "normal" {
		line-height: $line-height;
	}
}
//Alias
@mixin font-size($font-size, $line-height:true, $font-base: $base-font-size, $important: false){
	@include type-font-size($font-size, $line-height, $font-base, $important);
}


/* SG

##### `@type-space()`
###### mixin(`$properties, $multipliers, $important: false`)
Output REM values using the typographic grid. This is the prefered method of adding padding and margins because it enforces consistent spacing around all elements.

**Arguments:**
* `$properties`: Can be any `CSS` property that accepts a length value (e.g. `rem`). Also accepts multiple properties as a nested list (e.g. `(padding-left, padding-right)`).
* `$multipliers`: Accepts unitless values that get converted to `rem` units which are a multiple of the typographic grid. Can be multiple values, **separated by spaces**, in the case of `margin` or `padding`.
* `$important`: Accepts `true` or `!important`.

**Example**
```scss
// SCSS input
.foo {
	@include type-space(padding, 1 .25 .5 auto, '!important');
}

// CSS output
.foo {
	padding: 24px 8px 12px auto !important;
	padding: 1.5rem .375rem .75rem auto !important;
}
```

@requires `@px-to-rems()`, `str-contains()`
@alias `@space()`

*/

@mixin type-space(
	$properties,
	$multipliers,
	$important: false,
	$unit: "auto"
) {

    $multiplier: nth($multipliers, 1);
    $m-length: length($multipliers);
    $important: if($important, true, false); //Allow for strings, convert to boolean

    @each $property in $properties {
    	$values: null;
    	$multiple-index: 1;

    	@each $multiple in $multipliers {

			@if $multiple == 'auto' {
				$values: append($values, 'auto');
	    		$multiple-index: $multiple-index + 1;
			}
			@else {
                $value: $unit;

                @if $unit == "auto" {
                    $value: $vertical-space;

    	    		//If value is the second or fourth value in a list,
    	    		// or is a left, right, or width value,
    	            // multiply by the $horizontal-space
    	    		@if ($multiple-index % 2 == 0) or
    	    		(
    	    			str-contains($property, 'right') or
    	    			str-contains($property, 'left') or
    	    			str-contains($property, 'width')
    	    		) {
    	    			$value: $horizontal-space;
    	    		}
                }

                $value: $value * $multiple;
	    		$values: append($values, $value);
	    		$multiple-index: $multiple-index + 1;
			}
    	}

        @include px-to-rems($property, $values, $important);

    }
}

//Alias
@mixin space($properties,$multipliers,$important:false,$unit:$vertical-space) {
	@include type-space($properties, $multipliers, $important, $unit);
}

// Style any number of headings in one fell swoop, e.g.:
//
//	@include headings(1, 3){color:#BADA55;}
//
//	outputs:
//	h1, h2, h3 {color:#BADA55;}
//
// Lifted from inuit.css:
// github.com/csswizardry/inuit.css/generic/_mixins.scss

$headings-use: 0 !global;

@mixin headings($from: 1, $to: 6, $class-type: null) {
	//Used for multiple calls to this mixin.
	// Ensures no double extends.
	$headings-use: $headings-use + 1 !global;

	%base-headings#{$headings-use} {
		@content;
	}

	@if $from >= 1 and $to <= 6{

		@for $i from $from through $to {
			$selector: '#{$class-type}h#{$i}';
			#{$selector} {
				@extend %base-headings#{$headings-use};
			}
		}
	}
	@else {
		@warn "You need to supply numbers between 1 and 6 for headings mixin to work";
	}
}
