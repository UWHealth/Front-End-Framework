/* SG
# Variables/Globals [[dev]]

The variables here are created based on the config variables passed by the user. These are generally abstracted to make them a little easier to parse, programmatically.

##### `$$type-[h1-6,p,small]-lh`
###### boolean/unitless/pixel value
Parses `$$type-h[#]-size` for an optional line-height value, if none exists, pass it along to `baseline-calc()`.
@alias `$$h[#]-lh`

##### `$$type-[h1-6,p,small]-size`
###### Number (pixel)
Font sizes, as defined by the user or `$$auto-scale-type`.

##### `$$type-base-unit`
###### Number
Abstraction of the base spacing unit used in any mixin or function that defines spacing units.

##### `$$type-base-ratio`
###### Number
Ratio used to calculate the difference between font sizes and spacing units.

##### `$$type-headings`
###### List (number)
Used for defining automatic headings functions.

##### `$$type-modular-scale`
###### Number
Abstracts the `$$scale-ratio` and makes sure it's a positive number.

##### `$$all-breakpoints`
###### List
Stores all the names defined in `$$breakpoints` for use in abstract framework components so that if names are chagned, boilerplate media queries won't fail.

##### `$$breakpoint-smallest`
###### String
Grabs the first `$$breakpoints` name.

##### `$$breakpoint-largest`
###### String
Grabs the last `$$breakpoints` name.


*/


// Heading sizes (if you'd rather set them yourself, set $auto-scale-type to false).
@if $auto-scale-type {
    $type-h1-size:          modular-scale(7);
    $type-h2-size:          modular-scale(5);
    $type-h3-size:          modular-scale(4);
    $type-h4-size:          modular-scale(3);
    $type-h5-size:          modular-scale(2);
    $type-h6-size:			modular-scale(1);
    $type-small-size:		modular-scale(-1);
}

//Check for existence of line-height override, and store it
$type-h1-lh: 					if(length($type-h1-size) > 1, nth($type-h1-size, 2),
    baseline-calc(nth($type-h1-size,1)));
$h1-lh: $type-h1-lh; //alias

$type-h2-lh: 					if(length($type-h2-size) > 1, nth($type-h2-size, 2),
    baseline-calc(nth($type-h2-size,1)));
$h2-lh: $type-h2-lh; //alias

$type-h3-lh: 					if(length($type-h3-size) > 1, nth($type-h3-size, 2),
    baseline-calc(nth($type-h3-size,1)));
$h3-lh: $type-h3-lh; //alias

$type-h4-lh: 					if(length($type-h4-size) > 1, nth($type-h4-size, 2),
    baseline-calc(nth($type-h4-size,1)));
$h4-lh: $type-h4-lh; //alias

$type-h5-lh: 					if(length($type-h5-size) > 1, nth($type-h5-size, 2),
    baseline-calc(nth($type-h5-size,1)));
$h5-lh: $type-h5-lh; //alias

$type-h6-lh: 					if(length($type-h6-size) > 1, nth($type-h6-size, 2),
    baseline-calc(nth($type-h6-size,1)));
$h6-lh: $type-h6-lh; //alias

$type-p-lh:                     baseline-calc($base-font-size);
$p-lh: $type-p-lh; //alias

$type-small-lh:					if(length($type-small-size) > 1, nth($type-small-size, 2),
    baseline-calc(nth($type-small-size,1)));
$small-lh: $type-small-lh; //alias


//Make sure we only grab the first-value
$type-h1-size: 				nth($type-h1-size, 1);
$type-h2-size: 				nth($type-h2-size, 1);
$type-h3-size:              nth($type-h3-size, 1);
$type-h4-size:              nth($type-h4-size, 1);
$type-h5-size:              nth($type-h5-size, 1);
$type-h6-size:              nth($type-h6-size, 1);
$type-p-size:               $base-font-size;
$type-small-size: 			nth($type-small-size, 1);


// Do not modify these variables; they are internal settings upon which the
// library depends.
$indented-paragraphs: false !default;

$type-base-unit:        $base-line-height;

@if $base-font-size >= $base-line-height {
	$type-base-unit: baseline-calc($base-font-size) * $base-font-size !global;
}

$type-base-ratio: ($type-base-unit / $base-font-size);

$type-headings:            6,5,4,3,2,1;
$type-modular-scale:       0;


//Spacing variable for simple inclusion.
$type-space: 2 * $type-base-ratio;

//Variable for easier reference:
$stripped-base-font-size:  strip-units($base-font-size) !global;

$type-modular-scale: $scale-ratio;

//Checking for floats in $scale-ratio
@if length($scale-ratio) == 2 {
// Making sure we don't have a ratio below 1.
    @if nth($scale-ratio,1) < nth($scale-ratio,2){
        $type-modular-scale:   nth($scale-ratio, 2)/nth($scale-ratio, 1);
    }@else{
        $type-modular-scale:   nth($scale-ratio, 1)/nth($scale-ratio, 2);
    }
}

//Silent class registry
// Holds all auto-generated silent classes for debugging.
$silent-class-registry: ();

// Is this build mobile first? Setting to ‘true’ means that all grids will be
// 100% width if you do not apply a more specific class to them.
$mobile-first:          true;

//Move all breakpoint names into a list
$all-breakpoints: ();

//Grab all breakpoint names
@each $breakpoint in $breakpoints {
	$temp-bp: nth($breakpoint, 1);

	@if $temp-bp != ' '{
		$all-breakpoints: append($all-breakpoints, $temp-bp, comma) !global;
	}
}

//Abstracting the smallest and largest breakpoints
$breakpoint-smallest: nth($all-breakpoints, 1);
$breakpoint-largest:  nth($all-breakpoints, length($all-breakpoints));

//------------------------------------
//		$SANITIZE
//------------------------------------

$root-background-color: color('bg');
$root-color: color('type');
$root-font-family: $primary-font-stack;
$root-font-size: percentage($base-font-size/16px);
$root-line-height: $type-base-ratio;
$root-text-rendering: optimizeLegibility;
$root-cursor: inherit;

$anchor-text-decoration: none;
$background-repeat: no-repeat;

$form-element-min-height: $base-line-height;
$textarea-resize: vertical;

$media-element-vertical-align: middle;

$monospace-font-family: $monospace-font-stack;

$nav-list-style: none;

$selection-background-color: mix(color('links'), color('bg'), 80%);
$selection-color: black-or-white($selection-background-color);
$selection-text-shadow: none;

$table-border-collapse: collapse;
$table-border-spacing: 0;
