$grid-columns: 12 !default;

/* SG
# Grid System/Variables [[dev]]

##### `$$human-readable-numerators`
###### List (string)
First words used to represent numbers in a fraction; Corresponds to grid interval names (one, two, three, etc.).


##### `$$human-readable-denominators`
###### List (string)
Second words used to represent numbers in a fraction; Corresponds to grid interval names (whole, half, third, etc.).
*/

//Grid
$human-readable-numerators: one, two, three, four, five, six, seven, eight, nine, ten, eleven, twelve, thirteen, fourteen, fifteen, sixteen, seventeen, eighteen, nineteen, twenty;

$human-readable-denominators: whole, half, third, quarter, fifth, sixth, seventh, eighth, ninth, tenth, eleventh, twelfth, thirteenth, fourteenth, fifteenth, sixteenth, seventeenth, eighteenth, nineteenth, twentieth, twentyfirst, twentysecond, twentythird, twentyfourth, twentyfifth, twentysixth, twentyseventh,twentyeigth, twentyninth;


/* SG
# Grid System/Functions [[dev]]

@file globals/tools/_t-grid-system.scss

##### `grid-size()`
###### function(`$size, $total:` `$$grid-columns`)
Creates a percentage based on the `$size / $total`.

*/

@function grid-size($size, $total: $grid-columns) {
    @return percentage($size / $total);
}

/* SG

# Grid System/Mixins [[dev]]

##### `@width()`
###### mixin(`$columns, $total:` `$$grid-columns`)
Creates a width property with a percentage based on the `$columns / $total`.
@requires `grid-size()`, `$$grid-columns`

*/


@mixin width($columns, $total:$grid-columns) {
    width: #{percentage($columns/$total)};
}


/* SG

##### `@width-setup()`
###### mixin(`$namespace:"", $silent:` `$$grid-silent-classes`, $type:"width")
 Uses `$$human-readable-numerators` and `$$human-readable-denominators` to create percentage widths based on `$$grid-columns`. `$type` accepts "width", "push" or "pull".

@requires `grid-size()`, `cache()`, `$$human-readable-numerators`, `$$human-readable-denominators`

*/


@mixin width-setup(
    $namespace:"",
    $silent: $grid-silent-classes,
    $type: "width",
    $columns: $grid-columns
) {

    // [1] Loop through the $grid-columns.
    // [2] Loop through $divisor (same number as $grid-columns). This acts as the second number in our column fraction.
    // [3a]Loop through $divisor before it decreases by 1 from the previous loop.
    // [3b]After widths are defined, subtract 1 from $divisor.
    // [4] Assign the numerator and denominator of our fraction to human-readable versions (e.g. three, four, third, quarter, etc.).
    // [5] Check if the numerator equals 1 (one). If so, we keep our singular human-readable numerators and denominators (e.g. one_twelfth).
    // [6] If the numerator is larger than 1(one), add an 's' to our selector (e.g. two_eighths).
    //
    // Same system used for pushes and pulls.
    $class-type: if($silent, "%", ".");
    $divisor: $columns;
	$class-name-list: ();
    $prefix: "#{$class-type}#{$namespace}";

    @if $type == "push" {
        $type: "left";
    }
    @else if $type == "pull" {
        $type: "right";
    }

    //To prevent stuff like 12/12 (5/5, 3/3, etc), we need to declare 1/1 here
    #{$prefix}one_whole {
        #{$type}: 100%;
    }

    @for $i from 1 through $columns {                                         // [1]

        @while $divisor > 0 {                                                // [2]

            @for $dividen from 1 to $divisor {                              // [3a]
				//Create numerator (first number, e.g. 'two').
                $numerator: nth($human-readable-numerators, $dividen);      // [4]

				//Create denominator (second number, e.g. 'thirds').
                $denominator: nth($human-readable-denominators, $divisor);

				//Divide first number(numerator) by second number(denominator).
				//Caching that value since this will be done many times.
                $width: cache(grid-size, $dividen, $divisor);

                //Create class name
                $class-name: "#{$prefix}#{$numerator}_#{$denominator}";

                //Pluralize anything other than ratios with a numerator of 1
                @if $numerator != "one" {                                    // [5]
					$class-name: "#{$class-name}s";                          // [6]
                }

				#{$class-name} {
                    #{$type}: $width;

                    @if $type != "width" {
                        position: relative;
                    }
                }

				@if $grid-silent-classes and $debug-silent-classes {
					$class-name-list: map-merge($class-name-list, ($class-name:$width));
				}

            }

            $divisor: $divisor - 1; //[3b]
        }
    }

    //Allow for fourth instead of quarter
    #{$prefix}one_fourth {
		@extend #{$prefix}one_quarter;
    }

    #{$prefix}two_fourths {
		@extend #{$prefix}two_quarters;
    }

    #{$prefix}three_fourths {
		@extend #{$prefix}three_quarters;
    }


	@if $silent and $debug-silent-classes {
		$class-name-list: map-merge($class-name-list,(
			#{$prefix}one_whole: 100%
		));
		$silent-class-registry: silents-register($class-name-list, $type) !global;
	}
}
