<style>.color-block:nth-child(1){background-color:#0a1c2b;color:#fff;padding:2% 1% 2.5%}.color-block:nth-child(1):before{content:"type"}.color-block:nth-child(1):after{content:"#0a1c2b"}.color-block:nth-child(2){background-color:#0d497b;color:#fff;padding:2% 1% 2.5%}.color-block:nth-child(2):before{content:"links"}.color-block:nth-child(2):after{content:"#0d497b"}.color-block:nth-child(3){background-color:#f6f8fb;color:#000;padding:2% 1% 2.5%}.color-block:nth-child(3):before{content:"bg"}.color-block:nth-child(3):after{content:"#f6f8fb"}.color-block:nth-child(4){background-color:#5e839e;color:#fff;padding:2% 1% 2.5%}.color-block:nth-child(4):before{content:"styleguide"}.color-block:nth-child(4):after{content:"#5e839e"}.color-block:nth-child(5){background-color:#081d33;color:#fff;padding:2% 1% 2.5%}.color-block:nth-child(5):before{content:"styleguide darkest"}.color-block:nth-child(5):after{content:"#081d33"}.color-block:nth-child(6){background-color:#390207;color:#fff;padding:2% 1% 2.5%}.color-block:nth-child(6):before{content:"accent darkest"}.color-block:nth-child(6):after{content:"#390207"}.color-block:nth-child(7){background-color:#556776;color:#fff}.color-block:nth-child(7):before{content:"type light"}.color-block:nth-child(7):after{content:"#556776"}.color-block:nth-child(8){background-color:#5894bd;color:#fff}.color-block:nth-child(8):before{content:"links light"}.color-block:nth-child(8):after{content:"#5894bd"}.color-block:nth-child(9){background-color:#fbfcfd;color:#000}.color-block:nth-child(9):before{content:"bg light"}.color-block:nth-child(9):after{content:"#fbfcfd"}.color-block:nth-child(10){background-color:#cadde2;color:#000}.color-block:nth-child(10):before{content:"styleguide light"}.color-block:nth-child(10):after{content:"#cadde2"}.color-block:nth-child(11){background-color:#bf0516;color:#fff}.color-block:nth-child(11):before{content:"accent"}.color-block:nth-child(11):after{content:"#bf0516"}.color-block:nth-child(12){background-color:#bada55;color:#000}.color-block:nth-child(12):before{content:"success"}.color-block:nth-child(12):after{content:"#bada55"}.color-block:nth-child(13){background-color:#99a4aa;color:#fff}.color-block:nth-child(13):before{content:"type lighter"}.color-block:nth-child(13):after{content:"#99a4aa"}.color-block:nth-child(14){background-color:#9cb6ca;color:#fff}.color-block:nth-child(14):before{content:"links lighter"}.color-block:nth-child(14):after{content:"#9cb6ca"}.color-block:nth-child(15){background-color:#fbfcfd;color:#000}.color-block:nth-child(15):before{content:"bg lighter"}.color-block:nth-child(15):after{content:"#fbfcfd"}.color-block:nth-child(16){background-color:#f5d1dd;color:#000}.color-block:nth-child(16):before{content:"styleguide lighter"}.color-block:nth-child(16):after{content:"#f5d1dd"}.color-block:nth-child(17){background-color:#df5061;color:#fff}.color-block:nth-child(17):before{content:"accent light"}.color-block:nth-child(17):after{content:"#df5061"}.color-block:nth-child(18){background-color:#ddeda0;color:#000}.color-block:nth-child(18):before{content:"success light"}.color-block:nth-child(18):after{content:"#ddeda0"}.color-block:nth-child(19){background-color:#ced2d5;color:#000}.color-block:nth-child(19):before{content:"type lightest"}.color-block:nth-child(19):after{content:"#ced2d5"}.color-block:nth-child(20){background-color:#cfdbe5;color:#000}.color-block:nth-child(20):before{content:"links lightest"}.color-block:nth-child(20):after{content:"#cfdbe5"}.color-block:nth-child(21){background-color:#fdfefe;color:#000}.color-block:nth-child(21):before{content:"bg lightest"}.color-block:nth-child(21):after{content:"#fdfefe"}.color-block:nth-child(22){background-color:#e0ecf0;color:#000}.color-block:nth-child(22):before{content:"styleguide lightest"}.color-block:nth-child(22):after{content:"#e0ecf0"}.color-block:nth-child(23){background-color:#e594a2;color:#fff}.color-block:nth-child(23):before{content:"accent lighter"}.color-block:nth-child(23):after{content:"#e594a2"}.color-block:nth-child(24){background-color:#e3f0bb;color:#000}.color-block:nth-child(24):before{content:"success lighter"}.color-block:nth-child(24):after{content:"#e3f0bb"}.color-block:nth-child(25){background-color:#050f16;color:#fff}.color-block:nth-child(25):before{content:"type dark"}.color-block:nth-child(25):after{content:"#050f16"}.color-block:nth-child(26){background-color:#0b3b64;color:#fff}.color-block:nth-child(26):before{content:"links dark"}.color-block:nth-child(26):after{content:"#0b3b64"}.color-block:nth-child(27){background-color:#e4eaf3;color:#000}.color-block:nth-child(27):before{content:"bg dark"}.color-block:nth-child(27):after{content:"#e4eaf3"}.color-block:nth-child(28){background-color:#f60255;color:#fff}.color-block:nth-child(28):before{content:"styleguide highlight"}.color-block:nth-child(28):after{content:"#f60255"}.color-block:nth-child(29){background-color:#f2cdd0;color:#000}.color-block:nth-child(29):before{content:"accent lightest"}.color-block:nth-child(29):after{content:"#f2cdd0"}.color-block:nth-child(30){background-color:#f1f8dd;color:#000}.color-block:nth-child(30):before{content:"success lightest"}.color-block:nth-child(30):after{content:"#f1f8dd"}.color-block:nth-child(31){background-color:#06111a;color:#fff}.color-block:nth-child(31):before{content:"type darker"}.color-block:nth-child(31):after{content:"#06111a"}.color-block:nth-child(32){background-color:#082c4a;color:#fff}.color-block:nth-child(32):before{content:"links darker"}.color-block:nth-child(32):after{content:"#082c4a"}.color-block:nth-child(33){background-color:#aeb6be;color:#000}.color-block:nth-child(33):before{content:"bg darker"}.color-block:nth-child(33):after{content:"#aeb6be"}.color-block:nth-child(34){background-color:#175ca2;color:#fff}.color-block:nth-child(34):before{content:"styleguide dark"}.color-block:nth-child(34):after{content:"#175ca2"}.color-block:nth-child(35){background-color:#a60413;color:#fff}.color-block:nth-child(35):before{content:"accent dark"}.color-block:nth-child(35):after{content:"#a60413"}.color-block:nth-child(36){background-color:#b2d540;color:#000}.color-block:nth-child(36):before{content:"success dark"}.color-block:nth-child(36):after{content:"#b2d540"}.color-block:nth-child(37){background-color:#03080d;color:#fff}.color-block:nth-child(37):before{content:"type darkest"}.color-block:nth-child(37):after{content:"#03080d"}.color-block:nth-child(38){background-color:#041625;color:#fff}.color-block:nth-child(38):before{content:"links darkest"}.color-block:nth-child(38):after{content:"#041625"}.color-block:nth-child(39){background-color:#677077;color:#fff}.color-block:nth-child(39):before{content:"bg darkest"}.color-block:nth-child(39):after{content:"#677077"}.color-block:nth-child(40){background-color:#114a84;color:#fff}.color-block:nth-child(40):before{content:"styleguide darker"}.color-block:nth-child(40):after{content:"#114a84"}.color-block:nth-child(41){background-color:#77030d;color:#fff}.color-block:nth-child(41):before{content:"accent darker"}.color-block:nth-child(41):after{content:"#77030d"}.color-block:nth-child(42){background-color:#729833;color:#fff}.color-block:nth-child(42):before{content:"success darker"}.color-block:nth-child(42):after{content:"#729833"}.color-block:nth-child(43){background-color:#0d497b;color:#fff}.color-block:nth-child(43):before{content:"links"}.color-block:nth-child(43):after{content:"#0d497b"}.color-block{width:15.66667%;padding:1%;margin-right:.95%;float:left;overflow:hidden}.color-block:before{font-size:11.85185px;font-size:.74074rem;display:block;white-space:nowrap}.color-block:after{font-size:8.77915px;font-size:.5487rem;display:block}.color-block:before{text-transform:capitalize}.color-block:after{letter-spacing:.1em}.sg-body{margin:0}.sg-wrap{display:block;width:100%;min-height:100vh;margin:0;overflow:auto}.sg-menu{position:absolute;vertical-align:top;background-color:#081d33;width:18rem;top:0;left:0;bottom:0;font-size:.9em}.sg-main{padding-left:18rem;-webkit-transition:padding .15s ease-out;transition:padding .15s ease-out}.sg-category{padding-left:5%;padding-right:5%;overflow:auto}.sg-category_wrap{max-width:58em;margin:auto}.sg-example{width:110%;margin-left:-5%}@media only screen and (max-width:1100px){.sg-example{width:115%;margin-left:-7.5%}.sg-menu{width:10em}.sg-main{padding-left:10em}}@media only screen and (max-width:700px){.sg-menu{width:0}.sg-main{padding-left:0}}.sg-menu{-webkit-transition:all .2s ease-out;transition:all .2s ease-out;overflow:auto}.sg-menu_item,.sg_menu_list{padding:0;margin:0;position:relative}.sg-menu_list{list-style:none;padding:0;color:rgba(245,209,221,.1)}.sg-menu_section{border-top:1px solid}.sg-menu_article>.sg-menu_link{color:rgba(202,221,226,.65)}.sg-category-active{background:rgba(94,131,158,.04)}.sg-menu_link{display:block;padding:.75rem 1.65rem .65rem;text-decoration:none;color:#cadde2}.sg-menu_link:focus,.sg-menu_link:hover{background-color:rgba(202,221,226,.05);color:#cadde2}.sg-toc-active>.sg-menu_link{background-color:rgba(245,209,221,.1)}.sg-menu_section>.sg-menu_link{color:#f60255}.sg-menu_article .sg-menu_link{padding-left:2.5rem;padding-right:2rem}.sg-menu_article{display:none}.sg-category-active .sg-menu_article,.sg-menu_article.sg-toc-active{display:block}.sg-category-active>.sg-menu_link{border-left:2px solid #f60255;text-indent:-2px}.sg-logo{font-weight:400;background-color:#f60255;color:#fff;margin:0;font-size:1.5em}.sg-logo:focus,.sg-logo:hover{background-color:#fd246e}.sg-logo .sg-menu_link{color:inherit;padding-top:1em;padding-bottom:.75em}.sg-heading-section{color:#5e839e;font-size:2.8587rem;line-height:1.57414;font-weight:400}.sg-heading-category{font-size:1.6em}.sg-heading-article,.sg-heading-category{color:#175ca2;font-weight:400}.sg-heading .sg-code{color:#435270}.sg-heading-6{font-weight:400}.sg-heading-5+.sg-heading-6{margin-top:-1rem;padding-bottom:.25rem}.sg-section:nth-child(even){padding-bottom:1.5em}.sg-article_comment,.sg-example,.sg-section{margin-bottom:1.5em}.sg-category:nth-child(odd){background-color:rgba(224,229,235,.3)}.sg-category:nth-child(odd):last-child{margin-bottom:-48px;margin-bottom:-3rem;padding-bottom:72px;padding-bottom:4.5rem}.sg-category:first-child{background-color:transparent;border-top:1px solid #e0e5eb}.sg-article{margin-bottom:3em}.sg-article,.sg-category{padding-top:3em}.sg-article_comment{margin-top:-1.5rem}.sg-article_head{padding-bottom:1.5em}.sg-example{background-color:hsla(0,0%,100%,.8);border-top:1px solid #fff}.sg-example:before{content:"Example";background-color:#edf0f2;color:#647582;display:inline-block;font-size:.9em;padding:.45em .5em;margin-bottom:.5em;margin-left:1px;clear:both}.sg-example_wrap{padding:.75em 1.25em;position:relative}.sg-example_wrap:after{content:" ";display:table;height:0;width:100%;clear:both}.sg-markup_wrap{margin:0}.sg-markup-block{border-top:1px solid #e0ecf0}.sg-codespan,.sg-file{color:#5e839e}.sg-codeblock{margin-bottom:2em}.sg-code-meta+.sg-code-meta{margin-top:-1.5rem}.sg-code-meta:before{content:attr(data-code-meta) ": ";text-transform:capitalize}#styleguide .sg-markup_wrap,#styleguide .sg-markup code{overflow:auto}#styleguide .sg-markup_wrap{max-height:30em}#styleguide .sg-markup code{display:block;word-wrap:normal;white-space:pre;padding:1em}#styleguide .hljs{background-color:#40476b;font-size:.9em}#styleguide .hljs-comment{color:#8aaeb7}/*

Style with support for rainbow parens

*/

.hljs {
  display: block;
  overflow-x: auto;
  padding: 0.5em;
  background: #474949;
  color: #d1d9e1;
}


.hljs-comment,
.hljs-quote {
  color: #969896;
  font-style: italic;
}

.hljs-keyword,
.hljs-selector-tag,
.hljs-literal,
.hljs-type,
.hljs-addition {
  color: #cc99cc;
}

.hljs-number,
.hljs-selector-attr,
.hljs-selector-pseudo {
  color: #f99157;
}

.hljs-string,
.hljs-doctag,
.hljs-regexp {
  color: #8abeb7;
}

.hljs-title,
.hljs-name,
.hljs-section,
.hljs-built_in {
  color: #b5bd68;
}

.hljs-variable,
.hljs-template-variable,
.hljs-selector-id,
.hljs-class .hljs-title {
   color: #ffcc66;
}

.hljs-section,
.hljs-name,
.hljs-strong {
  font-weight: bold;
}

.hljs-symbol,
.hljs-bullet,
.hljs-subst,
.hljs-meta,
.hljs-link {
  color: #f99157;
}

.hljs-deletion {
  color: #dc322f;
}

.hljs-formula {
  background: #eee8d5;
}

.hljs-attr,
.hljs-attribute {
  color: #81a2be;
}

.hljs-emphasis {
  font-style: italic;
}
</style>

<script>/*! jQuery v2.1.3 | (c) 2005, 2014 jQuery Foundation, Inc. | jquery.org/license */
!function(a,b){"object"==typeof module&&"object"==typeof module.exports?module.exports=a.document?b(a,!0):function(a){if(!a.document)throw new Error("jQuery requires a window with a document");return b(a)}:b(a)}("undefined"!=typeof window?window:this,function(a,b){var c=[],d=c.slice,e=c.concat,f=c.push,g=c.indexOf,h={},i=h.toString,j=h.hasOwnProperty,k={},l=a.document,m="2.1.3",n=function(a,b){return new n.fn.init(a,b)},o=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,p=/^-ms-/,q=/-([\da-z])/gi,r=function(a,b){return b.toUpperCase()};n.fn=n.prototype={jquery:m,constructor:n,selector:"",length:0,toArray:function(){return d.call(this)},get:function(a){return null!=a?0>a?this[a+this.length]:this[a]:d.call(this)},pushStack:function(a){var b=n.merge(this.constructor(),a);return b.prevObject=this,b.context=this.context,b},each:function(a,b){return n.each(this,a,b)},map:function(a){return this.pushStack(n.map(this,function(b,c){return a.call(b,c,b)}))},slice:function(){return this.pushStack(d.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(a){var b=this.length,c=+a+(0>a?b:0);return this.pushStack(c>=0&&b>c?[this[c]]:[])},end:function(){return this.prevObject||this.constructor(null)},push:f,sort:c.sort,splice:c.splice},n.extend=n.fn.extend=function(){var a,b,c,d,e,f,g=arguments[0]||{},h=1,i=arguments.length,j=!1;for("boolean"==typeof g&&(j=g,g=arguments[h]||{},h++),"object"==typeof g||n.isFunction(g)||(g={}),h===i&&(g=this,h--);i>h;h++)if(null!=(a=arguments[h]))for(b in a)c=g[b],d=a[b],g!==d&&(j&&d&&(n.isPlainObject(d)||(e=n.isArray(d)))?(e?(e=!1,f=c&&n.isArray(c)?c:[]):f=c&&n.isPlainObject(c)?c:{},g[b]=n.extend(j,f,d)):void 0!==d&&(g[b]=d));return g},n.extend({expando:"jQuery"+(m+Math.random()).replace(/\D/g,""),isReady:!0,error:function(a){throw new Error(a)},noop:function(){},isFunction:function(a){return"function"===n.type(a)},isArray:Array.isArray,isWindow:function(a){return null!=a&&a===a.window},isNumeric:function(a){return!n.isArray(a)&&a-parseFloat(a)+1>=0},isPlainObject:function(a){return"object"!==n.type(a)||a.nodeType||n.isWindow(a)?!1:a.constructor&&!j.call(a.constructor.prototype,"isPrototypeOf")?!1:!0},isEmptyObject:function(a){var b;for(b in a)return!1;return!0},type:function(a){return null==a?a+"":"object"==typeof a||"function"==typeof a?h[i.call(a)]||"object":typeof a},globalEval:function(a){var b,c=eval;a=n.trim(a),a&&(1===a.indexOf("use strict")?(b=l.createElement("script"),b.text=a,l.head.appendChild(b).parentNode.removeChild(b)):c(a))},camelCase:function(a){return a.replace(p,"ms-").replace(q,r)},nodeName:function(a,b){return a.nodeName&&a.nodeName.toLowerCase()===b.toLowerCase()},each:function(a,b,c){var d,e=0,f=a.length,g=s(a);if(c){if(g){for(;f>e;e++)if(d=b.apply(a[e],c),d===!1)break}else for(e in a)if(d=b.apply(a[e],c),d===!1)break}else if(g){for(;f>e;e++)if(d=b.call(a[e],e,a[e]),d===!1)break}else for(e in a)if(d=b.call(a[e],e,a[e]),d===!1)break;return a},trim:function(a){return null==a?"":(a+"").replace(o,"")},makeArray:function(a,b){var c=b||[];return null!=a&&(s(Object(a))?n.merge(c,"string"==typeof a?[a]:a):f.call(c,a)),c},inArray:function(a,b,c){return null==b?-1:g.call(b,a,c)},merge:function(a,b){for(var c=+b.length,d=0,e=a.length;c>d;d++)a[e++]=b[d];return a.length=e,a},grep:function(a,b,c){for(var d,e=[],f=0,g=a.length,h=!c;g>f;f++)d=!b(a[f],f),d!==h&&e.push(a[f]);return e},map:function(a,b,c){var d,f=0,g=a.length,h=s(a),i=[];if(h)for(;g>f;f++)d=b(a[f],f,c),null!=d&&i.push(d);else for(f in a)d=b(a[f],f,c),null!=d&&i.push(d);return e.apply([],i)},guid:1,proxy:function(a,b){var c,e,f;return"string"==typeof b&&(c=a[b],b=a,a=c),n.isFunction(a)?(e=d.call(arguments,2),f=function(){return a.apply(b||this,e.concat(d.call(arguments)))},f.guid=a.guid=a.guid||n.guid++,f):void 0},now:Date.now,support:k}),n.each("Boolean Number String Function Array Date RegExp Object Error".split(" "),function(a,b){h["[object "+b+"]"]=b.toLowerCase()});function s(a){var b=a.length,c=n.type(a);return"function"===c||n.isWindow(a)?!1:1===a.nodeType&&b?!0:"array"===c||0===b||"number"==typeof b&&b>0&&b-1 in a}var t=function(a){var b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u="sizzle"+1*new Date,v=a.document,w=0,x=0,y=hb(),z=hb(),A=hb(),B=function(a,b){return a===b&&(l=!0),0},C=1<<31,D={}.hasOwnProperty,E=[],F=E.pop,G=E.push,H=E.push,I=E.slice,J=function(a,b){for(var c=0,d=a.length;d>c;c++)if(a[c]===b)return c;return-1},K="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",L="[\\x20\\t\\r\\n\\f]",M="(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",N=M.replace("w","w#"),O="\\["+L+"*("+M+")(?:"+L+"*([*^$|!~]?=)"+L+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+N+"))|)"+L+"*\\]",P=":("+M+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+O+")*)|.*)\\)|)",Q=new RegExp(L+"+","g"),R=new RegExp("^"+L+"+|((?:^|[^\\\\])(?:\\\\.)*)"+L+"+$","g"),S=new RegExp("^"+L+"*,"+L+"*"),T=new RegExp("^"+L+"*([>+~]|"+L+")"+L+"*"),U=new RegExp("="+L+"*([^\\]'\"]*?)"+L+"*\\]","g"),V=new RegExp(P),W=new RegExp("^"+N+"$"),X={ID:new RegExp("^#("+M+")"),CLASS:new RegExp("^\\.("+M+")"),TAG:new RegExp("^("+M.replace("w","w*")+")"),ATTR:new RegExp("^"+O),PSEUDO:new RegExp("^"+P),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+L+"*(even|odd|(([+-]|)(\\d*)n|)"+L+"*(?:([+-]|)"+L+"*(\\d+)|))"+L+"*\\)|)","i"),bool:new RegExp("^(?:"+K+")$","i"),needsContext:new RegExp("^"+L+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+L+"*((?:-\\d)?\\d*)"+L+"*\\)|)(?=[^-]|$)","i")},Y=/^(?:input|select|textarea|button)$/i,Z=/^h\d$/i,$=/^[^{]+\{\s*\[native \w/,_=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,ab=/[+~]/,bb=/'|\\/g,cb=new RegExp("\\\\([\\da-f]{1,6}"+L+"?|("+L+")|.)","ig"),db=function(a,b,c){var d="0x"+b-65536;return d!==d||c?b:0>d?String.fromCharCode(d+65536):String.fromCharCode(d>>10|55296,1023&d|56320)},eb=function(){m()};try{H.apply(E=I.call(v.childNodes),v.childNodes),E[v.childNodes.length].nodeType}catch(fb){H={apply:E.length?function(a,b){G.apply(a,I.call(b))}:function(a,b){var c=a.length,d=0;while(a[c++]=b[d++]);a.length=c-1}}}function gb(a,b,d,e){var f,h,j,k,l,o,r,s,w,x;if((b?b.ownerDocument||b:v)!==n&&m(b),b=b||n,d=d||[],k=b.nodeType,"string"!=typeof a||!a||1!==k&&9!==k&&11!==k)return d;if(!e&&p){if(11!==k&&(f=_.exec(a)))if(j=f[1]){if(9===k){if(h=b.getElementById(j),!h||!h.parentNode)return d;if(h.id===j)return d.push(h),d}else if(b.ownerDocument&&(h=b.ownerDocument.getElementById(j))&&t(b,h)&&h.id===j)return d.push(h),d}else{if(f[2])return H.apply(d,b.getElementsByTagName(a)),d;if((j=f[3])&&c.getElementsByClassName)return H.apply(d,b.getElementsByClassName(j)),d}if(c.qsa&&(!q||!q.test(a))){if(s=r=u,w=b,x=1!==k&&a,1===k&&"object"!==b.nodeName.toLowerCase()){o=g(a),(r=b.getAttribute("id"))?s=r.replace(bb,"\\$&"):b.setAttribute("id",s),s="[id='"+s+"'] ",l=o.length;while(l--)o[l]=s+rb(o[l]);w=ab.test(a)&&pb(b.parentNode)||b,x=o.join(",")}if(x)try{return H.apply(d,w.querySelectorAll(x)),d}catch(y){}finally{r||b.removeAttribute("id")}}}return i(a.replace(R,"$1"),b,d,e)}function hb(){var a=[];function b(c,e){return a.push(c+" ")>d.cacheLength&&delete b[a.shift()],b[c+" "]=e}return b}function ib(a){return a[u]=!0,a}function jb(a){var b=n.createElement("div");try{return!!a(b)}catch(c){return!1}finally{b.parentNode&&b.parentNode.removeChild(b),b=null}}function kb(a,b){var c=a.split("|"),e=a.length;while(e--)d.attrHandle[c[e]]=b}function lb(a,b){var c=b&&a,d=c&&1===a.nodeType&&1===b.nodeType&&(~b.sourceIndex||C)-(~a.sourceIndex||C);if(d)return d;if(c)while(c=c.nextSibling)if(c===b)return-1;return a?1:-1}function mb(a){return function(b){var c=b.nodeName.toLowerCase();return"input"===c&&b.type===a}}function nb(a){return function(b){var c=b.nodeName.toLowerCase();return("input"===c||"button"===c)&&b.type===a}}function ob(a){return ib(function(b){return b=+b,ib(function(c,d){var e,f=a([],c.length,b),g=f.length;while(g--)c[e=f[g]]&&(c[e]=!(d[e]=c[e]))})})}function pb(a){return a&&"undefined"!=typeof a.getElementsByTagName&&a}c=gb.support={},f=gb.isXML=function(a){var b=a&&(a.ownerDocument||a).documentElement;return b?"HTML"!==b.nodeName:!1},m=gb.setDocument=function(a){var b,e,g=a?a.ownerDocument||a:v;return g!==n&&9===g.nodeType&&g.documentElement?(n=g,o=g.documentElement,e=g.defaultView,e&&e!==e.top&&(e.addEventListener?e.addEventListener("unload",eb,!1):e.attachEvent&&e.attachEvent("onunload",eb)),p=!f(g),c.attributes=jb(function(a){return a.className="i",!a.getAttribute("className")}),c.getElementsByTagName=jb(function(a){return a.appendChild(g.createComment("")),!a.getElementsByTagName("*").length}),c.getElementsByClassName=$.test(g.getElementsByClassName),c.getById=jb(function(a){return o.appendChild(a).id=u,!g.getElementsByName||!g.getElementsByName(u).length}),c.getById?(d.find.ID=function(a,b){if("undefined"!=typeof b.getElementById&&p){var c=b.getElementById(a);return c&&c.parentNode?[c]:[]}},d.filter.ID=function(a){var b=a.replace(cb,db);return function(a){return a.getAttribute("id")===b}}):(delete d.find.ID,d.filter.ID=function(a){var b=a.replace(cb,db);return function(a){var c="undefined"!=typeof a.getAttributeNode&&a.getAttributeNode("id");return c&&c.value===b}}),d.find.TAG=c.getElementsByTagName?function(a,b){return"undefined"!=typeof b.getElementsByTagName?b.getElementsByTagName(a):c.qsa?b.querySelectorAll(a):void 0}:function(a,b){var c,d=[],e=0,f=b.getElementsByTagName(a);if("*"===a){while(c=f[e++])1===c.nodeType&&d.push(c);return d}return f},d.find.CLASS=c.getElementsByClassName&&function(a,b){return p?b.getElementsByClassName(a):void 0},r=[],q=[],(c.qsa=$.test(g.querySelectorAll))&&(jb(function(a){o.appendChild(a).innerHTML="<a id='"+u+"'></a><select id='"+u+"-\f]' msallowcapture=''><option selected=''></option></select>",a.querySelectorAll("[msallowcapture^='']").length&&q.push("[*^$]="+L+"*(?:''|\"\")"),a.querySelectorAll("[selected]").length||q.push("\\["+L+"*(?:value|"+K+")"),a.querySelectorAll("[id~="+u+"-]").length||q.push("~="),a.querySelectorAll(":checked").length||q.push(":checked"),a.querySelectorAll("a#"+u+"+*").length||q.push(".#.+[+~]")}),jb(function(a){var b=g.createElement("input");b.setAttribute("type","hidden"),a.appendChild(b).setAttribute("name","D"),a.querySelectorAll("[name=d]").length&&q.push("name"+L+"*[*^$|!~]?="),a.querySelectorAll(":enabled").length||q.push(":enabled",":disabled"),a.querySelectorAll("*,:x"),q.push(",.*:")})),(c.matchesSelector=$.test(s=o.matches||o.webkitMatchesSelector||o.mozMatchesSelector||o.oMatchesSelector||o.msMatchesSelector))&&jb(function(a){c.disconnectedMatch=s.call(a,"div"),s.call(a,"[s!='']:x"),r.push("!=",P)}),q=q.length&&new RegExp(q.join("|")),r=r.length&&new RegExp(r.join("|")),b=$.test(o.compareDocumentPosition),t=b||$.test(o.contains)?function(a,b){var c=9===a.nodeType?a.documentElement:a,d=b&&b.parentNode;return a===d||!(!d||1!==d.nodeType||!(c.contains?c.contains(d):a.compareDocumentPosition&&16&a.compareDocumentPosition(d)))}:function(a,b){if(b)while(b=b.parentNode)if(b===a)return!0;return!1},B=b?function(a,b){if(a===b)return l=!0,0;var d=!a.compareDocumentPosition-!b.compareDocumentPosition;return d?d:(d=(a.ownerDocument||a)===(b.ownerDocument||b)?a.compareDocumentPosition(b):1,1&d||!c.sortDetached&&b.compareDocumentPosition(a)===d?a===g||a.ownerDocument===v&&t(v,a)?-1:b===g||b.ownerDocument===v&&t(v,b)?1:k?J(k,a)-J(k,b):0:4&d?-1:1)}:function(a,b){if(a===b)return l=!0,0;var c,d=0,e=a.parentNode,f=b.parentNode,h=[a],i=[b];if(!e||!f)return a===g?-1:b===g?1:e?-1:f?1:k?J(k,a)-J(k,b):0;if(e===f)return lb(a,b);c=a;while(c=c.parentNode)h.unshift(c);c=b;while(c=c.parentNode)i.unshift(c);while(h[d]===i[d])d++;return d?lb(h[d],i[d]):h[d]===v?-1:i[d]===v?1:0},g):n},gb.matches=function(a,b){return gb(a,null,null,b)},gb.matchesSelector=function(a,b){if((a.ownerDocument||a)!==n&&m(a),b=b.replace(U,"='$1']"),!(!c.matchesSelector||!p||r&&r.test(b)||q&&q.test(b)))try{var d=s.call(a,b);if(d||c.disconnectedMatch||a.document&&11!==a.document.nodeType)return d}catch(e){}return gb(b,n,null,[a]).length>0},gb.contains=function(a,b){return(a.ownerDocument||a)!==n&&m(a),t(a,b)},gb.attr=function(a,b){(a.ownerDocument||a)!==n&&m(a);var e=d.attrHandle[b.toLowerCase()],f=e&&D.call(d.attrHandle,b.toLowerCase())?e(a,b,!p):void 0;return void 0!==f?f:c.attributes||!p?a.getAttribute(b):(f=a.getAttributeNode(b))&&f.specified?f.value:null},gb.error=function(a){throw new Error("Syntax error, unrecognized expression: "+a)},gb.uniqueSort=function(a){var b,d=[],e=0,f=0;if(l=!c.detectDuplicates,k=!c.sortStable&&a.slice(0),a.sort(B),l){while(b=a[f++])b===a[f]&&(e=d.push(f));while(e--)a.splice(d[e],1)}return k=null,a},e=gb.getText=function(a){var b,c="",d=0,f=a.nodeType;if(f){if(1===f||9===f||11===f){if("string"==typeof a.textContent)return a.textContent;for(a=a.firstChild;a;a=a.nextSibling)c+=e(a)}else if(3===f||4===f)return a.nodeValue}else while(b=a[d++])c+=e(b);return c},d=gb.selectors={cacheLength:50,createPseudo:ib,match:X,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(a){return a[1]=a[1].replace(cb,db),a[3]=(a[3]||a[4]||a[5]||"").replace(cb,db),"~="===a[2]&&(a[3]=" "+a[3]+" "),a.slice(0,4)},CHILD:function(a){return a[1]=a[1].toLowerCase(),"nth"===a[1].slice(0,3)?(a[3]||gb.error(a[0]),a[4]=+(a[4]?a[5]+(a[6]||1):2*("even"===a[3]||"odd"===a[3])),a[5]=+(a[7]+a[8]||"odd"===a[3])):a[3]&&gb.error(a[0]),a},PSEUDO:function(a){var b,c=!a[6]&&a[2];return X.CHILD.test(a[0])?null:(a[3]?a[2]=a[4]||a[5]||"":c&&V.test(c)&&(b=g(c,!0))&&(b=c.indexOf(")",c.length-b)-c.length)&&(a[0]=a[0].slice(0,b),a[2]=c.slice(0,b)),a.slice(0,3))}},filter:{TAG:function(a){var b=a.replace(cb,db).toLowerCase();return"*"===a?function(){return!0}:function(a){return a.nodeName&&a.nodeName.toLowerCase()===b}},CLASS:function(a){var b=y[a+" "];return b||(b=new RegExp("(^|"+L+")"+a+"("+L+"|$)"))&&y(a,function(a){return b.test("string"==typeof a.className&&a.className||"undefined"!=typeof a.getAttribute&&a.getAttribute("class")||"")})},ATTR:function(a,b,c){return function(d){var e=gb.attr(d,a);return null==e?"!="===b:b?(e+="","="===b?e===c:"!="===b?e!==c:"^="===b?c&&0===e.indexOf(c):"*="===b?c&&e.indexOf(c)>-1:"$="===b?c&&e.slice(-c.length)===c:"~="===b?(" "+e.replace(Q," ")+" ").indexOf(c)>-1:"|="===b?e===c||e.slice(0,c.length+1)===c+"-":!1):!0}},CHILD:function(a,b,c,d,e){var f="nth"!==a.slice(0,3),g="last"!==a.slice(-4),h="of-type"===b;return 1===d&&0===e?function(a){return!!a.parentNode}:function(b,c,i){var j,k,l,m,n,o,p=f!==g?"nextSibling":"previousSibling",q=b.parentNode,r=h&&b.nodeName.toLowerCase(),s=!i&&!h;if(q){if(f){while(p){l=b;while(l=l[p])if(h?l.nodeName.toLowerCase()===r:1===l.nodeType)return!1;o=p="only"===a&&!o&&"nextSibling"}return!0}if(o=[g?q.firstChild:q.lastChild],g&&s){k=q[u]||(q[u]={}),j=k[a]||[],n=j[0]===w&&j[1],m=j[0]===w&&j[2],l=n&&q.childNodes[n];while(l=++n&&l&&l[p]||(m=n=0)||o.pop())if(1===l.nodeType&&++m&&l===b){k[a]=[w,n,m];break}}else if(s&&(j=(b[u]||(b[u]={}))[a])&&j[0]===w)m=j[1];else while(l=++n&&l&&l[p]||(m=n=0)||o.pop())if((h?l.nodeName.toLowerCase()===r:1===l.nodeType)&&++m&&(s&&((l[u]||(l[u]={}))[a]=[w,m]),l===b))break;return m-=e,m===d||m%d===0&&m/d>=0}}},PSEUDO:function(a,b){var c,e=d.pseudos[a]||d.setFilters[a.toLowerCase()]||gb.error("unsupported pseudo: "+a);return e[u]?e(b):e.length>1?(c=[a,a,"",b],d.setFilters.hasOwnProperty(a.toLowerCase())?ib(function(a,c){var d,f=e(a,b),g=f.length;while(g--)d=J(a,f[g]),a[d]=!(c[d]=f[g])}):function(a){return e(a,0,c)}):e}},pseudos:{not:ib(function(a){var b=[],c=[],d=h(a.replace(R,"$1"));return d[u]?ib(function(a,b,c,e){var f,g=d(a,null,e,[]),h=a.length;while(h--)(f=g[h])&&(a[h]=!(b[h]=f))}):function(a,e,f){return b[0]=a,d(b,null,f,c),b[0]=null,!c.pop()}}),has:ib(function(a){return function(b){return gb(a,b).length>0}}),contains:ib(function(a){return a=a.replace(cb,db),function(b){return(b.textContent||b.innerText||e(b)).indexOf(a)>-1}}),lang:ib(function(a){return W.test(a||"")||gb.error("unsupported lang: "+a),a=a.replace(cb,db).toLowerCase(),function(b){var c;do if(c=p?b.lang:b.getAttribute("xml:lang")||b.getAttribute("lang"))return c=c.toLowerCase(),c===a||0===c.indexOf(a+"-");while((b=b.parentNode)&&1===b.nodeType);return!1}}),target:function(b){var c=a.location&&a.location.hash;return c&&c.slice(1)===b.id},root:function(a){return a===o},focus:function(a){return a===n.activeElement&&(!n.hasFocus||n.hasFocus())&&!!(a.type||a.href||~a.tabIndex)},enabled:function(a){return a.disabled===!1},disabled:function(a){return a.disabled===!0},checked:function(a){var b=a.nodeName.toLowerCase();return"input"===b&&!!a.checked||"option"===b&&!!a.selected},selected:function(a){return a.parentNode&&a.parentNode.selectedIndex,a.selected===!0},empty:function(a){for(a=a.firstChild;a;a=a.nextSibling)if(a.nodeType<6)return!1;return!0},parent:function(a){return!d.pseudos.empty(a)},header:function(a){return Z.test(a.nodeName)},input:function(a){return Y.test(a.nodeName)},button:function(a){var b=a.nodeName.toLowerCase();return"input"===b&&"button"===a.type||"button"===b},text:function(a){var b;return"input"===a.nodeName.toLowerCase()&&"text"===a.type&&(null==(b=a.getAttribute("type"))||"text"===b.toLowerCase())},first:ob(function(){return[0]}),last:ob(function(a,b){return[b-1]}),eq:ob(function(a,b,c){return[0>c?c+b:c]}),even:ob(function(a,b){for(var c=0;b>c;c+=2)a.push(c);return a}),odd:ob(function(a,b){for(var c=1;b>c;c+=2)a.push(c);return a}),lt:ob(function(a,b,c){for(var d=0>c?c+b:c;--d>=0;)a.push(d);return a}),gt:ob(function(a,b,c){for(var d=0>c?c+b:c;++d<b;)a.push(d);return a})}},d.pseudos.nth=d.pseudos.eq;for(b in{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})d.pseudos[b]=mb(b);for(b in{submit:!0,reset:!0})d.pseudos[b]=nb(b);function qb(){}qb.prototype=d.filters=d.pseudos,d.setFilters=new qb,g=gb.tokenize=function(a,b){var c,e,f,g,h,i,j,k=z[a+" "];if(k)return b?0:k.slice(0);h=a,i=[],j=d.preFilter;while(h){(!c||(e=S.exec(h)))&&(e&&(h=h.slice(e[0].length)||h),i.push(f=[])),c=!1,(e=T.exec(h))&&(c=e.shift(),f.push({value:c,type:e[0].replace(R," ")}),h=h.slice(c.length));for(g in d.filter)!(e=X[g].exec(h))||j[g]&&!(e=j[g](e))||(c=e.shift(),f.push({value:c,type:g,matches:e}),h=h.slice(c.length));if(!c)break}return b?h.length:h?gb.error(a):z(a,i).slice(0)};function rb(a){for(var b=0,c=a.length,d="";c>b;b++)d+=a[b].value;return d}function sb(a,b,c){var d=b.dir,e=c&&"parentNode"===d,f=x++;return b.first?function(b,c,f){while(b=b[d])if(1===b.nodeType||e)return a(b,c,f)}:function(b,c,g){var h,i,j=[w,f];if(g){while(b=b[d])if((1===b.nodeType||e)&&a(b,c,g))return!0}else while(b=b[d])if(1===b.nodeType||e){if(i=b[u]||(b[u]={}),(h=i[d])&&h[0]===w&&h[1]===f)return j[2]=h[2];if(i[d]=j,j[2]=a(b,c,g))return!0}}}function tb(a){return a.length>1?function(b,c,d){var e=a.length;while(e--)if(!a[e](b,c,d))return!1;return!0}:a[0]}function ub(a,b,c){for(var d=0,e=b.length;e>d;d++)gb(a,b[d],c);return c}function vb(a,b,c,d,e){for(var f,g=[],h=0,i=a.length,j=null!=b;i>h;h++)(f=a[h])&&(!c||c(f,d,e))&&(g.push(f),j&&b.push(h));return g}function wb(a,b,c,d,e,f){return d&&!d[u]&&(d=wb(d)),e&&!e[u]&&(e=wb(e,f)),ib(function(f,g,h,i){var j,k,l,m=[],n=[],o=g.length,p=f||ub(b||"*",h.nodeType?[h]:h,[]),q=!a||!f&&b?p:vb(p,m,a,h,i),r=c?e||(f?a:o||d)?[]:g:q;if(c&&c(q,r,h,i),d){j=vb(r,n),d(j,[],h,i),k=j.length;while(k--)(l=j[k])&&(r[n[k]]=!(q[n[k]]=l))}if(f){if(e||a){if(e){j=[],k=r.length;while(k--)(l=r[k])&&j.push(q[k]=l);e(null,r=[],j,i)}k=r.length;while(k--)(l=r[k])&&(j=e?J(f,l):m[k])>-1&&(f[j]=!(g[j]=l))}}else r=vb(r===g?r.splice(o,r.length):r),e?e(null,g,r,i):H.apply(g,r)})}function xb(a){for(var b,c,e,f=a.length,g=d.relative[a[0].type],h=g||d.relative[" "],i=g?1:0,k=sb(function(a){return a===b},h,!0),l=sb(function(a){return J(b,a)>-1},h,!0),m=[function(a,c,d){var e=!g&&(d||c!==j)||((b=c).nodeType?k(a,c,d):l(a,c,d));return b=null,e}];f>i;i++)if(c=d.relative[a[i].type])m=[sb(tb(m),c)];else{if(c=d.filter[a[i].type].apply(null,a[i].matches),c[u]){for(e=++i;f>e;e++)if(d.relative[a[e].type])break;return wb(i>1&&tb(m),i>1&&rb(a.slice(0,i-1).concat({value:" "===a[i-2].type?"*":""})).replace(R,"$1"),c,e>i&&xb(a.slice(i,e)),f>e&&xb(a=a.slice(e)),f>e&&rb(a))}m.push(c)}return tb(m)}function yb(a,b){var c=b.length>0,e=a.length>0,f=function(f,g,h,i,k){var l,m,o,p=0,q="0",r=f&&[],s=[],t=j,u=f||e&&d.find.TAG("*",k),v=w+=null==t?1:Math.random()||.1,x=u.length;for(k&&(j=g!==n&&g);q!==x&&null!=(l=u[q]);q++){if(e&&l){m=0;while(o=a[m++])if(o(l,g,h)){i.push(l);break}k&&(w=v)}c&&((l=!o&&l)&&p--,f&&r.push(l))}if(p+=q,c&&q!==p){m=0;while(o=b[m++])o(r,s,g,h);if(f){if(p>0)while(q--)r[q]||s[q]||(s[q]=F.call(i));s=vb(s)}H.apply(i,s),k&&!f&&s.length>0&&p+b.length>1&&gb.uniqueSort(i)}return k&&(w=v,j=t),r};return c?ib(f):f}return h=gb.compile=function(a,b){var c,d=[],e=[],f=A[a+" "];if(!f){b||(b=g(a)),c=b.length;while(c--)f=xb(b[c]),f[u]?d.push(f):e.push(f);f=A(a,yb(e,d)),f.selector=a}return f},i=gb.select=function(a,b,e,f){var i,j,k,l,m,n="function"==typeof a&&a,o=!f&&g(a=n.selector||a);if(e=e||[],1===o.length){if(j=o[0]=o[0].slice(0),j.length>2&&"ID"===(k=j[0]).type&&c.getById&&9===b.nodeType&&p&&d.relative[j[1].type]){if(b=(d.find.ID(k.matches[0].replace(cb,db),b)||[])[0],!b)return e;n&&(b=b.parentNode),a=a.slice(j.shift().value.length)}i=X.needsContext.test(a)?0:j.length;while(i--){if(k=j[i],d.relative[l=k.type])break;if((m=d.find[l])&&(f=m(k.matches[0].replace(cb,db),ab.test(j[0].type)&&pb(b.parentNode)||b))){if(j.splice(i,1),a=f.length&&rb(j),!a)return H.apply(e,f),e;break}}}return(n||h(a,o))(f,b,!p,e,ab.test(a)&&pb(b.parentNode)||b),e},c.sortStable=u.split("").sort(B).join("")===u,c.detectDuplicates=!!l,m(),c.sortDetached=jb(function(a){return 1&a.compareDocumentPosition(n.createElement("div"))}),jb(function(a){return a.innerHTML="<a href='#'></a>","#"===a.firstChild.getAttribute("href")})||kb("type|href|height|width",function(a,b,c){return c?void 0:a.getAttribute(b,"type"===b.toLowerCase()?1:2)}),c.attributes&&jb(function(a){return a.innerHTML="<input/>",a.firstChild.setAttribute("value",""),""===a.firstChild.getAttribute("value")})||kb("value",function(a,b,c){return c||"input"!==a.nodeName.toLowerCase()?void 0:a.defaultValue}),jb(function(a){return null==a.getAttribute("disabled")})||kb(K,function(a,b,c){var d;return c?void 0:a[b]===!0?b.toLowerCase():(d=a.getAttributeNode(b))&&d.specified?d.value:null}),gb}(a);n.find=t,n.expr=t.selectors,n.expr[":"]=n.expr.pseudos,n.unique=t.uniqueSort,n.text=t.getText,n.isXMLDoc=t.isXML,n.contains=t.contains;var u=n.expr.match.needsContext,v=/^<(\w+)\s*\/?>(?:<\/\1>|)$/,w=/^.[^:#\[\.,]*$/;function x(a,b,c){if(n.isFunction(b))return n.grep(a,function(a,d){return!!b.call(a,d,a)!==c});if(b.nodeType)return n.grep(a,function(a){return a===b!==c});if("string"==typeof b){if(w.test(b))return n.filter(b,a,c);b=n.filter(b,a)}return n.grep(a,function(a){return g.call(b,a)>=0!==c})}n.filter=function(a,b,c){var d=b[0];return c&&(a=":not("+a+")"),1===b.length&&1===d.nodeType?n.find.matchesSelector(d,a)?[d]:[]:n.find.matches(a,n.grep(b,function(a){return 1===a.nodeType}))},n.fn.extend({find:function(a){var b,c=this.length,d=[],e=this;if("string"!=typeof a)return this.pushStack(n(a).filter(function(){for(b=0;c>b;b++)if(n.contains(e[b],this))return!0}));for(b=0;c>b;b++)n.find(a,e[b],d);return d=this.pushStack(c>1?n.unique(d):d),d.selector=this.selector?this.selector+" "+a:a,d},filter:function(a){return this.pushStack(x(this,a||[],!1))},not:function(a){return this.pushStack(x(this,a||[],!0))},is:function(a){return!!x(this,"string"==typeof a&&u.test(a)?n(a):a||[],!1).length}});var y,z=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,A=n.fn.init=function(a,b){var c,d;if(!a)return this;if("string"==typeof a){if(c="<"===a[0]&&">"===a[a.length-1]&&a.length>=3?[null,a,null]:z.exec(a),!c||!c[1]&&b)return!b||b.jquery?(b||y).find(a):this.constructor(b).find(a);if(c[1]){if(b=b instanceof n?b[0]:b,n.merge(this,n.parseHTML(c[1],b&&b.nodeType?b.ownerDocument||b:l,!0)),v.test(c[1])&&n.isPlainObject(b))for(c in b)n.isFunction(this[c])?this[c](b[c]):this.attr(c,b[c]);return this}return d=l.getElementById(c[2]),d&&d.parentNode&&(this.length=1,this[0]=d),this.context=l,this.selector=a,this}return a.nodeType?(this.context=this[0]=a,this.length=1,this):n.isFunction(a)?"undefined"!=typeof y.ready?y.ready(a):a(n):(void 0!==a.selector&&(this.selector=a.selector,this.context=a.context),n.makeArray(a,this))};A.prototype=n.fn,y=n(l);var B=/^(?:parents|prev(?:Until|All))/,C={children:!0,contents:!0,next:!0,prev:!0};n.extend({dir:function(a,b,c){var d=[],e=void 0!==c;while((a=a[b])&&9!==a.nodeType)if(1===a.nodeType){if(e&&n(a).is(c))break;d.push(a)}return d},sibling:function(a,b){for(var c=[];a;a=a.nextSibling)1===a.nodeType&&a!==b&&c.push(a);return c}}),n.fn.extend({has:function(a){var b=n(a,this),c=b.length;return this.filter(function(){for(var a=0;c>a;a++)if(n.contains(this,b[a]))return!0})},closest:function(a,b){for(var c,d=0,e=this.length,f=[],g=u.test(a)||"string"!=typeof a?n(a,b||this.context):0;e>d;d++)for(c=this[d];c&&c!==b;c=c.parentNode)if(c.nodeType<11&&(g?g.index(c)>-1:1===c.nodeType&&n.find.matchesSelector(c,a))){f.push(c);break}return this.pushStack(f.length>1?n.unique(f):f)},index:function(a){return a?"string"==typeof a?g.call(n(a),this[0]):g.call(this,a.jquery?a[0]:a):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(a,b){return this.pushStack(n.unique(n.merge(this.get(),n(a,b))))},addBack:function(a){return this.add(null==a?this.prevObject:this.prevObject.filter(a))}});function D(a,b){while((a=a[b])&&1!==a.nodeType);return a}n.each({parent:function(a){var b=a.parentNode;return b&&11!==b.nodeType?b:null},parents:function(a){return n.dir(a,"parentNode")},parentsUntil:function(a,b,c){return n.dir(a,"parentNode",c)},next:function(a){return D(a,"nextSibling")},prev:function(a){return D(a,"previousSibling")},nextAll:function(a){return n.dir(a,"nextSibling")},prevAll:function(a){return n.dir(a,"previousSibling")},nextUntil:function(a,b,c){return n.dir(a,"nextSibling",c)},prevUntil:function(a,b,c){return n.dir(a,"previousSibling",c)},siblings:function(a){return n.sibling((a.parentNode||{}).firstChild,a)},children:function(a){return n.sibling(a.firstChild)},contents:function(a){return a.contentDocument||n.merge([],a.childNodes)}},function(a,b){n.fn[a]=function(c,d){var e=n.map(this,b,c);return"Until"!==a.slice(-5)&&(d=c),d&&"string"==typeof d&&(e=n.filter(d,e)),this.length>1&&(C[a]||n.unique(e),B.test(a)&&e.reverse()),this.pushStack(e)}});var E=/\S+/g,F={};function G(a){var b=F[a]={};return n.each(a.match(E)||[],function(a,c){b[c]=!0}),b}n.Callbacks=function(a){a="string"==typeof a?F[a]||G(a):n.extend({},a);var b,c,d,e,f,g,h=[],i=!a.once&&[],j=function(l){for(b=a.memory&&l,c=!0,g=e||0,e=0,f=h.length,d=!0;h&&f>g;g++)if(h[g].apply(l[0],l[1])===!1&&a.stopOnFalse){b=!1;break}d=!1,h&&(i?i.length&&j(i.shift()):b?h=[]:k.disable())},k={add:function(){if(h){var c=h.length;!function g(b){n.each(b,function(b,c){var d=n.type(c);"function"===d?a.unique&&k.has(c)||h.push(c):c&&c.length&&"string"!==d&&g(c)})}(arguments),d?f=h.length:b&&(e=c,j(b))}return this},remove:function(){return h&&n.each(arguments,function(a,b){var c;while((c=n.inArray(b,h,c))>-1)h.splice(c,1),d&&(f>=c&&f--,g>=c&&g--)}),this},has:function(a){return a?n.inArray(a,h)>-1:!(!h||!h.length)},empty:function(){return h=[],f=0,this},disable:function(){return h=i=b=void 0,this},disabled:function(){return!h},lock:function(){return i=void 0,b||k.disable(),this},locked:function(){return!i},fireWith:function(a,b){return!h||c&&!i||(b=b||[],b=[a,b.slice?b.slice():b],d?i.push(b):j(b)),this},fire:function(){return k.fireWith(this,arguments),this},fired:function(){return!!c}};return k},n.extend({Deferred:function(a){var b=[["resolve","done",n.Callbacks("once memory"),"resolved"],["reject","fail",n.Callbacks("once memory"),"rejected"],["notify","progress",n.Callbacks("memory")]],c="pending",d={state:function(){return c},always:function(){return e.done(arguments).fail(arguments),this},then:function(){var a=arguments;return n.Deferred(function(c){n.each(b,function(b,f){var g=n.isFunction(a[b])&&a[b];e[f[1]](function(){var a=g&&g.apply(this,arguments);a&&n.isFunction(a.promise)?a.promise().done(c.resolve).fail(c.reject).progress(c.notify):c[f[0]+"With"](this===d?c.promise():this,g?[a]:arguments)})}),a=null}).promise()},promise:function(a){return null!=a?n.extend(a,d):d}},e={};return d.pipe=d.then,n.each(b,function(a,f){var g=f[2],h=f[3];d[f[1]]=g.add,h&&g.add(function(){c=h},b[1^a][2].disable,b[2][2].lock),e[f[0]]=function(){return e[f[0]+"With"](this===e?d:this,arguments),this},e[f[0]+"With"]=g.fireWith}),d.promise(e),a&&a.call(e,e),e},when:function(a){var b=0,c=d.call(arguments),e=c.length,f=1!==e||a&&n.isFunction(a.promise)?e:0,g=1===f?a:n.Deferred(),h=function(a,b,c){return function(e){b[a]=this,c[a]=arguments.length>1?d.call(arguments):e,c===i?g.notifyWith(b,c):--f||g.resolveWith(b,c)}},i,j,k;if(e>1)for(i=new Array(e),j=new Array(e),k=new Array(e);e>b;b++)c[b]&&n.isFunction(c[b].promise)?c[b].promise().done(h(b,k,c)).fail(g.reject).progress(h(b,j,i)):--f;return f||g.resolveWith(k,c),g.promise()}});var H;n.fn.ready=function(a){return n.ready.promise().done(a),this},n.extend({isReady:!1,readyWait:1,holdReady:function(a){a?n.readyWait++:n.ready(!0)},ready:function(a){(a===!0?--n.readyWait:n.isReady)||(n.isReady=!0,a!==!0&&--n.readyWait>0||(H.resolveWith(l,[n]),n.fn.triggerHandler&&(n(l).triggerHandler("ready"),n(l).off("ready"))))}});function I(){l.removeEventListener("DOMContentLoaded",I,!1),a.removeEventListener("load",I,!1),n.ready()}n.ready.promise=function(b){return H||(H=n.Deferred(),"complete"===l.readyState?setTimeout(n.ready):(l.addEventListener("DOMContentLoaded",I,!1),a.addEventListener("load",I,!1))),H.promise(b)},n.ready.promise();var J=n.access=function(a,b,c,d,e,f,g){var h=0,i=a.length,j=null==c;if("object"===n.type(c)){e=!0;for(h in c)n.access(a,b,h,c[h],!0,f,g)}else if(void 0!==d&&(e=!0,n.isFunction(d)||(g=!0),j&&(g?(b.call(a,d),b=null):(j=b,b=function(a,b,c){return j.call(n(a),c)})),b))for(;i>h;h++)b(a[h],c,g?d:d.call(a[h],h,b(a[h],c)));return e?a:j?b.call(a):i?b(a[0],c):f};n.acceptData=function(a){return 1===a.nodeType||9===a.nodeType||!+a.nodeType};function K(){Object.defineProperty(this.cache={},0,{get:function(){return{}}}),this.expando=n.expando+K.uid++}K.uid=1,K.accepts=n.acceptData,K.prototype={key:function(a){if(!K.accepts(a))return 0;var b={},c=a[this.expando];if(!c){c=K.uid++;try{b[this.expando]={value:c},Object.defineProperties(a,b)}catch(d){b[this.expando]=c,n.extend(a,b)}}return this.cache[c]||(this.cache[c]={}),c},set:function(a,b,c){var d,e=this.key(a),f=this.cache[e];if("string"==typeof b)f[b]=c;else if(n.isEmptyObject(f))n.extend(this.cache[e],b);else for(d in b)f[d]=b[d];return f},get:function(a,b){var c=this.cache[this.key(a)];return void 0===b?c:c[b]},access:function(a,b,c){var d;return void 0===b||b&&"string"==typeof b&&void 0===c?(d=this.get(a,b),void 0!==d?d:this.get(a,n.camelCase(b))):(this.set(a,b,c),void 0!==c?c:b)},remove:function(a,b){var c,d,e,f=this.key(a),g=this.cache[f];if(void 0===b)this.cache[f]={};else{n.isArray(b)?d=b.concat(b.map(n.camelCase)):(e=n.camelCase(b),b in g?d=[b,e]:(d=e,d=d in g?[d]:d.match(E)||[])),c=d.length;while(c--)delete g[d[c]]}},hasData:function(a){return!n.isEmptyObject(this.cache[a[this.expando]]||{})},discard:function(a){a[this.expando]&&delete this.cache[a[this.expando]]}};var L=new K,M=new K,N=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,O=/([A-Z])/g;function P(a,b,c){var d;if(void 0===c&&1===a.nodeType)if(d="data-"+b.replace(O,"-$1").toLowerCase(),c=a.getAttribute(d),"string"==typeof c){try{c="true"===c?!0:"false"===c?!1:"null"===c?null:+c+""===c?+c:N.test(c)?n.parseJSON(c):c}catch(e){}M.set(a,b,c)}else c=void 0;return c}n.extend({hasData:function(a){return M.hasData(a)||L.hasData(a)},data:function(a,b,c){return M.access(a,b,c)
},removeData:function(a,b){M.remove(a,b)},_data:function(a,b,c){return L.access(a,b,c)},_removeData:function(a,b){L.remove(a,b)}}),n.fn.extend({data:function(a,b){var c,d,e,f=this[0],g=f&&f.attributes;if(void 0===a){if(this.length&&(e=M.get(f),1===f.nodeType&&!L.get(f,"hasDataAttrs"))){c=g.length;while(c--)g[c]&&(d=g[c].name,0===d.indexOf("data-")&&(d=n.camelCase(d.slice(5)),P(f,d,e[d])));L.set(f,"hasDataAttrs",!0)}return e}return"object"==typeof a?this.each(function(){M.set(this,a)}):J(this,function(b){var c,d=n.camelCase(a);if(f&&void 0===b){if(c=M.get(f,a),void 0!==c)return c;if(c=M.get(f,d),void 0!==c)return c;if(c=P(f,d,void 0),void 0!==c)return c}else this.each(function(){var c=M.get(this,d);M.set(this,d,b),-1!==a.indexOf("-")&&void 0!==c&&M.set(this,a,b)})},null,b,arguments.length>1,null,!0)},removeData:function(a){return this.each(function(){M.remove(this,a)})}}),n.extend({queue:function(a,b,c){var d;return a?(b=(b||"fx")+"queue",d=L.get(a,b),c&&(!d||n.isArray(c)?d=L.access(a,b,n.makeArray(c)):d.push(c)),d||[]):void 0},dequeue:function(a,b){b=b||"fx";var c=n.queue(a,b),d=c.length,e=c.shift(),f=n._queueHooks(a,b),g=function(){n.dequeue(a,b)};"inprogress"===e&&(e=c.shift(),d--),e&&("fx"===b&&c.unshift("inprogress"),delete f.stop,e.call(a,g,f)),!d&&f&&f.empty.fire()},_queueHooks:function(a,b){var c=b+"queueHooks";return L.get(a,c)||L.access(a,c,{empty:n.Callbacks("once memory").add(function(){L.remove(a,[b+"queue",c])})})}}),n.fn.extend({queue:function(a,b){var c=2;return"string"!=typeof a&&(b=a,a="fx",c--),arguments.length<c?n.queue(this[0],a):void 0===b?this:this.each(function(){var c=n.queue(this,a,b);n._queueHooks(this,a),"fx"===a&&"inprogress"!==c[0]&&n.dequeue(this,a)})},dequeue:function(a){return this.each(function(){n.dequeue(this,a)})},clearQueue:function(a){return this.queue(a||"fx",[])},promise:function(a,b){var c,d=1,e=n.Deferred(),f=this,g=this.length,h=function(){--d||e.resolveWith(f,[f])};"string"!=typeof a&&(b=a,a=void 0),a=a||"fx";while(g--)c=L.get(f[g],a+"queueHooks"),c&&c.empty&&(d++,c.empty.add(h));return h(),e.promise(b)}});var Q=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,R=["Top","Right","Bottom","Left"],S=function(a,b){return a=b||a,"none"===n.css(a,"display")||!n.contains(a.ownerDocument,a)},T=/^(?:checkbox|radio)$/i;!function(){var a=l.createDocumentFragment(),b=a.appendChild(l.createElement("div")),c=l.createElement("input");c.setAttribute("type","radio"),c.setAttribute("checked","checked"),c.setAttribute("name","t"),b.appendChild(c),k.checkClone=b.cloneNode(!0).cloneNode(!0).lastChild.checked,b.innerHTML="<textarea>x</textarea>",k.noCloneChecked=!!b.cloneNode(!0).lastChild.defaultValue}();var U="undefined";k.focusinBubbles="onfocusin"in a;var V=/^key/,W=/^(?:mouse|pointer|contextmenu)|click/,X=/^(?:focusinfocus|focusoutblur)$/,Y=/^([^.]*)(?:\.(.+)|)$/;function Z(){return!0}function $(){return!1}function _(){try{return l.activeElement}catch(a){}}n.event={global:{},add:function(a,b,c,d,e){var f,g,h,i,j,k,l,m,o,p,q,r=L.get(a);if(r){c.handler&&(f=c,c=f.handler,e=f.selector),c.guid||(c.guid=n.guid++),(i=r.events)||(i=r.events={}),(g=r.handle)||(g=r.handle=function(b){return typeof n!==U&&n.event.triggered!==b.type?n.event.dispatch.apply(a,arguments):void 0}),b=(b||"").match(E)||[""],j=b.length;while(j--)h=Y.exec(b[j])||[],o=q=h[1],p=(h[2]||"").split(".").sort(),o&&(l=n.event.special[o]||{},o=(e?l.delegateType:l.bindType)||o,l=n.event.special[o]||{},k=n.extend({type:o,origType:q,data:d,handler:c,guid:c.guid,selector:e,needsContext:e&&n.expr.match.needsContext.test(e),namespace:p.join(".")},f),(m=i[o])||(m=i[o]=[],m.delegateCount=0,l.setup&&l.setup.call(a,d,p,g)!==!1||a.addEventListener&&a.addEventListener(o,g,!1)),l.add&&(l.add.call(a,k),k.handler.guid||(k.handler.guid=c.guid)),e?m.splice(m.delegateCount++,0,k):m.push(k),n.event.global[o]=!0)}},remove:function(a,b,c,d,e){var f,g,h,i,j,k,l,m,o,p,q,r=L.hasData(a)&&L.get(a);if(r&&(i=r.events)){b=(b||"").match(E)||[""],j=b.length;while(j--)if(h=Y.exec(b[j])||[],o=q=h[1],p=(h[2]||"").split(".").sort(),o){l=n.event.special[o]||{},o=(d?l.delegateType:l.bindType)||o,m=i[o]||[],h=h[2]&&new RegExp("(^|\\.)"+p.join("\\.(?:.*\\.|)")+"(\\.|$)"),g=f=m.length;while(f--)k=m[f],!e&&q!==k.origType||c&&c.guid!==k.guid||h&&!h.test(k.namespace)||d&&d!==k.selector&&("**"!==d||!k.selector)||(m.splice(f,1),k.selector&&m.delegateCount--,l.remove&&l.remove.call(a,k));g&&!m.length&&(l.teardown&&l.teardown.call(a,p,r.handle)!==!1||n.removeEvent(a,o,r.handle),delete i[o])}else for(o in i)n.event.remove(a,o+b[j],c,d,!0);n.isEmptyObject(i)&&(delete r.handle,L.remove(a,"events"))}},trigger:function(b,c,d,e){var f,g,h,i,k,m,o,p=[d||l],q=j.call(b,"type")?b.type:b,r=j.call(b,"namespace")?b.namespace.split("."):[];if(g=h=d=d||l,3!==d.nodeType&&8!==d.nodeType&&!X.test(q+n.event.triggered)&&(q.indexOf(".")>=0&&(r=q.split("."),q=r.shift(),r.sort()),k=q.indexOf(":")<0&&"on"+q,b=b[n.expando]?b:new n.Event(q,"object"==typeof b&&b),b.isTrigger=e?2:3,b.namespace=r.join("."),b.namespace_re=b.namespace?new RegExp("(^|\\.)"+r.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,b.result=void 0,b.target||(b.target=d),c=null==c?[b]:n.makeArray(c,[b]),o=n.event.special[q]||{},e||!o.trigger||o.trigger.apply(d,c)!==!1)){if(!e&&!o.noBubble&&!n.isWindow(d)){for(i=o.delegateType||q,X.test(i+q)||(g=g.parentNode);g;g=g.parentNode)p.push(g),h=g;h===(d.ownerDocument||l)&&p.push(h.defaultView||h.parentWindow||a)}f=0;while((g=p[f++])&&!b.isPropagationStopped())b.type=f>1?i:o.bindType||q,m=(L.get(g,"events")||{})[b.type]&&L.get(g,"handle"),m&&m.apply(g,c),m=k&&g[k],m&&m.apply&&n.acceptData(g)&&(b.result=m.apply(g,c),b.result===!1&&b.preventDefault());return b.type=q,e||b.isDefaultPrevented()||o._default&&o._default.apply(p.pop(),c)!==!1||!n.acceptData(d)||k&&n.isFunction(d[q])&&!n.isWindow(d)&&(h=d[k],h&&(d[k]=null),n.event.triggered=q,d[q](),n.event.triggered=void 0,h&&(d[k]=h)),b.result}},dispatch:function(a){a=n.event.fix(a);var b,c,e,f,g,h=[],i=d.call(arguments),j=(L.get(this,"events")||{})[a.type]||[],k=n.event.special[a.type]||{};if(i[0]=a,a.delegateTarget=this,!k.preDispatch||k.preDispatch.call(this,a)!==!1){h=n.event.handlers.call(this,a,j),b=0;while((f=h[b++])&&!a.isPropagationStopped()){a.currentTarget=f.elem,c=0;while((g=f.handlers[c++])&&!a.isImmediatePropagationStopped())(!a.namespace_re||a.namespace_re.test(g.namespace))&&(a.handleObj=g,a.data=g.data,e=((n.event.special[g.origType]||{}).handle||g.handler).apply(f.elem,i),void 0!==e&&(a.result=e)===!1&&(a.preventDefault(),a.stopPropagation()))}return k.postDispatch&&k.postDispatch.call(this,a),a.result}},handlers:function(a,b){var c,d,e,f,g=[],h=b.delegateCount,i=a.target;if(h&&i.nodeType&&(!a.button||"click"!==a.type))for(;i!==this;i=i.parentNode||this)if(i.disabled!==!0||"click"!==a.type){for(d=[],c=0;h>c;c++)f=b[c],e=f.selector+" ",void 0===d[e]&&(d[e]=f.needsContext?n(e,this).index(i)>=0:n.find(e,this,null,[i]).length),d[e]&&d.push(f);d.length&&g.push({elem:i,handlers:d})}return h<b.length&&g.push({elem:this,handlers:b.slice(h)}),g},props:"altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),fixHooks:{},keyHooks:{props:"char charCode key keyCode".split(" "),filter:function(a,b){return null==a.which&&(a.which=null!=b.charCode?b.charCode:b.keyCode),a}},mouseHooks:{props:"button buttons clientX clientY offsetX offsetY pageX pageY screenX screenY toElement".split(" "),filter:function(a,b){var c,d,e,f=b.button;return null==a.pageX&&null!=b.clientX&&(c=a.target.ownerDocument||l,d=c.documentElement,e=c.body,a.pageX=b.clientX+(d&&d.scrollLeft||e&&e.scrollLeft||0)-(d&&d.clientLeft||e&&e.clientLeft||0),a.pageY=b.clientY+(d&&d.scrollTop||e&&e.scrollTop||0)-(d&&d.clientTop||e&&e.clientTop||0)),a.which||void 0===f||(a.which=1&f?1:2&f?3:4&f?2:0),a}},fix:function(a){if(a[n.expando])return a;var b,c,d,e=a.type,f=a,g=this.fixHooks[e];g||(this.fixHooks[e]=g=W.test(e)?this.mouseHooks:V.test(e)?this.keyHooks:{}),d=g.props?this.props.concat(g.props):this.props,a=new n.Event(f),b=d.length;while(b--)c=d[b],a[c]=f[c];return a.target||(a.target=l),3===a.target.nodeType&&(a.target=a.target.parentNode),g.filter?g.filter(a,f):a},special:{load:{noBubble:!0},focus:{trigger:function(){return this!==_()&&this.focus?(this.focus(),!1):void 0},delegateType:"focusin"},blur:{trigger:function(){return this===_()&&this.blur?(this.blur(),!1):void 0},delegateType:"focusout"},click:{trigger:function(){return"checkbox"===this.type&&this.click&&n.nodeName(this,"input")?(this.click(),!1):void 0},_default:function(a){return n.nodeName(a.target,"a")}},beforeunload:{postDispatch:function(a){void 0!==a.result&&a.originalEvent&&(a.originalEvent.returnValue=a.result)}}},simulate:function(a,b,c,d){var e=n.extend(new n.Event,c,{type:a,isSimulated:!0,originalEvent:{}});d?n.event.trigger(e,null,b):n.event.dispatch.call(b,e),e.isDefaultPrevented()&&c.preventDefault()}},n.removeEvent=function(a,b,c){a.removeEventListener&&a.removeEventListener(b,c,!1)},n.Event=function(a,b){return this instanceof n.Event?(a&&a.type?(this.originalEvent=a,this.type=a.type,this.isDefaultPrevented=a.defaultPrevented||void 0===a.defaultPrevented&&a.returnValue===!1?Z:$):this.type=a,b&&n.extend(this,b),this.timeStamp=a&&a.timeStamp||n.now(),void(this[n.expando]=!0)):new n.Event(a,b)},n.Event.prototype={isDefaultPrevented:$,isPropagationStopped:$,isImmediatePropagationStopped:$,preventDefault:function(){var a=this.originalEvent;this.isDefaultPrevented=Z,a&&a.preventDefault&&a.preventDefault()},stopPropagation:function(){var a=this.originalEvent;this.isPropagationStopped=Z,a&&a.stopPropagation&&a.stopPropagation()},stopImmediatePropagation:function(){var a=this.originalEvent;this.isImmediatePropagationStopped=Z,a&&a.stopImmediatePropagation&&a.stopImmediatePropagation(),this.stopPropagation()}},n.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(a,b){n.event.special[a]={delegateType:b,bindType:b,handle:function(a){var c,d=this,e=a.relatedTarget,f=a.handleObj;return(!e||e!==d&&!n.contains(d,e))&&(a.type=f.origType,c=f.handler.apply(this,arguments),a.type=b),c}}}),k.focusinBubbles||n.each({focus:"focusin",blur:"focusout"},function(a,b){var c=function(a){n.event.simulate(b,a.target,n.event.fix(a),!0)};n.event.special[b]={setup:function(){var d=this.ownerDocument||this,e=L.access(d,b);e||d.addEventListener(a,c,!0),L.access(d,b,(e||0)+1)},teardown:function(){var d=this.ownerDocument||this,e=L.access(d,b)-1;e?L.access(d,b,e):(d.removeEventListener(a,c,!0),L.remove(d,b))}}}),n.fn.extend({on:function(a,b,c,d,e){var f,g;if("object"==typeof a){"string"!=typeof b&&(c=c||b,b=void 0);for(g in a)this.on(g,b,c,a[g],e);return this}if(null==c&&null==d?(d=b,c=b=void 0):null==d&&("string"==typeof b?(d=c,c=void 0):(d=c,c=b,b=void 0)),d===!1)d=$;else if(!d)return this;return 1===e&&(f=d,d=function(a){return n().off(a),f.apply(this,arguments)},d.guid=f.guid||(f.guid=n.guid++)),this.each(function(){n.event.add(this,a,d,c,b)})},one:function(a,b,c,d){return this.on(a,b,c,d,1)},off:function(a,b,c){var d,e;if(a&&a.preventDefault&&a.handleObj)return d=a.handleObj,n(a.delegateTarget).off(d.namespace?d.origType+"."+d.namespace:d.origType,d.selector,d.handler),this;if("object"==typeof a){for(e in a)this.off(e,b,a[e]);return this}return(b===!1||"function"==typeof b)&&(c=b,b=void 0),c===!1&&(c=$),this.each(function(){n.event.remove(this,a,c,b)})},trigger:function(a,b){return this.each(function(){n.event.trigger(a,b,this)})},triggerHandler:function(a,b){var c=this[0];return c?n.event.trigger(a,b,c,!0):void 0}});var ab=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi,bb=/<([\w:]+)/,cb=/<|&#?\w+;/,db=/<(?:script|style|link)/i,eb=/checked\s*(?:[^=]|=\s*.checked.)/i,fb=/^$|\/(?:java|ecma)script/i,gb=/^true\/(.*)/,hb=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g,ib={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};ib.optgroup=ib.option,ib.tbody=ib.tfoot=ib.colgroup=ib.caption=ib.thead,ib.th=ib.td;function jb(a,b){return n.nodeName(a,"table")&&n.nodeName(11!==b.nodeType?b:b.firstChild,"tr")?a.getElementsByTagName("tbody")[0]||a.appendChild(a.ownerDocument.createElement("tbody")):a}function kb(a){return a.type=(null!==a.getAttribute("type"))+"/"+a.type,a}function lb(a){var b=gb.exec(a.type);return b?a.type=b[1]:a.removeAttribute("type"),a}function mb(a,b){for(var c=0,d=a.length;d>c;c++)L.set(a[c],"globalEval",!b||L.get(b[c],"globalEval"))}function nb(a,b){var c,d,e,f,g,h,i,j;if(1===b.nodeType){if(L.hasData(a)&&(f=L.access(a),g=L.set(b,f),j=f.events)){delete g.handle,g.events={};for(e in j)for(c=0,d=j[e].length;d>c;c++)n.event.add(b,e,j[e][c])}M.hasData(a)&&(h=M.access(a),i=n.extend({},h),M.set(b,i))}}function ob(a,b){var c=a.getElementsByTagName?a.getElementsByTagName(b||"*"):a.querySelectorAll?a.querySelectorAll(b||"*"):[];return void 0===b||b&&n.nodeName(a,b)?n.merge([a],c):c}function pb(a,b){var c=b.nodeName.toLowerCase();"input"===c&&T.test(a.type)?b.checked=a.checked:("input"===c||"textarea"===c)&&(b.defaultValue=a.defaultValue)}n.extend({clone:function(a,b,c){var d,e,f,g,h=a.cloneNode(!0),i=n.contains(a.ownerDocument,a);if(!(k.noCloneChecked||1!==a.nodeType&&11!==a.nodeType||n.isXMLDoc(a)))for(g=ob(h),f=ob(a),d=0,e=f.length;e>d;d++)pb(f[d],g[d]);if(b)if(c)for(f=f||ob(a),g=g||ob(h),d=0,e=f.length;e>d;d++)nb(f[d],g[d]);else nb(a,h);return g=ob(h,"script"),g.length>0&&mb(g,!i&&ob(a,"script")),h},buildFragment:function(a,b,c,d){for(var e,f,g,h,i,j,k=b.createDocumentFragment(),l=[],m=0,o=a.length;o>m;m++)if(e=a[m],e||0===e)if("object"===n.type(e))n.merge(l,e.nodeType?[e]:e);else if(cb.test(e)){f=f||k.appendChild(b.createElement("div")),g=(bb.exec(e)||["",""])[1].toLowerCase(),h=ib[g]||ib._default,f.innerHTML=h[1]+e.replace(ab,"<$1></$2>")+h[2],j=h[0];while(j--)f=f.lastChild;n.merge(l,f.childNodes),f=k.firstChild,f.textContent=""}else l.push(b.createTextNode(e));k.textContent="",m=0;while(e=l[m++])if((!d||-1===n.inArray(e,d))&&(i=n.contains(e.ownerDocument,e),f=ob(k.appendChild(e),"script"),i&&mb(f),c)){j=0;while(e=f[j++])fb.test(e.type||"")&&c.push(e)}return k},cleanData:function(a){for(var b,c,d,e,f=n.event.special,g=0;void 0!==(c=a[g]);g++){if(n.acceptData(c)&&(e=c[L.expando],e&&(b=L.cache[e]))){if(b.events)for(d in b.events)f[d]?n.event.remove(c,d):n.removeEvent(c,d,b.handle);L.cache[e]&&delete L.cache[e]}delete M.cache[c[M.expando]]}}}),n.fn.extend({text:function(a){return J(this,function(a){return void 0===a?n.text(this):this.empty().each(function(){(1===this.nodeType||11===this.nodeType||9===this.nodeType)&&(this.textContent=a)})},null,a,arguments.length)},append:function(){return this.domManip(arguments,function(a){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var b=jb(this,a);b.appendChild(a)}})},prepend:function(){return this.domManip(arguments,function(a){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var b=jb(this,a);b.insertBefore(a,b.firstChild)}})},before:function(){return this.domManip(arguments,function(a){this.parentNode&&this.parentNode.insertBefore(a,this)})},after:function(){return this.domManip(arguments,function(a){this.parentNode&&this.parentNode.insertBefore(a,this.nextSibling)})},remove:function(a,b){for(var c,d=a?n.filter(a,this):this,e=0;null!=(c=d[e]);e++)b||1!==c.nodeType||n.cleanData(ob(c)),c.parentNode&&(b&&n.contains(c.ownerDocument,c)&&mb(ob(c,"script")),c.parentNode.removeChild(c));return this},empty:function(){for(var a,b=0;null!=(a=this[b]);b++)1===a.nodeType&&(n.cleanData(ob(a,!1)),a.textContent="");return this},clone:function(a,b){return a=null==a?!1:a,b=null==b?a:b,this.map(function(){return n.clone(this,a,b)})},html:function(a){return J(this,function(a){var b=this[0]||{},c=0,d=this.length;if(void 0===a&&1===b.nodeType)return b.innerHTML;if("string"==typeof a&&!db.test(a)&&!ib[(bb.exec(a)||["",""])[1].toLowerCase()]){a=a.replace(ab,"<$1></$2>");try{for(;d>c;c++)b=this[c]||{},1===b.nodeType&&(n.cleanData(ob(b,!1)),b.innerHTML=a);b=0}catch(e){}}b&&this.empty().append(a)},null,a,arguments.length)},replaceWith:function(){var a=arguments[0];return this.domManip(arguments,function(b){a=this.parentNode,n.cleanData(ob(this)),a&&a.replaceChild(b,this)}),a&&(a.length||a.nodeType)?this:this.remove()},detach:function(a){return this.remove(a,!0)},domManip:function(a,b){a=e.apply([],a);var c,d,f,g,h,i,j=0,l=this.length,m=this,o=l-1,p=a[0],q=n.isFunction(p);if(q||l>1&&"string"==typeof p&&!k.checkClone&&eb.test(p))return this.each(function(c){var d=m.eq(c);q&&(a[0]=p.call(this,c,d.html())),d.domManip(a,b)});if(l&&(c=n.buildFragment(a,this[0].ownerDocument,!1,this),d=c.firstChild,1===c.childNodes.length&&(c=d),d)){for(f=n.map(ob(c,"script"),kb),g=f.length;l>j;j++)h=c,j!==o&&(h=n.clone(h,!0,!0),g&&n.merge(f,ob(h,"script"))),b.call(this[j],h,j);if(g)for(i=f[f.length-1].ownerDocument,n.map(f,lb),j=0;g>j;j++)h=f[j],fb.test(h.type||"")&&!L.access(h,"globalEval")&&n.contains(i,h)&&(h.src?n._evalUrl&&n._evalUrl(h.src):n.globalEval(h.textContent.replace(hb,"")))}return this}}),n.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(a,b){n.fn[a]=function(a){for(var c,d=[],e=n(a),g=e.length-1,h=0;g>=h;h++)c=h===g?this:this.clone(!0),n(e[h])[b](c),f.apply(d,c.get());return this.pushStack(d)}});var qb,rb={};function sb(b,c){var d,e=n(c.createElement(b)).appendTo(c.body),f=a.getDefaultComputedStyle&&(d=a.getDefaultComputedStyle(e[0]))?d.display:n.css(e[0],"display");return e.detach(),f}function tb(a){var b=l,c=rb[a];return c||(c=sb(a,b),"none"!==c&&c||(qb=(qb||n("<iframe frameborder='0' width='0' height='0'/>")).appendTo(b.documentElement),b=qb[0].contentDocument,b.write(),b.close(),c=sb(a,b),qb.detach()),rb[a]=c),c}var ub=/^margin/,vb=new RegExp("^("+Q+")(?!px)[a-z%]+$","i"),wb=function(b){return b.ownerDocument.defaultView.opener?b.ownerDocument.defaultView.getComputedStyle(b,null):a.getComputedStyle(b,null)};function xb(a,b,c){var d,e,f,g,h=a.style;return c=c||wb(a),c&&(g=c.getPropertyValue(b)||c[b]),c&&(""!==g||n.contains(a.ownerDocument,a)||(g=n.style(a,b)),vb.test(g)&&ub.test(b)&&(d=h.width,e=h.minWidth,f=h.maxWidth,h.minWidth=h.maxWidth=h.width=g,g=c.width,h.width=d,h.minWidth=e,h.maxWidth=f)),void 0!==g?g+"":g}function yb(a,b){return{get:function(){return a()?void delete this.get:(this.get=b).apply(this,arguments)}}}!function(){var b,c,d=l.documentElement,e=l.createElement("div"),f=l.createElement("div");if(f.style){f.style.backgroundClip="content-box",f.cloneNode(!0).style.backgroundClip="",k.clearCloneStyle="content-box"===f.style.backgroundClip,e.style.cssText="border:0;width:0;height:0;top:0;left:-9999px;margin-top:1px;position:absolute",e.appendChild(f);function g(){f.style.cssText="-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;display:block;margin-top:1%;top:1%;border:1px;padding:1px;width:4px;position:absolute",f.innerHTML="",d.appendChild(e);var g=a.getComputedStyle(f,null);b="1%"!==g.top,c="4px"===g.width,d.removeChild(e)}a.getComputedStyle&&n.extend(k,{pixelPosition:function(){return g(),b},boxSizingReliable:function(){return null==c&&g(),c},reliableMarginRight:function(){var b,c=f.appendChild(l.createElement("div"));return c.style.cssText=f.style.cssText="-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box;display:block;margin:0;border:0;padding:0",c.style.marginRight=c.style.width="0",f.style.width="1px",d.appendChild(e),b=!parseFloat(a.getComputedStyle(c,null).marginRight),d.removeChild(e),f.removeChild(c),b}})}}(),n.swap=function(a,b,c,d){var e,f,g={};for(f in b)g[f]=a.style[f],a.style[f]=b[f];e=c.apply(a,d||[]);for(f in b)a.style[f]=g[f];return e};var zb=/^(none|table(?!-c[ea]).+)/,Ab=new RegExp("^("+Q+")(.*)$","i"),Bb=new RegExp("^([+-])=("+Q+")","i"),Cb={position:"absolute",visibility:"hidden",display:"block"},Db={letterSpacing:"0",fontWeight:"400"},Eb=["Webkit","O","Moz","ms"];function Fb(a,b){if(b in a)return b;var c=b[0].toUpperCase()+b.slice(1),d=b,e=Eb.length;while(e--)if(b=Eb[e]+c,b in a)return b;return d}function Gb(a,b,c){var d=Ab.exec(b);return d?Math.max(0,d[1]-(c||0))+(d[2]||"px"):b}function Hb(a,b,c,d,e){for(var f=c===(d?"border":"content")?4:"width"===b?1:0,g=0;4>f;f+=2)"margin"===c&&(g+=n.css(a,c+R[f],!0,e)),d?("content"===c&&(g-=n.css(a,"padding"+R[f],!0,e)),"margin"!==c&&(g-=n.css(a,"border"+R[f]+"Width",!0,e))):(g+=n.css(a,"padding"+R[f],!0,e),"padding"!==c&&(g+=n.css(a,"border"+R[f]+"Width",!0,e)));return g}function Ib(a,b,c){var d=!0,e="width"===b?a.offsetWidth:a.offsetHeight,f=wb(a),g="border-box"===n.css(a,"boxSizing",!1,f);if(0>=e||null==e){if(e=xb(a,b,f),(0>e||null==e)&&(e=a.style[b]),vb.test(e))return e;d=g&&(k.boxSizingReliable()||e===a.style[b]),e=parseFloat(e)||0}return e+Hb(a,b,c||(g?"border":"content"),d,f)+"px"}function Jb(a,b){for(var c,d,e,f=[],g=0,h=a.length;h>g;g++)d=a[g],d.style&&(f[g]=L.get(d,"olddisplay"),c=d.style.display,b?(f[g]||"none"!==c||(d.style.display=""),""===d.style.display&&S(d)&&(f[g]=L.access(d,"olddisplay",tb(d.nodeName)))):(e=S(d),"none"===c&&e||L.set(d,"olddisplay",e?c:n.css(d,"display"))));for(g=0;h>g;g++)d=a[g],d.style&&(b&&"none"!==d.style.display&&""!==d.style.display||(d.style.display=b?f[g]||"":"none"));return a}n.extend({cssHooks:{opacity:{get:function(a,b){if(b){var c=xb(a,"opacity");return""===c?"1":c}}}},cssNumber:{columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{"float":"cssFloat"},style:function(a,b,c,d){if(a&&3!==a.nodeType&&8!==a.nodeType&&a.style){var e,f,g,h=n.camelCase(b),i=a.style;return b=n.cssProps[h]||(n.cssProps[h]=Fb(i,h)),g=n.cssHooks[b]||n.cssHooks[h],void 0===c?g&&"get"in g&&void 0!==(e=g.get(a,!1,d))?e:i[b]:(f=typeof c,"string"===f&&(e=Bb.exec(c))&&(c=(e[1]+1)*e[2]+parseFloat(n.css(a,b)),f="number"),null!=c&&c===c&&("number"!==f||n.cssNumber[h]||(c+="px"),k.clearCloneStyle||""!==c||0!==b.indexOf("background")||(i[b]="inherit"),g&&"set"in g&&void 0===(c=g.set(a,c,d))||(i[b]=c)),void 0)}},css:function(a,b,c,d){var e,f,g,h=n.camelCase(b);return b=n.cssProps[h]||(n.cssProps[h]=Fb(a.style,h)),g=n.cssHooks[b]||n.cssHooks[h],g&&"get"in g&&(e=g.get(a,!0,c)),void 0===e&&(e=xb(a,b,d)),"normal"===e&&b in Db&&(e=Db[b]),""===c||c?(f=parseFloat(e),c===!0||n.isNumeric(f)?f||0:e):e}}),n.each(["height","width"],function(a,b){n.cssHooks[b]={get:function(a,c,d){return c?zb.test(n.css(a,"display"))&&0===a.offsetWidth?n.swap(a,Cb,function(){return Ib(a,b,d)}):Ib(a,b,d):void 0},set:function(a,c,d){var e=d&&wb(a);return Gb(a,c,d?Hb(a,b,d,"border-box"===n.css(a,"boxSizing",!1,e),e):0)}}}),n.cssHooks.marginRight=yb(k.reliableMarginRight,function(a,b){return b?n.swap(a,{display:"inline-block"},xb,[a,"marginRight"]):void 0}),n.each({margin:"",padding:"",border:"Width"},function(a,b){n.cssHooks[a+b]={expand:function(c){for(var d=0,e={},f="string"==typeof c?c.split(" "):[c];4>d;d++)e[a+R[d]+b]=f[d]||f[d-2]||f[0];return e}},ub.test(a)||(n.cssHooks[a+b].set=Gb)}),n.fn.extend({css:function(a,b){return J(this,function(a,b,c){var d,e,f={},g=0;if(n.isArray(b)){for(d=wb(a),e=b.length;e>g;g++)f[b[g]]=n.css(a,b[g],!1,d);return f}return void 0!==c?n.style(a,b,c):n.css(a,b)},a,b,arguments.length>1)},show:function(){return Jb(this,!0)},hide:function(){return Jb(this)},toggle:function(a){return"boolean"==typeof a?a?this.show():this.hide():this.each(function(){S(this)?n(this).show():n(this).hide()})}});function Kb(a,b,c,d,e){return new Kb.prototype.init(a,b,c,d,e)}n.Tween=Kb,Kb.prototype={constructor:Kb,init:function(a,b,c,d,e,f){this.elem=a,this.prop=c,this.easing=e||"swing",this.options=b,this.start=this.now=this.cur(),this.end=d,this.unit=f||(n.cssNumber[c]?"":"px")},cur:function(){var a=Kb.propHooks[this.prop];return a&&a.get?a.get(this):Kb.propHooks._default.get(this)},run:function(a){var b,c=Kb.propHooks[this.prop];return this.pos=b=this.options.duration?n.easing[this.easing](a,this.options.duration*a,0,1,this.options.duration):a,this.now=(this.end-this.start)*b+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),c&&c.set?c.set(this):Kb.propHooks._default.set(this),this}},Kb.prototype.init.prototype=Kb.prototype,Kb.propHooks={_default:{get:function(a){var b;return null==a.elem[a.prop]||a.elem.style&&null!=a.elem.style[a.prop]?(b=n.css(a.elem,a.prop,""),b&&"auto"!==b?b:0):a.elem[a.prop]},set:function(a){n.fx.step[a.prop]?n.fx.step[a.prop](a):a.elem.style&&(null!=a.elem.style[n.cssProps[a.prop]]||n.cssHooks[a.prop])?n.style(a.elem,a.prop,a.now+a.unit):a.elem[a.prop]=a.now}}},Kb.propHooks.scrollTop=Kb.propHooks.scrollLeft={set:function(a){a.elem.nodeType&&a.elem.parentNode&&(a.elem[a.prop]=a.now)}},n.easing={linear:function(a){return a},swing:function(a){return.5-Math.cos(a*Math.PI)/2}},n.fx=Kb.prototype.init,n.fx.step={};var Lb,Mb,Nb=/^(?:toggle|show|hide)$/,Ob=new RegExp("^(?:([+-])=|)("+Q+")([a-z%]*)$","i"),Pb=/queueHooks$/,Qb=[Vb],Rb={"*":[function(a,b){var c=this.createTween(a,b),d=c.cur(),e=Ob.exec(b),f=e&&e[3]||(n.cssNumber[a]?"":"px"),g=(n.cssNumber[a]||"px"!==f&&+d)&&Ob.exec(n.css(c.elem,a)),h=1,i=20;if(g&&g[3]!==f){f=f||g[3],e=e||[],g=+d||1;do h=h||".5",g/=h,n.style(c.elem,a,g+f);while(h!==(h=c.cur()/d)&&1!==h&&--i)}return e&&(g=c.start=+g||+d||0,c.unit=f,c.end=e[1]?g+(e[1]+1)*e[2]:+e[2]),c}]};function Sb(){return setTimeout(function(){Lb=void 0}),Lb=n.now()}function Tb(a,b){var c,d=0,e={height:a};for(b=b?1:0;4>d;d+=2-b)c=R[d],e["margin"+c]=e["padding"+c]=a;return b&&(e.opacity=e.width=a),e}function Ub(a,b,c){for(var d,e=(Rb[b]||[]).concat(Rb["*"]),f=0,g=e.length;g>f;f++)if(d=e[f].call(c,b,a))return d}function Vb(a,b,c){var d,e,f,g,h,i,j,k,l=this,m={},o=a.style,p=a.nodeType&&S(a),q=L.get(a,"fxshow");c.queue||(h=n._queueHooks(a,"fx"),null==h.unqueued&&(h.unqueued=0,i=h.empty.fire,h.empty.fire=function(){h.unqueued||i()}),h.unqueued++,l.always(function(){l.always(function(){h.unqueued--,n.queue(a,"fx").length||h.empty.fire()})})),1===a.nodeType&&("height"in b||"width"in b)&&(c.overflow=[o.overflow,o.overflowX,o.overflowY],j=n.css(a,"display"),k="none"===j?L.get(a,"olddisplay")||tb(a.nodeName):j,"inline"===k&&"none"===n.css(a,"float")&&(o.display="inline-block")),c.overflow&&(o.overflow="hidden",l.always(function(){o.overflow=c.overflow[0],o.overflowX=c.overflow[1],o.overflowY=c.overflow[2]}));for(d in b)if(e=b[d],Nb.exec(e)){if(delete b[d],f=f||"toggle"===e,e===(p?"hide":"show")){if("show"!==e||!q||void 0===q[d])continue;p=!0}m[d]=q&&q[d]||n.style(a,d)}else j=void 0;if(n.isEmptyObject(m))"inline"===("none"===j?tb(a.nodeName):j)&&(o.display=j);else{q?"hidden"in q&&(p=q.hidden):q=L.access(a,"fxshow",{}),f&&(q.hidden=!p),p?n(a).show():l.done(function(){n(a).hide()}),l.done(function(){var b;L.remove(a,"fxshow");for(b in m)n.style(a,b,m[b])});for(d in m)g=Ub(p?q[d]:0,d,l),d in q||(q[d]=g.start,p&&(g.end=g.start,g.start="width"===d||"height"===d?1:0))}}function Wb(a,b){var c,d,e,f,g;for(c in a)if(d=n.camelCase(c),e=b[d],f=a[c],n.isArray(f)&&(e=f[1],f=a[c]=f[0]),c!==d&&(a[d]=f,delete a[c]),g=n.cssHooks[d],g&&"expand"in g){f=g.expand(f),delete a[d];for(c in f)c in a||(a[c]=f[c],b[c]=e)}else b[d]=e}function Xb(a,b,c){var d,e,f=0,g=Qb.length,h=n.Deferred().always(function(){delete i.elem}),i=function(){if(e)return!1;for(var b=Lb||Sb(),c=Math.max(0,j.startTime+j.duration-b),d=c/j.duration||0,f=1-d,g=0,i=j.tweens.length;i>g;g++)j.tweens[g].run(f);return h.notifyWith(a,[j,f,c]),1>f&&i?c:(h.resolveWith(a,[j]),!1)},j=h.promise({elem:a,props:n.extend({},b),opts:n.extend(!0,{specialEasing:{}},c),originalProperties:b,originalOptions:c,startTime:Lb||Sb(),duration:c.duration,tweens:[],createTween:function(b,c){var d=n.Tween(a,j.opts,b,c,j.opts.specialEasing[b]||j.opts.easing);return j.tweens.push(d),d},stop:function(b){var c=0,d=b?j.tweens.length:0;if(e)return this;for(e=!0;d>c;c++)j.tweens[c].run(1);return b?h.resolveWith(a,[j,b]):h.rejectWith(a,[j,b]),this}}),k=j.props;for(Wb(k,j.opts.specialEasing);g>f;f++)if(d=Qb[f].call(j,a,k,j.opts))return d;return n.map(k,Ub,j),n.isFunction(j.opts.start)&&j.opts.start.call(a,j),n.fx.timer(n.extend(i,{elem:a,anim:j,queue:j.opts.queue})),j.progress(j.opts.progress).done(j.opts.done,j.opts.complete).fail(j.opts.fail).always(j.opts.always)}n.Animation=n.extend(Xb,{tweener:function(a,b){n.isFunction(a)?(b=a,a=["*"]):a=a.split(" ");for(var c,d=0,e=a.length;e>d;d++)c=a[d],Rb[c]=Rb[c]||[],Rb[c].unshift(b)},prefilter:function(a,b){b?Qb.unshift(a):Qb.push(a)}}),n.speed=function(a,b,c){var d=a&&"object"==typeof a?n.extend({},a):{complete:c||!c&&b||n.isFunction(a)&&a,duration:a,easing:c&&b||b&&!n.isFunction(b)&&b};return d.duration=n.fx.off?0:"number"==typeof d.duration?d.duration:d.duration in n.fx.speeds?n.fx.speeds[d.duration]:n.fx.speeds._default,(null==d.queue||d.queue===!0)&&(d.queue="fx"),d.old=d.complete,d.complete=function(){n.isFunction(d.old)&&d.old.call(this),d.queue&&n.dequeue(this,d.queue)},d},n.fn.extend({fadeTo:function(a,b,c,d){return this.filter(S).css("opacity",0).show().end().animate({opacity:b},a,c,d)},animate:function(a,b,c,d){var e=n.isEmptyObject(a),f=n.speed(b,c,d),g=function(){var b=Xb(this,n.extend({},a),f);(e||L.get(this,"finish"))&&b.stop(!0)};return g.finish=g,e||f.queue===!1?this.each(g):this.queue(f.queue,g)},stop:function(a,b,c){var d=function(a){var b=a.stop;delete a.stop,b(c)};return"string"!=typeof a&&(c=b,b=a,a=void 0),b&&a!==!1&&this.queue(a||"fx",[]),this.each(function(){var b=!0,e=null!=a&&a+"queueHooks",f=n.timers,g=L.get(this);if(e)g[e]&&g[e].stop&&d(g[e]);else for(e in g)g[e]&&g[e].stop&&Pb.test(e)&&d(g[e]);for(e=f.length;e--;)f[e].elem!==this||null!=a&&f[e].queue!==a||(f[e].anim.stop(c),b=!1,f.splice(e,1));(b||!c)&&n.dequeue(this,a)})},finish:function(a){return a!==!1&&(a=a||"fx"),this.each(function(){var b,c=L.get(this),d=c[a+"queue"],e=c[a+"queueHooks"],f=n.timers,g=d?d.length:0;for(c.finish=!0,n.queue(this,a,[]),e&&e.stop&&e.stop.call(this,!0),b=f.length;b--;)f[b].elem===this&&f[b].queue===a&&(f[b].anim.stop(!0),f.splice(b,1));for(b=0;g>b;b++)d[b]&&d[b].finish&&d[b].finish.call(this);delete c.finish})}}),n.each(["toggle","show","hide"],function(a,b){var c=n.fn[b];n.fn[b]=function(a,d,e){return null==a||"boolean"==typeof a?c.apply(this,arguments):this.animate(Tb(b,!0),a,d,e)}}),n.each({slideDown:Tb("show"),slideUp:Tb("hide"),slideToggle:Tb("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(a,b){n.fn[a]=function(a,c,d){return this.animate(b,a,c,d)}}),n.timers=[],n.fx.tick=function(){var a,b=0,c=n.timers;for(Lb=n.now();b<c.length;b++)a=c[b],a()||c[b]!==a||c.splice(b--,1);c.length||n.fx.stop(),Lb=void 0},n.fx.timer=function(a){n.timers.push(a),a()?n.fx.start():n.timers.pop()},n.fx.interval=13,n.fx.start=function(){Mb||(Mb=setInterval(n.fx.tick,n.fx.interval))},n.fx.stop=function(){clearInterval(Mb),Mb=null},n.fx.speeds={slow:600,fast:200,_default:400},n.fn.delay=function(a,b){return a=n.fx?n.fx.speeds[a]||a:a,b=b||"fx",this.queue(b,function(b,c){var d=setTimeout(b,a);c.stop=function(){clearTimeout(d)}})},function(){var a=l.createElement("input"),b=l.createElement("select"),c=b.appendChild(l.createElement("option"));a.type="checkbox",k.checkOn=""!==a.value,k.optSelected=c.selected,b.disabled=!0,k.optDisabled=!c.disabled,a=l.createElement("input"),a.value="t",a.type="radio",k.radioValue="t"===a.value}();var Yb,Zb,$b=n.expr.attrHandle;n.fn.extend({attr:function(a,b){return J(this,n.attr,a,b,arguments.length>1)},removeAttr:function(a){return this.each(function(){n.removeAttr(this,a)})}}),n.extend({attr:function(a,b,c){var d,e,f=a.nodeType;if(a&&3!==f&&8!==f&&2!==f)return typeof a.getAttribute===U?n.prop(a,b,c):(1===f&&n.isXMLDoc(a)||(b=b.toLowerCase(),d=n.attrHooks[b]||(n.expr.match.bool.test(b)?Zb:Yb)),void 0===c?d&&"get"in d&&null!==(e=d.get(a,b))?e:(e=n.find.attr(a,b),null==e?void 0:e):null!==c?d&&"set"in d&&void 0!==(e=d.set(a,c,b))?e:(a.setAttribute(b,c+""),c):void n.removeAttr(a,b))
},removeAttr:function(a,b){var c,d,e=0,f=b&&b.match(E);if(f&&1===a.nodeType)while(c=f[e++])d=n.propFix[c]||c,n.expr.match.bool.test(c)&&(a[d]=!1),a.removeAttribute(c)},attrHooks:{type:{set:function(a,b){if(!k.radioValue&&"radio"===b&&n.nodeName(a,"input")){var c=a.value;return a.setAttribute("type",b),c&&(a.value=c),b}}}}}),Zb={set:function(a,b,c){return b===!1?n.removeAttr(a,c):a.setAttribute(c,c),c}},n.each(n.expr.match.bool.source.match(/\w+/g),function(a,b){var c=$b[b]||n.find.attr;$b[b]=function(a,b,d){var e,f;return d||(f=$b[b],$b[b]=e,e=null!=c(a,b,d)?b.toLowerCase():null,$b[b]=f),e}});var _b=/^(?:input|select|textarea|button)$/i;n.fn.extend({prop:function(a,b){return J(this,n.prop,a,b,arguments.length>1)},removeProp:function(a){return this.each(function(){delete this[n.propFix[a]||a]})}}),n.extend({propFix:{"for":"htmlFor","class":"className"},prop:function(a,b,c){var d,e,f,g=a.nodeType;if(a&&3!==g&&8!==g&&2!==g)return f=1!==g||!n.isXMLDoc(a),f&&(b=n.propFix[b]||b,e=n.propHooks[b]),void 0!==c?e&&"set"in e&&void 0!==(d=e.set(a,c,b))?d:a[b]=c:e&&"get"in e&&null!==(d=e.get(a,b))?d:a[b]},propHooks:{tabIndex:{get:function(a){return a.hasAttribute("tabindex")||_b.test(a.nodeName)||a.href?a.tabIndex:-1}}}}),k.optSelected||(n.propHooks.selected={get:function(a){var b=a.parentNode;return b&&b.parentNode&&b.parentNode.selectedIndex,null}}),n.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){n.propFix[this.toLowerCase()]=this});var ac=/[\t\r\n\f]/g;n.fn.extend({addClass:function(a){var b,c,d,e,f,g,h="string"==typeof a&&a,i=0,j=this.length;if(n.isFunction(a))return this.each(function(b){n(this).addClass(a.call(this,b,this.className))});if(h)for(b=(a||"").match(E)||[];j>i;i++)if(c=this[i],d=1===c.nodeType&&(c.className?(" "+c.className+" ").replace(ac," "):" ")){f=0;while(e=b[f++])d.indexOf(" "+e+" ")<0&&(d+=e+" ");g=n.trim(d),c.className!==g&&(c.className=g)}return this},removeClass:function(a){var b,c,d,e,f,g,h=0===arguments.length||"string"==typeof a&&a,i=0,j=this.length;if(n.isFunction(a))return this.each(function(b){n(this).removeClass(a.call(this,b,this.className))});if(h)for(b=(a||"").match(E)||[];j>i;i++)if(c=this[i],d=1===c.nodeType&&(c.className?(" "+c.className+" ").replace(ac," "):"")){f=0;while(e=b[f++])while(d.indexOf(" "+e+" ")>=0)d=d.replace(" "+e+" "," ");g=a?n.trim(d):"",c.className!==g&&(c.className=g)}return this},toggleClass:function(a,b){var c=typeof a;return"boolean"==typeof b&&"string"===c?b?this.addClass(a):this.removeClass(a):this.each(n.isFunction(a)?function(c){n(this).toggleClass(a.call(this,c,this.className,b),b)}:function(){if("string"===c){var b,d=0,e=n(this),f=a.match(E)||[];while(b=f[d++])e.hasClass(b)?e.removeClass(b):e.addClass(b)}else(c===U||"boolean"===c)&&(this.className&&L.set(this,"__className__",this.className),this.className=this.className||a===!1?"":L.get(this,"__className__")||"")})},hasClass:function(a){for(var b=" "+a+" ",c=0,d=this.length;d>c;c++)if(1===this[c].nodeType&&(" "+this[c].className+" ").replace(ac," ").indexOf(b)>=0)return!0;return!1}});var bc=/\r/g;n.fn.extend({val:function(a){var b,c,d,e=this[0];{if(arguments.length)return d=n.isFunction(a),this.each(function(c){var e;1===this.nodeType&&(e=d?a.call(this,c,n(this).val()):a,null==e?e="":"number"==typeof e?e+="":n.isArray(e)&&(e=n.map(e,function(a){return null==a?"":a+""})),b=n.valHooks[this.type]||n.valHooks[this.nodeName.toLowerCase()],b&&"set"in b&&void 0!==b.set(this,e,"value")||(this.value=e))});if(e)return b=n.valHooks[e.type]||n.valHooks[e.nodeName.toLowerCase()],b&&"get"in b&&void 0!==(c=b.get(e,"value"))?c:(c=e.value,"string"==typeof c?c.replace(bc,""):null==c?"":c)}}}),n.extend({valHooks:{option:{get:function(a){var b=n.find.attr(a,"value");return null!=b?b:n.trim(n.text(a))}},select:{get:function(a){for(var b,c,d=a.options,e=a.selectedIndex,f="select-one"===a.type||0>e,g=f?null:[],h=f?e+1:d.length,i=0>e?h:f?e:0;h>i;i++)if(c=d[i],!(!c.selected&&i!==e||(k.optDisabled?c.disabled:null!==c.getAttribute("disabled"))||c.parentNode.disabled&&n.nodeName(c.parentNode,"optgroup"))){if(b=n(c).val(),f)return b;g.push(b)}return g},set:function(a,b){var c,d,e=a.options,f=n.makeArray(b),g=e.length;while(g--)d=e[g],(d.selected=n.inArray(d.value,f)>=0)&&(c=!0);return c||(a.selectedIndex=-1),f}}}}),n.each(["radio","checkbox"],function(){n.valHooks[this]={set:function(a,b){return n.isArray(b)?a.checked=n.inArray(n(a).val(),b)>=0:void 0}},k.checkOn||(n.valHooks[this].get=function(a){return null===a.getAttribute("value")?"on":a.value})}),n.each("blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error contextmenu".split(" "),function(a,b){n.fn[b]=function(a,c){return arguments.length>0?this.on(b,null,a,c):this.trigger(b)}}),n.fn.extend({hover:function(a,b){return this.mouseenter(a).mouseleave(b||a)},bind:function(a,b,c){return this.on(a,null,b,c)},unbind:function(a,b){return this.off(a,null,b)},delegate:function(a,b,c,d){return this.on(b,a,c,d)},undelegate:function(a,b,c){return 1===arguments.length?this.off(a,"**"):this.off(b,a||"**",c)}});var cc=n.now(),dc=/\?/;n.parseJSON=function(a){return JSON.parse(a+"")},n.parseXML=function(a){var b,c;if(!a||"string"!=typeof a)return null;try{c=new DOMParser,b=c.parseFromString(a,"text/xml")}catch(d){b=void 0}return(!b||b.getElementsByTagName("parsererror").length)&&n.error("Invalid XML: "+a),b};var ec=/#.*$/,fc=/([?&])_=[^&]*/,gc=/^(.*?):[ \t]*([^\r\n]*)$/gm,hc=/^(?:about|app|app-storage|.+-extension|file|res|widget):$/,ic=/^(?:GET|HEAD)$/,jc=/^\/\//,kc=/^([\w.+-]+:)(?:\/\/(?:[^\/?#]*@|)([^\/?#:]*)(?::(\d+)|)|)/,lc={},mc={},nc="*/".concat("*"),oc=a.location.href,pc=kc.exec(oc.toLowerCase())||[];function qc(a){return function(b,c){"string"!=typeof b&&(c=b,b="*");var d,e=0,f=b.toLowerCase().match(E)||[];if(n.isFunction(c))while(d=f[e++])"+"===d[0]?(d=d.slice(1)||"*",(a[d]=a[d]||[]).unshift(c)):(a[d]=a[d]||[]).push(c)}}function rc(a,b,c,d){var e={},f=a===mc;function g(h){var i;return e[h]=!0,n.each(a[h]||[],function(a,h){var j=h(b,c,d);return"string"!=typeof j||f||e[j]?f?!(i=j):void 0:(b.dataTypes.unshift(j),g(j),!1)}),i}return g(b.dataTypes[0])||!e["*"]&&g("*")}function sc(a,b){var c,d,e=n.ajaxSettings.flatOptions||{};for(c in b)void 0!==b[c]&&((e[c]?a:d||(d={}))[c]=b[c]);return d&&n.extend(!0,a,d),a}function tc(a,b,c){var d,e,f,g,h=a.contents,i=a.dataTypes;while("*"===i[0])i.shift(),void 0===d&&(d=a.mimeType||b.getResponseHeader("Content-Type"));if(d)for(e in h)if(h[e]&&h[e].test(d)){i.unshift(e);break}if(i[0]in c)f=i[0];else{for(e in c){if(!i[0]||a.converters[e+" "+i[0]]){f=e;break}g||(g=e)}f=f||g}return f?(f!==i[0]&&i.unshift(f),c[f]):void 0}function uc(a,b,c,d){var e,f,g,h,i,j={},k=a.dataTypes.slice();if(k[1])for(g in a.converters)j[g.toLowerCase()]=a.converters[g];f=k.shift();while(f)if(a.responseFields[f]&&(c[a.responseFields[f]]=b),!i&&d&&a.dataFilter&&(b=a.dataFilter(b,a.dataType)),i=f,f=k.shift())if("*"===f)f=i;else if("*"!==i&&i!==f){if(g=j[i+" "+f]||j["* "+f],!g)for(e in j)if(h=e.split(" "),h[1]===f&&(g=j[i+" "+h[0]]||j["* "+h[0]])){g===!0?g=j[e]:j[e]!==!0&&(f=h[0],k.unshift(h[1]));break}if(g!==!0)if(g&&a["throws"])b=g(b);else try{b=g(b)}catch(l){return{state:"parsererror",error:g?l:"No conversion from "+i+" to "+f}}}return{state:"success",data:b}}n.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:oc,type:"GET",isLocal:hc.test(pc[1]),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":nc,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/xml/,html:/html/,json:/json/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":n.parseJSON,"text xml":n.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(a,b){return b?sc(sc(a,n.ajaxSettings),b):sc(n.ajaxSettings,a)},ajaxPrefilter:qc(lc),ajaxTransport:qc(mc),ajax:function(a,b){"object"==typeof a&&(b=a,a=void 0),b=b||{};var c,d,e,f,g,h,i,j,k=n.ajaxSetup({},b),l=k.context||k,m=k.context&&(l.nodeType||l.jquery)?n(l):n.event,o=n.Deferred(),p=n.Callbacks("once memory"),q=k.statusCode||{},r={},s={},t=0,u="canceled",v={readyState:0,getResponseHeader:function(a){var b;if(2===t){if(!f){f={};while(b=gc.exec(e))f[b[1].toLowerCase()]=b[2]}b=f[a.toLowerCase()]}return null==b?null:b},getAllResponseHeaders:function(){return 2===t?e:null},setRequestHeader:function(a,b){var c=a.toLowerCase();return t||(a=s[c]=s[c]||a,r[a]=b),this},overrideMimeType:function(a){return t||(k.mimeType=a),this},statusCode:function(a){var b;if(a)if(2>t)for(b in a)q[b]=[q[b],a[b]];else v.always(a[v.status]);return this},abort:function(a){var b=a||u;return c&&c.abort(b),x(0,b),this}};if(o.promise(v).complete=p.add,v.success=v.done,v.error=v.fail,k.url=((a||k.url||oc)+"").replace(ec,"").replace(jc,pc[1]+"//"),k.type=b.method||b.type||k.method||k.type,k.dataTypes=n.trim(k.dataType||"*").toLowerCase().match(E)||[""],null==k.crossDomain&&(h=kc.exec(k.url.toLowerCase()),k.crossDomain=!(!h||h[1]===pc[1]&&h[2]===pc[2]&&(h[3]||("http:"===h[1]?"80":"443"))===(pc[3]||("http:"===pc[1]?"80":"443")))),k.data&&k.processData&&"string"!=typeof k.data&&(k.data=n.param(k.data,k.traditional)),rc(lc,k,b,v),2===t)return v;i=n.event&&k.global,i&&0===n.active++&&n.event.trigger("ajaxStart"),k.type=k.type.toUpperCase(),k.hasContent=!ic.test(k.type),d=k.url,k.hasContent||(k.data&&(d=k.url+=(dc.test(d)?"&":"?")+k.data,delete k.data),k.cache===!1&&(k.url=fc.test(d)?d.replace(fc,"$1_="+cc++):d+(dc.test(d)?"&":"?")+"_="+cc++)),k.ifModified&&(n.lastModified[d]&&v.setRequestHeader("If-Modified-Since",n.lastModified[d]),n.etag[d]&&v.setRequestHeader("If-None-Match",n.etag[d])),(k.data&&k.hasContent&&k.contentType!==!1||b.contentType)&&v.setRequestHeader("Content-Type",k.contentType),v.setRequestHeader("Accept",k.dataTypes[0]&&k.accepts[k.dataTypes[0]]?k.accepts[k.dataTypes[0]]+("*"!==k.dataTypes[0]?", "+nc+"; q=0.01":""):k.accepts["*"]);for(j in k.headers)v.setRequestHeader(j,k.headers[j]);if(k.beforeSend&&(k.beforeSend.call(l,v,k)===!1||2===t))return v.abort();u="abort";for(j in{success:1,error:1,complete:1})v[j](k[j]);if(c=rc(mc,k,b,v)){v.readyState=1,i&&m.trigger("ajaxSend",[v,k]),k.async&&k.timeout>0&&(g=setTimeout(function(){v.abort("timeout")},k.timeout));try{t=1,c.send(r,x)}catch(w){if(!(2>t))throw w;x(-1,w)}}else x(-1,"No Transport");function x(a,b,f,h){var j,r,s,u,w,x=b;2!==t&&(t=2,g&&clearTimeout(g),c=void 0,e=h||"",v.readyState=a>0?4:0,j=a>=200&&300>a||304===a,f&&(u=tc(k,v,f)),u=uc(k,u,v,j),j?(k.ifModified&&(w=v.getResponseHeader("Last-Modified"),w&&(n.lastModified[d]=w),w=v.getResponseHeader("etag"),w&&(n.etag[d]=w)),204===a||"HEAD"===k.type?x="nocontent":304===a?x="notmodified":(x=u.state,r=u.data,s=u.error,j=!s)):(s=x,(a||!x)&&(x="error",0>a&&(a=0))),v.status=a,v.statusText=(b||x)+"",j?o.resolveWith(l,[r,x,v]):o.rejectWith(l,[v,x,s]),v.statusCode(q),q=void 0,i&&m.trigger(j?"ajaxSuccess":"ajaxError",[v,k,j?r:s]),p.fireWith(l,[v,x]),i&&(m.trigger("ajaxComplete",[v,k]),--n.active||n.event.trigger("ajaxStop")))}return v},getJSON:function(a,b,c){return n.get(a,b,c,"json")},getScript:function(a,b){return n.get(a,void 0,b,"script")}}),n.each(["get","post"],function(a,b){n[b]=function(a,c,d,e){return n.isFunction(c)&&(e=e||d,d=c,c=void 0),n.ajax({url:a,type:b,dataType:e,data:c,success:d})}}),n._evalUrl=function(a){return n.ajax({url:a,type:"GET",dataType:"script",async:!1,global:!1,"throws":!0})},n.fn.extend({wrapAll:function(a){var b;return n.isFunction(a)?this.each(function(b){n(this).wrapAll(a.call(this,b))}):(this[0]&&(b=n(a,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&b.insertBefore(this[0]),b.map(function(){var a=this;while(a.firstElementChild)a=a.firstElementChild;return a}).append(this)),this)},wrapInner:function(a){return this.each(n.isFunction(a)?function(b){n(this).wrapInner(a.call(this,b))}:function(){var b=n(this),c=b.contents();c.length?c.wrapAll(a):b.append(a)})},wrap:function(a){var b=n.isFunction(a);return this.each(function(c){n(this).wrapAll(b?a.call(this,c):a)})},unwrap:function(){return this.parent().each(function(){n.nodeName(this,"body")||n(this).replaceWith(this.childNodes)}).end()}}),n.expr.filters.hidden=function(a){return a.offsetWidth<=0&&a.offsetHeight<=0},n.expr.filters.visible=function(a){return!n.expr.filters.hidden(a)};var vc=/%20/g,wc=/\[\]$/,xc=/\r?\n/g,yc=/^(?:submit|button|image|reset|file)$/i,zc=/^(?:input|select|textarea|keygen)/i;function Ac(a,b,c,d){var e;if(n.isArray(b))n.each(b,function(b,e){c||wc.test(a)?d(a,e):Ac(a+"["+("object"==typeof e?b:"")+"]",e,c,d)});else if(c||"object"!==n.type(b))d(a,b);else for(e in b)Ac(a+"["+e+"]",b[e],c,d)}n.param=function(a,b){var c,d=[],e=function(a,b){b=n.isFunction(b)?b():null==b?"":b,d[d.length]=encodeURIComponent(a)+"="+encodeURIComponent(b)};if(void 0===b&&(b=n.ajaxSettings&&n.ajaxSettings.traditional),n.isArray(a)||a.jquery&&!n.isPlainObject(a))n.each(a,function(){e(this.name,this.value)});else for(c in a)Ac(c,a[c],b,e);return d.join("&").replace(vc,"+")},n.fn.extend({serialize:function(){return n.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var a=n.prop(this,"elements");return a?n.makeArray(a):this}).filter(function(){var a=this.type;return this.name&&!n(this).is(":disabled")&&zc.test(this.nodeName)&&!yc.test(a)&&(this.checked||!T.test(a))}).map(function(a,b){var c=n(this).val();return null==c?null:n.isArray(c)?n.map(c,function(a){return{name:b.name,value:a.replace(xc,"\r\n")}}):{name:b.name,value:c.replace(xc,"\r\n")}}).get()}}),n.ajaxSettings.xhr=function(){try{return new XMLHttpRequest}catch(a){}};var Bc=0,Cc={},Dc={0:200,1223:204},Ec=n.ajaxSettings.xhr();a.attachEvent&&a.attachEvent("onunload",function(){for(var a in Cc)Cc[a]()}),k.cors=!!Ec&&"withCredentials"in Ec,k.ajax=Ec=!!Ec,n.ajaxTransport(function(a){var b;return k.cors||Ec&&!a.crossDomain?{send:function(c,d){var e,f=a.xhr(),g=++Bc;if(f.open(a.type,a.url,a.async,a.username,a.password),a.xhrFields)for(e in a.xhrFields)f[e]=a.xhrFields[e];a.mimeType&&f.overrideMimeType&&f.overrideMimeType(a.mimeType),a.crossDomain||c["X-Requested-With"]||(c["X-Requested-With"]="XMLHttpRequest");for(e in c)f.setRequestHeader(e,c[e]);b=function(a){return function(){b&&(delete Cc[g],b=f.onload=f.onerror=null,"abort"===a?f.abort():"error"===a?d(f.status,f.statusText):d(Dc[f.status]||f.status,f.statusText,"string"==typeof f.responseText?{text:f.responseText}:void 0,f.getAllResponseHeaders()))}},f.onload=b(),f.onerror=b("error"),b=Cc[g]=b("abort");try{f.send(a.hasContent&&a.data||null)}catch(h){if(b)throw h}},abort:function(){b&&b()}}:void 0}),n.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/(?:java|ecma)script/},converters:{"text script":function(a){return n.globalEval(a),a}}}),n.ajaxPrefilter("script",function(a){void 0===a.cache&&(a.cache=!1),a.crossDomain&&(a.type="GET")}),n.ajaxTransport("script",function(a){if(a.crossDomain){var b,c;return{send:function(d,e){b=n("<script>").prop({async:!0,charset:a.scriptCharset,src:a.url}).on("load error",c=function(a){b.remove(),c=null,a&&e("error"===a.type?404:200,a.type)}),l.head.appendChild(b[0])},abort:function(){c&&c()}}}});var Fc=[],Gc=/(=)\?(?=&|$)|\?\?/;n.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var a=Fc.pop()||n.expando+"_"+cc++;return this[a]=!0,a}}),n.ajaxPrefilter("json jsonp",function(b,c,d){var e,f,g,h=b.jsonp!==!1&&(Gc.test(b.url)?"url":"string"==typeof b.data&&!(b.contentType||"").indexOf("application/x-www-form-urlencoded")&&Gc.test(b.data)&&"data");return h||"jsonp"===b.dataTypes[0]?(e=b.jsonpCallback=n.isFunction(b.jsonpCallback)?b.jsonpCallback():b.jsonpCallback,h?b[h]=b[h].replace(Gc,"$1"+e):b.jsonp!==!1&&(b.url+=(dc.test(b.url)?"&":"?")+b.jsonp+"="+e),b.converters["script json"]=function(){return g||n.error(e+" was not called"),g[0]},b.dataTypes[0]="json",f=a[e],a[e]=function(){g=arguments},d.always(function(){a[e]=f,b[e]&&(b.jsonpCallback=c.jsonpCallback,Fc.push(e)),g&&n.isFunction(f)&&f(g[0]),g=f=void 0}),"script"):void 0}),n.parseHTML=function(a,b,c){if(!a||"string"!=typeof a)return null;"boolean"==typeof b&&(c=b,b=!1),b=b||l;var d=v.exec(a),e=!c&&[];return d?[b.createElement(d[1])]:(d=n.buildFragment([a],b,e),e&&e.length&&n(e).remove(),n.merge([],d.childNodes))};var Hc=n.fn.load;n.fn.load=function(a,b,c){if("string"!=typeof a&&Hc)return Hc.apply(this,arguments);var d,e,f,g=this,h=a.indexOf(" ");return h>=0&&(d=n.trim(a.slice(h)),a=a.slice(0,h)),n.isFunction(b)?(c=b,b=void 0):b&&"object"==typeof b&&(e="POST"),g.length>0&&n.ajax({url:a,type:e,dataType:"html",data:b}).done(function(a){f=arguments,g.html(d?n("<div>").append(n.parseHTML(a)).find(d):a)}).complete(c&&function(a,b){g.each(c,f||[a.responseText,b,a])}),this},n.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(a,b){n.fn[b]=function(a){return this.on(b,a)}}),n.expr.filters.animated=function(a){return n.grep(n.timers,function(b){return a===b.elem}).length};var Ic=a.document.documentElement;function Jc(a){return n.isWindow(a)?a:9===a.nodeType&&a.defaultView}n.offset={setOffset:function(a,b,c){var d,e,f,g,h,i,j,k=n.css(a,"position"),l=n(a),m={};"static"===k&&(a.style.position="relative"),h=l.offset(),f=n.css(a,"top"),i=n.css(a,"left"),j=("absolute"===k||"fixed"===k)&&(f+i).indexOf("auto")>-1,j?(d=l.position(),g=d.top,e=d.left):(g=parseFloat(f)||0,e=parseFloat(i)||0),n.isFunction(b)&&(b=b.call(a,c,h)),null!=b.top&&(m.top=b.top-h.top+g),null!=b.left&&(m.left=b.left-h.left+e),"using"in b?b.using.call(a,m):l.css(m)}},n.fn.extend({offset:function(a){if(arguments.length)return void 0===a?this:this.each(function(b){n.offset.setOffset(this,a,b)});var b,c,d=this[0],e={top:0,left:0},f=d&&d.ownerDocument;if(f)return b=f.documentElement,n.contains(b,d)?(typeof d.getBoundingClientRect!==U&&(e=d.getBoundingClientRect()),c=Jc(f),{top:e.top+c.pageYOffset-b.clientTop,left:e.left+c.pageXOffset-b.clientLeft}):e},position:function(){if(this[0]){var a,b,c=this[0],d={top:0,left:0};return"fixed"===n.css(c,"position")?b=c.getBoundingClientRect():(a=this.offsetParent(),b=this.offset(),n.nodeName(a[0],"html")||(d=a.offset()),d.top+=n.css(a[0],"borderTopWidth",!0),d.left+=n.css(a[0],"borderLeftWidth",!0)),{top:b.top-d.top-n.css(c,"marginTop",!0),left:b.left-d.left-n.css(c,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){var a=this.offsetParent||Ic;while(a&&!n.nodeName(a,"html")&&"static"===n.css(a,"position"))a=a.offsetParent;return a||Ic})}}),n.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(b,c){var d="pageYOffset"===c;n.fn[b]=function(e){return J(this,function(b,e,f){var g=Jc(b);return void 0===f?g?g[c]:b[e]:void(g?g.scrollTo(d?a.pageXOffset:f,d?f:a.pageYOffset):b[e]=f)},b,e,arguments.length,null)}}),n.each(["top","left"],function(a,b){n.cssHooks[b]=yb(k.pixelPosition,function(a,c){return c?(c=xb(a,b),vb.test(c)?n(a).position()[b]+"px":c):void 0})}),n.each({Height:"height",Width:"width"},function(a,b){n.each({padding:"inner"+a,content:b,"":"outer"+a},function(c,d){n.fn[d]=function(d,e){var f=arguments.length&&(c||"boolean"!=typeof d),g=c||(d===!0||e===!0?"margin":"border");return J(this,function(b,c,d){var e;return n.isWindow(b)?b.document.documentElement["client"+a]:9===b.nodeType?(e=b.documentElement,Math.max(b.body["scroll"+a],e["scroll"+a],b.body["offset"+a],e["offset"+a],e["client"+a])):void 0===d?n.css(b,c,g):n.style(b,c,d,g)},b,f?d:void 0,f,null)}})}),n.fn.size=function(){return this.length},n.fn.andSelf=n.fn.addBack,"function"==typeof define&&define.amd&&define("jquery",[],function(){return n});var Kc=a.jQuery,Lc=a.$;return n.noConflict=function(b){return a.$===n&&(a.$=Lc),b&&a.jQuery===n&&(a.jQuery=Kc),n},typeof b===U&&(a.jQuery=a.$=n),n});
</script>
<script src="../js/plugins.min.js"></script>

<div class="sg-body" id="styleguide">

<nav id="sg-menu" class="sg-menu">
    <h1 class="sg-logo">
        <a href="#styleguide" class="sg-menu_link js-menu_showall">Frontend Framework</a>
    </h1>
    <div id="sg-menu_wrap" class="txt-small"></div>
</nav>

<main id="sg-main" class="sg-main">    <section id="getting-started" class="sg-section sg-section-getting-started" data-sg-section="getting started">
        <div class="sg-section_head sg-category">
            <div class="sg-category_wrap">
                <h1 class="sg-heading sg-heading-section">Getting Started</h1>
            </div>
        </div>

         
            <div class="sg-category">
            <div class="sg-category_wrap">
                            <article class="sg-article" id="getting-started-getting-started-" data-sg-section="Getting Started" data-sg-heading="">
                    <div class="sg-article_comment">
                        <h2 id="a-number-of-front-end-technologies-to-get-any-e-health-website-or-application-off-the-ground-" class="sg-heading sg-heading-2">A number of front-end technologies to get any e-Health website or application off the ground.</h2>
                    </div>
                </article>                <article class="sg-article" id="getting-started-getting-started-setup" data-sg-section="Getting Started" data-sg-heading="Setup">
                    <header class="sg-article_head ">
                        <h3 class="sg-heading sg-heading-article">Setup</h3></header>
                    <div class="sg-article_comment">
                        <ol>
<li><a href="https://github.com/UWHealth/Front-End-Framework.git">Clone or Fork</a></li>
<li>Using the command line (preferably using PowerShell rather than cmd.exe), <code class="sg-code sg-codespan">cd</code> to the project&#x2019;s directory.</li>
<li>Run <code class="sg-code sg-codespan">npm install</code>.</li>
<li>Run <code class="sg-code sg-codespan">npm install gulp -g</code> to install gulp globally (if you haven&#x2019;t already)</li>
<li>Run <code class="sg-code sg-codespan">gulp</code></li>
<li>Open a browser and go to <a href="http://localhost:80/">localhost:80</a>. This is your local running copy of the framework.</li>
<li><strong>Start codin&#x2019; and compilin&#x2019;.</strong></li>
</ol>
                    </div>
                </article>                <article class="sg-article" id="getting-started-getting-started-software" data-sg-section="Getting Started" data-sg-heading="Software">
                    <header class="sg-article_head ">
                        <h3 class="sg-heading sg-heading-article">Software</h3></header>
                    <div class="sg-article_comment">
                        <ol>
<li><a href="https://nodejs.org/">Node</a></li>
<li><a href="http://gulpjs.com/">Gulp</a><ul>
<li>Run <code class="sg-code sg-codespan">npm install --global gulp</code> from the command line after Node has been installed.</li>
</ul>
</li>
</ol>
                    </div>
                </article>                <article class="sg-article" id="getting-started-getting-started-tips-and-tricks" data-sg-section="Getting Started" data-sg-heading="Tips and Tricks">
                    <header class="sg-article_head ">
                        <h3 class="sg-heading sg-heading-article">Tips and Tricks</h3></header>
                    <div class="sg-article_comment">
                        <h2 id="style-guide-generation" class="sg-heading sg-heading-2">Style Guide generation</h2>
<p>The style guide you are reading is generated on the fly by the <code class="sg-code sg-codespan">gulp</code> task <code class="sg-code sg-codespan">styleguide</code> (using the markdown-styleguide-generator node module).</p><p>To create style guide entries, create a comment block with the <code class="sg-code sg-codespan">SG</code> in the first line. The next immediate line should be title of your style guide entry (using a <code class="sg-code sg-codespan">#</code> to demarcate the start). A <code class="sg-code sg-codespan">/</code> will indicate a sub-section title. So <code class="sg-code sg-codespan">#Title/Sub-section</code> will create a parent section named &#x201C;Title&#x201D;, with a child named &#x201C;Sub-section&#x201D;.</p><p>Create <code class="sg-code sg-codespan">html</code> examples (with a code snippet) by creating a code block followed by &#x201C;html_example&#x201D; (```html_example).</p>
<div class="sg-markup sg-codeblock">
<pre class="sg-markup_wrap"><code class="hljs sg-code undefined">/* SG
<span class="hljs-comment"># Section/Component</span>
This <span class="hljs-keyword">is</span> an example Component.

```html_example
&lt;<span class="hljs-keyword">div</span>&gt;...&lt;/<span class="hljs-keyword">div</span>&gt;
```
*/
</code></pre>
</div>
<p>Separating &#x201C;development&#x201D; comments from &#x201C;styles&#x201D; requires adding a <code class="sg-code sg-codespan">[[dev]]</code> anywhere within the title of that section.</p>
<div class="sg-markup sg-codeblock">
<pre class="sg-markup_wrap"><code class="hljs sg-code undefined">/* SG
# Section/Component <span class="hljs-string">[[dev]]</span>
</code></pre>
</div>
<p>Everything will be run through <a href="https://guides.github.com/features/mastering-markdown/">Markdown (GitHub-flavored)</a>. This allows text formatting and code samples.</p>
                <h4 id="markdown-use" class="sg-heading sg-heading-4">Markdown Use</h4>
<p>Sometimes meta information that does not fit logically into a scss file is necessary. In those cases, you can use a plain markdown file. To start a style guide block, wrap your comments in an <code class="sg-code sg-codespan">&lt;SG&gt;</code> &#x201C;tag&#x201D; rather than a <code class="sg-code sg-codespan">/* SG */</code> comment.</p><hr>
                    </div>
                </article>                <article class="sg-article" id="getting-started-getting-started-gulp-arguments" data-sg-section="Getting Started" data-sg-heading="Gulp arguments">
                    <header class="sg-article_head ">
                        <h3 class="sg-heading sg-heading-article">Gulp arguments</h3></header>
                    <div class="sg-article_comment">
                        <p>Running <code class="sg-code sg-codespan">gulp</code> by itself will compile your Sass and concatenate your Javascript, but you may need some additional build steps for a complete workflow. Our gulp file accepts arguments in the form of <code class="sg-code sg-codespan">gulp --argument1 --argument2</code> to turn certain tasks on and off.</p>
                <h4 id="minify-uglify" class="sg-heading sg-heading-4">Minify/Uglify</h4>

                <h6 id="-minify" class="sg-heading sg-heading-6"><code class="sg-code sg-codespan">--minify</code></h6>
<p>Compress and uglify your css and js files.</p>
                <h4 id="no-style-guide" class="sg-heading sg-heading-4">No Style Guide</h4>

                <h6 id="-no-sg" class="sg-heading sg-heading-6"><code class="sg-code sg-codespan">--no-sg</code></h6>
<p>Prevents style guide generation.</p>
                <h4 id="sourcemaps" class="sg-heading sg-heading-4">Sourcemaps</h4>

                <h6 id="-sm" class="sg-heading sg-heading-6"><code class="sg-code sg-codespan">--sm</code></h6>
<p>Adds source maps to your Javascript and CSS. Very useful if working with concatenated, uglified, or tangled Sass code. <a href="http://blog.teamtreehouse.com/introduction-source-maps">Learn more about source maps</a>.</p>
                <h4 id="js-hint" class="sg-heading sg-heading-4">JS Hint</h4>

                <h6 id="-lint" class="sg-heading sg-heading-6"><code class="sg-code sg-codespan">--lint</code></h6>
<p>Runs your JS through <a href="https://github.com/jshint/jshint">JSHint</a>. You can change the project&#x2019;s hinting rules by modifying the <code class="sg-code sg-codespan">.jshintrc</code> file and ignore files via the <code class="sg-code sg-codespan">.jshintignore</code> file (both at the root of the project). This is usually necessary for plugins or other highly optimized javascript since JSHint will emit errors about code readability.</p>
                <h4 id="browsersync" class="sg-heading sg-heading-4">Browsersync</h4>

                <h6 id="-bs-" class="sg-heading sg-heading-6"><code class="sg-code sg-codespan">--bs[]=</code></h6>
<p>Changes the default Browsersync options.</p><ul>
<li><code class="sg-code sg-codespan">--bsserver</code>: Change the server options (typically just the base directory).</li>
<li><code class="sg-code sg-codespan">--bsproxy</code>:  Run browsersync through a proxy address (cannot be used along side server options).</li>
<li><code class="sg-code sg-codespan">--bsservestatic</code>: Add additional directories from which static files should be served. Should only be used in proxy mode.</li>
<li><code class="sg-code sg-codespan">--bsport</code>: Change the default port (80 on Windows, 3000 on Unix-based systems).</li>
<li><code class="sg-code sg-codespan">--bstunnel</code>: Tunnel the server through a URL.</li>
</ul>
<p><em>See <a href="https://www.browsersync.io/docs/options/">Browsersync&#x2019;s documentation</a> for details on the options.</em></p>
                    </div>
                </article>        </div>
        </div>    </section>    <section id="styles" class="sg-section sg-section-styles" data-sg-section="styles">
        <div class="sg-section_head sg-category">
            <div class="sg-category_wrap">
                <h1 class="sg-heading sg-heading-section">Styles</h1>
            </div>
        </div>

         
            <div class="sg-category">
            <div class="sg-category_wrap">
            
                <header class="sg-category_head" data-sg-section="Buttons" id="styles-buttons-">
                    <h2 class="sg-heading-categorysg-heading sg-heading-article">Buttons</h2>
                </header>                <article class="sg-article"  data-sg-section="Buttons" data-sg-heading="">
                    <div class="sg-article_comment">
                        <p>Applying the <code class="sg-code sg-codespan">btn</code> class to anything will make it look like a button. Always declare <code class="sg-code sg-codespan">type=&quot;button&quot;</code> on <code class="sg-code sg-codespan">&lt;button&gt;</code> elements for proper accessibility.</p>
                    </div>
                    <div class="sg-example">
                        <div class="sg-example_wrap">
                            <button type="button" class="btn">Button</button>

<a href="" class="btn">Faux Button</a>
                        </div>
                        <div class="sg-example_markup">
                            <div class="sg-markup sg-markup-block">
                                <pre class="sg-markup_wrap"><code class="hljs"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"button"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"btn"</span>&gt;</span>Button<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>

<span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">""</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"btn"</span>&gt;</span>Faux Button<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></code></pre>
                            </div>
                        </div>
                    </div>
                </article>        </div>
        </div> 
            <div class="sg-category">
            <div class="sg-category_wrap">
            
                <header class="sg-category_head" data-sg-section="Color-Palette" id="styles-color-palette-">
                    <h2 class="sg-heading-categorysg-heading sg-heading-article">Color Palette</h2>
                </header>                <article class="sg-article"  data-sg-section="Color Palette" data-sg-heading="">
                    <div class="sg-article_comment">
                        
                    </div>
                    <div class="sg-example">
                        <div class="sg-example_wrap">
                            <div class="color-block"></div><div class="color-block"></div><div class="color-block"></div><div class="color-block"></div><div class="color-block"></div><div class="color-block"></div><div class="color-block"></div>
<div class="color-block"></div><div class="color-block"></div><div class="color-block"></div><div class="color-block"></div><div class="color-block"></div><div class="color-block"></div><div class="color-block"></div>
<div class="color-block"></div><div class="color-block"></div><div class="color-block"></div><div class="color-block"></div><div class="color-block"></div><div class="color-block"></div><div class="color-block"></div>
<div class="color-block"></div><div class="color-block"></div><div class="color-block"></div><div class="color-block"></div><div class="color-block"></div><div class="color-block"></div><div class="color-block"></div>
<div class="color-block"></div><div class="color-block"></div><div class="color-block"></div><div class="color-block"></div><div class="color-block"></div><div class="color-block"></div><div class="color-block"></div>
<div class="color-block"></div><div class="color-block"></div><div class="color-block"></div><div class="color-block"></div><div class="color-block"></div><div class="color-block"></div><div class="color-block"></div>
<div class="color-block"></div><div class="color-block"></div><div class="color-block"></div><div class="color-block"></div><div class="color-block"></div><div class="color-block"></div><div class="color-block"></div>
                        </div>
                        <div class="sg-example_markup">
                            <div class="sg-markup sg-markup-block">
                                <pre class="sg-markup_wrap"><code class="hljs"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"color-block"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"color-block"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"color-block"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"color-block"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"color-block"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"color-block"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"color-block"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"color-block"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"color-block"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"color-block"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"color-block"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"color-block"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"color-block"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"color-block"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"color-block"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"color-block"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"color-block"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"color-block"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"color-block"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"color-block"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"color-block"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"color-block"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"color-block"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"color-block"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"color-block"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"color-block"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"color-block"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"color-block"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"color-block"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"color-block"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"color-block"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"color-block"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"color-block"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"color-block"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"color-block"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"color-block"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"color-block"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"color-block"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"color-block"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"color-block"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"color-block"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"color-block"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"color-block"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"color-block"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"color-block"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"color-block"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"color-block"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"color-block"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"color-block"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></code></pre>
                            </div>
                        </div>
                    </div>
                </article>        </div>
        </div> 
            <div class="sg-category">
            <div class="sg-category_wrap">
            
                <header class="sg-category_head" data-sg-section="Layout" >
                    <h2 class="sg-heading-category">Layout</h2>
                </header>                <article class="sg-article" id="styles-layout-arrangement-object" data-sg-section="Layout" data-sg-heading="Arrangement object">
                    <header class="sg-article_head ">
                        <h3 class="sg-heading sg-heading-article">Arrangement object</h3></header>
                    <div class="sg-article_comment">
                        <p>Creates an image-content block that vertically aligns images and text (centered, bottom, or top).
<br>
Children can be named four things:</p><ul>
<li><code class="sg-code sg-codespan">arrange_fit</code> or <code class="sg-code sg-codespan">arrange_media</code> will create a block that fits the width of its content (useful for images).</li>
<li><code class="sg-code sg-codespan">arrange_fill</code> will fill the remaining space.</li>
<li><code class="sg-code sg-codespan">arrange_body</code> are similar but have some default styling.</li>
</ul>
<p>You may also combine this with grid items like <code class="sg-code sg-codespan">row</code> and <code class="sg-code sg-codespan">column</code> if you wish to add gutters between elements.</p><p><em>NOTE: Do not mistake this for true grid items. This should only be used for the arrangement of a few items. It is &#x201C;squishy&#x201D;, but not technically responsive.</em></p>
                    </div>
                    <div class="sg-example">
                        <div class="sg-example_wrap">
                            <div class="arrange">
    <div class="arrange_media">
        <img src="http://placehold.it/60x48" alt="placeholder image">
    </div>
    <div class="arrange_body">
        Content that is vertically (middle) aligned with the image.
    </div>
</div>

<!-- Bottom Arrangement -->
<div class="arrange arrange_bottom">
    <div class="arrange_media">
        <img src="http://placehold.it/60x48" alt="placeholder image">
    </div>
    <div class="arrange_body">
        Content that is bottom aligned to the image.
    </div>
</div>

<!-- Equal width arrangement-->
<div class="arrange arrange_equal">
    <div class="arrange_fill">
        Equal width columns.
    </div>
    <div class="arrange_fill">
        <img class="show" src="http://placehold.it/120x72" alt="placeholder image" style="margin: auto;">
    </div>
    <div class="arrange_fill">
        Can be as many columns as you want.
    </div>
</div>
                        </div>
                        <div class="sg-example_markup">
                            <div class="sg-markup sg-markup-block">
                                <pre class="sg-markup_wrap"><code class="hljs"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"arrange"</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"arrange_media"</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"http://placehold.it/60x48"</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">"placeholder image"</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"arrange_body"</span>&gt;</span>
        Content that is vertically (middle) aligned with the image.
    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>

<span class="hljs-comment">&lt;!-- Bottom Arrangement --&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"arrange arrange_bottom"</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"arrange_media"</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"http://placehold.it/60x48"</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">"placeholder image"</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"arrange_body"</span>&gt;</span>
        Content that is bottom aligned to the image.
    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>

<span class="hljs-comment">&lt;!-- Equal width arrangement--&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"arrange arrange_equal"</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"arrange_fill"</span>&gt;</span>
        Equal width columns.
    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"arrange_fill"</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"show"</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"http://placehold.it/120x72"</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">"placeholder image"</span> <span class="hljs-attr">style</span>=<span class="hljs-string">"margin: auto;"</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"arrange_fill"</span>&gt;</span>
        Can be as many columns as you want.
    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></code></pre>
                            </div>
                        </div>
                    </div>
                </article>                <article class="sg-article" id="styles-layout-isolation-object" data-sg-section="Layout" data-sg-heading="Isolation object">
                    <header class="sg-article_head ">
                        <h3 class="sg-heading sg-heading-article">Isolation object</h3></header>
                    <div class="sg-article_comment">
                        <p>Isolates an image from text wrapping underneath. Useful for creating an association between an image and text. Often used with an icon or avatar. Adding other classes to the <code class="sg-code sg-codespan">isolate_body</code> can create a more stylized version.</p>
                    </div>
                    <div class="sg-example">
                        <div class="sg-example_wrap">
                            <img class="isolate_media" src="http://placehold.it/300x48" alt="placeholder image">
<p class="isolate_body">
    Content that sits to the right of the image but will never wrap underneath the image to the left. Etiam porta sem malesuada magna mollis euismod. Cras justo odio, dapibus ac facilisis in, egestas eget quam.
</p>
                        </div>
                        <div class="sg-example_markup">
                            <div class="sg-markup sg-markup-block">
                                <pre class="sg-markup_wrap"><code class="hljs"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"isolate_media"</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"http://placehold.it/300x48"</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">"placeholder image"</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"isolate_body"</span>&gt;</span>
    Content that sits to the right of the image but will never wrap underneath the image to the left. Etiam porta sem malesuada magna mollis euismod. Cras justo odio, dapibus ac facilisis in, egestas eget quam.
<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></code></pre>
                            </div>
                        </div>
                    </div>
                </article>        </div>
        </div> 
            <div class="sg-category">
            <div class="sg-category_wrap">
            
                <header class="sg-category_head" data-sg-section="Lists" >
                    <h2 class="sg-heading-category">Lists</h2>
                </header>                <article class="sg-article" id="styles-lists-bordered-lists" data-sg-section="Lists" data-sg-heading="Bordered Lists">
                    <header class="sg-article_head ">
                        <h3 class="sg-heading sg-heading-article">Bordered Lists</h3></header>
                    <div class="sg-article_comment">
                        <p>Creates a list with borders above and below each list item. Appending <code class="sg-code sg-codespan">list_bordered</code> with <code class="sg-code sg-codespan">_short</code> will make reduce the padding between each item.</p>
                    </div>
                    <div class="sg-example">
                        <div class="sg-example_wrap">
                            <ul class="list_bordered">
    <li>List Item</li>
    <li>List Item</li>
    <li>List Item</li>
</ul>

<ul class="list_bordered_short">
    <li>List Item</li>
    <li>List Item</li>
    <li>List Item</li>
</ul>
                        </div>
                        <div class="sg-example_markup">
                            <div class="sg-markup sg-markup-block">
                                <pre class="sg-markup_wrap"><code class="hljs"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"list_bordered"</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>List Item<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>List Item<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>List Item<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span>

<span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"list_bordered_short"</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>List Item<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>List Item<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>List Item<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></code></pre>
                            </div>
                        </div>
                    </div>
                </article>                <article class="sg-article" id="styles-lists-breadcrumbs" data-sg-section="Lists" data-sg-heading="Breadcrumbs">
                    <header class="sg-article_head ">
                        <h3 class="sg-heading sg-heading-article">Breadcrumbs</h3></header>
                    <div class="sg-article_comment">
                        <p>A list where each item is in a row, with a &#x25B8; between each item.</p>
                    </div>
                    <div class="sg-example">
                        <div class="sg-example_wrap">
                            <ul class="breadcrumbs">
    <li class="breadcrumb">List Item</li>
    <li class="breadcrumb">List Item</li>
    <li class="breadcrumb">List Item</li>
</ul>
                        </div>
                        <div class="sg-example_markup">
                            <div class="sg-markup sg-markup-block">
                                <pre class="sg-markup_wrap"><code class="hljs"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"breadcrumbs"</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"breadcrumb"</span>&gt;</span>List Item<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"breadcrumb"</span>&gt;</span>List Item<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"breadcrumb"</span>&gt;</span>List Item<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></code></pre>
                            </div>
                        </div>
                    </div>
                </article>                <article class="sg-article" id="styles-lists-inline-lists" data-sg-section="Lists" data-sg-heading="Inline Lists">
                    <header class="sg-article_head ">
                        <h3 class="sg-heading sg-heading-article">Inline Lists</h3></header>
                    <div class="sg-article_comment">
                        <p>A list where each item is in a row, with spacing to the right of each item</p>
                    </div>
                    <div class="sg-example">
                        <div class="sg-example_wrap">
                            <ul class="list_inline">
    <li>List Item</li>
    <li>List Item</li>
    <li>List Item</li>
</ul>
                        </div>
                        <div class="sg-example_markup">
                            <div class="sg-markup sg-markup-block">
                                <pre class="sg-markup_wrap"><code class="hljs"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"list_inline"</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>List Item<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>List Item<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>List Item<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></code></pre>
                            </div>
                        </div>
                    </div>
                </article>                <article class="sg-article" id="styles-lists-navigation-list" data-sg-section="Lists" data-sg-heading="Navigation List">
                    <header class="sg-article_head ">
                        <h3 class="sg-heading sg-heading-article">Navigation List</h3></header>
                    <div class="sg-article_comment">
                        <p>A list of anchor tags that fill the space of their containers. Used when you need larger click/tap targets on a group on links.</p><p>Also useful as a modifier class since it can be used on any container with anchors (doesn&#x2019;t have to be an <code class="sg-code sg-codespan">ol</code> or <code class="sg-code sg-codespan">ul</code>).</p>
                    </div>
                    <div class="sg-example">
                        <div class="sg-example_wrap">
                            <ul class="list_nav">
    <li>
        <a href="#">List Item</a>
    </li>
    <li>
        <a href="#">List Item</a>
    </li>
    <li>
        <a href="#">List Item</a>
    </li>
</ul>
                        </div>
                        <div class="sg-example_markup">
                            <div class="sg-markup sg-markup-block">
                                <pre class="sg-markup_wrap"><code class="hljs"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"list_nav"</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"#"</span>&gt;</span>List Item<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"#"</span>&gt;</span>List Item<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"#"</span>&gt;</span>List Item<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></code></pre>
                            </div>
                        </div>
                    </div>
                </article>        </div>
        </div> 
            <div class="sg-category">
            <div class="sg-category_wrap">
            
                <header class="sg-category_head" data-sg-section="Tabs" id="styles-tabs-">
                    <h2 class="sg-heading-categorysg-heading sg-heading-article">Tabs</h2>
                </header>                <article class="sg-article"  data-sg-section="Tabs" data-sg-heading="">
                    <div class="sg-article_comment">
                        <p>A way to show groups of content, with buttons to toggle between them (like tabs in a folder or browser window).</p>
                <h6 id="set-up" class="sg-heading sg-heading-6">Set Up</h6>
<p>Tabs start out as simple anchor + element pairings (with the anchor&#x2019;s href referring to an element&#x2019;s ID).</p><p>Using <code class="sg-code sg-codespan">.tab_button</code> on the anchor, and <code class="sg-code sg-codespan">.tab_content</code> on the element, javascript will group the tabs together until an element breaks the pattern. It will then attach the navigation and event handlers.</p>
                    </div>
                    <div class="sg-example">
                        <div class="sg-example_wrap">
                            <div id="tabs">
<!--Wrapper is optional-->

    <a href="#tab1" class="tab_button">Tab 1</a>
    <div id="tab1" class="tab_content">
        Content Here
    </div>

    <a href="#tab2" class="tab_button">Tab 2</a>
    <div id="tab2" class="tab_content">
        Secondary Content Here
    </div>

</div>

<!--Initialize tabs javascript-->
<script>
$(function() {
    //JQuery selector scopes tabs to wrapper, otherwise it can be scoped to "body"
    $("#tabs").tabbed();
});
</script>
                        </div>
                        <div class="sg-example_markup">
                            <div class="sg-markup sg-markup-block">
                                <pre class="sg-markup_wrap"><code class="hljs"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"tabs"</span>&gt;</span>
<span class="hljs-comment">&lt;!--Wrapper is optional--&gt;</span>

    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"#tab1"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"tab_button"</span>&gt;</span>Tab 1<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"tab1"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"tab_content"</span>&gt;</span>
        Content Here
    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>

    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"#tab2"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"tab_button"</span>&gt;</span>Tab 2<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"tab2"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"tab_content"</span>&gt;</span>
        Secondary Content Here
    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>

<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>

<span class="hljs-comment">&lt;!--Initialize tabs javascript--&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">
$(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{
    <span class="hljs-comment">//JQuery selector scopes tabs to wrapper, otherwise it can be scoped to "body"</span>
    $(<span class="hljs-string">"#tabs"</span>).tabbed();
});
</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></code></pre>
                            </div>
                        </div>
                    </div>
                </article>        </div>
        </div> 
            <div class="sg-category">
            <div class="sg-category_wrap">
            
                <header class="sg-category_head" data-sg-section="Typography" >
                    <h2 class="sg-heading-category">Typography</h2>
                </header>                <article class="sg-article" id="styles-typography-body-copy" data-sg-section="Typography" data-sg-heading="Body copy">
                    <header class="sg-article_head ">
                        <h3 class="sg-heading sg-heading-article">Body copy</h3></header>
                    <div class="sg-article_comment">
                        <p>The default font size for all typography is 16px with line-height of 24px (1.5). This is applied to the body and all paragraphs. <code class="sg-code sg-codespan">&lt;p&gt;</code> tags all receive a bottom margin of 24px.</p>
                    </div>
                    <div class="sg-example">
                        <div class="sg-example_wrap">
                            <p>Aenean lacinia bibendum nulla sed consectetur. Morbi leo risus, porta ac consectetur ac, vestibulum at eros. Sed posuere consectetur est at lobortis. </p>
<p>Nullam quis risus eget urna mollis ornare vel eu leo. Nulla vitae elit libero, a pharetra augue.</p>
                        </div>
                        <div class="sg-example_markup">
                            <div class="sg-markup sg-markup-block">
                                <pre class="sg-markup_wrap"><code class="hljs"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Aenean lacinia bibendum nulla sed consectetur. Morbi leo risus, porta ac consectetur ac, vestibulum at eros. Sed posuere consectetur est at lobortis. <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Nullam quis risus eget urna mollis ornare vel eu leo. Nulla vitae elit libero, a pharetra augue.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></code></pre>
                            </div>
                        </div>
                    </div>
                </article>                <article class="sg-article" id="styles-typography-heading-sizes" data-sg-section="Typography" data-sg-heading="Heading sizes">
                    <header class="sg-article_head ">
                        <h3 class="sg-heading sg-heading-article">Heading sizes</h3></header>
                    <div class="sg-article_comment">
                        <p>Moving from <code class="sg-code sg-codespan">h6</code> up to <code class="sg-code sg-codespan">h1</code>, the heading font sizes get larger on a scale. For instance, <code class="sg-code sg-codespan">h6</code> is 1.35 times larger than the base font size of 16px. Headings have a default bottom margin of 24px.</p><p><strong>Heading tags should be used in a hierarchical manner</strong>, appropriate for the page, and not used for their size. To override a heading size, use a class with the corresponding heading name. See the example below.</p>
                    </div>
                    <div class="sg-example">
                        <div class="sg-example_wrap">
                            <h1>Heading 1</h1>
<h2>Heading 2</h2>
<h3>Heading 3</h3>
<h4>Heading 4</h4>
<h5>Heading 5</h5>
<h6>Heading 6</h6>

<h1 class="h4">Heading 1 with an h4 class</h1>
                        </div>
                        <div class="sg-example_markup">
                            <div class="sg-markup sg-markup-block">
                                <pre class="sg-markup_wrap"><code class="hljs"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Heading 1<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>Heading 2<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>Heading 3<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span>Heading 4<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">h5</span>&gt;</span>Heading 5<span class="hljs-tag">&lt;/<span class="hljs-name">h5</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">h6</span>&gt;</span>Heading 6<span class="hljs-tag">&lt;/<span class="hljs-name">h6</span>&gt;</span>

<span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"h4"</span>&gt;</span>Heading 1 with an h4 class<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></code></pre>
                            </div>
                        </div>
                    </div>
                </article>        </div>
        </div>    </section>    <section id="development" class="sg-section sg-section-development" data-sg-section="development">
        <div class="sg-section_head sg-category">
            <div class="sg-category_wrap">
                <h1 class="sg-heading sg-heading-section">Development</h1>
            </div>
        </div>

         
            <div class="sg-category">
            <div class="sg-category_wrap">
            
                <header class="sg-category_head" data-sg-section="Colors" >
                    <h2 class="sg-heading-category">Colors</h2>
                </header>                <article class="sg-article" id="development-colors-blending-modes" data-sg-section="Colors" data-sg-heading="Blending Modes">
                    <header class="sg-article_head ">
                        <h3 class="sg-heading sg-heading-article">Blending Modes</h3>
                        <p><code class="sg-codespan sg-file">_partials/sass/tools/_t-blendmodes.scss</code></p><hr></header>
                    <div class="sg-article_comment">
                        <p><a href="https://github.com/heygrady/scss-blend-modes/blob/master/stylesheets/_blend-modes.scss">Taken from Sass Blend Modes</a></p>
                <h5 id="blend-normal-" class="sg-heading sg-heading-5"><code id="function-blend-normal" class="sg-global-function sg-code sg-codespan sg-global" data-code-id="blend-normal()">blend-normal()</code></h5>

                <h6 id="function-forground-background-amount-0-" class="sg-heading sg-heading-6">function(<code class="sg-code sg-codespan">$forground, $background, $amount:0</code>)</h6>

                <h5 id="blend-multiply-" class="sg-heading sg-heading-5"><code id="function-blend-multiply" class="sg-global-function sg-code sg-codespan sg-global" data-code-id="blend-multiply()">blend-multiply()</code></h5>

                <h6 id="function-forground-background-amount-0-" class="sg-heading sg-heading-6">function(<code class="sg-code sg-codespan">$forground, $background, $amount:0</code>)</h6>

                <h5 id="blend-lighten-" class="sg-heading sg-heading-5"><code id="function-blend-lighten" class="sg-global-function sg-code sg-codespan sg-global" data-code-id="blend-lighten()">blend-lighten()</code></h5>

                <h6 id="function-forground-background-amount-0-" class="sg-heading sg-heading-6">function(<code class="sg-code sg-codespan">$forground, $background, $amount:0</code>)</h6>

                <h5 id="blend-darken-" class="sg-heading sg-heading-5"><code id="function-blend-darken" class="sg-global-function sg-code sg-codespan sg-global" data-code-id="blend-darken()">blend-darken()</code></h5>

                <h6 id="function-forground-background-amount-0-" class="sg-heading sg-heading-6">function(<code class="sg-code sg-codespan">$forground, $background, $amount:0</code>)</h6>

                <h5 id="blend-lineardodge-" class="sg-heading sg-heading-5"><code id="function-blend-lineardodge" class="sg-global-function sg-code sg-codespan sg-global" data-code-id="blend-lineardodge()">blend-lineardodge()</code></h5>

                <h6 id="function-forground-background-amount-0-" class="sg-heading sg-heading-6">function(<code class="sg-code sg-codespan">$forground, $background, $amount:0</code>)</h6>

                <h5 id="blend-linearburn-" class="sg-heading sg-heading-5"><code id="function-blend-linearburn" class="sg-global-function sg-code sg-codespan sg-global" data-code-id="blend-linearburn()">blend-linearburn()</code></h5>

                <h6 id="function-forground-background-amount-0-" class="sg-heading sg-heading-6">function(<code class="sg-code sg-codespan">$forground, $background, $amount:0</code>)</h6>

                <h5 id="blend-difference" class="sg-heading sg-heading-5"><code class="sg-code sg-codespan">blend-difference</code></h5>

                <h6 id="function-forground-background-amount-0-" class="sg-heading sg-heading-6">function(<code class="sg-code sg-codespan">$forground, $background, $amount:0</code>)</h6>

                <h5 id="blend-screen-" class="sg-heading sg-heading-5"><code id="function-blend-screen" class="sg-global-function sg-code sg-codespan sg-global" data-code-id="blend-screen()">blend-screen()</code></h5>

                <h6 id="function-forground-background-amount-0-" class="sg-heading sg-heading-6">function(<code class="sg-code sg-codespan">$forground, $background, $amount:0</code>)</h6>

                <h5 id="blend-exclusion-" class="sg-heading sg-heading-5"><code id="function-blend-exclusion" class="sg-global-function sg-code sg-codespan sg-global" data-code-id="blend-exclusion()">blend-exclusion()</code></h5>

                <h6 id="function-forground-background-amount-0-" class="sg-heading sg-heading-6">function(<code class="sg-code sg-codespan">$forground, $background, $amount:0</code>)</h6>

                <h5 id="blend-multiply-" class="sg-heading sg-heading-5"><code id="function-blend-multiply" class="sg-global-function sg-code sg-codespan sg-global" data-code-id="blend-multiply()">blend-multiply()</code></h5>

                <h6 id="function-forground-background-amount-0-" class="sg-heading sg-heading-6">function(<code class="sg-code sg-codespan">$forground, $background, $amount:0</code>)</h6>
                    </div>
                </article>                <article class="sg-article" id="development-colors-debugging" data-sg-section="Colors" data-sg-heading="Debugging">
                    <header class="sg-article_head ">
                        <h3 class="sg-heading sg-heading-article">Debugging</h3>
                        <p><code class="sg-codespan sg-file">_partials/sass/tools/_t-color-functions.scss</code></p><hr></header>
                    <div class="sg-article_comment">
                        <h5 id="-color-palette-output-" class="sg-heading sg-heading-5"><code id="mixin-color-palette-output" class="sg-global-mixin sg-code sg-codespan sg-global" data-code-id="@color-palette-output()">@color-palette-output()</code></h5>

                <h6 id="mixin-selector-color-map-base-colors-" class="sg-heading sg-heading-6">mixin(<code class="sg-code sg-codespan">$selector</code>, <code class="sg-code sg-codespan">$color-map:</code> <code id="variable--base-colors" class="sg-global-variable sg-code sg-codespan sg-global" data-code-id="$base-colors">$base-colors</code>)</h6>
<p>Debugging tool that creates a pretty color palette (in columns) using psuedo selectors (nth-child required). Used for &#x201C;color blocks&#x201D; output, in style guide.</p><p data-code-meta="requires" class="sg-code-meta sg-code-meta-value"> <code class="sg-code sg-codespan"> <code id="function-map-add-depth" class="sg-global-function sg-code sg-codespan sg-global" data-code-id="map-add-depth()">map-add-depth()</code>, <code id="function-black-or-white" class="sg-global-function sg-code sg-codespan sg-global" data-code-id="black-or-white()">black-or-white()</code></code> </p>
                    </div>
                </article>                <article class="sg-article" id="development-colors-manipulation" data-sg-section="Colors" data-sg-heading="Manipulation">
                    <header class="sg-article_head ">
                        <h3 class="sg-heading sg-heading-article">Manipulation</h3>
                        <p><code class="sg-codespan sg-file">_partials/sass/tools/_t-color-functions.scss</code></p><hr></header>
                    <div class="sg-article_comment">
                        <h5 id="generate-color-varations-" class="sg-heading sg-heading-5"><code id="function-generate-color-varations" class="sg-global-function sg-code sg-codespan sg-global" data-code-id="generate-color-varations()">generate-color-varations()</code></h5>

                <h6 id="function-map-colors-functions-tint-tint-tint-shade-shade-shade-increments-20-40-80-20-40-80-variations-light-lighter-lightest-dark-darker-darkest-blending-colors-null-" class="sg-heading sg-heading-6">function( <code class="sg-code sg-codespan">$map: $colors, $functions: (tint, tint, tint, shade, shade, shade), $increments: (20%, 40%, 80%, 20%, 40%, 80%), $variations: (light, lighter, lightest, dark, darker, darkest), $blending-colors: null</code>)</h6>
<p>Takes base color values and generates a full color palette. Used by the <code id="variable--base-colors" class="sg-global-variable sg-code sg-codespan sg-global" data-code-id="$base-colors">$base-colors</code> map to create a project&#x2019;s palette, accessible via <code id="function-colors" class="sg-global-function sg-code sg-codespan sg-global" data-code-id="colors()">colors()</code>.</p><p><strong>Arguments:</strong></p><ul>
<li><code class="sg-code sg-codespan">$map</code>: Color map you want to create variations of. Defaults to <code id="variable--base-colors" class="sg-global-variable sg-code sg-codespan sg-global" data-code-id="$base-colors">$base-colors</code>.</li>
<li><code class="sg-code sg-codespan">$functions</code>: color functions used to generate variations (e.g. lighten or darken). Can use any <code class="sg-code sg-codespan">blend</code> function, provided <code class="sg-code sg-codespan">$blending-colors</code> are provided.</li>
<li><code class="sg-code sg-codespan">$increments</code>: percentage amount to apply <code class="sg-code sg-codespan">$function</code> to each <code class="sg-code sg-codespan">$variations</code>.</li>
<li><code class="sg-code sg-codespan">$variations</code>: actual names for each color tone when <code id="function-colors" class="sg-global-function sg-code sg-codespan sg-global" data-code-id="colors()">colors()</code> used.</li>
<li><code class="sg-code sg-codespan">$blending-colors</code>: used when a function is a <code class="sg-code sg-codespan">blend</code>. Can be a list or a single color.</li>
</ul>
<p data-code-meta="requires" class="sg-code-meta sg-code-meta-value"> <code class="sg-code sg-codespan"> <code id="function-combine-color-maps" class="sg-global-function sg-code sg-codespan sg-global" data-code-id="combine-color-maps()">combine-color-maps()</code></code> </p><h5 id="black-or-white-" class="sg-heading sg-heading-5"><code id="function-black-or-white" class="sg-global-function sg-code sg-codespan sg-global" data-code-id="black-or-white()">black-or-white()</code></h5>

                <h6 id="function-color-" class="sg-heading sg-heading-6">function(<code class="sg-code sg-codespan">$color</code>)</h6>
<p>Change text color based on background-color&#x2019;s darkness.</p>
<div class="sg-markup sg-codeblock">
<pre class="sg-markup_wrap"><code class="hljs sg-code undefined"><span class="hljs-selector-tag">div</span> {
    <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#f8cd12</span>;
    <span class="hljs-attribute">color</span>: set_text_color(<span class="hljs-number">#f8cd12</span>);
}
<span class="hljs-comment">// Your text color would be black because #f8cd12 and #00000 have more contrast.</span>
</code></pre>
</div>
<p data-code-meta="alias" class="sg-code-meta sg-code-meta-value"> <code id="function-set-text-color" class="sg-global-function sg-code sg-codespan sg-global" data-code-id="set-text-color()">set-text-color()</code> </p>

<p data-code-meta="requires" class="sg-code-meta sg-code-meta-value"> <code class="sg-code sg-codespan"> <code class="sg-code sg-codespan">color-luminance</code></code> </p><h5 id="pick-best-color-" class="sg-heading sg-heading-5"><code id="function-pick-best-color" class="sg-global-function sg-code sg-codespan sg-global" data-code-id="pick-best-color()">pick-best-color()</code></h5>

                <h6 id="function-base-colors-tolerance-0-" class="sg-heading sg-heading-6">function(<code class="sg-code sg-codespan">$base, $colors, $tolerance: 0</code>)</h6>
<p>Compares a set of colors against <code class="sg-code sg-codespan">$base</code> and returns the color with the most contrast. <code class="sg-code sg-codespan">$colors</code> should be a list.
<br>
<a href="https://gist.github.com/voxpelli/6304812">Taken from here</a></p>
<div class="sg-markup sg-codeblock">
<pre class="sg-markup_wrap"><code class="hljs sg-code undefined"><span class="hljs-selector-tag">div</span> {
    <span class="hljs-attribute">color</span>: pick_best_color(<span class="hljs-number">#f8cd12</span>, (<span class="hljs-number">#a0a0c0</span>, <span class="hljs-number">#fff</span>, <span class="hljs-number">#2c2c2c</span>));
}
<span class="hljs-comment">// The function would test the colors and find that #2c2c2c is the best.</span>
</code></pre>
</div>
<p data-code-meta="requires" class="sg-code-meta sg-code-meta-value"> <code class="sg-code sg-codespan"> <code id="function-color-contrast" class="sg-global-function sg-code sg-codespan sg-global" data-code-id="color-contrast()">color-contrast()</code>, <code id="function-color-luminance" class="sg-global-function sg-code sg-codespan sg-global" data-code-id="color-luminance()">color-luminance()</code></code> </p>

<p data-code-meta="returns" class="sg-code-meta sg-code-meta-value">  color </p><h5 id="color-contrast-" class="sg-heading sg-heading-5"><code id="function-color-contrast" class="sg-global-function sg-code sg-codespan sg-global" data-code-id="color-contrast()">color-contrast()</code></h5>

                <h6 id="function-color1-color2-" class="sg-heading sg-heading-6">function(<code class="sg-code sg-codespan">$color1, $color2</code>)</h6>
<p>Find contrast between two colors.
<br>
<a href="https://github.com/LeaVerou/contrast-ratio/blob/gh-pages/color.js">Adapted from color.js</a></p><p data-code-meta="requires" class="sg-code-meta sg-code-meta-value"> <code class="sg-code sg-codespan"> <code id="function-color-luminance" class="sg-global-function sg-code sg-codespan sg-global" data-code-id="color-luminance()">color-luminance()</code></code> </p>

<p data-code-meta="returns" class="sg-code-meta sg-code-meta-value">  number(0 - 1) </p><h5 id="color-luminance-" class="sg-heading sg-heading-5"><code id="function-color-luminance" class="sg-global-function sg-code sg-codespan sg-global" data-code-id="color-luminance()">color-luminance()</code></h5>

                <h6 id="function-color1-" class="sg-heading sg-heading-6">function(<code class="sg-code sg-codespan">$color1</code>)</h6>
<p>Find the relative luminance of a color. Used by <code id="function-color-contrast" class="sg-global-function sg-code sg-codespan sg-global" data-code-id="color-contrast()">color-contrast()</code>. <a href="https://github.com/LeaVerou/contrast-ratio/blob/gh-pages/color.js">Adapted from color.js</a></p>

<p data-code-meta="alias" class="sg-code-meta sg-code-meta-value"> <code id="function-luma" class="sg-global-function sg-code sg-codespan sg-global" data-code-id="luma()">luma()</code> </p>

<p data-code-meta="returns" class="sg-code-meta sg-code-meta-value">  number(0 - 1) </p>
                    </div>
                </article>                <article class="sg-article" id="development-colors-lookup" data-sg-section="Colors" data-sg-heading="Lookup">
                    <header class="sg-article_head ">
                        <h3 class="sg-heading sg-heading-article">Lookup</h3>
                        <p><code class="sg-codespan sg-file">_partials/sass/tools/_t-color-functions.scss</code></p><hr></header>
                    <div class="sg-article_comment">
                        <h5 id="colors-" class="sg-heading sg-heading-5"><code id="function-colors" class="sg-global-function sg-code sg-codespan sg-global" data-code-id="colors()">colors()</code></h5>

                <h6 id="function-color-name-tone-39-base-39-opacity-1-" class="sg-heading sg-heading-6">function(<code class="sg-code sg-codespan">$color-name, $tone: &apos;base&apos;, $opacity: 1</code>)</h6>
<p>Get a color value from the global <code id="variable--base-colors" class="sg-global-variable sg-code sg-codespan sg-global" data-code-id="$base-colors">$base-colors</code> map. Darker and lighter tones are available by passing a second string.</p>
<div class="sg-markup sg-codeblock">
<pre class="sg-markup_wrap"><code class="hljs sg-code undefined"><span class="hljs-selector-class">.foo</span> {
    <span class="hljs-attribute">background-color</span>: colors(links, light));
}
</code></pre>
</div>
<p>Passing only a color name will default to the &#x2018;base&#x2019; color.</p><p data-code-meta="alias" class="sg-code-meta sg-code-meta-value"> <code id="function-color" class="sg-global-function sg-code sg-codespan sg-global" data-code-id="color()">color()</code> </p>

<p data-code-meta="requires" class="sg-code-meta sg-code-meta-value"> <code class="sg-code sg-codespan"> <code id="variable--base-colors" class="sg-global-variable sg-code sg-codespan sg-global" data-code-id="$base-colors">$base-colors</code></code> </p><p><a href="http://blog.12spokes.com/web-design-development/simple-css-color-management-with-sass/">Reference</a></p><h5 id="combine-color-maps-" class="sg-heading sg-heading-5"><code id="function-combine-color-maps" class="sg-global-function sg-code sg-codespan sg-global" data-code-id="combine-color-maps()">combine-color-maps()</code></h5>

                <h6 id="function-map1-map2-" class="sg-heading sg-heading-6">function(<code class="sg-code sg-codespan">$map1 , $map2</code>)</h6>
<p>Specialized function used by <code id="function-generate-color-variations" class="sg-global-function sg-code sg-codespan sg-global" data-code-id="generate-color-variations()">generate-color-variations()</code> to merge two color maps.</p><p data-code-meta="returns" class="sg-code-meta sg-code-meta-value">  map </p>
                    </div>
                </article>        </div>
        </div> 
            <div class="sg-category">
            <div class="sg-category_wrap">
            
                <header class="sg-category_head" data-sg-section="Config" >
                    <h2 class="sg-heading-category">Config</h2>
                </header>                <article class="sg-article" id="development-config-color-settings" data-sg-section="Config" data-sg-heading="Color Settings">
                    <header class="sg-article_head ">
                        <h3 class="sg-heading sg-heading-article">Color Settings</h3>
                        <p><code class="sg-codespan sg-file">_partials/sass/_config.scss</code></p><hr></header>
                    <div class="sg-article_comment">
                        <h5 id="-base-colors" class="sg-heading sg-heading-5"><code id="variable--base-colors" class="sg-global-variable sg-code sg-codespan sg-global" data-code-id="$base-colors">$base-colors</code></h5>

                <h6 id="map-key-color-value-" class="sg-heading sg-heading-6">Map (key : color value)</h6>
<p>Sets up consistent color names to be used for color-palette. Dark and light values will be automatically generated. Key values should be accessed through <code id="function-colors" class="sg-global-function sg-code sg-codespan sg-global" data-code-id="colors()">colors()</code>.
<br>
<code class="sg-code sg-codespan">type</code>, <code class="sg-code sg-codespan">links</code>, and <code class="sg-code sg-codespan">bg</code> key values are required for some starter styles. If you choose not to use them, just replace their references in the appropriate files.</p><p>Supports a nested map style like the following:</p>
<div class="sg-markup sg-codeblock">
<pre class="sg-markup_wrap"><code class="hljs sg-code undefined"><span class="hljs-variable">$base-colors</span>: (
  <span class="hljs-string">&apos;type&apos;</span>:(
    <span class="hljs-string">&apos;base&apos;</span>:red,
    <span class="hljs-string">&apos;light&apos;</span>: pink,
    <span class="hljs-string">&apos;dark&apos;</span>:maroon
  ),
  <span class="hljs-string">&apos;links&apos;</span>:(
    <span class="hljs-string">&apos;base&apos;</span>:blue,
    <span class="hljs-string">&apos;light&apos;</span>: sky,
    <span class="hljs-string">&apos;dark&apos;</span>: navy
  ),
  <span class="hljs-string">&apos;bg&apos;</span>: (
    <span class="hljs-string">&apos;base&apos;</span>: <span class="hljs-number">#fff</span>,
    <span class="hljs-string">&apos;dark&apos;</span>: <span class="hljs-number">#ddd</span>
  )
);
</code></pre>
</div>
                    </div>
                </article>                <article class="sg-article" id="development-config-debug-settings" data-sg-section="Config" data-sg-heading="Debug Settings">
                    <header class="sg-article_head ">
                        <h3 class="sg-heading sg-heading-article">Debug Settings</h3>
                        <p><code class="sg-codespan sg-file">_partials/sass/_config.scss</code></p><hr></header>
                    <div class="sg-article_comment">
                        <p><em>NOTE: These settings, when set to <code class="sg-code sg-codespan">true</code>, will slow down compilation somewhat.</em></p>
                <h5 id="-debug-fonts" class="sg-heading sg-heading-5"><code id="variable--debug-fonts" class="sg-global-variable sg-code sg-codespan sg-global" data-code-id="$debug-fonts">$debug-fonts</code></h5>

                <h6 id="boolean" class="sg-heading sg-heading-6">Boolean</h6>
<p>Whether to include debug statements about font sizes and line-heights as they&#x2019;re generated. Useful if you&#x2019;re getting weird values on auto-generated line-heights.</p><ul>
<li>%: Distance from the lowest font-size.</li>
<li>ub: Line-height upperbounds</li>
<li>lb: Line-height lowerbounds</li>
<li>lh: Final line-height (in pixels and unit-less).</li>
<li>loops: Number of times it took to process the line-height. High numbers can indicate font-sizes that are very difficult to process.</li>
</ul>

                <h5 id="-debug-baseline" class="sg-heading sg-heading-5"><code id="variable--debug-baseline" class="sg-global-variable sg-code sg-codespan sg-global" data-code-id="$debug-baseline">$debug-baseline</code></h5>

                <h6 id="boolean" class="sg-heading sg-heading-6">Boolean</h6>
<p>Adds style for a <code class="sg-code sg-codespan">baseline-on</code> class that will show a grid of the baseline on any element (most useful on the <code class="sg-code sg-codespan">body</code> or <code class="sg-code sg-codespan">html</code> tag). Makes vertical alignment easier.</p>
                <h5 id="-debug-silent-classes" class="sg-heading sg-heading-5"><code id="variable--debug-silent-classes" class="sg-global-variable sg-code sg-codespan sg-global" data-code-id="$debug-silent-classes">$debug-silent-classes</code></h5>

                <h6 id="boolean" class="sg-heading sg-heading-6">Boolean</h6>
<p>Stores all auto-generated silent classes into a map that is then output as a comment at the end of the final css. Useful for getting an overview of values that are stored by the framework.</p>
                    </div>
                </article>                <article class="sg-article" id="development-config-general-settings" data-sg-section="Config" data-sg-heading="General Settings">
                    <header class="sg-article_head ">
                        <h3 class="sg-heading sg-heading-article">General Settings</h3>
                        <p><code class="sg-codespan sg-file">_partials/sass/_config.scss</code></p><hr></header>
                    <div class="sg-article_comment">
                        <h5 id="-breakpoints" class="sg-heading sg-heading-5"><code id="variable--breakpoints" class="sg-global-variable sg-code sg-codespan sg-global" data-code-id="$breakpoints">$breakpoints</code></h5>

                <h6 id="map-breakpoint-name-39-breakpoint-value-39-" class="sg-heading sg-heading-6">Map (<code class="sg-code sg-codespan">breakpoint-name: &apos;breakpoint-value&apos;</code>)</h6>
<p>Sets up variables for media-queries. Used in <code id="mixin-media-query" class="sg-global-mixin sg-code sg-codespan sg-global" data-code-id="@media-query()">@media-query()</code>.</p><p><strong>Example</strong></p>
<div class="sg-markup sg-codeblock">
<pre class="sg-markup_wrap"><code class="hljs sg-code undefined"><span class="hljs-variable">$breakpoints</span>: (
  <span class="hljs-string">&apos;small&apos;</span>:<span class="hljs-string">&apos;(min-width: 320px)&apos;</span>,
  <span class="hljs-string">&apos;bigs&apos;</span>:<span class="hljs-string">&apos;(min-width: 850px)&apos;</span>
);
</code></pre>
</div><h5 id="-display-classes" class="sg-heading sg-heading-5"><code id="variable--display-classes" class="sg-global-variable sg-code sg-codespan sg-global" data-code-id="$display-classes">$display-classes</code></h5>

                <h6 id="map-string-string-" class="sg-heading sg-heading-6">Map (string: string)</h6>
<p>Variable used to generate display classes. Key value pairs determine the class name and the display value.</p><p><strong>Example</strong></p>
<div class="sg-markup sg-codeblock">
<pre class="sg-markup_wrap"><code class="hljs sg-code undefined"><span class="hljs-comment">//SCSS input</span>
<span class="hljs-variable">$display-classes</span>: (<span class="hljs-string">&apos;show&apos;</span>:<span class="hljs-string">&apos;block&apos;</span>);

<span class="hljs-comment">//CSS output</span>
<span class="hljs-selector-class">.show</span> { <span class="hljs-attribute">display</span>: block; }
</code></pre>
</div>

                <h5 id="-spacing-classes" class="sg-heading sg-heading-5"><code id="variable--spacing-classes" class="sg-global-variable sg-code sg-codespan sg-global" data-code-id="$spacing-classes">$spacing-classes</code></h5>

                <h6 id="map-string-string-" class="sg-heading sg-heading-6">Map (<code class="sg-code sg-codespan">string: string</code>)</h6>
<p>Variable used to generate spacing classes. Classes are created via <code id="mixin-spacing-utilities" class="sg-global-mixin sg-code sg-codespan sg-global" data-code-id="@spacing-utilities()">@spacing-utilities()</code>. Classes are named in the format of <code class="sg-code sg-codespan">.prefix_direction_amount</code>.</p><p><strong>Keys and Values</strong></p><ul>
<li>&#x2018;directions&#x2019;: Direction class suffixes</li>
<li>&#x2018;amounts&#x2019;: Numeric value multiples (e.g. <code class="sg-code sg-codespan">2</code> or <code class="sg-code sg-codespan">-1</code>)</li>
<li>&#x2018;names&#x2019;: Amount names</li>
<li>&#x2018;prefixes&#x2019;: Prefixes for class names (for margins or padding)</li>
</ul>
<p><strong>Example</strong></p>
<div class="sg-markup sg-codeblock">
<pre class="sg-markup_wrap"><code class="hljs sg-code undefined"><span class="hljs-comment">//SCSS Input</span>
<span class="hljs-variable">$display-classes</span>: (
    <span class="hljs-string">&apos;directions&apos;</span>: (<span class="hljs-string">&apos;t&apos;</span>, <span class="hljs-string">&apos;r&apos;</span>),
    <span class="hljs-string">&apos;amounts&apos;</span>: (<span class="hljs-number">2</span>, -<span class="hljs-number">1</span>),
    <span class="hljs-string">&apos;names&apos;</span>: (<span class="hljs-string">&apos;2&apos;</span>, <span class="hljs-string">&apos;neg&apos;</span>),
    <span class="hljs-string">&apos;prefixes&apos;</span>: (<span class="hljs-string">&apos;space&apos;</span>,<span class="hljs-string">&apos;pad&apos;</span>)
);

<span class="hljs-comment">//CSS output</span>
<span class="hljs-selector-class">.space_t_2</span> { <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">2rem</span>; }
<span class="hljs-selector-class">.space_r_2</span> { <span class="hljs-attribute">margin-right</span>: <span class="hljs-number">2rem</span>; }
<span class="hljs-selector-class">.space_t_neg</span> { <span class="hljs-attribute">margin-top</span>: -<span class="hljs-number">1rem</span>; }
<span class="hljs-selector-class">.space_r_neg</span> { <span class="hljs-attribute">margin-right</span>: -<span class="hljs-number">1rem</span>; }
<span class="hljs-selector-class">.pad_t_2</span> { <span class="hljs-attribute">padding-top</span>: <span class="hljs-number">2rem</span>; }
<span class="hljs-selector-class">.pad_r_2</span> { <span class="hljs-attribute">padding-right</span>: <span class="hljs-number">2rem</span>; }
<span class="hljs-comment">//No .pad_t/r_neg classes since negative padding is invalid</span>

@<span class="hljs-keyword">media</span> only screen and (min-width:<span class="hljs-number">300px</span>){...}
<span class="hljs-comment">//repeated for all media-queries defined by $breakpoints-has-spacing-classes...</span>
</code></pre>
</div><h5 id="-breakpoints-has-alignment-classes-breakpoints-has-spacing-classes-breakpoints-has-display-classes-breakpoint-has-type-classes" class="sg-heading sg-heading-5"><code id="variable--breakpoints-has-alignment-classes" class="sg-global-variable sg-code sg-codespan sg-global" data-code-id="$breakpoints-has-alignment-classes">$breakpoints-has-alignment-classes</code>, <code id="variable--breakpoints-has-spacing-classes" class="sg-global-variable sg-code sg-codespan sg-global" data-code-id="$breakpoints-has-spacing-classes">$breakpoints-has-spacing-classes</code>, <code class="sg-code sg-codespan">$breakpoints-has-display-classes</code>, <code class="sg-code sg-codespan">$breakpoint-has-type-classes</code></h5>

                <h6 id="list-keys-from-breakpoints-" class="sg-heading sg-heading-6">List (keys from <code id="variable--breakpoints" class="sg-global-variable sg-code sg-codespan sg-global" data-code-id="$breakpoints">$breakpoints</code>)</h6>
<p>Determines what utility classes get generated at <code id="variable--breakpoints" class="sg-global-variable sg-code sg-codespan sg-global" data-code-id="$breakpoints">$breakpoints</code>. The list&#x2019;s order determines cascade The list&#x2019;s order determines the output order. This is useful if you want one breakpoint to override another.
<br>
A <code class="sg-code sg-codespan">false</code> value will output no classes of that type.</p>
                    </div>
                </article>                <article class="sg-article" id="development-config-grid-settings" data-sg-section="Config" data-sg-heading="Grid Settings">
                    <header class="sg-article_head ">
                        <h3 class="sg-heading sg-heading-article">Grid Settings</h3>
                        <p><code class="sg-codespan sg-file">_partials/sass/_config.scss</code></p><hr></header>
                    <div class="sg-article_comment">
                        <h5 id="-max-site-width" class="sg-heading sg-heading-5"><code id="variable--max-site-width" class="sg-global-variable sg-code sg-codespan sg-global" data-code-id="$max-site-width">$max-site-width</code></h5>

                <h6 id="pixel-value" class="sg-heading sg-heading-6">Pixel value</h6>
<p>Maximum desktop width for the site wrapper.</p>
                <h5 id="-grid-columns" class="sg-heading sg-heading-5"><code id="variable--grid-columns" class="sg-global-variable sg-code sg-codespan sg-global" data-code-id="$grid-columns">$grid-columns</code></h5>

                <h6 id="number" class="sg-heading sg-heading-6">Number</h6>
<p>Base number of grid columns to be generated. Note that any column number will include all fractions of the fewer columns. For instance, a 12-column grid would also include all fractions of 1-12 (including things like three-sevenths).</p>
                <h5 id="-grid-gutter" class="sg-heading sg-heading-5"><code id="variable--grid-gutter" class="sg-global-variable sg-code sg-codespan sg-global" data-code-id="$grid-gutter">$grid-gutter</code></h5>

                <h6 id="pixel-value" class="sg-heading sg-heading-6">Pixel value</h6>
<p>Space between grid items. Also used in <code id="function-type-space" class="sg-global-function sg-code sg-codespan sg-global" data-code-id="type-space()">type-space()</code> for horizontal spacing units.</p>
                <h5 id="-grid-silent-classes" class="sg-heading sg-heading-5"><code id="variable--grid-silent-classes" class="sg-global-variable sg-code sg-codespan sg-global" data-code-id="$grid-silent-classes">$grid-silent-classes</code></h5>

                <h6 id="boolean" class="sg-heading sg-heading-6">Boolean</h6>
<p>If set to false, actual grid classes will be output to CSS.</p>
                <h5 id="-grid-push-grid-pull" class="sg-heading sg-heading-5"><code id="variable--grid-push" class="sg-global-variable sg-code sg-codespan sg-global" data-code-id="$grid-push">$grid-push</code>, <code id="variable--grid-pull" class="sg-global-variable sg-code sg-codespan sg-global" data-code-id="$grid-pull">$grid-pull</code></h5>

                <h6 id="boolean" class="sg-heading sg-heading-6">Boolean</h6>
<p>Determines whether to include extra grid classes for positional grid modifiers.</p>
                <h5 id="-grid-markup-fix" class="sg-heading sg-heading-5"><code id="variable--grid-markup-fix" class="sg-global-variable sg-code sg-codespan sg-global" data-code-id="$grid-markup-fix">$grid-markup-fix</code></h5>

                <h6 id="boolean" class="sg-heading sg-heading-6">Boolean</h6>
<p>If set to <code class="sg-code sg-codespan">true</code>, html must have no white space (or comments) between grid items. Almost always set to <code class="sg-code sg-codespan">false</code>.</p>
                <h5 id="-grid-floats" class="sg-heading sg-heading-5"><code id="variable--grid-floats" class="sg-global-variable sg-code sg-codespan sg-global" data-code-id="$grid-floats">$grid-floats</code></h5>

                <h6 id="boolean" class="sg-heading sg-heading-6">Boolean</h6>
<p>If set to <code class="sg-code sg-codespan">true</code>, the grid uses floats instead of inline-block for layout.</p>
                <h5 id="-breakpoints-has-widths-breakpoints-has-push-breakpoints-has-pull" class="sg-heading sg-heading-5"><code id="variable--breakpoints-has-widths" class="sg-global-variable sg-code sg-codespan sg-global" data-code-id="$breakpoints-has-widths">$breakpoints-has-widths</code>, <code id="variable--breakpoints-has-push" class="sg-global-variable sg-code sg-codespan sg-global" data-code-id="$breakpoints-has-push">$breakpoints-has-push</code>, <code id="variable--breakpoints-has-pull" class="sg-global-variable sg-code sg-codespan sg-global" data-code-id="$breakpoints-has-pull">$breakpoints-has-pull</code></h5>

                <h6 id="list-string-" class="sg-heading sg-heading-6">List (string)</h6>
<p>Determines what classes (widths, pushes, pulls) get generated at <code id="variable--breakpoints" class="sg-global-variable sg-code sg-codespan sg-global" data-code-id="$breakpoints">$breakpoints</code>. The list&#x2019;s order determines the output order. This is useful if you want one breakpoint to override another.</p>
                    </div>
                </article>                <article class="sg-article" id="development-config-slick-settings" data-sg-section="Config" data-sg-heading="Slick Settings">
                    <header class="sg-article_head ">
                        <h3 class="sg-heading sg-heading-article">Slick Settings</h3>
                        <p><code class="sg-codespan sg-file">_partials/sass/_config.scss</code></p><hr></header>
                    <div class="sg-article_comment">
                        <h5 id="-slick-" class="sg-heading sg-heading-5"><code id="variable--slick------" class="sg-global-variable sg-code sg-codespan sg-global" data-code-id="$slick-[]-[]">$slick-[]-[]</code></h5>
<p>Configuration for slick carousel jQuery plugin.
<br>
<a href="https://github.com/kenwheeler/slick/#sass-variables">See Slick documentation for more</a></p>
                    </div>
                </article>                <article class="sg-article" id="development-config-typography-settings" data-sg-section="Config" data-sg-heading="Typography Settings">
                    <header class="sg-article_head ">
                        <h3 class="sg-heading sg-heading-article">Typography Settings</h3>
                        <p><code class="sg-codespan sg-file">_partials/sass/_config.scss</code></p><hr></header>
                    <div class="sg-article_comment">
                        <h5 id="-base-font-size" class="sg-heading sg-heading-5"><code id="variable--base-font-size" class="sg-global-variable sg-code sg-codespan sg-global" data-code-id="$base-font-size">$base-font-size</code></h5>

                <h6 id="pixel-value" class="sg-heading sg-heading-6">Pixel value</h6>
<p>Font size all other values will use for calculation. Will be converted to <code class="sg-code sg-codespan">rems</code>.</p>
                <h5 id="-base-line-height" class="sg-heading sg-heading-5"><code id="variable--base-line-height" class="sg-global-variable sg-code sg-codespan sg-global" data-code-id="$base-line-height">$base-line-height</code></h5>

                <h6 id="pixel-value" class="sg-heading sg-heading-6">Pixel value</h6>
<p>Line-height for base font-size. Will be used to determine the vertical spacing values when <code id="function-type-space" class="sg-global-function sg-code sg-codespan sg-global" data-code-id="type-space()">type-space()</code> is used.</p>
                <h5 id="-font-looseness" class="sg-heading sg-heading-5"><code id="variable--font-looseness" class="sg-global-variable sg-code sg-codespan sg-global" data-code-id="$font-looseness">$font-looseness</code></h5>

                <h6 id="percentage" class="sg-heading sg-heading-6">Percentage</h6>
<p>What to base the tightness/looseness of automatically-generated <code class="sg-code sg-codespan">line-heights</code>.</p>
                <h5 id="-auto-scale-type" class="sg-heading sg-heading-5"><code id="variable--auto-scale-type" class="sg-global-variable sg-code sg-codespan sg-global" data-code-id="$auto-scale-type">$auto-scale-type</code></h5>

                <h6 id="boolean" class="sg-heading sg-heading-6">Boolean</h6>
<p>Uses <code id="variable--scale-ratio" class="sg-global-variable sg-code sg-codespan sg-global" data-code-id="$scale-ratio">$scale-ratio</code> to create font sizes for headings starting from the <code id="variable--base-font-size" class="sg-global-variable sg-code sg-codespan sg-global" data-code-id="$base-font-size">$base-font-size</code>. Overwrites <code id="variable--type--h---size" class="sg-global-variable sg-code sg-codespan sg-global" data-code-id="$type-[h#]-size">$type-[h#]-size</code>.</p>
                <h5 id="-scale-ratio" class="sg-heading sg-heading-5"><code id="variable--scale-ratio" class="sg-global-variable sg-code sg-codespan sg-global" data-code-id="$scale-ratio">$scale-ratio</code></h5>

                <h6 id="numeric-float-" class="sg-heading sg-heading-6">Numeric (float)</h6>
<p>Used for <code id="variable--auto-scale-type" class="sg-global-variable sg-code sg-codespan sg-global" data-code-id="$auto-scale-type">$auto-scale-type</code> and for <code id="function-modular-scale" class="sg-global-function sg-code sg-codespan sg-global" data-code-id="modular-scale()">modular-scale()</code>.</p>
                <h5 id="-rem-px-fallback" class="sg-heading sg-heading-5"><code id="variable--rem-px-fallback" class="sg-global-variable sg-code sg-codespan sg-global" data-code-id="$rem-px-fallback">$rem-px-fallback</code></h5>

                <h6 id="boolean" class="sg-heading sg-heading-6">Boolean</h6>
<p>Determines whether <code id="function-rems" class="sg-global-function sg-code sg-codespan sg-global" data-code-id="rems()">rems()</code> conversion includes a pixel-value fallback for older browsers like IE8.</p>
                <h5 id="-indented-paragraphs" class="sg-heading sg-heading-5"><code id="variable--indented-paragraphs" class="sg-global-variable sg-code sg-codespan sg-global" data-code-id="$indented-paragraphs">$indented-paragraphs</code></h5>

                <h6 id="boolean" class="sg-heading sg-heading-6">Boolean</h6>
<p>Determines whether to generate css for paragraphs with a text indent, rather than paragraphs with margins between them.</p><h5 id="-type-h-size" class="sg-heading sg-heading-5"><code id="variable--type--h---size" class="sg-global-variable sg-code sg-codespan sg-global" data-code-id="$type-[h#]-size">$type-[h#]-size</code></h5>

                <h6 id="list-pixel-value-pixel-or-unitless-value-" class="sg-heading sg-heading-6">List (pixel value [, pixel or unitless value])</h6>
<p>Variables used to generate heading (and small) font-sizes and line-heights. A secondary value will force the line-height to that base-value.</p><p><em>NOTE: First value must be pixel values(or a function that generates a pixel value like <code id="function-modular-scale" class="sg-global-function sg-code sg-codespan sg-global" data-code-id="modular-scale()">modular-scale()</code>), but the optional secondary value can be unitless.</em></p><h5 id="-primary-font-stack-secondary-font-stack-monospace-font-stack-icon-font-stack" class="sg-heading sg-heading-5"><code id="variable--primary-font-stack" class="sg-global-variable sg-code sg-codespan sg-global" data-code-id="$primary-font-stack">$primary-font-stack</code>, <code id="variable--secondary-font-stack" class="sg-global-variable sg-code sg-codespan sg-global" data-code-id="$secondary-font-stack">$secondary-font-stack</code>, <code id="variable--monospace-font-stack" class="sg-global-variable sg-code sg-codespan sg-global" data-code-id="$monospace-font-stack">$monospace-font-stack</code>, <code id="variable--icon-font-stack" class="sg-global-variable sg-code sg-codespan sg-global" data-code-id="$icon-font-stack">$icon-font-stack</code></h5>

                <h6 id="string" class="sg-heading sg-heading-6">String</h6>
<p>Used wherever font-families are declared. Use <code class="sg-code sg-codespan">null</code> if nothing exists.</p>
                <h5 id="-use-web-fonts" class="sg-heading sg-heading-5"><code id="variable--use-web-fonts" class="sg-global-variable sg-code sg-codespan sg-global" data-code-id="$use-web-fonts">$use-web-fonts</code></h5>

                <h6 id="boolean" class="sg-heading sg-heading-6">Boolean</h6>
<p>Whether to generate <code class="sg-code sg-codespan">@font-face</code> values based on <code id="variable--font-file-name" class="sg-global-variable sg-code sg-codespan sg-global" data-code-id="$font-file-name">$font-file-name</code> (and the other <code class="sg-code sg-codespan">$font-</code> variables).</p>
                <h5 id="-font-file-name" class="sg-heading sg-heading-5"><code id="variable--font-file-name" class="sg-global-variable sg-code sg-codespan sg-global" data-code-id="$font-file-name">$font-file-name</code></h5>

                <h6 id="list-string-" class="sg-heading sg-heading-6">List (string)</h6>
<p>Uses for automatically generated <code class="sg-code sg-codespan">@font-face</code> declarations. Describes the filename as well as the font-family name reference. <em>File names and @font-face values must be the same (e.g. &#x2018;opensans&#x2019; and &#x2018;opensans.ttf&#x2019;).<strong>Casing matters</strong>.</em></p>
                <h5 id="-font-weights" class="sg-heading sg-heading-5"><code id="variable--font-weights" class="sg-global-variable sg-code sg-codespan sg-global" data-code-id="$font-weights">$font-weights</code></h5>

                <h6 id="list-nested-" class="sg-heading sg-heading-6">List (nested)</h6>
<p>Each parenthesis corresponds to each name in <code id="variable--font-file-name" class="sg-global-variable sg-code sg-codespan sg-global" data-code-id="$font-file-name">$font-file-name</code>. Determines how many <code class="sg-code sg-codespan">@font-face</code> weights are generated per font.</p>
                <h5 id="-font-italics" class="sg-heading sg-heading-5"><code id="variable--font-italics" class="sg-global-variable sg-code sg-codespan sg-global" data-code-id="$font-italics">$font-italics</code></h5>

                <h6 id="list-nested-boolean-" class="sg-heading sg-heading-6">List (nested) (boolean)</h6>
<p>Corresponds to each value in <code id="variable--font-weights" class="sg-global-variable sg-code sg-codespan sg-global" data-code-id="$font-weights">$font-weights</code>. (e.g. if <code class="sg-code sg-codespan">$font-weights: (400,700),(200,400)</code> and <code class="sg-code sg-codespan">$font-italics: (true),(false,true)</code> then the first font will have italics in the 400 and 700 weights while second font will have italics in the 400 weight).</p>
                <h5 id="-font-include-woff2" class="sg-heading sg-heading-5"><code id="variable--font-include-woff2" class="sg-global-variable sg-code sg-codespan sg-global" data-code-id="$font-include-woff2">$font-include-woff2</code></h5>

                <h6 id="boolean-list-" class="sg-heading sg-heading-6">Boolean (list)</h6>
<p>Determines whether woff2 formats be included in the <code class="sg-code sg-codespan">@font-face</code> generation. Can be a list if each font has different values (not recommended since woff2 is the most performant font-file format).</p>
                <h5 id="-font-include-eot" class="sg-heading sg-heading-5"><code id="variable--font-include-eot" class="sg-global-variable sg-code sg-codespan sg-global" data-code-id="$font-include-eot">$font-include-eot</code></h5>

                <h6 id="boolean-list-" class="sg-heading sg-heading-6">Boolean (list)</h6>
<p>Determines whether to generate <code class="sg-code sg-codespan">@font-face</code> values that point at an .eot file. Fallback for IE8.</p>
                    </div>
                </article>        </div>
        </div> 
            <div class="sg-category">
            <div class="sg-category_wrap">
            
                <header class="sg-category_head" data-sg-section="Functions" >
                    <h2 class="sg-heading-category">Functions</h2>
                </header>                <article class="sg-article" id="development-functions-conversion" data-sg-section="Functions" data-sg-heading="Conversion">
                    <header class="sg-article_head ">
                        <h3 class="sg-heading sg-heading-article">Conversion</h3>
                        <p><code class="sg-codespan sg-file">_partials/sass/tools/_t-functions.scss</code></p><hr></header>
                    <div class="sg-article_comment">
                        <h5 id="strip-units-" class="sg-heading sg-heading-5"><code id="function-strip-units" class="sg-global-function sg-code sg-codespan sg-global" data-code-id="strip-units()">strip-units()</code></h5>

                <h6 id="function-value-" class="sg-heading sg-heading-6">function(<code class="sg-code sg-codespan">$value</code>)</h6>
<p>Remove lengths (<code class="sg-code sg-codespan">px</code>, <code class="sg-code sg-codespan">em</code>, <code class="sg-code sg-codespan">rem</code>, etc.) from a value. Usually a variable. This is sometimes required because Sass cannot calculate incompatible units (<code class="sg-code sg-codespan">px * rem</code> for instance).
<br>
<a href="http://stackoverflow.com/questions/12328259/how-do-you-strip-the-unit-from-any-number-in-sass">Reference</a></p>
                <h5 id="percentage-to-decimal-" class="sg-heading sg-heading-5"><code id="function-percentage-to-decimal" class="sg-global-function sg-code sg-codespan sg-global" data-code-id="percentage-to-decimal()">percentage-to-decimal()</code></h5>

                <h6 id="function-percentage-" class="sg-heading sg-heading-6">function(<code class="sg-code sg-codespan">$percentage</code>)</h6>
<p>Changes percent value to decimal.</p>

<p data-code-meta="returns" class="sg-code-meta sg-code-meta-value">  number </p>
                <h5 id="px-to-vw-" class="sg-heading sg-heading-5"><code id="function-px-to-vw" class="sg-global-function sg-code sg-codespan sg-global" data-code-id="px-to-vw()">px-to-vw()</code></h5>

                <h6 id="function-pixels-" class="sg-heading sg-heading-6">function(<code class="sg-code sg-codespan">$pixels</code>)</h6>
<p>Converts pixel dimensions to viewport width (vw) dimensions.</p>

<p data-code-meta="returns" class="sg-code-meta sg-code-meta-value">  number (vw) </p>
                <h5 id="px-to-rems-" class="sg-heading sg-heading-5"><code id="function-px-to-rems" class="sg-global-function sg-code sg-codespan sg-global" data-code-id="px-to-rems()">px-to-rems()</code></h5>

                <h6 id="function-pixels-base-font-base-font-size-" class="sg-heading sg-heading-6">function(<code class="sg-code sg-codespan">$pixels, $base-font:</code> <code id="variable--base-font-size" class="sg-global-variable sg-code sg-codespan sg-global" data-code-id="$base-font-size">$base-font-size</code>)</h6>
<p>Function for calculating <code class="sg-code sg-codespan">rem</code> values. Used by <code id="mixin-px-to-rems" class="sg-global-mixin sg-code sg-codespan sg-global" data-code-id="@px-to-rems()">@px-to-rems()</code>. The <code class="sg-code sg-codespan">$base-size</code> is used to calculate the value (e.g. if the body&#x2019;s font-size is <code class="sg-code sg-codespan">16px</code>, then the rem value of <code class="sg-code sg-codespan">24px</code> would be <code class="sg-code sg-codespan">1.5rem</code>).</p>

<p data-code-meta="returns" class="sg-code-meta sg-code-meta-value">  number (rems) </p>

<p data-code-meta="alias" class="sg-code-meta sg-code-meta-value"> <code id="function-rems" class="sg-global-function sg-code sg-codespan sg-global" data-code-id="rems()">rems()</code> </p>
                <h5 id="px-to-ems-" class="sg-heading sg-heading-5"><code id="function-px-to-ems" class="sg-global-function sg-code sg-codespan sg-global" data-code-id="px-to-ems()">px-to-ems()</code></h5>

                <h6 id="function-pixels-context-base-font-size-" class="sg-heading sg-heading-6">function(<code class="sg-code sg-codespan">$pixels, $context:</code> <code class="sg-code sg-codespan">$base-font-size</code>)</h6>
<p>Function for calculating <code class="sg-code sg-codespan">em</code> values. The <code class="sg-code sg-codespan">$context</code> is used to calculate the final value. Different from <code id="function-px-to-rems" class="sg-global-function sg-code sg-codespan sg-global" data-code-id="px-to-rems()">px-to-rems()</code> by generating a value with an <code class="sg-code sg-codespan">em</code>. <code class="sg-code sg-codespan">$context</code> is often necessary based on the situation.</p>

<p data-code-meta="returns" class="sg-code-meta sg-code-meta-value">  number(ems) </p>

<p data-code-meta="alias" class="sg-code-meta sg-code-meta-value"> <code id="function-ems" class="sg-global-function sg-code sg-codespan sg-global" data-code-id="ems()">ems()</code> </p>
                <h5 id="list-to-string-" class="sg-heading sg-heading-5"><code id="function-list-to-string" class="sg-global-function sg-code sg-codespan sg-global" data-code-id="list-to-string()">list-to-string()</code></h5>

                <h6 id="function-list-separator-39-39-" class="sg-heading sg-heading-6">function(<code class="sg-code sg-codespan">$list, $separator:&apos;,&apos;</code>)</h6>
<p>Converts a list to a string with an optional separator.</p>

<p data-code-meta="returns" class="sg-code-meta sg-code-meta-value">  string </p>

<p data-code-meta="alias" class="sg-code-meta sg-code-meta-value"> <code id="function-str-join" class="sg-global-function sg-code sg-codespan sg-global" data-code-id="str-join()">str-join()</code> </p>
                <h5 id="str-to-number-" class="sg-heading sg-heading-5"><code id="function-str-to-number" class="sg-global-function sg-code sg-codespan sg-global" data-code-id="str-to-number()">str-to-number()</code></h5>

                <h6 id="function-string-unitless-false-" class="sg-heading sg-heading-6">function(<code class="sg-code sg-codespan">$string, $unitless: false</code>)</h6>
<p>Converts a number-like string to a number. Since Sass accepts quoted and non-quoted values like <code class="sg-code sg-codespan">&quot;10px&quot;</code> and <code class="sg-code sg-codespan">10px</code>, but can only do math on the unquoted (number) value, it is sometimes necessary to convert/cast a string to a number.</p>

<p data-code-meta="returns" class="sg-code-meta sg-code-meta-value">  number </p>
                    </div>
                </article>                <article class="sg-article" id="development-functions-general" data-sg-section="Functions" data-sg-heading="General">
                    <header class="sg-article_head ">
                        <h3 class="sg-heading sg-heading-article">General</h3>
                        <p><code class="sg-codespan sg-file">_partials/sass/tools/_t-functions.scss</code></p><hr></header>
                    <div class="sg-article_comment">
                        <h5 id="cache-" class="sg-heading sg-heading-5"><code id="function-cache" class="sg-global-function sg-code sg-codespan sg-global" data-code-id="cache()">cache()</code></h5>

                <h6 id="function-function-name-args-" class="sg-heading sg-heading-6">function(<code class="sg-code sg-codespan">$function-name, $args...</code>)</h6>
<p>Memoize (cache) a function&#x2019;s return values and arguments. Speeds up processing on intensive functions that get called many times (with the same arguments).</p><p><em>NOTE: This can actually <strong>increase</strong> processing time if used too often or on simple functions as the lookup process isn&#x2019;t free. Every cached value is unique.</em></p><p data-code-meta="returns" class="sg-code-meta sg-code-meta-value">  function result </p>
                    </div>
                </article>                <article class="sg-article" id="development-functions-maps" data-sg-section="Functions" data-sg-heading="Maps">
                    <header class="sg-article_head ">
                        <h3 class="sg-heading sg-heading-article">Maps</h3>
                        <p><code class="sg-codespan sg-file">_partials/sass/tools/_t-functions.scss</code></p><hr></header>
                    <div class="sg-article_comment">
                        <p><a href="http://www.sitepoint.com/extra-map-functions-sass/">Reference</a></p>
                <h5 id="map-deep-set-" class="sg-heading sg-heading-5"><code id="function-map-deep-set" class="sg-global-function sg-code sg-codespan sg-global" data-code-id="map-deep-set()">map-deep-set()</code></h5>

                <h6 id="function-map-keys-value-" class="sg-heading sg-heading-6">function(<code class="sg-code sg-codespan">$map, $keys... [, $value]</code>)</h6>
<p>Add to a deeply nested map key. Accepts any number of keys, but the final value is the new key.</p>

<p data-code-meta="returns" class="sg-code-meta sg-code-meta-value">  map </p>
                <h5 id="map-depth-" class="sg-heading sg-heading-5"><code id="function-map-depth" class="sg-global-function sg-code sg-codespan sg-global" data-code-id="map-depth()">map-depth()</code></h5>

                <h6 id="function-map-" class="sg-heading sg-heading-6">function(<code class="sg-code sg-codespan">$map</code>)</h6>
<p>Find depth of a <code class="sg-code sg-codespan">$map</code>.</p>

<p data-code-meta="returns" class="sg-code-meta sg-code-meta-value">  number </p>
                <h5 id="map-has-keys-" class="sg-heading sg-heading-5"><code id="function-map-has-keys" class="sg-global-function sg-code sg-codespan sg-global" data-code-id="map-has-keys()">map-has-keys()</code></h5>

                <h6 id="-map-key-s-to-be-checked-" class="sg-heading sg-heading-6"><code class="sg-code sg-codespan">[map], [key(s) to be checked ...]</code></h6>
<p>Determine whether a map contains certain keys.</p>

<p data-code-meta="returns" class="sg-code-meta sg-code-meta-value">  boolean </p>

<p data-code-meta="alias" class="sg-code-meta sg-code-meta-value"> <code id="function-map-contains-keys" class="sg-global-function sg-code sg-codespan sg-global" data-code-id="map-contains-keys()">map-contains-keys()</code> </p>
                <h5 id="map-has-nested-keys-" class="sg-heading sg-heading-5"><code id="function-map-has-nested-keys" class="sg-global-function sg-code sg-codespan sg-global" data-code-id="map-has-nested-keys()">map-has-nested-keys()</code></h5>

                <h6 id="function-map-keys-" class="sg-heading sg-heading-6">function(<code class="sg-code sg-codespan">$map</code>, <code class="sg-code sg-codespan">$keys...</code>)</h6>
<p>Check for the value of a nested key.</p>

<p data-code-meta="returns" class="sg-code-meta sg-code-meta-value">  boolean </p>

<p data-code-meta="alias" class="sg-code-meta sg-code-meta-value"> <code id="function-map-contains-nested-keys" class="sg-global-function sg-code sg-codespan sg-global" data-code-id="map-contains-nested-keys()">map-contains-nested-keys()</code> </p>
                <h5 id="map-get-nested-" class="sg-heading sg-heading-5"><code id="function-map-get-nested" class="sg-global-function sg-code sg-codespan sg-global" data-code-id="map-get-nested()">map-get-nested()</code></h5>

                <h6 id="function-map-keys-" class="sg-heading sg-heading-6">function(<code class="sg-code sg-codespan">$map</code>, <code class="sg-code sg-codespan">$keys...</code>)</h6>
<p>Returns nested map values. A deep version of Sass&#x2019; <code id="function-map-get" class="sg-global-function sg-code sg-codespan sg-global" data-code-id="map-get()">map-get()</code>.</p>

<p data-code-meta="returns" class="sg-code-meta sg-code-meta-value">  string, boolean, list, or map </p>
                <h5 id="map-extend-" class="sg-heading sg-heading-5"><code id="function-map-extend" class="sg-global-function sg-code sg-codespan sg-global" data-code-id="map-extend()">map-extend()</code></h5>

                <h6 id="function-map-maps-deep-true-" class="sg-heading sg-heading-6">function(<code class="sg-code sg-codespan">$map</code>, <code class="sg-code sg-codespan">$maps...</code>(<code class="sg-code sg-codespan">$deep:true</code>))</h6>
<p>Merges multiple maps. Similar to jQuery&#x2019;s .extend().</p>

<p data-code-meta="returns" class="sg-code-meta sg-code-meta-value">  map </p>
                <h5 id="map-add-depth-" class="sg-heading sg-heading-5"><code id="function-map-add-depth" class="sg-global-function sg-code sg-codespan sg-global" data-code-id="map-add-depth()">map-add-depth()</code></h5>

                <h6 id="function-map-new-key-39-base-39-" class="sg-heading sg-heading-6">function(<code class="sg-code sg-codespan">$map</code>, <code class="sg-code sg-codespan">$new-key:&apos;base&apos;</code>)</h6>
<p>Adds one level to a map using the new key to a map. Used by <code id="function-generate_color_varations" class="sg-global-function sg-code sg-codespan sg-global" data-code-id="generate_color_varations()">generate_color_varations()</code>. (e.g. <code class="sg-code sg-codespan">(key: value, key: value)</code> becomes <code class="sg-code sg-codespan">(key:(new-key: value), key:(new-key: value))</code> )</p>

<p data-code-meta="returns" class="sg-code-meta sg-code-meta-value">  map </p>
                <h5 id="map-print-" class="sg-heading sg-heading-5"><code id="function-map-print" class="sg-global-function sg-code sg-codespan sg-global" data-code-id="map-print()">map-print()</code></h5>

                <h6 id="function-map-level-1-" class="sg-heading sg-heading-6">function(<code class="sg-code sg-codespan">$map</code>, <code class="sg-code sg-codespan">$level:1</code>)</h6>
<p>Prints map into a string (in a JSON-esque format). Useful for debugging.</p>

<p data-code-meta="returns" class="sg-code-meta sg-code-meta-value">  string </p>

<p data-code-meta="alias" class="sg-code-meta sg-code-meta-value"> <code id="function-map-inspect" class="sg-global-function sg-code sg-codespan sg-global" data-code-id="map-inspect()">map-inspect()</code> </p>
                    </div>
                </article>                <article class="sg-article" id="development-functions-math" data-sg-section="Functions" data-sg-heading="Math">
                    <header class="sg-article_head ">
                        <h3 class="sg-heading sg-heading-article">Math</h3>
                        <p><code class="sg-codespan sg-file">_partials/sass/tools/_t-functions.scss</code></p><hr></header>
                    <div class="sg-article_comment">
                        <p>Most functions taken from <a href="https://github.com/Team-Sass/Sassy-math/blob/master/sass/math.scss">Sassy Math</a>.</p><h5 id="pow-" class="sg-heading sg-heading-5"><code id="function-pow" class="sg-global-function sg-code sg-codespan sg-global" data-code-id="pow()">pow()</code></h5>

                <h6 id="function-number-exponent-precision-12-" class="sg-heading sg-heading-6">function(<code class="sg-code sg-codespan">$number</code>, <code class="sg-code sg-codespan">$exponent</code>, <code class="sg-code sg-codespan">$precision:12</code>)</h6>
<p>A more robust exponent multiplication which allows for decimal-based exponents. This <strong>fully</strong> replaces Compass&#x2019; pow() function (allows for float-based exponents).</p><p><a href="https://gist.github.com/nathancrank/7539155">Reference</a></p><p data-code-meta="returns" class="sg-code-meta sg-code-meta-value">  number </p>

<p data-code-meta="requires" class="sg-code-meta sg-code-meta-value"> <code id="function-log" class="sg-global-function sg-code sg-codespan sg-global" data-code-id="log()">log()</code> </p>

<p data-code-meta="alias" class="sg-code-meta sg-code-meta-value"> <code id="function-exponent" class="sg-global-function sg-code sg-codespan sg-global" data-code-id="exponent()">exponent()</code> </p><h5 id="log-" class="sg-heading sg-heading-5"><code id="function-log" class="sg-global-function sg-code sg-codespan sg-global" data-code-id="log()">log()</code></h5>

                <h6 id="function-x-" class="sg-heading sg-heading-6">function(<code class="sg-code sg-codespan">$x</code>)</h6>
<p>Returns the natural logarithm of a number.</p>
<div class="sg-markup sg-codeblock">
<pre class="sg-markup_wrap"><code class="hljs sg-code undefined"><span class="hljs-variable">$value</span>:   log(<span class="hljs-number">2</span>)  // <span class="hljs-number">0.69315</span>
<span class="hljs-variable">$value2</span>:  log(<span class="hljs-number">10</span>) // <span class="hljs-number">2.30259</span>
</code></pre>
</div>
<p data-code-meta="returns" class="sg-code-meta sg-code-meta-value">  number </p><h5 id="frexp-" class="sg-heading sg-heading-5"><code id="function-frexp" class="sg-global-function sg-code sg-codespan sg-global" data-code-id="frexp()">frexp()</code></h5>

                <h6 id="function-x-" class="sg-heading sg-heading-6">function(<code class="sg-code sg-codespan">$x</code>)</h6>
<p>Returns a two-element list containing the normalized fraction and exponent of number.</p><p data-code-meta="returns" class="sg-code-meta sg-code-meta-value">  list (fraction, exponent) </p><h5 id="ldexp-" class="sg-heading sg-heading-5"><code id="function-ldexp" class="sg-global-function sg-code sg-codespan sg-global" data-code-id="ldexp()">ldexp()</code></h5>

                <h6 id="function-x-exp-" class="sg-heading sg-heading-6">function(<code class="sg-code sg-codespan">$x, $exp</code>)</h6>
<p>Returns $x * 2^$exp</p><h5 id="exp-" class="sg-heading sg-heading-5"><code id="function-exp" class="sg-global-function sg-code sg-codespan sg-global" data-code-id="exp()">exp()</code></h5>

                <h6 id="function-x-" class="sg-heading sg-heading-6">function(<code class="sg-code sg-codespan">$x</code>)</h6>
<p>Returns E^x, where x is the argument, and E is Euler&#x2019;s constant, the base of the natural logarithms.</p>
<div class="sg-markup sg-codeblock">
<pre class="sg-markup_wrap"><code class="hljs sg-code undefined"><span class="hljs-variable">$value</span>: exp(<span class="hljs-number">1</span>)  // <span class="hljs-number">2.71828</span>
<span class="hljs-variable">$value2</span>: exp(-<span class="hljs-number">1</span>) // <span class="hljs-number">0.36788</span>
</code></pre>
</div>
<p data-code-meta="returns" class="sg-code-meta sg-code-meta-value">  Number </p><h5 id="fact-" class="sg-heading sg-heading-5"><code id="function-fact" class="sg-global-function sg-code sg-codespan sg-global" data-code-id="fact()">fact()</code></h5>

                <h6 id="function-x-" class="sg-heading sg-heading-6">function(<code class="sg-code sg-codespan">$x</code>)</h6>
<p>Returns the factorial of a non-negative integer.</p>
<div class="sg-markup sg-codeblock">
<pre class="sg-markup_wrap"><code class="hljs sg-code undefined"><span class="hljs-variable">$value</span>:  fact(<span class="hljs-number">0</span>) // <span class="hljs-number">1</span>
<span class="hljs-variable">$value2</span>: fact(<span class="hljs-number">8</span>) // <span class="hljs-number">40320</span>
</code></pre>
</div>
<p data-code-meta="return" class="sg-code-meta sg-code-meta-value">  Number </p><h5 id="gcd-" class="sg-heading sg-heading-5"><code id="function-gcd" class="sg-global-function sg-code sg-codespan sg-global" data-code-id="gcd()">gcd()</code></h5>

                <h6 id="function-number-1-number-2-" class="sg-heading sg-heading-6">function(<code class="sg-code sg-codespan">$number-1</code>, <code class="sg-code sg-codespan">$number-2</code>)</h6>
<p>Greatest Common Divisor calculation (useful for calculating grids and widths).</p>

<p data-code-meta="returns" class="sg-code-meta sg-code-meta-value">  number </p><h5 id="lcm-" class="sg-heading sg-heading-5"><code id="function-lcm" class="sg-global-function sg-code sg-codespan sg-global" data-code-id="lcm()">lcm()</code></h5>

                <h6 id="function-a-b-" class="sg-heading sg-heading-6">function(<code class="sg-code sg-codespan">$a</code>, <code class="sg-code sg-codespan">$b</code>)</h6>
<p>Finds the least common multiple. Use with caution&#x2026;if there is no LCM, then you compilation will error out.</p><p data-code-meta="returns" class="sg-code-meta sg-code-meta-value">  number </p><h5 id="nth_root-" class="sg-heading sg-heading-5"><code id="function-nth_root" class="sg-global-function sg-code sg-codespan sg-global" data-code-id="nth_root()">nth_root()</code></h5>

                <h6 id="function-base-n-2-precision-12-" class="sg-heading sg-heading-6">function(<code class="sg-code sg-codespan">$base</code>, <code class="sg-code sg-codespan">$n:2</code>, <code class="sg-code sg-codespan">$precision:12</code>)</h6>
<p>Advanced calculation for square roots, cube roots, etc. of a value.
<br>
<a href="http://rosettacode.org/wiki/Nth_root#JavaScript">Reference</a></p><p data-code-meta="returns" class="sg-code-meta sg-code-meta-value">  number </p><h5 id="sqrt-" class="sg-heading sg-heading-5"><code id="function-sqrt" class="sg-global-function sg-code sg-codespan sg-global" data-code-id="sqrt()">sqrt()</code></h5>

                <h6 id="function-base-precision-12-" class="sg-heading sg-heading-6">function(<code class="sg-code sg-codespan">$base</code>, <code class="sg-code sg-codespan">$precision:12</code>)</h6>
<p>Find the square root of a value.</p><p data-code-meta="returns" class="sg-code-meta sg-code-meta-value">  number </p>

<p data-code-meta="alias" class="sg-code-meta sg-code-meta-value"> <code class="sg-code sg-codespan"> <code id="function-sqroot" class="sg-global-function sg-code sg-codespan sg-global" data-code-id="sqroot()">sqroot()</code></code> </p><h5 id="sin-" class="sg-heading sg-heading-5"><code id="function-sin" class="sg-global-function sg-code sg-codespan sg-global" data-code-id="sin()">sin()</code></h5>

                <h6 id="function-angle-" class="sg-heading sg-heading-6">function(<code class="sg-code sg-codespan">$angle</code>)</h6>
<p>Determines the Sine of an angle.
<br>
<a href="https://unindented.org/articles/trigonometry-in-sass/">Reference</a></p><p data-code-meta="returns" class="sg-code-meta sg-code-meta-value">  number </p><h5 id="cos-" class="sg-heading sg-heading-5"><code id="function-cos" class="sg-global-function sg-code sg-codespan sg-global" data-code-id="cos()">cos()</code></h5>

                <h6 id="function-angle-" class="sg-heading sg-heading-6">function(<code class="sg-code sg-codespan">$angle</code>)</h6>
<p>Determines the Cosine of an angle.</p>

<p data-code-meta="returns" class="sg-code-meta sg-code-meta-value">  number </p><h5 id="tan-" class="sg-heading sg-heading-5"><code id="function-tan" class="sg-global-function sg-code sg-codespan sg-global" data-code-id="tan()">tan()</code></h5>

                <h6 id="function-angle-" class="sg-heading sg-heading-6">function(<code class="sg-code sg-codespan">$angle</code>)</h6>
<p>Determines the Tangent of an angle.</p>

<p data-code-meta="returns" class="sg-code-meta sg-code-meta-value">  number </p><h5 id="golden-" class="sg-heading sg-heading-5"><code id="function-golden" class="sg-global-function sg-code sg-codespan sg-global" data-code-id="golden()">golden()</code></h5>

                <h6 id="function-base-1-" class="sg-heading sg-heading-6">function(<code class="sg-code sg-codespan">$base: 1</code>)</h6>
<p>Get the golden ratio from <code class="sg-code sg-codespan">$base</code>.</p>

<p data-code-meta="returns" class="sg-code-meta sg-code-meta-value">  number </p>

<p data-code-meta="alias" class="sg-code-meta sg-code-meta-value"> <code class="sg-code sg-codespan"> <code id="variable--golden_ratio" class="sg-global-variable sg-code sg-codespan sg-global" data-code-id="$golden_ratio">$golden_ratio</code></code> </p>
                    </div>
                </article>                <article class="sg-article" id="development-functions-strings---lists" data-sg-section="Functions" data-sg-heading="Strings &amp; Lists">
                    <header class="sg-article_head ">
                        <h3 class="sg-heading sg-heading-article">Strings &amp; Lists</h3>
                        <p><code class="sg-codespan sg-file">_partials/sass/tools/_t-functions.scss</code></p><hr></header>
                    <div class="sg-article_comment">
                        <p><a href="https://github.com/devatrox/Sunglass">Reference</a></p>
                <h5 id="contains-" class="sg-heading sg-heading-5"><code id="function-contains" class="sg-global-function sg-code sg-codespan sg-global" data-code-id="contains()">contains()</code></h5>

                <h6 id="function-data-value-" class="sg-heading sg-heading-6">function(<code class="sg-code sg-codespan">$data, $value</code>)</h6>
<p>Generic <code class="sg-code sg-codespan">contains</code> function(similar to javascript&#x2019;s <code class="sg-code sg-codespan">indexOf</code>). Parses a variable(<code class="sg-code sg-codespan">$data</code>) for a <code class="sg-code sg-codespan">$value</code>. Returns boolean.</p>

<p data-code-meta="returns" class="sg-code-meta sg-code-meta-value">  boolean </p>

<p data-code-meta="requires" class="sg-code-meta sg-code-meta-value"> <code class="sg-code sg-codespan"> <code id="function-str-contains" class="sg-global-function sg-code sg-codespan sg-global" data-code-id="str-contains()">str-contains()</code>, <code id="function-list-contains" class="sg-global-function sg-code sg-codespan sg-global" data-code-id="list-contains()">list-contains()</code></code> </p>
                <h5 id="str-join-" class="sg-heading sg-heading-5"><code id="function-str-join" class="sg-global-function sg-code sg-codespan sg-global" data-code-id="str-join()">str-join()</code></h5>

                <h6 id="function-list-separator-39-39-" class="sg-heading sg-heading-6">function(<code class="sg-code sg-codespan">$list, $separator:&apos;,&apos;</code>)</h6>
<p>Converts a map or list to a string (<code class="sg-code sg-codespan">(&apos;this&apos;, &apos;and&apos;, &apos;this&apos;)</code> becomes <code class="sg-code sg-codespan">&apos;this,and,this&apos;</code>).</p>

<p data-code-meta="returns" class="sg-code-meta sg-code-meta-value">  string </p>
                <h5 id="str-contains-" class="sg-heading sg-heading-5"><code id="function-str-contains" class="sg-global-function sg-code sg-codespan sg-global" data-code-id="str-contains()">str-contains()</code></h5>

                <h6 id="function-string-value-pos-0-" class="sg-heading sg-heading-6">function(<code class="sg-code sg-codespan">$string, $value, $pos: 0</code>)</h6>
<p>Checks if a <code class="sg-code sg-codespan">$string</code> contains a <code class="sg-code sg-codespan">$value</code>. Optionally accepts a start positon.</p>

<p data-code-meta="returns" class="sg-code-meta sg-code-meta-value">  boolean </p>
                <h5 id="str-append-" class="sg-heading sg-heading-5"><code id="function-str-append" class="sg-global-function sg-code sg-codespan sg-global" data-code-id="str-append()">str-append()</code></h5>

                <h6 id="function-data-separator-39-39-" class="sg-heading sg-heading-6">function(<code class="sg-code sg-codespan">$data, $separator:&apos;,&apos;</code>)</h6>
<p>Adds one string to another (e.g. <code class="sg-code sg-codespan">str-append(&apos;hello&apos;, &apos;world&apos;)</code> becomes <code class="sg-code sg-codespan">hello world</code>).</p>

<p data-code-meta="returns" class="sg-code-meta sg-code-meta-value">  string </p>
                <h5 id="list-contains-" class="sg-heading sg-heading-5"><code id="function-list-contains" class="sg-global-function sg-code sg-codespan sg-global" data-code-id="list-contains()">list-contains()</code></h5>

                <h6 id="function-list-value-" class="sg-heading sg-heading-6">function(<code class="sg-code sg-codespan">$list, $value</code>)</h6>
<p>Checks whether a <code class="sg-code sg-codespan">$list</code> contains a <code class="sg-code sg-codespan">$value</code>.</p>

<p data-code-meta="returns" class="sg-code-meta sg-code-meta-value">  boolean </p>
                <h5 id="list-print-" class="sg-heading sg-heading-5"><code id="function-list-print" class="sg-global-function sg-code sg-codespan sg-global" data-code-id="list-print()">list-print()</code></h5>

                <h6 id="function-list-depth-1-" class="sg-heading sg-heading-6">function(<code class="sg-code sg-codespan">$list, $depth: 1</code>)</h6>
<p>Used to turn a list into a flat string. For debug purposes.</p>

<p data-code-meta="returns" class="sg-code-meta sg-code-meta-value">  string </p>
                <h5 id="to-list-" class="sg-heading sg-heading-5"><code id="function-to-list" class="sg-global-function sg-code sg-codespan sg-global" data-code-id="to-list()">to-list()</code></h5>

                <h6 id="function-string-keep-39-both-39-" class="sg-heading sg-heading-6">function(<code class="sg-code sg-codespan">$string, $keep: &apos;both&apos;</code>)</h6>
<p>Convert a value to a list. <code class="sg-code sg-codespan">$keep</code> accepts <code class="sg-code sg-codespan">&apos;keys&apos;</code>, <code class="sg-code sg-codespan">&apos;values&apos;</code>, or <code class="sg-code sg-codespan">&apos;both&apos;</code> for map conversion.</p>

<p data-code-meta="returns" class="sg-code-meta sg-code-meta-value">  list </p>
                    </div>
                </article>                <article class="sg-article" id="development-functions-typography" data-sg-section="Functions" data-sg-heading="Typography">
                    <header class="sg-article_head ">
                        <h3 class="sg-heading sg-heading-article">Typography</h3>
                        <p><code class="sg-codespan sg-file">_partials/sass/tools/_t-functions.scss</code></p><hr></header>
                    <div class="sg-article_comment">
                        <h5 id="modular-scale-" class="sg-heading sg-heading-5"><code id="function-modular-scale" class="sg-global-function sg-code sg-codespan sg-global" data-code-id="modular-scale()">modular-scale()</code></h5>

                <h6 id="function-scale-scale-ratio-" class="sg-heading sg-heading-6">function(<code class="sg-code sg-codespan">$scale</code>, <code id="variable--scale-ratio" class="sg-global-variable sg-code sg-codespan sg-global" data-code-id="$scale-ratio">$scale-ratio</code>)</h6>
<p>Generates a pixel value that is an exponent of a ratio (<code class="sg-code sg-codespan">$ratio</code> defaults to <code id="variable--scale-ratio" class="sg-global-variable sg-code sg-codespan sg-global" data-code-id="$scale-ratio">$scale-ratio</code> value).</p>

<p data-code-meta="requires" class="sg-code-meta sg-code-meta-value"> <code class="sg-code sg-codespan"> <code id="function-pow" class="sg-global-function sg-code sg-codespan sg-global" data-code-id="pow()">pow()</code>, <code id="function-cache" class="sg-global-function sg-code sg-codespan sg-global" data-code-id="cache()">cache()</code>, <code id="function-strip-units" class="sg-global-function sg-code sg-codespan sg-global" data-code-id="strip-units()">strip-units()</code></code> </p>

<p data-code-meta="returns" class="sg-code-meta sg-code-meta-value">  number (pixels) </p><h5 id="baseline-" class="sg-heading sg-heading-5"><code id="function-baseline" class="sg-global-function sg-code sg-codespan sg-global" data-code-id="baseline()">baseline()</code></h5>

                <h6 id="function-font-size-baseline-multiple-1-" class="sg-heading sg-heading-6">function(<code class="sg-code sg-codespan">$font-size</code>, <code class="sg-code sg-codespan">$baseline</code>, <code class="sg-code sg-codespan">$multiple:1</code>)</h6>
<p>Aligns a font-size to a baseline (<code class="sg-code sg-codespan">$baseline</code>). Returns a unitless value relative to the font-size (equivilent to ems). An optional multiple can be used to make a variation on the given baseline (using decimals will divide the the baseline).</p>

<p data-code-meta="returns" class="sg-code-meta sg-code-meta-value">  number (unitless) </p><h5 id="baseline-curve-" class="sg-heading sg-heading-5"><code id="function-baseline-curve" class="sg-global-function sg-code sg-codespan sg-global" data-code-id="baseline-curve()">baseline-curve()</code></h5>

                <h6 id="function-x-accel-1-" class="sg-heading sg-heading-6">function(<code class="sg-code sg-codespan">$x</code> , <code class="sg-code sg-codespan">$accel</code>: <code class="sg-code sg-codespan">1</code>)</h6>
<p>Calculates a where a number(<code class="sg-code sg-codespan">$x</code>) sits along a parabolic arc (curve). Change the curve&#x2019;s severity by changing its <code class="sg-code sg-codespan">$accel</code>.
<br>
An <code class="sg-code sg-codespan">$accel</code> of 1 is a smooth arc.
<br>
<code class="sg-code sg-codespan">$accel</code> accepts any number between -2 and 2.35. A negative will invert the curve.</p><p>The formula: <code class="sg-code sg-codespan">y = (sqrt((x^1)+x) - sqrt(x^1)) / .4142135623730951</code>
<br>
( <a href="https://www.desmos.com/calculator/qswvc6q9kt">Visual</a> )</p><p data-code-meta="returns" class="sg-code-meta sg-code-meta-value">  number </p>

<p data-code-meta="requires" class="sg-code-meta sg-code-meta-value"> <code class="sg-code sg-codespan"> <code id="function-sqrt" class="sg-global-function sg-code sg-codespan sg-global" data-code-id="sqrt()">sqrt()</code>, <code id="function-pow" class="sg-global-function sg-code sg-codespan sg-global" data-code-id="pow()">pow()</code></code> </p><h5 id="baseline-calc-" class="sg-heading sg-heading-5"><code id="function-baseline-calc" class="sg-global-function sg-code sg-codespan sg-global" data-code-id="baseline-calc()">baseline-calc()</code></h5>

                <h6 id="function-font-size-base-font-size-font-base-base-font-size-basline-slack-font-looseness-" class="sg-heading sg-heading-6">function(<code class="sg-code sg-codespan">$font-size: $base-font-size, $font-base: $base-font-size, $basline-slack: $font-looseness</code>)</h6>
<p>Creates unitless line-heights that align to the baseline grid with consideration to the aesthetics of a given font size. Essentially makes sure larger font-sizes have smaller line-heights, while smaller font-sizes have larger ones.
<br>
Uses constraints based on upper and lower limits of pleasing line-heights, and finds where a given font-size should sit within those constraints. <code id="variable--font-looseness" class="sg-global-variable sg-code sg-codespan sg-global" data-code-id="$font-looseness">$font-looseness</code> increases the upper constraints, allowing for taller line heights on larger font sizes.
<br>
Depends on <code id="function-baseline" class="sg-global-function sg-code sg-codespan sg-global" data-code-id="baseline()">baseline()</code> for calculation and <code id="function-baseline-curve" class="sg-global-function sg-code sg-codespan sg-global" data-code-id="baseline-curve()">baseline-curve()</code> to determine the deviance from the upper and lower constraints.</p><p data-code-meta="returns" class="sg-code-meta sg-code-meta-value">  number (unitless) </p>

<p data-code-meta="requires" class="sg-code-meta sg-code-meta-value"> <code class="sg-code sg-codespan"> <code id="function-baseline" class="sg-global-function sg-code sg-codespan sg-global" data-code-id="baseline()">baseline()</code>, <code id="function-baseline-curve" class="sg-global-function sg-code sg-codespan sg-global" data-code-id="baseline-curve()">baseline-curve()</code></code> </p><h5 id="get-type-type-" class="sg-heading sg-heading-5"><code id="function-get-type" class="sg-global-function sg-code sg-codespan sg-global" data-code-id="get-type()">get-type()</code>, <code id="function-type" class="sg-global-function sg-code sg-codespan sg-global" data-code-id="type()">type()</code></h5>

                <h6 id="-font-size-font-size-value-" class="sg-heading sg-heading-6"><code class="sg-code sg-codespan">[font-size],[font-size-value]</code></h6>
<p>function for finding the value of an indexed type-size. H1-H6, p, and small are all indexed values. px, rem, and line-height are available.</p><h5 id="define-type-" class="sg-heading sg-heading-5"><code id="function-define-type" class="sg-global-function sg-code sg-codespan sg-global" data-code-id="define-type()">define-type()</code></h5>

                <h6 id="-font-size-property-new-value-" class="sg-heading sg-heading-6"><code class="sg-code sg-codespan">[font-size], [property], [new value]</code></h6>
<p>Registers new values to type map. [Property] accepts px, rem, and line-height.</p>
                    </div>
                </article>        </div>
        </div> 
            <div class="sg-category">
            <div class="sg-category_wrap">
            
                <header class="sg-category_head" data-sg-section="Grid-System" >
                    <h2 class="sg-heading-category">Grid System</h2>
                </header>                <article class="sg-article" id="development-grid-system-functions" data-sg-section="Grid System" data-sg-heading="Functions">
                    <header class="sg-article_head ">
                        <h3 class="sg-heading sg-heading-article">Functions</h3>
                        <p><code class="sg-codespan sg-file">_partials/sass/tools/_t-widths.scss</code></p><hr></header>
                    <div class="sg-article_comment">
                        <h5 id="grid-size-" class="sg-heading sg-heading-5"><code id="function-grid-size" class="sg-global-function sg-code sg-codespan sg-global" data-code-id="grid-size()">grid-size()</code></h5>

                <h6 id="function-size-total-grid-columns-" class="sg-heading sg-heading-6">function(<code class="sg-code sg-codespan">$size, $total:</code> <code id="variable--grid-columns" class="sg-global-variable sg-code sg-codespan sg-global" data-code-id="$grid-columns">$grid-columns</code>)</h6>
<p>Creates a percentage based on the <code class="sg-code sg-codespan">$size / $total</code>.</p><h5 id="-width-setup-" class="sg-heading sg-heading-5"><code id="mixin-width-setup" class="sg-global-mixin sg-code sg-codespan sg-global" data-code-id="@width-setup()">@width-setup()</code></h5>

                <h6 id="mixin-namespace-quot-quot-silent-grid-silent-classes-type-width-" class="sg-heading sg-heading-6">mixin(<code class="sg-code sg-codespan">$namespace:&quot;&quot;, $silent:</code> <code id="variable--grid-silent-classes" class="sg-global-variable sg-code sg-codespan sg-global" data-code-id="$grid-silent-classes">$grid-silent-classes</code>, $type:&#x201D;width&#x201D;)</h6>
<p> Uses <code id="variable--human-readable-numerators" class="sg-global-variable sg-code sg-codespan sg-global" data-code-id="$human-readable-numerators">$human-readable-numerators</code> and <code id="variable--human-readable-denominators" class="sg-global-variable sg-code sg-codespan sg-global" data-code-id="$human-readable-denominators">$human-readable-denominators</code> to create percentage widths based on <code id="variable--grid-columns" class="sg-global-variable sg-code sg-codespan sg-global" data-code-id="$grid-columns">$grid-columns</code>. <code class="sg-code sg-codespan">$type</code> accepts &#x201C;width&#x201D;, &#x201C;push&#x201D; or &#x201C;pull&#x201D;.</p><p data-code-meta="requires" class="sg-code-meta sg-code-meta-value"> <code class="sg-code sg-codespan"> <code id="function-grid-size" class="sg-global-function sg-code sg-codespan sg-global" data-code-id="grid-size()">grid-size()</code>, <code id="function-cache" class="sg-global-function sg-code sg-codespan sg-global" data-code-id="cache()">cache()</code>, <code id="variable--human-readable-numerators" class="sg-global-variable sg-code sg-codespan sg-global" data-code-id="$human-readable-numerators">$human-readable-numerators</code>, <code id="variable--human-readable-denominators" class="sg-global-variable sg-code sg-codespan sg-global" data-code-id="$human-readable-denominators">$human-readable-denominators</code></code> </p>
                    </div>
                </article>                <article class="sg-article" id="development-grid-system-mixins" data-sg-section="Grid System" data-sg-heading="Mixins">
                    <header class="sg-article_head ">
                        <h3 class="sg-heading sg-heading-article">Mixins</h3>
                        <p><code class="sg-codespan sg-file">_partials/sass/tools/_t-grid-system.scss</code></p><hr></header>
                    <div class="sg-article_comment">
                        <h5 id="-silent-relative-" class="sg-heading sg-heading-5"><code id="mixin-silent-relative" class="sg-global-mixin sg-code sg-codespan sg-global" data-code-id="@silent-relative()">@silent-relative()</code></h5>

                <h6 id="mixin-" class="sg-heading sg-heading-6">mixin()</h6>
<p>Allows for conditional <code class="sg-code sg-codespan">position: relative</code> for silent push or pull classes.</p><h5 id="-grid-setup-" class="sg-heading sg-heading-5"><code id="mixin-grid-setup" class="sg-global-mixin sg-code sg-codespan sg-global" data-code-id="@grid-setup()">@grid-setup()</code></h5>

                <h6 id="mixin-silent-grid-silent-classes-" class="sg-heading sg-heading-6">mixin(<code class="sg-code sg-codespan">$silent:</code> <code id="variable--grid-silent-classes" class="sg-global-variable sg-code sg-codespan sg-global" data-code-id="$grid-silent-classes">$grid-silent-classes</code>)</h6>
<p>Creates basic grid classes (listed below), called by <code id="mixin-grid-init" class="sg-global-mixin sg-code sg-codespan sg-global" data-code-id="@grid-init()">@grid-init()</code>.</p><p><em>Note: <code class="sg-code sg-codespan">[% || .]</code> denotes a class that is either silent(<code class="sg-code sg-codespan">%</code>) or standard CSS(<code class="sg-code sg-codespan">.</code>). Based on the <code id="variable--grid-silent-classes" class="sg-global-variable sg-code sg-codespan sg-global" data-code-id="$grid-silent-classes">$grid-silent-classes</code> setting.</em></p><ul>
<li>
                <h6 id="-grid_reset" class="sg-heading sg-heading-6"><code class="sg-code sg-codespan">%grid_reset</code></h6>
<p>Useful for resetting the grid&#x2019;s effects without making full grid items.</p></li>
<li>
                <h6 id="-grid" class="sg-heading sg-heading-6"><code class="sg-code sg-codespan">[% || .]grid</code></h6>
<p>Wrapper class for grid widths. Puts a negative left margin of one unit. When not using floats, adds appropriate letter-spacing (for inline-block-based grid).</p></li>
<li>
                <h6 id="-grid_item" class="sg-heading sg-heading-6"><code class="sg-code sg-codespan">[% || .]grid_item</code></h6>
<p>Sets up a grid column. Uses column padding inherited from parent <code class="sg-code sg-codespan">%/.grid</code>.</p></li>
<li>
                <h6 id="-grid_rev" class="sg-heading sg-heading-6"><code class="sg-code sg-codespan">[% || .]grid_rev</code></h6>
<p>Makes grid columns start from the right.</p></li>
<li>
                <h6 id="-grid_right" class="sg-heading sg-heading-6"><code class="sg-code sg-codespan">[% || .]grid_right</code></h6>
<p>Makes all grid columns align to the right.</p></li>
<li>
                <h6 id="-grid_center" class="sg-heading sg-heading-6"><code class="sg-code sg-codespan">[% || .]grid_center</code></h6>
<p>Makes all grid columns align to the center.</p></li>
<li>
                <h6 id="-grid_middle" class="sg-heading sg-heading-6"><code class="sg-code sg-codespan">[% || .]grid_middle</code></h6>
<p>Makes all grid columns vertical align to the middle.</p></li>
<li>
                <h6 id="-grid_bottom" class="sg-heading sg-heading-6"><code class="sg-code sg-codespan">[% || .]grid_bottom</code></h6>
<p>Makes all grid columns vertical align to the bottom.</p></li>
<li>
                <h6 id="-grid_full" class="sg-heading sg-heading-6"><code class="sg-code sg-codespan">[% || .]grid_full</code></h6>
<p>Eliminates padding between grid columns.</p></li>
<li>
                <h6 id="-grid_narrow" class="sg-heading sg-heading-6"><code class="sg-code sg-codespan">[% || .]grid_narrow</code></h6>
<p>Reduces the padding between grid columns.</p></li>
<li>
                <h6 id="-grid_wide" class="sg-heading sg-heading-6"><code class="sg-code sg-codespan">[% || .]grid_wide</code></h6>
<p>Increases the padding between grid columns.</p></li>
</ul><h5 id="-grid-init-" class="sg-heading sg-heading-5"><code id="mixin-grid-init" class="sg-global-mixin sg-code sg-codespan sg-global" data-code-id="@grid-init()">@grid-init()</code></h5>

                <h6 id="mixin-silent-grid-silent-classes-responsive-" class="sg-heading sg-heading-6">mixin(<code class="sg-code sg-codespan">$silent:</code> <code id="variable--grid-silent-classes" class="sg-global-variable sg-code sg-codespan sg-global" data-code-id="$grid-silent-classes">$grid-silent-classes</code>, <code class="sg-code sg-codespan">$responsive</code>)</h6>
<p>Creates responsive grid classes by running through all the grid-setup mixins. Uses the media-queries defined in the <code class="sg-code sg-codespan">$breakpoint-has-</code> variables to create media-query-scoped classes.</p>

<p data-code-meta="requires" class="sg-code-meta sg-code-meta-value"> <code class="sg-code sg-codespan"> <code id="mixin-media-query" class="sg-global-mixin sg-code sg-codespan sg-global" data-code-id="@media-query()">@media-query()</code>, <code id="mixin-grid-setup" class="sg-global-mixin sg-code sg-codespan sg-global" data-code-id="@grid-setup()">@grid-setup()</code>, <code id="mixin-width-setup" class="sg-global-mixin sg-code sg-codespan sg-global" data-code-id="@width-setup()">@width-setup()</code>, <code id="variable--breakpoints-has-push" class="sg-global-variable sg-code sg-codespan sg-global" data-code-id="$breakpoints-has-push">$breakpoints-has-push</code>, <code id="variable--breakpoint-has-pull" class="sg-global-variable sg-code sg-codespan sg-global" data-code-id="$breakpoint-has-pull">$breakpoint-has-pull</code></code> </p><h5 id="-width-" class="sg-heading sg-heading-5"><code id="mixin-width" class="sg-global-mixin sg-code sg-codespan sg-global" data-code-id="@width()">@width()</code></h5>

                <h6 id="mixin-columns-total-grid-columns-" class="sg-heading sg-heading-6">mixin(<code class="sg-code sg-codespan">$columns, $total:</code> <code id="variable--grid-columns" class="sg-global-variable sg-code sg-codespan sg-global" data-code-id="$grid-columns">$grid-columns</code>)</h6>
<p>Creates a width property with a percentage based on the <code class="sg-code sg-codespan">$columns / $total</code>.</p>

<p data-code-meta="requires" class="sg-code-meta sg-code-meta-value"> <code class="sg-code sg-codespan"> <code id="function-grid-size" class="sg-global-function sg-code sg-codespan sg-global" data-code-id="grid-size()">grid-size()</code>, <code id="variable--grid-columns" class="sg-global-variable sg-code sg-codespan sg-global" data-code-id="$grid-columns">$grid-columns</code></code> </p>
                    </div>
                </article>                <article class="sg-article" id="development-grid-system-variables" data-sg-section="Grid System" data-sg-heading="Variables">
                    <header class="sg-article_head ">
                        <h3 class="sg-heading sg-heading-article">Variables</h3>
                        <p><code class="sg-codespan sg-file">_partials/sass/tools/_t-widths.scss</code></p><hr></header>
                    <div class="sg-article_comment">
                        <h5 id="-human-readable-numerators" class="sg-heading sg-heading-5"><code id="variable--human-readable-numerators" class="sg-global-variable sg-code sg-codespan sg-global" data-code-id="$human-readable-numerators">$human-readable-numerators</code></h5>

                <h6 id="list-string-" class="sg-heading sg-heading-6">List (string)</h6>
<p>First words used to represent numbers in a fraction; Corresponds to grid interval names (one, two, three, etc.).</p>
                <h5 id="-human-readable-denominators" class="sg-heading sg-heading-5"><code id="variable--human-readable-denominators" class="sg-global-variable sg-code sg-codespan sg-global" data-code-id="$human-readable-denominators">$human-readable-denominators</code></h5>

                <h6 id="list-string-" class="sg-heading sg-heading-6">List (string)</h6>
<p>Second words used to represent numbers in a fraction; Corresponds to grid interval names (whole, half, third, etc.).</p>
                    </div>
                </article>        </div>
        </div> 
            <div class="sg-category">
            <div class="sg-category_wrap">
            
                <header class="sg-category_head" data-sg-section="Imports" id="development-imports-">
                    <h2 class="sg-heading-categorysg-heading sg-heading-article">Imports</h2>
                </header>                <article class="sg-article"  data-sg-section="Imports" data-sg-heading="">
                    <div class="sg-article_comment">
                        <p>Sass files are imported in order from lowest specificity to highest.</p><ol>
<li><code class="sg-code sg-codespan">/tools</code><ul>
<li>Functions</li>
<li>Settings</li>
<li>System variables and defaults</li>
<li>General-use mixins and sass utilities</li>
</ul>
</li>
<li><code class="sg-code sg-codespan">base/generic</code><ul>
<li>Normalize/reset styles (unclassed)</li>
</ul>
</li>
<li><code class="sg-code sg-codespan">/base</code><ul>
<li>Element styles (unclassed)</li>
</ul>
</li>
<li><code class="sg-code sg-codespan">/layout</code><ul>
<li>Basic layout and object styles (single-class)</li>
</ul>
</li>
<li><code class="sg-code sg-codespan">/components</code><ul>
<li>Module and component styles (single- and child-classes)</li>
</ul>
</li>
<li><code class="sg-code sg-codespan">/sections</code><ul>
<li>View- and page-specific and scoped styles (typically <code class="sg-code sg-codespan">parent &gt; child</code> classes).</li>
</ul>
</li>
<li><code class="sg-code sg-codespan">/overrides</code><ul>
<li>Utility styles, usually end in <code class="sg-code sg-codespan">!important</code>.</li>
</ul>
</li>
</ol>
                    </div>
                </article>        </div>
        </div> 
            <div class="sg-category">
            <div class="sg-category_wrap">
            
                <header class="sg-category_head" data-sg-section="Mixins" >
                    <h2 class="sg-heading-category">Mixins</h2>
                </header>                <article class="sg-article" id="development-mixins-buttons" data-sg-section="Mixins" data-sg-heading="Buttons">
                    <header class="sg-article_head ">
                        <h3 class="sg-heading sg-heading-article">Buttons</h3>
                        <p><code class="sg-codespan sg-file">_partials/sass/tools/_t-mixins.scss</code></p><hr></header>
                    <div class="sg-article_comment">
                        <h5 id="-button-" class="sg-heading sg-heading-5"><code id="mixin-button" class="sg-global-mixin sg-code sg-codespan sg-global" data-code-id="@button()">@button()</code></h5>

                <h6 id="mixin-bg-color-color-39-links-39-text-color-null-border-null-radius-null-text-radius-null-style-null-inset-false-" class="sg-heading sg-heading-6">mixin(<code class="sg-code sg-codespan">$bg-color</code>: <code class="sg-code sg-codespan">color(&apos;links&apos;)</code>, <code class="sg-code sg-codespan">$text-color</code>: <code class="sg-code sg-codespan">null</code>, <code class="sg-code sg-codespan">$border</code>: <code class="sg-code sg-codespan">null</code>, <code class="sg-code sg-codespan">$radius</code>: <code class="sg-code sg-codespan">null</code>, <code class="sg-code sg-codespan">$text-radius</code>: <code class="sg-code sg-codespan">null</code>, <code class="sg-code sg-codespan">$style</code>: <code class="sg-code sg-codespan">null</code>, <code class="sg-code sg-codespan">$inset</code>: <code class="sg-code sg-codespan">false</code>)</h6>
<p>Generates common button styles, allowing for simple creation of more complex gradient styles. Intelligently excludes unnecessary styles from states like hover, focus, and active. <em>Does not generate hover, focus, or active psuedo selectors on its own.</em></p><p><strong>Accepted arguments</strong></p><ul>
<li><code class="sg-code sg-codespan">$bg-color</code>: Color values. This cannot accept null.</li>
<li><code class="sg-code sg-codespan">$text-color</code>: Color or null (null will let the mixin decide the best color based on contrast).</li>
<li><code class="sg-code sg-codespan">$border</code>: Any border properties (colors, styles, widths) or <code class="sg-code sg-codespan">null</code>. Uses the <code id="mixin-border" class="sg-global-mixin sg-code sg-codespan sg-global" data-code-id="@border()">@border()</code> mixin.</li>
<li><code class="sg-code sg-codespan">$radius</code>: <code class="sg-code sg-codespan">border-radius</code> values. <code class="sg-code sg-codespan">null</code> produces no border-radius property.</li>
<li><code class="sg-code sg-codespan">$style</code>: <code class="sg-code sg-codespan">null</code>, <code class="sg-code sg-codespan">shiny</code> or <code class="sg-code sg-codespan">reflective</code>.
<br>
 <code class="sg-code sg-codespan">shiny</code> creates a simple gradient backgroud based on the <code class="sg-code sg-codespan">$bg-color</code>.
<br>
 <code class="sg-code sg-codespan">reflective</code> creates a stacked gradient based on the <code class="sg-code sg-codespan">$bg-color</code>.</li>
<li><code class="sg-code sg-codespan">$inset</code>: Boolean. <code class="sg-code sg-codespan">True</code> adds a dark box-shadow inset.
<br>
 If combined with &#x2018;shiny&#x2019; or &#x2018;reflective&#x2019; <code class="sg-code sg-codespan">$style</code>, background gradients are inverted.</li>
</ul>
                    </div>
                </article>                <article class="sg-article" id="development-mixins-css-helpers" data-sg-section="Mixins" data-sg-heading="CSS Helpers">
                    <header class="sg-article_head ">
                        <h3 class="sg-heading sg-heading-article">CSS Helpers</h3>
                        <p><code class="sg-codespan sg-file">_partials/sass/tools/_t-mixins.scss</code></p><hr></header>
                    <div class="sg-article_comment">
                        <h5 id="-specificity-" class="sg-heading sg-heading-5"><code id="mixin-specificity" class="sg-global-mixin sg-code sg-codespan sg-global" data-code-id="@specificity()">@specificity()</code></h5>

                <h6 id="mixin-specificity-1-" class="sg-heading sg-heading-6">mixin(<code class="sg-code sg-codespan">$specificity: 1</code>)</h6>
<p>Specificity increaser. Useful for increasing specificity of a selector instead of using <code class="sg-code sg-codespan">!important</code>.</p>
<div class="sg-markup sg-codeblock">
<pre class="sg-markup_wrap"><code class="hljs sg-code undefined"><span class="hljs-selector-class">.class</span> {
    @<span class="hljs-keyword">include</span> specificity(<span class="hljs-number">2</span>) {
        <span class="hljs-attribute">color</span>: red;
    }
}

<span class="hljs-comment">//css</span>
<span class="hljs-selector-class">.class</span><span class="hljs-selector-class">.class</span> {
    <span class="hljs-attribute">color</span>: red;
}
</code></pre>
</div>
<p><a href="http://www.sitepoint.com/selector-specificity-css-preprocessors/">Reference</a></p><h5 id="-opacity-" class="sg-heading sg-heading-5"><code id="mixin-opacity" class="sg-global-mixin sg-code sg-codespan sg-global" data-code-id="@opacity()">@opacity()</code></h5>

                <h6 id="mixin-opacity-" class="sg-heading sg-heading-6">mixin(<code class="sg-code sg-codespan">$opacity</code>)</h6>
<p>Cross-browser (including IE8-) opacity.
<br>
<a href="https://gist.github.com/jgv/745754">Reference</a></p><h5 id="-border-" class="sg-heading sg-heading-5"><code id="mixin-border" class="sg-global-mixin sg-code sg-codespan sg-global" data-code-id="@border()">@border()</code></h5>

                <h6 id="mixin-border-" class="sg-heading sg-heading-6">mixin(<code class="sg-code sg-codespan">$border</code>)</h6>
<p>Allows creating many border properties at once. Works like the standard border shorthand style but allows varied styles on different border directions.</p>
<div class="sg-markup sg-codeblock">
<pre class="sg-markup_wrap"><code class="hljs sg-code undefined">    <span class="hljs-comment">//scss</span>
    <span class="hljs-selector-class">.foo</span> {
        @<span class="hljs-keyword">include</span> border(<span class="hljs-number">2px</span> 3px solid dashed dotted blue currentColor yellow);
    }

    <span class="hljs-comment">//css</span>
    <span class="hljs-selector-class">.foo</span> {
        <span class="hljs-attribute">border-width</span>: <span class="hljs-number">2px</span> <span class="hljs-number">3px</span>;
        <span class="hljs-attribute">border-style</span>: solid dashed dotted;
        <span class="hljs-attribute">border-color</span>: blue currentColor yellow;
    }
</code></pre>
</div>
                    </div>
                </article>                <article class="sg-article" id="development-mixins-media-queries" data-sg-section="Mixins" data-sg-heading="Media Queries">
                    <header class="sg-article_head ">
                        <h3 class="sg-heading sg-heading-article">Media Queries</h3>
                        <p><code class="sg-codespan sg-file">_partials/sass/tools/_t-media-queries.scss</code></p><hr></header>
                    <div class="sg-article_comment">
                        <h5 id="-media-query-" class="sg-heading sg-heading-5"><code id="mixin-media-query" class="sg-global-mixin sg-code sg-codespan sg-global" data-code-id="@media-query()">@media-query()</code></h5>

                <h6 id="mixin-media-queries-" class="sg-heading sg-heading-6">mixin(<code class="sg-code sg-codespan">$media-queries...</code>)</h6>
<p>Enclose a block of code with a media query as named in <code class="sg-code sg-codespan">$breakpoints</code>. To create more consolodated code, most (if not all) media queries should be called through this mixin. Multiple media-queries can be defined, separated by a comma. This will place your content into multiple separate media-queries at once (useful if you need the same css at different breakpoints).</p><p><strong>Alternative Uses:</strong></p><ul>
<li><p>Passing multiple media queries separated by an <code class="sg-code sg-codespan">&apos;and&apos;</code> (quoted) to combine them, compiles to something like <code class="sg-code sg-codespan">@media screen and (min-width: 500px) and (max-width: 900px){}</code>.</p></li>
<li><p>Passing a value like <code class="sg-code sg-codespan">min-width 1200px</code> or <code class="sg-code sg-codespan">max-height 300px</code> allows for arbitrary breakpoints.</p></li>
<li><p>Passing <code class="sg-code sg-codespan">max 1200px &apos;and&apos; smalls</code> will create a combined media-query with a predefined one from <code id="variable--breakpoints" class="sg-global-variable sg-code sg-codespan sg-global" data-code-id="$breakpoints">$breakpoints</code>.</p></li>
<li><p>Passing <code class="sg-code sg-codespan">height smalls</code> will replace <code class="sg-code sg-codespan">width</code> with <code class="sg-code sg-codespan">height</code> within the <code class="sg-code sg-codespan">smalls</code> breakpoint. Similarly, using <code class="sg-code sg-codespan">min smalls</code> would replace &#x2018;max&#x2019; with &#x2018;min&#x2019;.</p></li>
</ul>
<p data-code-meta="requires" class="sg-code-meta sg-code-meta-value"> <code class="sg-code sg-codespan"> <code id="function-mq-arglist-to-map" class="sg-global-function sg-code sg-codespan sg-global" data-code-id="mq-arglist-to-map()">mq-arglist-to-map()</code>, <code id="variable--breakpoints" class="sg-global-variable sg-code sg-codespan sg-global" data-code-id="$breakpoints">$breakpoints</code></code> </p>

<p data-code-meta="alias" class="sg-code-meta sg-code-meta-value"> <code id="mixin-bp" class="sg-global-mixin sg-code sg-codespan sg-global" data-code-id="@bp()">@bp()</code> </p>
                    </div>
                </article>                <article class="sg-article" id="development-mixins-typography" data-sg-section="Mixins" data-sg-heading="Typography">
                    <header class="sg-article_head ">
                        <h3 class="sg-heading sg-heading-article">Typography</h3>
                        <p><code class="sg-codespan sg-file">_partials/sass/tools/_t-type.scss</code></p><hr></header>
                    <div class="sg-article_comment">
                        <h5 id="-px-to-rems-" class="sg-heading sg-heading-5"><code id="mixin-px-to-rems" class="sg-global-mixin sg-code sg-codespan sg-global" data-code-id="@px-to-rems()">@px-to-rems()</code></h5>

                <h6 id="mixin-property-sizes-important-false-base-font-base-font-size-" class="sg-heading sg-heading-6">mixin(<code class="sg-code sg-codespan">$property</code>, <code class="sg-code sg-codespan">$sizes</code>, <code class="sg-code sg-codespan">$important</code>: <code class="sg-code sg-codespan">false</code>, <code class="sg-code sg-codespan">$base-font</code>: <code id="variable--base-font-size" class="sg-global-variable sg-code sg-codespan sg-global" data-code-id="$base-font-size">$base-font-size</code>)</h6>
<p>Takes a pixel value and creates a property with a <code class="sg-code sg-codespan">rem</code> value. If <code id="variable--rem-px-fallback" class="sg-global-variable sg-code sg-codespan sg-global" data-code-id="$rem-px-fallback">$rem-px-fallback</code> is <code class="sg-code sg-codespan">true</code>, a pixel fallback is also included. <code class="sg-code sg-codespan">$sizes</code> also accepts &#x2018;auto&#x2019;.</p>

<p data-code-meta="alias" class="sg-code-meta sg-code-meta-value"> <code class="sg-code sg-codespan"> <code id="mixin-rems" class="sg-global-mixin sg-code sg-codespan sg-global" data-code-id="@rems()">@rems()</code></code> </p>

<p data-code-meta="requires" class="sg-code-meta sg-code-meta-value"> <code class="sg-code sg-codespan"> <code id="function-px-to-rems" class="sg-global-function sg-code sg-codespan sg-global" data-code-id="px-to-rems()">px-to-rems()</code></code> </p><h5 id="-type-font-size-" class="sg-heading sg-heading-5"><code id="mixin-type-font-size" class="sg-global-mixin sg-code sg-codespan sg-global" data-code-id="@type-font-size()">@type-font-size()</code></h5>

                <h6 id="mixin-base-font-size-" class="sg-heading sg-heading-6">mixin(<code id="variable--base-font-size" class="sg-global-variable sg-code sg-codespan sg-global" data-code-id="$base-font-size">$base-font-size</code>)</h6>
<p>Quickly generate a font-size in rems, with a pixel fallback, based on the value we pass into the mixin. Optionally calculates line-height using <code id="variable--base-line-height" class="sg-global-variable sg-code sg-codespan sg-global" data-code-id="$base-line-height">$base-line-height</code>.</p><p><em><code class="sg-code sg-codespan">$line-height</code> also accepts a pixel value and will be converted to a unitless one.</em></p><p data-code-meta="alias" class="sg-code-meta sg-code-meta-value"> <code class="sg-code sg-codespan"> <code id="mixin-font-size" class="sg-global-mixin sg-code sg-codespan sg-global" data-code-id="@font-size()">@font-size()</code></code> </p>

<p data-code-meta="requires" class="sg-code-meta sg-code-meta-value"> <code class="sg-code sg-codespan"> <code id="mixin-px-to-rems" class="sg-global-mixin sg-code sg-codespan sg-global" data-code-id="@px-to-rems()">@px-to-rems()</code>, <code id="function-cache" class="sg-global-function sg-code sg-codespan sg-global" data-code-id="cache()">cache()</code>, <code id="function-baseline-calc" class="sg-global-function sg-code sg-codespan sg-global" data-code-id="baseline-calc()">baseline-calc()</code></code> </p><h5 id="-type-space-" class="sg-heading sg-heading-5"><code id="mixin-type-space" class="sg-global-mixin sg-code sg-codespan sg-global" data-code-id="@type-space()">@type-space()</code></h5>

                <h6 id="mixin-properties-multipliers-important-false-" class="sg-heading sg-heading-6">mixin(<code class="sg-code sg-codespan">$properties, $multipliers, $important: false</code>)</h6>
<p>Output REM values using the typographic grid. This is the prefered method of adding padding and margins because it enforces consistent spacing around all elements.</p><p><strong>Arguments:</strong></p><ul>
<li><code class="sg-code sg-codespan">$properties</code>: Can be any <code class="sg-code sg-codespan">CSS</code> property that accepts a length value (e.g. <code class="sg-code sg-codespan">rem</code>). Also accepts multiple properties as a nested list (e.g. <code class="sg-code sg-codespan">(padding-left, padding-right)</code>).</li>
<li><code class="sg-code sg-codespan">$multipliers</code>: Accepts unitless values that get converted to <code class="sg-code sg-codespan">rem</code> units which are a multiple of the typographic grid. Can be multiple values, <strong>separated by spaces</strong>, in the case of <code class="sg-code sg-codespan">margin</code> or <code class="sg-code sg-codespan">padding</code>.</li>
<li><code class="sg-code sg-codespan">$important</code>: Accepts <code class="sg-code sg-codespan">true</code> or <code class="sg-code sg-codespan">!important</code>.</li>
</ul>
<p><strong>Example</strong></p>
<div class="sg-markup sg-codeblock">
<pre class="sg-markup_wrap"><code class="hljs sg-code undefined"><span class="hljs-comment">// SCSS input</span>
<span class="hljs-selector-class">.foo</span> {
    @<span class="hljs-keyword">include</span> type-space(padding, 1 .25 .5 auto, <span class="hljs-string">&apos;!important&apos;</span>);
}

<span class="hljs-comment">// CSS output</span>
<span class="hljs-selector-class">.foo</span> {
    <span class="hljs-attribute">padding</span>: <span class="hljs-number">24px</span> <span class="hljs-number">8px</span> <span class="hljs-number">12px</span> auto <span class="hljs-meta">!important</span>;
    <span class="hljs-attribute">padding</span>: <span class="hljs-number">1.5rem</span> .<span class="hljs-number">375rem</span> .<span class="hljs-number">75rem</span> auto <span class="hljs-meta">!important</span>;
}
</code></pre>
</div>
<p data-code-meta="requires" class="sg-code-meta sg-code-meta-value"> <code class="sg-code sg-codespan"> <code id="mixin-px-to-rems" class="sg-global-mixin sg-code sg-codespan sg-global" data-code-id="@px-to-rems()">@px-to-rems()</code>, <code id="function-str-contains" class="sg-global-function sg-code sg-codespan sg-global" data-code-id="str-contains()">str-contains()</code></code> </p>

<p data-code-meta="alias" class="sg-code-meta sg-code-meta-value"> <code class="sg-code sg-codespan"> <code id="mixin-space" class="sg-global-mixin sg-code sg-codespan sg-global" data-code-id="@space()">@space()</code></code> </p>
                    </div>
                </article>        </div>
        </div> 
            <div class="sg-category">
            <div class="sg-category_wrap">
            
                <header class="sg-category_head" data-sg-section="Tools" >
                    <h2 class="sg-heading-category">Tools</h2>
                </header>                <article class="sg-article" id="development-tools-alignment-utilities" data-sg-section="Tools" data-sg-heading="Alignment Utilities">
                    <header class="sg-article_head ">
                        <h3 class="sg-heading sg-heading-article">Alignment Utilities</h3>
                        <p><code class="sg-codespan sg-file">_partials/sass/tools/_t-alignment.scss</code></p><hr></header>
                    <div class="sg-article_comment">
                        <h5 id="-alignment-utilities-" class="sg-heading sg-heading-5"><code id="mixin-alignment-utilities" class="sg-global-mixin sg-code sg-codespan sg-global" data-code-id="@alignment-utilities()">@alignment-utilities()</code></h5>

                <h6 id="mixin-namespace-39-39-silent-true-important-false-" class="sg-heading sg-heading-6">mixin(<code class="sg-code sg-codespan">$namespace:&apos;&apos;</code>, <code class="sg-code sg-codespan">$silent:true</code>, <code class="sg-code sg-codespan">$important:false</code>)</h6>
<p>Generates namespaced alignment classes.</p>
                <h5 id="-alignment-utilities-init-" class="sg-heading sg-heading-5"><code id="mixin-alignment-utilities-init" class="sg-global-mixin sg-code sg-codespan sg-global" data-code-id="@alignment-utilities-init()">@alignment-utilities-init()</code></h5>

                <h6 id="mixin-breakpoints-all-breakpoints-namespace-39-39-silent-true-important-false-" class="sg-heading sg-heading-6">mixin(<code class="sg-code sg-codespan">$breakpoints:</code> <code id="variable--all-breakpoints" class="sg-global-variable sg-code sg-codespan sg-global" data-code-id="$all-breakpoints">$all-breakpoints</code>, <code class="sg-code sg-codespan">$namespace:&apos;&apos;</code>, <code class="sg-code sg-codespan">$silent:true</code>, <code class="sg-code sg-codespan">$important:false</code>)</h6>
<p>The responsive component to <code id="mixin-alignment-utilities" class="sg-global-mixin sg-code sg-codespan sg-global" data-code-id="@alignment-utilities()">@alignment-utilities()</code>. Invoke <code id="mixin-alignment-utilites" class="sg-global-mixin sg-code sg-codespan sg-global" data-code-id="@alignment-utilites()">@alignment-utilites()</code> with that loops through a set of media-queries defined in <code id="variable--breakpoints" class="sg-global-variable sg-code sg-codespan sg-global" data-code-id="$breakpoints">$breakpoints</code>. This is most useful for creating responsive alignment classes.</p>
                    </div>
                </article>                <article class="sg-article" id="development-tools-display-utilities" data-sg-section="Tools" data-sg-heading="Display Utilities">
                    <header class="sg-article_head ">
                        <h3 class="sg-heading sg-heading-article">Display Utilities</h3>
                        <p><code class="sg-codespan sg-file">_partials/sass/tools/_t-display.scss</code></p><hr></header>
                    <div class="sg-article_comment">
                        <h5 id="-display-utilities-" class="sg-heading sg-heading-5"><code id="mixin-display-utilities" class="sg-global-mixin sg-code sg-codespan sg-global" data-code-id="@display-utilities()">@display-utilities()</code></h5>

                <h6 id="mixin-namespace-quot-quot-silent-false-important-true-class-list-display-classes-" class="sg-heading sg-heading-6">mixin(<code class="sg-code sg-codespan">$namespace:&quot;&quot;, $silent:false, $important:true, $class-list:$display-classes</code>)</h6>
<p>Generates classes with display properties defined in <code class="sg-code sg-codespan">$class-list</code>. Intelligently extends duplicated display properties.</p>
                <h5 id="-display-utilities-init-" class="sg-heading sg-heading-5"><code id="mixin-display-utilities-init" class="sg-global-mixin sg-code sg-codespan sg-global" data-code-id="@display-utilities-init()">@display-utilities-init()</code></h5>

                <h6 id="mixin-breakpoints-all-breakpoints-namespace-39-39-silent-true-important-false-" class="sg-heading sg-heading-6">mixin(<code class="sg-code sg-codespan">$breakpoints: $all-breakpoints, $namespace: &apos;&apos;, $silent: true, $important: false</code>)</h6>
<p>The responsive component to <code id="mixin-display-utilities" class="sg-global-mixin sg-code sg-codespan sg-global" data-code-id="@display-utilities()">@display-utilities()</code>. Invoke <code id="mixin-display-utilites" class="sg-global-mixin sg-code sg-codespan sg-global" data-code-id="@display-utilites()">@display-utilites()</code> with that loops through a set of media-queries defined in <code id="variable--breakpoints" class="sg-global-variable sg-code sg-codespan sg-global" data-code-id="$breakpoints">$breakpoints</code>. This is most useful for creating responsive display classes.</p>
                    </div>
                </article>                <article class="sg-article" id="development-tools-font-face-generator" data-sg-section="Tools" data-sg-heading="Font Face Generator">
                    <header class="sg-article_head ">
                        <h3 class="sg-heading sg-heading-article">Font Face Generator</h3>
                        <p><code class="sg-codespan sg-file">_partials/sass/tools/_t-fontface.scss</code></p><hr></header>
                    <div class="sg-article_comment">
                        <h5 id="-fonts-" class="sg-heading sg-heading-5"><code id="mixin-fonts" class="sg-global-mixin sg-code sg-codespan sg-global" data-code-id="@fonts()">@fonts()</code></h5>

                <h6 id="mixin-name-font-file-name-font-file-location-weights-font-weights-italics-font-italics-" class="sg-heading sg-heading-6">mixin(<code class="sg-code sg-codespan">$name</code>: <code id="variable--font-file-name" class="sg-global-variable sg-code sg-codespan sg-global" data-code-id="$font-file-name">$font-file-name</code>, <code id="variable--font-file-location" class="sg-global-variable sg-code sg-codespan sg-global" data-code-id="$font-file-location">$font-file-location</code>, <code class="sg-code sg-codespan">$weights</code>: <code id="variable--font-weights" class="sg-global-variable sg-code sg-codespan sg-global" data-code-id="$font-weights">$font-weights</code>, <code class="sg-code sg-codespan">$italics</code>: <code id="variable--font-italics" class="sg-global-variable sg-code sg-codespan sg-global" data-code-id="$font-italics">$font-italics</code>)</h6>
<p>A wrapper function for <code id="mixin-font-face" class="sg-global-mixin sg-code sg-codespan sg-global" data-code-id="@font-face()">@font-face()</code>. Takes global configuration variables and passes them to <code id="mixin-font-face" class="sg-global-mixin sg-code sg-codespan sg-global" data-code-id="@font-face()">@font-face()</code>. Loops through each <code class="sg-code sg-codespan">$name</code> based on <code class="sg-code sg-codespan">$weights</code> and <code class="sg-code sg-codespan">$italics</code>. Uses <code class="sg-code sg-codespan">$path</code> and <code class="sg-code sg-codespan">$name</code> to point to font files. Formats these variables so they can be passed to <code id="mixin-font-face" class="sg-global-mixin sg-code sg-codespan sg-global" data-code-id="@font-face()">@font-face()</code>.</p><p>Font file names must be the same as their CSS font-family values. Example: arial font, 400 weight would be arial400.ttf and the CSS value would be font-family: &#x2018;arial&#x2019;; font-weight: 400.</p><p data-code-meta="requires" class="sg-code-meta sg-code-meta-value"> <code class="sg-code sg-codespan"> <code id="mixin-font-face" class="sg-global-mixin sg-code sg-codespan sg-global" data-code-id="@font-face()">@font-face()</code></code> </p>
                <h5 id="-font-face-" class="sg-heading sg-heading-5"><code id="mixin-font-face" class="sg-global-mixin sg-code sg-codespan sg-global" data-code-id="@font-face()">@font-face()</code></h5>

                <h6 id="mixin-name-font-files-weight-false-style-false-eot-false-" class="sg-heading sg-heading-6">mixin(<code class="sg-code sg-codespan">$name</code>, <code class="sg-code sg-codespan">$font-files</code>, <code class="sg-code sg-codespan">$weight:false</code>,<code class="sg-code sg-codespan">$style:false</code>, <code class="sg-code sg-codespan">$eot:false</code>)</h6>
<p>Generates cross-browser font-face declarations when called.
<br>
$name is required, arbitrary, and what you will use in font stacks.
<br>
<strong>Arguments:</strong></p><ul>
<li>$font-files is required using font-files(&#x2018;relative/location&#x2019;, &#x2018;format&#x2019;). For best results use this order: woff, opentype/truetype, svg</li>
<li>$eot is required by IE, and is a relative location of the eot file.</li>
<li>$weight shows if the font is bold, defaults to normal</li>
<li>$style defaults to normal, might be also italic</li>
</ul>
<p>Based on <a href="http://compass-style.org/reference/compass/css3/font_face/">Compass&#x2019; font-face mixin</a>.</p>
                    </div>
                </article>                <article class="sg-article" id="development-tools-spacing-utilities" data-sg-section="Tools" data-sg-heading="Spacing Utilities">
                    <header class="sg-article_head ">
                        <h3 class="sg-heading sg-heading-article">Spacing Utilities</h3>
                        <p><code class="sg-codespan sg-file">_partials/sass/tools/_t-spacing.scss</code></p><hr></header>
                    <div class="sg-article_comment">
                        <h5 id="layout-type-" class="sg-heading sg-heading-5"><code id="function-layout-type" class="sg-global-function sg-code sg-codespan sg-global" data-code-id="layout-type()">layout-type()</code></h5>

                <h6 id="function-space-type-39-39-space-direction-39-39-" class="sg-heading sg-heading-6">function(<code class="sg-code sg-codespan">$space-type:&apos;&apos;</code>, <code class="sg-code sg-codespan">$space-direction:&apos;&apos;</code>)</h6>
<p>Parse strings to determine spacing types. Checks for certain characters within a string to determine whether to output padding or margin, followed by a direction. Private function used by <code id="mixin-spacing-utilities" class="sg-global-mixin sg-code sg-codespan sg-global" data-code-id="@spacing-utilities()">@spacing-utilities()</code>.</p>
                <h5 id="-spacing-utilities-" class="sg-heading sg-heading-5"><code id="mixin-spacing-utilities" class="sg-global-mixin sg-code sg-codespan sg-global" data-code-id="@spacing-utilities()">@spacing-utilities()</code></h5>

                <h6 id="mixin-namespace-39-39-config-" class="sg-heading sg-heading-6">mixin(<code class="sg-code sg-codespan">$namespace:&apos;&apos;</code>, <code id="function--config-" class="sg-global-function sg-code sg-codespan sg-global" data-code-id="$config:()">$config:()</code>)</h6>
<p>Generates responsive spacing and padding classes. The <code class="sg-code sg-codespan">$namespace</code> argument is the media query&#x2019;s name, which will be appended to all generated classes. The <code class="sg-code sg-codespan">$config</code> argument is a map that allows JS-style arguments. Outputs class name as: <code class="sg-code sg-codespan">breakpoint_prefix_direction_amount</code>.</p><p><strong><code class="sg-code sg-codespan">$config</code> Keys:</strong></p><ul>
<li><code class="sg-code sg-codespan">silent:</code> boolean for outputting silent/non-silent classes.</li>
<li><code class="sg-code sg-codespan">important:</code> whether to output !important after each declaration.</li>
<li><code class="sg-code sg-codespan">directions:</code> names that get appended to class names.</li>
<li><code class="sg-code sg-codespan">amounts:</code> how much to multiply spacing unit by <code id="variable--base-line-height" class="sg-global-variable sg-code sg-codespan sg-global" data-code-id="$base-line-height">$base-line-height</code>.</li>
<li><code class="sg-code sg-codespan">names:</code> corresponding names for each <code class="sg-code sg-codespan">amounts</code> that gets appended to class names.</li>
<li><code class="sg-code sg-codespan">prefixes:</code> first word in the class name. Must contain the words &#x2018;pad&#x2019; and &#x2018;space&#x2019;. Used by <code id="function-layout-type" class="sg-global-function sg-code sg-codespan sg-global" data-code-id="layout-type()">layout-type()</code> to determine padding or margin.</li>
</ul>

                <h5 id="-spacing-utilities-init-" class="sg-heading sg-heading-5"><code id="mixin-spacing-utilities-init" class="sg-global-mixin sg-code sg-codespan sg-global" data-code-id="@spacing-utilities-init()">@spacing-utilities-init()</code></h5>

                <h6 id="mixin-breakpoints-all-breakpoints-namespace-39-39-config-silent-true-" class="sg-heading sg-heading-6">mixin(<code class="sg-code sg-codespan">$breakpoints:</code> <code id="variable--all-breakpoints" class="sg-global-variable sg-code sg-codespan sg-global" data-code-id="$all-breakpoints">$all-breakpoints</code>, <code class="sg-code sg-codespan">$namespace:&apos;&apos;</code>, <code class="sg-code sg-codespan">$config:(silent:true)</code>)</h6>
<p>The responsive component to <code id="mixin-spacing-utilities" class="sg-global-mixin sg-code sg-codespan sg-global" data-code-id="@spacing-utilities()">@spacing-utilities()</code>. Invoke <code id="mixin-spacing-utilites" class="sg-global-mixin sg-code sg-codespan sg-global" data-code-id="@spacing-utilites()">@spacing-utilites()</code> with that loops through a set of media-queries defined in <code id="variable--breakpoints" class="sg-global-variable sg-code sg-codespan sg-global" data-code-id="$breakpoints">$breakpoints</code>. This is most useful for creating responsive spacing classes.</p>
                    </div>
                </article>                <article class="sg-article" id="development-tools-type-utilities" data-sg-section="Tools" data-sg-heading="Type Utilities">
                    <header class="sg-article_head ">
                        <h3 class="sg-heading sg-heading-article">Type Utilities</h3>
                        <p><code class="sg-codespan sg-file">_partials/sass/tools/_t-type.scss</code></p><hr></header>
                    <div class="sg-article_comment">
                        <h5 id="-type-utilities-" class="sg-heading sg-heading-5"><code id="mixin-type-utilities" class="sg-global-mixin sg-code sg-codespan sg-global" data-code-id="@type-utilities()">@type-utilities()</code></h5>

                <h6 id="mixin-namespace-39-39-silent-true-important-false-" class="sg-heading sg-heading-6">mixin(<code class="sg-code sg-codespan">$namespace:&apos;&apos;</code>, <code class="sg-code sg-codespan">$silent: true</code>, <code class="sg-code sg-codespan">$important: false)</code></h6>
<p>A set of typography-based utility classes that can be generated within media-queries via the <code class="sg-code sg-codespan">$namespace</code> argument. Can output silent or real css classes. Can also make declarations <code class="sg-code sg-codespan">!important</code>.</p>
                <h5 id="-type-utilities-init-" class="sg-heading sg-heading-5"><code id="mixin-type-utilities-init" class="sg-global-mixin sg-code sg-codespan sg-global" data-code-id="@type-utilities-init()">@type-utilities-init()</code></h5>

                <h6 id="mixin-breakpoints-all-breakpoints-namespace-39-39-silent-true-important-false-" class="sg-heading sg-heading-6">mixin(<code class="sg-code sg-codespan">$breakpoints</code>:<code id="variable--all-breakpoints" class="sg-global-variable sg-code sg-codespan sg-global" data-code-id="$all-breakpoints">$all-breakpoints</code>, <code class="sg-code sg-codespan">$namespace:&apos;&apos;</code>, <code class="sg-code sg-codespan">$silent: true</code>, <code class="sg-code sg-codespan">$important: false</code>)</h6>
<p>The responsive component to <code id="mixin-type-utilities" class="sg-global-mixin sg-code sg-codespan sg-global" data-code-id="@type-utilities()">@type-utilities()</code>. Invoke <code id="mixin-type-utilites" class="sg-global-mixin sg-code sg-codespan sg-global" data-code-id="@type-utilites()">@type-utilites()</code> with that loops through a set of media-queries defined in <code id="variable--breakpoints" class="sg-global-variable sg-code sg-codespan sg-global" data-code-id="$breakpoints">$breakpoints</code>. This is most useful for creating responsive typography-based utility classes.</p>
                    </div>
                </article>                <article class="sg-article" id="development-tools-z-index" data-sg-section="Tools" data-sg-heading="Z-Index">
                    <header class="sg-article_head ">
                        <h3 class="sg-heading sg-heading-article">Z-Index</h3>
                        <p><code class="sg-codespan sg-file">_partials/sass/tools/_t-zindex.scss</code></p><hr></header>
                    <div class="sg-article_comment">
                        <h5 id="z-" class="sg-heading sg-heading-5"><code id="function-z" class="sg-global-function sg-code sg-codespan sg-global" data-code-id="z()">z()</code></h5>

                <h6 id="function-layer-modifier-false-" class="sg-heading sg-heading-6">function(<code class="sg-code sg-codespan">$layer</code>, <code class="sg-code sg-codespan">$modifier: false</code>)</h6>
<p>Returns a numeric value (used for z-index) from a named layer, stored in <code id="variable--z-index" class="sg-global-variable sg-code sg-codespan sg-global" data-code-id="$z-index">$z-index</code>. Changing the modifier to anything other than <code class="sg-code sg-codespan">false</code> will add 1 plus however many times the value has been called. So, if you&#x2019;ve called <code class="sg-code sg-codespan">z(head, true)</code> 5 times, and <code class="sg-code sg-codespan">head</code>&#x2018;s default value is 100, you would get a value of 105.</p><p>The <code class="sg-code sg-codespan">$modifier</code> is useful if you&#x2019;d like to closely layer z-indexes within the same module. It is rarely necessary, though since z-indexes stack.</p>
                    </div>
                </article>        </div>
        </div> 
            <div class="sg-category">
            <div class="sg-category_wrap">
            
                <header class="sg-category_head" data-sg-section="Variables" >
                    <h2 class="sg-heading-category">Variables</h2>
                </header>                <article class="sg-article" id="development-variables-easing" data-sg-section="Variables" data-sg-heading="Easing">
                    <header class="sg-article_head ">
                        <h3 class="sg-heading sg-heading-article">Easing</h3>
                        <p><code class="sg-codespan sg-file">_partials/sass/tools/_t-easings.scss</code></p><hr></header>
                    <div class="sg-article_comment">
                        <p>Each easing variable is a cubic-bezier value that specifies rate of change of an animation. <a href="http://www.easings.net">See easings for more</a>.</p><p><a href="https://github.com/matthewlein/Ceaser/blob/master/developer/">Reference</a></p>
                    </div>
                </article>                <article class="sg-article" id="development-variables-globals" data-sg-section="Variables" data-sg-heading="Globals">
                    <header class="sg-article_head ">
                        <h3 class="sg-heading sg-heading-article">Globals</h3>
                        <p><code class="sg-codespan sg-file">_partials/sass/tools/_t-variables.scss</code></p><hr></header>
                    <div class="sg-article_comment">
                        <p>The variables here are created based on the config variables passed by the user. These are generally abstracted to make them a little easier to parse, programmatically.</p>
                <h5 id="-type-h1-6-p-small-lh" class="sg-heading sg-heading-5"><code id="variable--type--h1-6-p-small--lh" class="sg-global-variable sg-code sg-codespan sg-global" data-code-id="$type-[h1-6,p,small]-lh">$type-[h1-6,p,small]-lh</code></h5>

                <h6 id="boolean-unitless-pixel-value" class="sg-heading sg-heading-6">boolean/unitless/pixel value</h6>
<p>Parses <code id="variable--type-h----size" class="sg-global-variable sg-code sg-codespan sg-global" data-code-id="$type-h[#]-size">$type-h[#]-size</code> for an optional line-height value, if none exists, pass it along to <code id="function-baseline-calc" class="sg-global-function sg-code sg-codespan sg-global" data-code-id="baseline-calc()">baseline-calc()</code>.</p>

<p data-code-meta="alias" class="sg-code-meta sg-code-meta-value"> <code class="sg-code sg-codespan"> <code id="variable--h----lh" class="sg-global-variable sg-code sg-codespan sg-global" data-code-id="$h[#]-lh">$h[#]-lh</code></code> </p>
                <h5 id="-type-h1-6-p-small-size" class="sg-heading sg-heading-5"><code id="variable--type--h1-6-p-small--size" class="sg-global-variable sg-code sg-codespan sg-global" data-code-id="$type-[h1-6,p,small]-size">$type-[h1-6,p,small]-size</code></h5>

                <h6 id="number-pixel-" class="sg-heading sg-heading-6">Number (pixel)</h6>
<p>Font sizes, as defined by the user or <code id="variable--auto-scale-type" class="sg-global-variable sg-code sg-codespan sg-global" data-code-id="$auto-scale-type">$auto-scale-type</code>.</p>
                <h5 id="-type-base-unit" class="sg-heading sg-heading-5"><code id="variable--type-base-unit" class="sg-global-variable sg-code sg-codespan sg-global" data-code-id="$type-base-unit">$type-base-unit</code></h5>

                <h6 id="number" class="sg-heading sg-heading-6">Number</h6>
<p>Abstraction of the base spacing unit used in any mixin or function that defines spacing units.</p>
                <h5 id="-type-base-ratio" class="sg-heading sg-heading-5"><code id="variable--type-base-ratio" class="sg-global-variable sg-code sg-codespan sg-global" data-code-id="$type-base-ratio">$type-base-ratio</code></h5>

                <h6 id="number" class="sg-heading sg-heading-6">Number</h6>
<p>Ratio used to calculate the difference between font sizes and spacing units.</p>
                <h5 id="-type-headings" class="sg-heading sg-heading-5"><code id="variable--type-headings" class="sg-global-variable sg-code sg-codespan sg-global" data-code-id="$type-headings">$type-headings</code></h5>

                <h6 id="list-number-" class="sg-heading sg-heading-6">List (number)</h6>
<p>Used for defining automatic headings functions.</p>
                <h5 id="-type-modular-scale" class="sg-heading sg-heading-5"><code id="variable--type-modular-scale" class="sg-global-variable sg-code sg-codespan sg-global" data-code-id="$type-modular-scale">$type-modular-scale</code></h5>

                <h6 id="number" class="sg-heading sg-heading-6">Number</h6>
<p>Abstracts the <code id="variable--scale-ratio" class="sg-global-variable sg-code sg-codespan sg-global" data-code-id="$scale-ratio">$scale-ratio</code> and makes sure it&#x2019;s a positive number.</p>
                <h5 id="-all-breakpoints" class="sg-heading sg-heading-5"><code id="variable--all-breakpoints" class="sg-global-variable sg-code sg-codespan sg-global" data-code-id="$all-breakpoints">$all-breakpoints</code></h5>

                <h6 id="list" class="sg-heading sg-heading-6">List</h6>
<p>Stores all the names defined in <code id="variable--breakpoints" class="sg-global-variable sg-code sg-codespan sg-global" data-code-id="$breakpoints">$breakpoints</code> for use in abstract framework components so that if names are chagned, boilerplate media queries won&#x2019;t fail.</p>
                <h5 id="-breakpoint-smallest" class="sg-heading sg-heading-5"><code id="variable--breakpoint-smallest" class="sg-global-variable sg-code sg-codespan sg-global" data-code-id="$breakpoint-smallest">$breakpoint-smallest</code></h5>

                <h6 id="string" class="sg-heading sg-heading-6">String</h6>
<p>Grabs the first <code id="variable--breakpoints" class="sg-global-variable sg-code sg-codespan sg-global" data-code-id="$breakpoints">$breakpoints</code> name.</p>
                <h5 id="-breakpoint-largest" class="sg-heading sg-heading-5"><code id="variable--breakpoint-largest" class="sg-global-variable sg-code sg-codespan sg-global" data-code-id="$breakpoint-largest">$breakpoint-largest</code></h5>

                <h6 id="string" class="sg-heading sg-heading-6">String</h6>
<p>Grabs the last <code id="variable--breakpoints" class="sg-global-variable sg-code sg-codespan sg-global" data-code-id="$breakpoints">$breakpoints</code> name.</p>
                    </div>
                </article>        </div>
        </div>    </section></main>

<script>
/*!
 * toc - jQuery Table of Contents Plugin
 * v0.3.2
 * http://projects.jga.me/toc/
 * copyright Greg Allen 2014
 * MIT License
*/
/*!
 * smooth-scroller - Javascript lib to handle smooth scrolling
 * v0.1.2
 * https://github.com/firstandthird/smooth-scroller
 * copyright First+Third 2014
 * MIT License
*/
//smooth-scroller.js

(function($) {
  $.fn.smoothScroller = function(options) {
    options = $.extend({}, $.fn.smoothScroller.defaults, options);
    var el = $(this);

    $(options.scrollEl).animate({
      scrollTop: el.offset().top - $(options.scrollEl).offset().top - options.offset
    }, options.speed, options.ease, function() {
      var hash = el.attr('id');

      if(hash.length) {
        if(history.pushState) {
          history.pushState(null, null, '#' + hash);
        } else {
          document.location.hash = hash;
        }
      }

      el.trigger('smoothScrollerComplete');
    });

    return this;
  };

  $.fn.smoothScroller.defaults = {
    speed: 400,
    ease: 'swing',
    scrollEl: 'body,html',
    offset: 0
  };

  $('body').on('click', '[data-smoothscroller]', function(e) {
    e.preventDefault();
    var href = $(this).attr('href');

    if(href.indexOf('#') === 0) {
      $(href).smoothScroller();
    }
  });
}(jQuery));

(function($) {
var verboseIdCache = {};
$.fn.toc = function(options) {
  var self = this;
  var opts = $.extend({}, jQuery.fn.toc.defaults, options);

  var container = $(opts.container);
  var headings = $(opts.selectors, container);
  var headingOffsets = [];
  var activeClassName = opts.activeClass;

  var scrollTo = function(e, callback) {
    if (opts.smoothScrolling && typeof opts.smoothScrolling === 'function') {
      e.preventDefault();
      var elScrollTo = $(e.target).attr('href');

      opts.smoothScrolling(elScrollTo, opts, callback);
    }
    $('li', self).removeClass(activeClassName);
    $(e.target).parent().addClass(activeClassName);
  };

  //highlight on scroll
  var timeout;
  var highlightOnScroll = function(e) {
    if (timeout) {
      clearTimeout(timeout);
    }
    timeout = setTimeout(function() {
      var top = $(window).scrollTop(),
        highlighted, closest = Number.MAX_VALUE, index = 0;

      for (var i = 0, c = headingOffsets.length; i < c; i++) {
        var currentClosest = Math.abs(headingOffsets[i] - top);
        if (currentClosest < closest) {
          index = i;
          closest = currentClosest;
        }
      }

      $('li', self).removeClass(activeClassName);
      highlighted = $('li:eq('+ index +')', self).addClass(activeClassName);
      opts.onHighlight(highlighted);
    }, 50);
  };
  if (opts.highlightOnScroll) {
    $(window).bind('scroll', highlightOnScroll);
    highlightOnScroll();
  }

  return this.each(function() {
    //build TOC
    var el = $(this);
    var ul = $(opts.listType);

    headings.each(function(i, heading) {
      var $h = $(heading);
      headingOffsets.push($h.offset().top - opts.highlightOffset);

      var anchorName = opts.anchorName(i, heading, opts.prefix);

      //add anchor
      if(heading.id !== anchorName) {
        var anchor = $('<span/>').attr('id', anchorName).insertBefore($h);
      }

      //build TOC item
      var a = $('<a/>')
        .text(opts.headerText(i, heading, $h))
        .attr('href', '#' + anchorName)
        .bind('click', function(e) {
          $(window).unbind('scroll', highlightOnScroll);
          scrollTo(e, function() {
            $(window).bind('scroll', highlightOnScroll);
          });
          el.trigger('selected', $(this).attr('href'));
        });

      var li = $('<li/>')
        .addClass(opts.itemClass(i, heading, $h, opts.prefix))
        .append(a);

      ul.append(li);
    });
    el.html(ul);
  });
};


jQuery.fn.toc.defaults = {
  container: 'body',
  listType: '<ul/>',
  selectors: 'h1,h2,h3',
  smoothScrolling: function(target, options, callback) {
    $(target).smoothScroller({
      offset: options.scrollToOffset
    }).on('smoothScrollerComplete', function() {
      callback();
    });
  },
  scrollToOffset: 0,
  prefix: 'toc',
  activeClass: 'toc-active',
  onHighlight: function() {},
  highlightOnScroll: true,
  highlightOffset: 100,
  anchorName: function(i, heading, prefix) {
    if(heading.id.length) {
      return heading.id;
    }

    var candidateId = $(heading).text().replace(/[^a-z0-9]/ig, ' ').replace(/\s+/g, '-').toLowerCase();
    if (verboseIdCache[candidateId]) {
      var j = 2;

      while(verboseIdCache[candidateId + j]) {
        j++;
      }
      candidateId = candidateId + '-' + j;

    }
    verboseIdCache[candidateId] = true;

    return prefix + '-' + candidateId;
  },
  headerText: function(i, heading, $heading) {
    return $heading.text();
  },
  itemClass: function(i, heading, $heading, prefix) {
    return prefix + '-' + $heading[0].tagName.toLowerCase();
  }

};

})(jQuery);
;


    $('#sg-menu_wrap').toc({
        'selectors': '.sg-heading-section,.sg-heading-category,.sg-heading-article', //elements to use as headings
        'container': '#sg-main', //element to find all selectors in
        'smoothScrolling': function(target, options, callback) { //enable or disable smooth scrolling on click
            $(target).smoothScroller({
              offset: 50,
              speed: 10
            }).on('smoothScrollerComplete', function() {
              callback();
            });
        },
        'listType': '<ul class="sg-menu_list"></ul>',
        'prefix': 'sg', //prefix for anchor tags and class names
        'onHighlight': function(el) { //called when a new section is highlighted
            var $el = $(el);
            $el.closest('.sg-menu_category').addClass('sg-category-active')
            $('.sg-category-active').not($el.closest('.sg-menu_category')).removeClass('sg-category-active');
            expandCategory($el);
        },
        'activeClass': 'sg-toc-active',
        'highlightOnScroll': true, //add class to heading that is currently in focus
        'highlightOffset': 50, //offset to trigger the next headline
        'headerText': function(i, heading, $heading) { //custom function building the header-item text
            return $heading.text();
        },
        'itemClass': function(i, heading, $heading, prefix) { // custom function for item class
            //List items class="sg-menu_[section,category,article] sg-menu_item"
            return $heading.attr('class').replace('sg-heading-', 'sg-menu_').replace('sg-heading ', ' ') + ' sg-menu_item';
        }
    });

    function expandCategory($el) {
        if($el.hasClass('sg-menu_category')){
            $('.sg-category-active').removeClass('sg-category-active');
            $el.addClass('sg-category-active');
        }
    }

    $("#sg-menu_wrap").find('a').addClass('sg-menu_link').on('click', function(el){
        expandCategory($(el));
    });

    $('.sg-menu_article').each(function(i, el){
        var category = $(el).prevAll('.sg-menu_category')[0];
        $(el).appendTo(category);
    });

    $('.sg-menu_category').each(function(i, el){
        var section = $(el).prevAll('.sg-menu_section')[0];
        $(el).appendTo(section);
    }).each(function(i, el){
        $(this).find('.sg-menu_article').wrapAll('<ul class="sg-menu_list"></ul>');
    });

    (function(window,undefined){

      // Since jQuery really isn't required for this plugin, use `jQuery` as the
      // namespace only if it already exists, otherwise use the `Cowboy` namespace,
      // creating it if necessary.
      var $ = window.jQuery || window.Cowboy || ( window.Cowboy = {} ),

        // Internal method reference.
        jq_throttle;

      $.throttle = jq_throttle = function( delay, no_trailing, callback, debounce_mode ) {
        // After wrapper has stopped being called, this timeout ensures that
        // `callback` is executed at the proper times in `throttle` and `end`
        // debounce modes.
        var timeout_id,

          // Keep track of the last time `callback` was executed.
          last_exec = 0;

        // `no_trailing` defaults to falsy.
        if ( typeof no_trailing !== 'boolean' ) {
          debounce_mode = callback;
          callback = no_trailing;
          no_trailing = undefined;
        }

        // The `wrapper` function encapsulates all of the throttling / debouncing
        // functionality and when executed will limit the rate at which `callback`
        // is executed.
        function wrapper() {
          var that = this,
            elapsed = +new Date() - last_exec,
            args = arguments;

          // Execute `callback` and update the `last_exec` timestamp.
          function exec() {
            last_exec = +new Date();
            callback.apply( that, args );
          };

          // If `debounce_mode` is true (at_begin) this is used to clear the flag
          // to allow future `callback` executions.
          function clear() {
            timeout_id = undefined;
          };

          if ( debounce_mode && !timeout_id ) {
            // Since `wrapper` is being called for the first time and
            // `debounce_mode` is true (at_begin), execute `callback`.
            exec();
          }

          // Clear any existing timeout.
          timeout_id && clearTimeout( timeout_id );

          if ( debounce_mode === undefined && elapsed > delay ) {
            // In throttle mode, if `delay` time has been exceeded, execute
            // `callback`.
            exec();

          } else if ( no_trailing !== true ) {
            // In trailing throttle mode, since `delay` time has not been
            // exceeded, schedule `callback` to execute `delay` ms after most
            // recent execution.
            //
            // If `debounce_mode` is true (at_begin), schedule `clear` to execute
            // after `delay` ms.
            //
            // If `debounce_mode` is false (at end), schedule `callback` to
            // execute after `delay` ms.
            timeout_id = setTimeout( debounce_mode ? clear : exec, debounce_mode === undefined ? delay - elapsed : delay );
          }
        };

        // Set the guid of `wrapper` function to the same of original callback, so
        // it can be removed in jQuery 1.4+ .unbind or .die by using the original
        // callback as a reference.
        if ( $.guid ) {
          wrapper.guid = callback.guid = callback.guid || $.guid++;
        }

        // Return the wrapper function.
        return wrapper;
      };


      $.debounce = function( delay, at_begin, callback ) {
        return callback === undefined
          ? jq_throttle( delay, at_begin, false )
          : jq_throttle( delay, callback, at_begin !== false );
      };

    })(this);

    function checkMenuOffset($window){
        var targetOffset = $("#sg-main").offset().top;

        if ( $window.scrollTop() > targetOffset ) {
            $('#sg-menu').css({'position':'fixed'});
        } else {
            $('#sg-menu').css({'position':'absolute'});
        }
    }


    var $w = $(window).scroll($.debounce(5, false, function(){
        checkMenuOffset($w);
    }));

    $(function(){
        checkMenuOffset($w);
    });

</script>

</div>
