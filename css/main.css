@charset "UTF-8";
/* SG
# Main [[dev]]
/main.scss

Imports all Sass files in order from lowest specificity to highest.
1.  (globals) global functions
2.  (globals) Settings
3.  (globals) default variables
4.  (tools) general-use mixins and sass utilities
5.  (generic) normalize/reset styles
6.  (base) element styles
7.  (layout) basic layout and object styles
8.  (components) module and component styles
9.  (Sections) view- and page-specific and scoped styles.
10. (Overrides) utility styles, usually end in `!important`

*/
/* SG
# Functions/Math [[dev]]

/globals/_gl-functions.scss

-----------------------------------

##### `exponent()`
###### function(`$number`, `$exponent`)
Exponentially multiply (cube, square, etc) a number.

##### `pow()`
###### function(`$number`, `$exponent`, `$precision:12`)
A more robust exponent multiplication which allows for decimal-based exponents. This replaces Compass' pow() function.

##### `gcd()`
###### function(`$number-1`, `$number-2`)
Greatest Common Divisor calculation (useful for calculating grids and widths)

##### `lcm()`
###### function(`$a`, `$b`)
Finds the least common multiple.

##### `nth_root()`
###### function(`$base`, `$n:2`, `$precision:12`)
Advanced calculation for square roots, cube roots, etc. of a value.

##### `sqrt()`
###### function(`$base`, `$precision:12`)
Find the square root of a value.

##### `golden()`
###### function(`$base: 1`)
Get the golden ratio from `$base`.

##### `sin()`
###### function(`$angle`)
Determines the Sine of an angle.

##### `cos()`
###### function(`$angle`)
Determines the Cosine of an angle.

##### `tan()`
###### function(`$angle`)
Determines the Tangent of an angle.

*/
/* SG
# Functions/Sass Helpers [[dev]]

/globals/_gl-functions.scss

---

##### `cache()`
###### function(`$function-name` , `$args...`)
Memoize (cache) a function's return values and arguments. Speeds up processing on intensive functions that get called many times (with the same arguments).

_NOTE: This can actually **increase** processing time if used too often or on simple functions as the lookup process isn't free. Every cached value is unique._


##### Converter Functions #####

##### `strip-units()`
###### function(`$value`)
Remove px,em,rem, etc. from a value. Usually a variable. This is sometimes required because Sass cannot calculate incompatible (px * rem for instance) units.

##### `percentage-to-decimal()`
###### function(`$percentage`)
Changes percent value to decimal.

##### `px-to-vw()`
###### function(`$pixels`)
Converts pixel dimensions to viewport width (vw) dimensions.

##### `px-to-rems()`, `rems()`
###### function(`$pixels`, `$base-font`:`$$base-font-size`)
Function for calculating `rem` values. Used by `@rems()`. The `$base-size` is used to calculate the initial value to calculate the value (e.g. if the `body`'s `font-size` is `16px`, then the rem value of `24px` would be `1.5rem`).

##### `list-to-string()`, `str-join()`
###### function(`$list`, `$separator:","`)
Converts a list to a string with an optional separator.

##### `str-to-number()`
###### function(`$string` , `$unitless: false`)
Converts a number-like string to a number. Since Sass accepts quoted and non-quoted values like `"10px"` and `10px`, but can only do math on the unquoted (number) value, it is sometimes necessary to convert/cast a string to a number.


##### String & List Functions #####

##### `contains()`
###### function(`$data`, `$value`)
Generic `contains` function(similar to javascript's `indexOf`). Parses a variable(`$data`) for a `$value`. Returns boolean.

##### `str-append()`
###### function(`$data`, `$separator:','`)
Adds one string to another (e.g. `str-append('hello', 'world')` becomes `hello world`). Used by `str-join()`.

##### `list-contains()`
###### function(`$list`, `$value`)
Checks whether a `$list` contains a `$value`.

##### `list-print()`
###### function(`$list`, `$depth: 1`)
Used to turn a list into a flat string. For debug purposes.

##### `to-list()`
###### function(`$string`, `$keep`: `'both'`)
Convert a value to a list. `$keep` accepts `'keys'`, `'values'`, or `'both'` for map conversion.


##### Map Functions #####
*[Reference](http://www.sitepoint.com/extra-map-functions-sass/)*

##### `map-deep-set()`
###### function(`$map`, `$keys...`(`$value`))
Add to a deeply nested map key. Accepts any number of keys, but the final value is the new key.

##### `map-depth()`
###### function(`$map`)
Find depth of a `$map`. Returns number.

##### `map-has-keys()`,`map-contains-keys()`
###### `[map], [key(s) to be checked ...]`
Determine whether a map contains certain keys.

##### `map-has-nested-keys()` , `map-contains-nested-keys()`
###### function(`$map`, `$keys...`)
Check for the value of a nested key. Returns boolean value.

##### `map-get-nested()`
###### function(`$map`, `$keys...`)
Returns nested map values. A deep version of Sass' `map-get()`.

##### `map-extend()`
###### function(`$map`, `$maps...`(`$deep:true`))
Merges multiple maps. Similar to jQuery's .extend().

##### `map-add-depth()`
###### function(`$map`, `$new-key:'base'`)
Adds one level to a map using the new key to a map. Used by `generate_color_varations()`. (e.g. `(key: value, key: value)` becomes `(key:(new-key: value), key:(new-key: value))` )

##### `map-print()` , `map-inspect()`
###### function(`$map`, `$level:1`)
Prints map into a string (in a JSON-esque format). Useful for debugging.
*/
/* SG
# Functions/Photoshop converters [[dev]]

/globals/_gl-functions.scss

Convert Photoshop layer-style values to CSS values.

-----------------------

##### `photoshop-shadow()`
###### function(`$color:#000`, `$angle:120`, `$distance:0`, `$size:0`, `$spread:0`, `$inner:false`)
Takes photoshop "Drop Shadow" layer style arguments and converts them to CSS `box-shadow` values.

##### `photoshop-text-shadow()`
###### function(`$color:#000`, `$angle:120`, `$distance:0`, `$size:0`, `$spread:null`)
Takes photoshop "Drop Shadow" layer style arguments and converts them to CSS `text-shadow` values.

##### `photoshop-gradient-overlay()`
###### function(`$gradient-colors:(#000, #fff)`, `$gradient-stops:(0%, 100%)`, `$angle:90deg`, `$opacity:100%`, `$scale:100%`, `$bg-color:white`, `$blend:normal`)
Takes photoshop "Gradient Overlay" layer style arguments and converts them to CSS `linear-gradient` values.

##### `convert-angle()`
###### function(`$angle`)
Converts Photoshop angles to CSS angles.

##### `stop-scale()`
###### `[stop], [scale]`
Converts Photoshop gradient-stops to CSS gradients.

*/
/* SG
# Functions/Type [[dev]]

/globals/_gl-functions.scss

---

##### `baseline()`
###### function(`$font-size`, `$baseline`)
Aligns a font-size to a baseline. Dividing by the `$font-size` yields a unitless value (equivilent to rems).

##### `baseline-lcm()`
###### function(`$font-size`, `$line-height`)
Calculate the least-common-denominator between a font-size and a baseline.

##### `baseline-calc()`
###### function(`$font-size`:`$$base-font-size`, `$font-base`:`$$base-font-size`, `$calc-override: false`)
Used generating line-heights that line up to the baseline grid. Override recommended behavior with a boolean third value to gain most eye-pleasing values.

##### `modular-scale()`
###### function(`$scale`, `$ratio:``$$scale-ratio`)
Generates a pixel value that is an exponent of a ratio (defaults to $scale-ratio value). Used by `type-scale()`.

##### `get-type()`,`type()`
###### `[font-size],[font-size-value]`
function for finding the value of an indexed type-size. H1-H6, p, and small are all indexed values. px, rem, and line-height are available.

##### `define-type()`
###### `[font-size], [property], [new value]`
Registers new values to type map. [Property] accepts px, rem, and line-height.

*/
/* SG
# Functions/Colors [[dev]]
/globals/_gl-color-functions.scss

##### `colors()`, `color()`
###### function(`$color-name` , `$tone:base` , `$opacity:1`)
Get a color value from the global `$$color` map. Darker and lighter tones are available by passing a second tone string (e.g. `background-color: colors(links, light)`).
Passing only a color name will default to the 'base' color.

[Reference](http://blog.12spokes.com/web-design-development/simple-css-color-management-with-sass/)


##### `combine-color-maps()`
###### function(`$map1` , `$map2`)
Specialized function used by `generate_color_variations()` to merge two color maps.


##### `generate-color-varations()`
###### function(`$map:` `$$colors` , `$functions: (tint, tint, tint, shade, shade, shade)`, `$increments:(20%, 40%, 80%, 20%, 40%, 80%)`, `$variations: (light, lighter, lightest, dark, darker, darkest)` , `$blending-colors: null`)
Takes base color values and generates a full color palette. Used by the `$$colors` map to create a project's palette, accessible via `colors()`.

**Arguments:**
`$map`: Color map you want to create variations of. Defaults to `$$colors`.
`$functions`: color functions used to generate variations (e.g. lighten or darken). Can use any `blend-()` function, provided `$blending-colors` are provided.
`$increments`: percentage amount to apply `$function` to each `$variations`.
`$variations`: actual names for each color tone when `colors()` used.
`$blending-colors`: used when a function is a `blend-()`. Can be a list or a single color.


##### `black-or-white()`, `set-text-color()`
###### function(`$color`)
Change text color based on background-color's darkness.


##### `pick-best-color()`
###### function(`$base`, `$colors`, `$tolerance:0`)
Determines most contrasting color of `$base`. `$colors` should be a list.

[Reference](https://gist.github.com/voxpelli/6304812)


##### `color-contrast()`
###### function(`$color1`, `$color2`)
Find contrast between two colors. Used by pick-best-color().

[Reference](https://github.com/LeaVerou/contrast-ratio/blob/gh-pages/color.js)


##### `color-luminance()`, `luma()`
###### function(`$color1`)
Find the relative luminance of a color. Used by color-contrast().

[Reference](https://github.com/LeaVerou/contrast-ratio/blob/gh-pages/color.js)


##### `@color-palette-output()`
###### mixin(`$selection`, `$color-map:``$$colors`)
Debugging tool that creates a pretty color palette (in columns) using psuedo selectors (nth-child required). Used for "color blocks" output, in style guide.
*/
/* SG
# Config/ [[dev]]

/globals/_config.scss

*/
/* SG
# Config/Debug Settings [[dev]]


##### `$$font-debug`
###### Boolean
Whether to include debug statements about fonts and line-heights as they're generated. Useful if you're getting weird values on auto-generated line-heights.

##### `$$silent-class-debug`
###### Boolean
Stores silent all auto-generated silent classes into a map that is then output as a comment at the end of the final css. Useful for getting an overview of values that are stored by the framework.

_NOTE: This will slow down compilation somewhat._

##### `$$debug-baseline`
###### Boolean
Adds style for a `baseline-on` class that will show a grid of the baseline on any element (most useful on the `body` or `html` tag). Makes vertical alignment easier.

*/
/* SG
# Config/Typography Settings [[dev]]

##### `$$base-font-size`
###### Pixel value
Font size all other values will use for calculation. Will be converted to `rems`.

##### `$$base-line-height`
###### Pixel value
Line-height for base font-size. Will be used to determine the vertical spacing values when `type-space()` is used.

##### `$$font-looseness`
###### Percentage
What to base the tightness/looseness of automatically-generated `line-heights`.

##### `$$auto-scale-type`
###### Boolean
Uses the `$scale-ratio` var to create font sizes for headings starting from the `$base-font-size`. Overwrites `$$type-[h#]-size` vars.

##### `$$scale-ratio`
###### Numeric (float)
Used for `$auto-scale-type` and for `modular-scale()`.

##### `$$show-baseline`
###### Boolean
Add styles for baseline grid classes.

##### `$$rem-px-fallback`
###### Boolean
Determines whether `rems()` conversion includes a pixel-value fallback for older browsers like IE8.

##### `$$[primary, secondary, monospace, icon]-font-stack`
###### String
Used wherever font-families are declared. Use `null` if nothing exists.

##### `$$use-web-fonts`
###### Boolean
Whether to generate `@font-face` values based on `$$font-file-name` (and the other `$font-` variables).

##### `$$font-file-name`
###### List (string)
Uses for automatically generated `@font-face` declarations. Describes the filename as well as the font-family name reference. _File names and @font-face values must be the same (e.g. 'opensans' and 'opensans.ttf').**Casing matters**._

##### `$$font-weights`
###### List (nested) (string)
Each parenthesis corresponds to each name in `$font-file-name`. Determines how many `@font-face` weights are generated per font.

##### `$$font-italics`
###### List (nested) (boolean)
Corresponds to each value in `$font-weights`. (e.g. if `$font-weights: (400,700),(200,400)` and `$font-italics: (true), (false,true)` then the first font will have italics in the 400 and 700 weights while second font will have italics in the 400 weight).

##### `$$font-include-woff2`
###### Boolean (optional list)
Determines whether woff2 formats be included in the `@font-face` generation. Can be a list if each font has different values (not recommended since woff2 is the most performant font-file format).

##### `$$font-include-eot`
###### Boolean (optional list)
Determines whether to generate `@font-face` values that point at an .eot file. Fallback for IE8.

##### `$$type-[h#]-size`
###### Pixel Value (optional list(pixel value, pixel or unitless value))
Variables used to generate heading (and small) font-sizes and line-heights. A secondary value will force the line-height to that value.

_NOTE: First value must be pixel values(or a function that generates a pixel value like `modular-scale()`), but the optional secondary value can be unitless._

*/
/* SG
# Config/General Settings [[dev]]

##### `$$breakpoints`
###### Map (`'breakpoint-name': 'breakpoint-value'`) (string)
Sets up variables for media-queries. Used in `media-query()`.

**Example Keys and Values**
```scss
$breakpoints: ('small':'(min-width: 320px)');
```

##### `$$display-classes`
###### Map (string: string)
Variable used to generate display classes. Key value pairs determine the class name and the display value (e.g. `'show':'block'` would create a `.show { display: block }`).

##### `$$spacing-classes`
###### Map (string: string)
Variable used to generate spacing classes. Classes are created via `@spacing-utilities()`. Classes are named with the following syntax: `prefix_direction_amount`

**Keys and Values**
* 'directions': Direction class suffixes
* 'amounts': Numeric value multiples (e.g. `2` or `-1`)
* 'names': Amount names
* 'prefixes': Prefixes for class names (for margins or padding)

```scss
//SCSS Input
$display-classes: (
	'directions': ('t', 'r'),
	'amounts': (2, -1),
	'names': ('2', 'neg'),
	'prefixes': ('space','pad')
);

//CSS output
.space_t_2 { margin-top: 2rem; }
.space_r_2 { margin-right: 2rem; }
.space_t_neg { margin-top: -1rem; }
.space_r_neg { margin-right: -1rem; }
.pad_t_2 { padding-top: 2rem;}
.pad_r_2 { padding-right: 2rem;}
//Negative padding is excluded automatically

@media only screen and (min-width:300px){...}
//repeated for all media-queries defined by $breakpoints-has-spacing-classes...

```

##### `$$breakpoints-has-alignment-classes`, `$$breakpoints-has-spacing-classes`, `$breakpoints-has-display-classes`, `$breakpoint-has-type-classes`
###### List (string)
Determines what utility classes get generated at `$$breakpoints`. The list's order determines cascade The list's order determines the output order. This is useful if you want one breakpoint to override another.

##### `$$colors`
###### Map (string: color)
Set up variable names to be used for color-palette. Dark and light values will be automatically generated. Variables can be accessed through the `color()` (e.g. `color(highlight, light)` ). The automatically generated styles can be modified in `colors/_colorfunctions.scss`

*/
/* SG
# Config/Grid Settings [[dev]]

##### `$$grid-gutter`
###### Pixel value
Space between grid items. Also used in `type-space()` for horizontal spacing units.


##### `$$grid-silent-classes`
###### Boolean
If set to false, actual grid classes will be output to CSS.


##### `$$grid-push`, `$$grid-pull`
###### Boolean
Determines whether to include extra grid classes for positional grid modifiers.


##### `$$grid-margin-adjustments`
###### Boolean
Used to push and pull with margins rather than 'right' and 'left'.


##### `$$grid-markup-fix`
###### Boolean
If set to `true`, html must have comments between grid items. Almost always set to `false`.


##### `$$grid-floats`
###### Boolean
If set to `true`, uses floats instead of inline-block.


##### `$$breakpoints-has-widths`, `$$breakpoints-has-push`, `$$breakpoints-has-pull`
###### List (string)
Determines what classes (widths, pushes, pulls) get generated at `$$breakpoints`. The list's order determines the output order. This is useful if you want one breakpoint to override another.

*/
/* SG
# Config/Slick Settings [[dev]]

##### `$$slick-[]-[]`
Configuration for slick carousel jQuery plugin.
[Reference](https://github.com/kenwheeler/slick/#sass-variables)

*/
/* SG
# Variables/Defaults [[dev]]

/globals/_gl-defaults.scss

-------------------------------------------

Default settings for variables.

##### `$$h[#]-lh`
###### boolean/unitless/pixel value
Parses `$$type-h[#]-size` for an optional line-height value, if none exists, just set to `true`. This value will be passed to `@type-font-size()`.


##### `$$type-magic-number`
###### Number
Abstraction of the base spacing unit used in any mixin or function that defines spacing units.

##### `$$type-magic-ratio`
###### Number
Ratio used to calculate the difference between font sizes and spacing units.


##### `$$type-headings`
###### List (number)
Used for defining automatic headings functions.

##### `$$type-modular-scale`
###### Number
Abstracts the `$$scale-ratio` and makes sure it's a positive number.


##### `$$all-breakpoints`
###### List
Stores all the names defined in `$$breakpoints` for use in abstract framework components so that if names are chagned, boilerplate media queries won't fail.


##### `$$breakpoint-smallest`
###### String
Grabs the first `$$breakpoints` name.


##### `$$breakpoint-largest`
###### String
Grabs the last `$$breakpoints` name.

##### `$$colors-list`
###### List (string)
The names of all colors in the `$$colors` map.

*/
/* SG
# Tools/ [[dev]]

globals/tools/

*/
/* SG
# Tools/Media Queries [[dev]]

globals/tools/_t-media-queries.scss

##### `@media-query()`, `@mq()`, `@media()`, `@breakpoint()`, `@bp()`
###### mixin(`$media-queries...`)
Enclose a block of code with a media query as named in `$breakpoints`. To create more consolodated code, most (if not all) media queries should be called through this mixin. Multiple media-queries can be defined, separated by a comma. This will place your content into multiple separate media-queries at once (useful if you need the same css at different breakpoints).

**Alternative Uses:**

* Passing multiple media queries separated by an `'and'` (quoted) to combine them, compiles to something like `@media screen and (min-width: 500px) and (max-width: 900px){}`.

* Passing a value like `min-width 1200px` or `max-height 300px` allows for arbitrary breakpoints.

* Passing `max 1200px 'and' smalls` will create a combined media-query with a predefined one from `$$breakpoints`.

* Passing `height smalls` will replace `width` with `height` within the `smalls` breakpoint. Similarly, using `min smalls` would replace 'max' with 'min'.

*/
/* SG
# Tools/Mixins [[dev]]

globals/tools/_t-mixins.scss

##### `@specificity()`
###### mixin(`$increase`: 1)
Specificity increaser. Useful for increasing specificity of a selector instead of using !important

[Reference](http://www.sitepoint.com/selector-specificity-css-preprocessors/)


##### `@opacity()`
###### mixin(`$opacity`)
Cross-browser (including IE8-) opacity.

[Reference](https://gist.github.com/jgv/745754)

##### `@border()`
###### mixin(`$border`)
Allows creating many border properties at once. Works like the standard border shorthand style but allows varied styles on different border directions.

```scss
//scss
.foo {
	@include border(2px 3px solid dashed dotted blue currentColor yellow);
}

//css
.foo {
	border-width: 2px 3px;
	border-style: solid dashed dotted;
	border-color: blue currentColor yellow;
}

```

##### `@button()`
###### mixin(`$bg-color`: `color('links')`, `$text-color`: `null`, `$border`: `null`, `$radius`: `null`, `$text-radius`: `null`, `$style`: `null`, `$inset`: `false`)
Generates common button styles, allowing for simple creation of more complex gradient styles. Intelligently excludes unnecessary styles from states like hover, focus, and active. _Does not generate hover, focus, or active psuedo selectors on its own._

**Accepted arguments:**

* `$bg-color`: Color values. This cannot accept null.
* `$text-color`: Color or null (null will let the mixin decide the best color based on contrast).
* `$border`: Any border properties (colors, styles, widths) or `null`. Uses the `@border()` mixin.
* `$radius`: `border-radius` values. `null` produces no border-radius property.
* `$style`: `null`, `shiny` or `reflective`.
   `shiny` creates a simple gradient backgroud based on the `$bg-color`.
   `reflective` creates a stacked gradient based on the `$bg-color`.
* `$inset`: Boolean. `True` adds a dark box-shadow inset.
   If combined with 'shiny' or 'reflective' `$style`, background gradients are inverted.

##### `@px-to-rems()`, `@rems()`
###### mixin(`$property`, `$sizes`, `$important`: `false`, `$base-font`: `$$base-font-size`)
`REM` generator used to create a property with a `rem` value and `px` fallback.


##### `@font-size()`, `@type-font-size()`
###### mixin(`$font-size`, `$line-height`: `true`, `$font-base`: `$$base-font-size`)
Quickly generate a font-size in rems, with a pixel fallback, based on the value we pass into the mixin. Optionally calculates line-height using `$$base-line-height`.

_`$line-height` also accepts a pixel value and will be converted to a unitless line-height._


##### `@type-space()`
###### mixin(`$properties`, `$multipliers...`, `important`:false)
Output REM values using the typographic grid. This is the prefered method of adding padding and margins because it enforces consistent spacing around all elements.

**Arguments:**
* `$properties`: Can be any `CSS` property that accepts a length value (e.g. `rem`). Also accepts multiple properties as a nested list (e.g. `(padding-left, padding-right)`).
* `$multipliers`: Accepts unitless values that get converted to `rem` units which are a multiple of the typographic grid. Can be multiple values, **separated by spaces**, in the case of `margin` or `padding`.
* `important`: Accepts `true` or `!important`.

```scss
// SCSS input

.foo {
	@include type-space(padding, 1 .25 .5, '!important');
}

// CSS output
.foo {
	padding: 24px 8px 12px 8px !important;
	padding: 1.5rem .375rem .75rem .375rem !important;
}
```

*/
/* SG
# Tools/Z-Index [[dev]]

globals/tools/_t-zindex.scss

##### `z()`,
###### function(`$layer`, `$modifier: false`)
Returns a numeric value (used for z-index) from a named layer, stored in `$$z-index`. Changing the modifier to anything other than `false` will add 1 plus however many times the value has been called. So, if you've called `z(head, true)` 5 times, and `head`'s default value is 100, you would get a value of 105.

The `$modifier` is useful if you'd like to closely layer z-indexes within the same module. It is rarely necessary, though since z-indexes stack.

*/
/* SG
# Tools/Font Face Generator [[dev]]

globals/tools/_t-fontface.scss

##### `@fonts()`
###### mixin(`$name`: `$$font-file-name`, `$path: $$font-file-location`, `$weights`: `$$font-weights`, `$italics`: `$$font-italics`))
A wrapper function for `@font-face()`. Takes global configuration variables and passes them to `@font-face()`. Loops through each `$name` based on `$weights` and `$italics`. Uses `$path` and `$name` to point to font files. Formats these variables so they can be passed to `@font-face()`.

Font file names must be the same as their CSS font-family values. Example: arial font, 400 weight would be arial400.ttf and the CSS value would be font-family: 'arial'; font-weight: 400.

##### `@font-face()`
###### mixin(`$name`, `$font-files`, `$weight:false`,` $style:false`, `$eot:false`)
Generates cross-browser font-face declarations when called.
$name is required, arbitrary, and what you will use in font stacks.
**Arguments:**
* $font-files is required using font-files('relative/location', 'format'). For best results use this order: woff, opentype/truetype, svg
* $eot is required by IE, and is a relative location of the eot file.
* $weight shows if the font is bold, defaults to normal
* $style defaults to normal, might be also italic

Based on [Compass' font-face mixin](http://compass-style.org/reference/compass/css3/font_face/).


*/
@font-face {
  font-family: "Asap";
  src: url("fonts/Asap-400.eot");
  src: url('fonts/Asap-400.eot?#iefix') format('embedded-opentype'), url("fonts/Asap-400.woff") format("woff"), url("fonts/Asap-400.ttf") format("truetype"), url("fonts/Asap-400.svg#Asap400") format("svg");
  font-weight: 400;
  font-style: normal; }

@font-face {
  font-family: "Asap";
  src: url("fonts/Asap-400-italic.eot");
  src: url('fonts/Asap-400-italic.eot?#iefix') format('embedded-opentype'), url('fonts/Asap-400-italic.woff') format('woff'), url('fonts/Asap-400-italic.ttf') format('truetype'), url('fonts/Asap-400-italic.svg#Asap400italic') format('svg');
  font-weight: 400;
  font-style: italic; }

@font-face {
  font-family: "Asap";
  src: url("fonts/Asap-700.eot");
  src: url('fonts/Asap-700.eot?#iefix') format('embedded-opentype'), url("fonts/Asap-700.woff") format("woff"), url("fonts/Asap-700.ttf") format("truetype"), url("fonts/Asap-700.svg#Asap700") format("svg");
  font-weight: 700;
  font-style: normal; }

@font-face {
  font-family: "Asap";
  src: url("fonts/Asap-700-italic.eot");
  src: url('fonts/Asap-700-italic.eot?#iefix') format('embedded-opentype'), url('fonts/Asap-700-italic.woff') format('woff'), url('fonts/Asap-700-italic.ttf') format('truetype'), url('fonts/Asap-700-italic.svg#Asap700italic') format('svg');
  font-weight: 700;
  font-style: italic; }

@font-face {
  font-family: "opensans";
  src: url("fonts/opensans-200.eot");
  src: url('fonts/opensans-200.eot?#iefix') format('embedded-opentype'), url("fonts/opensans-200.woff") format("woff"), url("fonts/opensans-200.ttf") format("truetype"), url("fonts/opensans-200.svg#opensans200") format("svg");
  font-weight: 200;
  font-style: normal; }

@font-face {
  font-family: "opensans";
  src: url("fonts/opensans-200-italic.eot");
  src: url('fonts/opensans-200-italic.eot?#iefix') format('embedded-opentype'), url('fonts/opensans-200-italic.woff') format('woff'), url('fonts/opensans-200-italic.ttf') format('truetype'), url('fonts/opensans-200-italic.svg#opensans200italic') format('svg');
  font-weight: 200;
  font-style: italic; }

@font-face {
  font-family: "opensans";
  src: url("fonts/opensans-400.eot");
  src: url('fonts/opensans-400.eot?#iefix') format('embedded-opentype'), url("fonts/opensans-400.woff") format("woff"), url("fonts/opensans-400.ttf") format("truetype"), url("fonts/opensans-400.svg#opensans400") format("svg");
  font-weight: 400;
  font-style: normal; }

@font-face {
  font-family: "opensans";
  src: url("fonts/opensans-400-italic.eot");
  src: url('fonts/opensans-400-italic.eot?#iefix') format('embedded-opentype'), url('fonts/opensans-400-italic.woff') format('woff'), url('fonts/opensans-400-italic.ttf') format('truetype'), url('fonts/opensans-400-italic.svg#opensans400italic') format('svg');
  font-weight: 400;
  font-style: italic; }

@font-face {
  font-family: "opensans";
  src: url("fonts/opensans-700.eot");
  src: url('fonts/opensans-700.eot?#iefix') format('embedded-opentype'), url("fonts/opensans-700.woff") format("woff"), url("fonts/opensans-700.ttf") format("truetype"), url("fonts/opensans-700.svg#opensans700") format("svg");
  font-weight: 700;
  font-style: normal; }

@font-face {
  font-family: "opensans";
  src: url("fonts/opensans-700-italic.eot");
  src: url('fonts/opensans-700-italic.eot?#iefix') format('embedded-opentype'), url('fonts/opensans-700-italic.woff') format('woff'), url('fonts/opensans-700-italic.ttf') format('truetype'), url('fonts/opensans-700-italic.svg#opensans700italic') format('svg');
  font-weight: 700;
  font-style: italic; }

/* SG
# Tools/Spacing Utilities [[dev]]

globals/tools/_t-spacing.scss

##### `layout-type()`
###### function(`$space-type:''`, `$space-direction:''`)
Parse strings to determine spacing types. Checks for certain characters within a string to determine whether to output padding or margin, followed by a direction. Private function used by `@spacing-utilities()`.


##### `@spacing-utilities()`
###### mixin(`$namespace:''`, `$config:()`)
Generates responsive spacing and padding classes. The `$namespace` argument is the media query's name, which will be appended to all generated classes. The `$config` argument is a map that allows JS-style arguments. Outputs class name as: `breakpoint_prefix_direction_amount`.

**Arguments:**
`$config`:
` silent:` boolean for outputting silent/non-silent classes.
` important:` whether to output !important after each declaration.
` directions:` names that get appended to class names.
` amounts:` how much to multiply spacing unit by `$$base-line-height`.
` names:` corresponding names for each `amounts` that gets appended to class names.
` prefixes:` first word in the class name. Must contain the words 'pad' and 'space'. Used by `layout-type()` to determine padding or margin.



##### `@spacing-utilities-init()`
###### mixin(`$breakpoints:` `$$all-breakpoints`, `$namespace:''`, `$config:(silent:true)`)
The responsive component to `@spacing-utilities()`. Invoke `@spacing-utilites()` with that loops through a set of media-queries defined in `$$breakpoints`. This is most useful for creating responsive spacing classes.

*/
/* SG
# Tools/Alignment Utilities [[dev]]

globals/tools/_t-alignment.scss

##### `@alignment-utilities()`
###### mixin(`$namespace:''`, `$silent:true`, `$important:false`)
Generates namespaced alignment classes.


##### `@alignment-utilities-init()`
###### mixin(`$breakpoints:` `$$all-breakpoints`, `$namespace:''`, `$silent:true`, `$important:false`)
The responsive component to `@alignment-utilities()`. Invoke `@alignment-utilites()` with that loops through a set of media-queries defined in `$$breakpoints`. This is most useful for creating responsive alignment classes.

*/
/* SG
# Tools/Type Utilities [[dev]]

globals/tools/_t-type.scss

##### `@type-utilities()`
###### mixin(`$namespace:''`, `$silent: true`, `$important: false)`
A set of typography-based utility classes that can be generated within media-queries via the `$namespace` argument. Can output silent or real css classes. Can also make declarations `!important`.

##### `@type-utilities-init()`
###### mixin(`$breakpoints`:`$$all-breakpoints`, `$namespace:''`, `$silent: true`, `$important: false`)
The responsive component to `@type-utilities()`. Invoke `@type-utilites()` with that loops through a set of media-queries defined in `$$breakpoints`. This is most useful for creating responsive typography-based utility classes.

*/
/* SG
# Tools/Display Utilities [[dev]]

globals/tools/_t-display.scss

##### `@display-utilities()`
###### mixin(`$namespace`:"", `$silent`:false, `$important`:true, `$class-list`:`$$display-classes`)
Generates classes with display properties defined in `$class-list`. Intelligently extends duplicated display properties.


##### `@display-utilities-init()`
###### mixin(`$breakpoints:` `$$all-breakpoints`, `$namespace:''`, `$config:(silent:true)`)
The responsive component to `@display-utilities()`. Invoke `@display-utilites()` with that loops through a set of media-queries defined in `$$breakpoints`. This is most useful for creating responsive display classes.

*/
/* SG
# Variables/Easing [[dev]]

globals/tools/_t-easings.scss

Each easing variable is a cubic-bezier value that specifies rate of change of an animation. See [easings](http://www.easings.net)

[Reference](https://github.com/matthewlein/Ceaser/blob/master/developer/)

*/
/* SG
# Grid [[dev]]

components/layout/_l-mixins.scss

-------------------------------------------

##### `$$grid-class-type`
###### String
Either a `%` or a `.` based on `$$grid-silent-classes`.


##### `$$human-readable-numerators`
###### List (string)
First words used to represent numbers corresponding to grid interval names.


##### `$$human-readable-denominators`
###### List (string)
Second words used to represent numbers corresponding to grid interval names.


##### `@silent-relative()`
###### mixin()
Allows for conditional `position: relative` for silent push or pull classes.

##### `@grid-setup()`
###### mixin()
Creates basic grid classes (listed below), called by `@grid-init()`.

_Note: `[% , .]` denotes a class that is either silent or

* ###### `%grid_reset`
 Useful for resetting the grid's effects without making full grid items.

* ###### `[% , .]grid`
 Wrapper class for grid widths. Puts a negative left margin of one unit. When not using floats, adds appropriate letter-spacing (for inline-block-based grid).

* ###### `[% , .]grid_item`
 Sets up a grid column. Uses column padding inherited from parent `%/.grid`.

* ###### `[% , .]grid_rev`
 Makes grid columns start from the right.

* ###### `[% , .]grid_right`
 Makes all grid columns align to the right.

* ###### `[% , .]grid_center`
 Makes all grid columns align to the center.

* ###### `[% , .]grid_middle`
 Makes all grid columns vertical align to the middle.

* ###### `[% , .]grid_bottom`
 Makes all grid columns vertical align to the bottom.

* ###### `[% , .]grid_full`
 Eliminates padding between grid columns.

* ###### `[% , .]grid_narrow`
 Reduces the padding between grid columns.

* ###### `[% , .]grid_wide`
 Increases the padding between grid columns.

##### `@width-setup()`
###### mixin(`$namespace`:"")
 Uses `$$human-readable-numerators` and `$$human-readable-denominators` to create percentage widths based on `$$grid-columns`.

##### `@push-setup()`
###### mixin(`$namespace`:"")
 Uses `$$human-readable_numerators` and `$$human-readable_denominators` to create percentage pushes (`left` or `margin-left`) based on `$$grid-columns`.

##### `@pull-setup()`
###### mixin(`$namespace`:"")
 Uses `$$human-readable_numerators` and `$$human-readable_denominators` to create percentage pull (`right` or negative `margin-left`) based on `$$grid-columns`.

##### `@grid-init()`
###### mixin()
 Calls the above mixins(`@grid-setup()`, `@width-setup()`, `@push-setup()`, `@pull-setup()`). Using the namespaces and media-queries defined in `$$breakpoint-has-widths`, `$$breakpoint-has-push`, and `$$breakpoint-has-pull`.

*/
html,
body {
  min-height: 100%; }

body {
  font-size: 16px;
  font-size: 1rem;
  line-height: 1.5; }

abbr[title],
dfn[title] {
  cursor: help; }

u,
ins {
  text-decoration: none; }

ins {
  border-bottom: 1px solid; }

mark {
  background-color: #c7d5e1; }

article,
aside,
details,
figcaption,
figure,
footer,
header,
main,
menu,
nav,
section,
summary,
hr {
  display: block; }

a {
  cursor: pointer;
  background-color: transparent;
  color: #0d497b; }
  a:hover, a:focus {
    color: #5894bd; }
  a:active {
    color: #082c4a; }
  a:focus {
    outline: thin dotted; }
  a:active, a:hover {
    outline: 0; }

hr {
  height: 2px;
  border-top: 2px solid #e4eaf3;
  margin: 24px 0;
  margin:  1.5rem 0; }

/*! sanitize.css v3.0.0 | CC0 1.0 Public Domain | github.com/10up/sanitize.css */
/*
 * Normalization
 */
audio:not([controls]) {
  display: none; }

button {
  overflow: visible;
  -webkit-appearance: button; }

html {
  -ms-overflow-style: -ms-autohiding-scrollbar;
  overflow-y: scroll;
  -webkit-text-size-adjust: 100%;
  -ms-text-size-adjust: 100%; }

input {
  -webkit-border-radius: 0; }
  input[type="button"], input[type="reset"], input[type="submit"] {
    -webkit-appearance: button; }
  input[type="number"] {
    width: auto; }
  input[type="search"] {
    -webkit-appearance: textfield; }
    input[type="search"]::-webkit-search-cancel-button, input[type="search"]::-webkit-search-decoration {
      -webkit-appearance: none; }

pre {
  overflow: auto; }

progress {
  display: inline-block; }

svg:not(:root) {
  overflow: hidden; }

template {
  display: none; }

textarea {
  overflow: auto;
  resize: vertical; }

[hidden] {
  display: none; }

/*
 * Universal inheritance
 */
*,
::before,
::after {
  -webkit-box-sizing: inherit;
     -moz-box-sizing: inherit;
          box-sizing: inherit; }

* {
  font-size: inherit;
  line-height: inherit; }

::before,
::after {
  text-decoration: inherit;
  vertical-align: inherit; }

/*
 * Opinionated defaults
 */
*,
::before,
::after {
  border-style: solid;
  border-width: 0; }

* {
  background-repeat: no-repeat;
  margin: 0;
  padding: 0; }

:root {
  background-color: #f6f8fb;
  -webkit-box-sizing: border-box;
     -moz-box-sizing: border-box;
          box-sizing: border-box;
  color: #0a1c2b;
  cursor: inherit;
  font: 100%/1.5 "opensans", "Helvetica Neue", "Helvetica", "Arial", sans-serif;
  text-rendering: optimizeLegibility; }

a {
  text-decoration: none; }

audio,
canvas,
iframe,
img,
svg,
video {
  vertical-align: middle; }

button,
input,
select,
textarea {
  color: inherit;
  font-family: inherit;
  font-style: inherit;
  font-weight: inherit; }

button,
[type="button"],
[type="date"],
[type="datetime"],
[type="datetime-local"],
[type="email"],
[type="month"],
[type="number"],
[type="password"],
[type="reset"],
[type="search"],
[type="submit"],
[type="tel"],
[type="text"],
[type="time"],
[type="url"],
[type="week"],
select,
textarea {
  min-height: 1.5; }

code,
kbd,
pre,
samp {
  font-family: "Consolas", "Andale Mono WT", "Andale Mono", "Lucida Console", "Lucida Sans Typewriter", "DejaVu Sans Mono", "Bitstream Vera Sans Mono", "Liberation Mono", "Nimbus Mono L", "Monaco", "Courier New", "Courier", monospace, monospace; }

nav ol,
nav ul {
  list-style: none; }

select {
  -moz-appearance: none;
  -webkit-appearance: none; }
  select::-ms-expand {
    display: none; }
  select::-ms-value {
    color: currentColor; }

table {
  border-collapse: collapse;
  border-spacing: 0; }

::-moz-selection {
  background-color: #3c6c95;
  color: #FFF;
  text-shadow: none; }

::selection {
  background-color: #3c6c95;
  color: #FFF;
  text-shadow: none; }

[aria-busy="true"] {
  cursor: progress; }

[aria-controls] {
  cursor: pointer; }

[aria-disabled] {
  cursor: default; }

[hidden][aria-hidden="false"] {
  clip: rect(0 0 0 0);
  display: inherit;
  position: absolute; }
  [hidden][aria-hidden="false"]:focus {
    clip: auto; }

/*------------------
/*  Base styles
/*------------------*/
[class*="list_bordered"], .list_inline, .breadcrumbs {
  list-style: none;
  margin-left: 0; }
  [class*="list_bordered"] > li, .list_inline > li, .breadcrumbs > li {
    list-style-image: none;
    list-style-type: none;
    margin-left: 0; }

h1, h2, h3, h4, h5, h6 {
  font-family: "Asap", "Garamond", "Baskerville", "Baskerville Old Face", "Hoefler Text", "Times New Roman", serif; }

p, address, pre, table {
  margin: 0 0 24px;
  margin:  0 0 1.5rem; }

.visually_hidden {
  border: 0;
  clip: rect(0 0 0 0);
  clip: rect(0px, 0px, 0px, 0px);
  width: 1px;
  height: 1px;
  margin: -1px;
  overflow: hidden;
  padding: 0;
  position: absolute;
  -webkit-transition: all 300ms ease-in-out;
          transition: all 300ms ease-in-out; }

h1, h2, h3, h4, h5, h6 {
  margin-bottom: 24px;
  margin-bottom: 1.5rem; }

h1 {
  font-size: 77px;
  font-size: 4.8125rem;
  line-height: 1; }

h2 {
  font-size: 49px;
  font-size: 3.0625rem;
  line-height: 1.22449; }

h3 {
  font-size: 40px;
  font-size: 2.5rem;
  line-height: 1.2; }

h4 {
  font-size: 32px;
  font-size: 2rem;
  line-height: 1.125; }

h5 {
  font-size: 25px;
  font-size: 1.5625rem;
  line-height: 1.44; }

h6 {
  font-size: 20px;
  font-size: 1.25rem;
  line-height: 1.8; }

h1 + p, h2 + p, h3 + p, h4 + p, h5 + p, h6 + p {
  margin-top: -24px;
  margin-top: -1.5rem; }

small {
  display: inline-block;
  font-size: 12px;
  font-size: 0.75rem;
  line-height: 2; }

b,
strong {
  font-weight: bold; }

pre {
  white-space: pre;
  white-space: pre-wrap;
  word-wrap: break-word;
  overflow: auto; }

sub,
sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline; }

sup {
  top: -0.5em; }

sub {
  bottom: -0.25em; }

code,
kbd,
pre,
samp {
  font-family: "Consolas", "Andale Mono WT", "Andale Mono", "Lucida Console", "Lucida Sans Typewriter", "DejaVu Sans Mono", "Bitstream Vera Sans Mono", "Liberation Mono", "Nimbus Mono L", "Monaco", "Courier New", "Courier", monospace;
  _font-family: 'courier new', monospace;
  font-size: 1em; }

blockquote {
  text-indent: -.5ex; }

blockquote {
  margin: 0 0 24px 24px;
  margin:  0 0 1.5rem 1.5rem;
  quotes: '“' '”'; }
  blockquote p:before {
    content: "“";
    content: open-quote; }
  blockquote p:after {
    content: "";
    content: no-close-quote; }
  blockquote p:last-of-type:after {
    content: "”";
    content: close-quote; }

q {
  *quotes: none;
  quotes: "‘" "’" "“" "”";
  overflow: visible; }
  q:before {
    content: "‘";
    content: open-quote; }
  q:after {
    content: "’";
    content: close-quote; }
  q q:before {
    content: "“";
    content: open-quote; }
  q q:after {
    content: "”";
    content: close-quote; }
  q:first-child {
    display: inline-block;
    text-indent: -0.22em; }

table {
  width: 100%;
  background-color: transparent;
  border-collapse: collapse;
  border-spacing: 0; }

th,
td {
  padding: 24px 0 12px;
  padding:  1.5rem 0 0.75rem;
  text-align: left;
  vertical-align: top;
  border: 0;
  border-bottom: 1px;
  border-top-width: 0px;
  border-color: #e4eaf3;
  border-style: solid; }

thead th {
  vertical-align: bottom;
  padding: 24px 0 0;
  padding:  1.5rem 0 0; }

legend {
  display: table;
  white-space: normal; }

button,
input {
  line-height: normal; }

button,
input[type="button"],
input[type="reset"],
input[type="submit"] {
  font-family: inherit;
  font-size: inherit;
  line-height: inherit;
  border: 0;
  -webkit-appearance: button;
  cursor: pointer;
  *overflow: visible; }

button,
input,
select,
textarea {
  background-color: #fff; }

button::-moz-focus-inner,
input::-moz-focus-inner {
  border: 0;
  padding: 0; }

input[type="checkbox"],
input[type="radio"] {
  -webkit-box-sizing: border-box;
     -moz-box-sizing: border-box;
          box-sizing: border-box;
  padding: 0;
  *height: 13px;
  *width: 13px; }

button[disabled],
input[disabled] {
  cursor: default !important; }

input[type="number"]::-webkit-inner-spin-button,
input[type="number"]::-webkit-outer-spin-button {
  height: auto; }

input[type="search"] {
  -webkit-appearance: none;
     -moz-appearance: none;
          appearance: none;
  -webkit-box-sizing: border-box;
     -moz-box-sizing: border-box;
          box-sizing: border-box; }

select
input[type="submit"],
input[type="button"],
input[type="image"],
input[type="reset"] {
  -moz-border-radius: 0;
       border-radius: 0;
  -webkit-border-radius: 0; }

ul,
ol,
dd,
menu {
  margin: 0 0 24px 24px;
  margin:  0 0 1.5rem 1.5rem; }

li > ul,
li > ol {
  margin-bottom: 0; }

nav ol,
nav ul {
  margin-left: 0; }

.wrap {
  margin: 0 auto;
  max-width: 1350px;
  display: block !important;
  float: none;
  padding: 24px 0;
  padding:  1.5rem 0; }
  @media only screen and (max-width: 480px) {
    .wrap {
      width: 95%; } }

.hero {
  display: table;
  width: 100%;
  min-height: 50vh;
  -webkit-background-size: cover;
          background-size: cover;
  color: #fff;
  position: relative;
  background-image: url("../images/logo.svg");
  padding: 24px 0 24px;
  padding:  1.5rem 0 1.5rem; }

.hero_body {
  display: table-cell;
  vertical-align: middle;
  max-width: 99%; }

.row > *, .box {
  letter-spacing: normal;
  word-spacing: normal; }

.row {
  list-style: none;
  margin: 0;
  padding: 0;
  margin-left: -32px;
  margin-left: -2rem;
  letter-spacing: -0.35em; }

.opera:-o-prefocus,
.row {
  word-spacing: -0.43em; }

.column {
  display: inline-block;
  padding-left: 32px;
  padding-left: 2rem;
  vertical-align: top;
  width: 100%;
  letter-spacing: normal;
  word-spacing: normal; }

.row_full {
  margin-left: 0; }
  .row_full > .column {
    padding-left: 0; }

.row_narrow {
  margin-left: -16px;
  margin-left: -1rem; }
  .row_narrow > .column {
    padding-left: 16px;
    padding-left: 1rem; }

.quarter {
  width: 25%; }

.half {
  width: 50%; }

.column, .isolate, .arrange, .arrange_fill, .arrange_body {
  width: 100%; }

@media only screen and (min-width: 481px) and (max-width: 640px) {
  .wrap {
    width: 91.66667%; }
  .add_on {
    width: 20%; }
  .wide_content {
    width: 80%; } }

@media only screen and (min-width: 641px) {
  .wrap {
    width: 90%; }
  .add_on {
    width: 16.66667%; }
  .wide_content {
    width: 83.33333%; }
  .sidebar {
    width: 25%; }
  .content {
    width: 75%; } }

.box {
  padding: 24px;
  padding: 1.5rem; }

.breadcrumbs {
  padding-right: 32px;
  padding-right: 2rem; }

.table_striped th, .table_striped td, .isolate_body, .arrange_body {
  padding-left: 16px;
  padding-left: 1rem; }

.table_striped th, .table_striped td {
  padding-right: 16px;
  padding-right: 1rem; }

.box_open {
  padding-left: 0 ; }

.box_open {
  padding-right: 0 ; }

[class*="list_bordered"] {
  margin-top: 24px;
  margin-top: 1.5rem; }

table, [class*="list_bordered"], .box, .isolate, .arrange {
  margin-bottom: 24px;
  margin-bottom: 1.5rem; }

.breadcrumbs > li,
.breadcrumb, .list_nav {
  margin-left: 0 ; }

[class*="list_bordered"] > li, .list_nav a, .box_square, .isolate, .isolate_media, .isolate_media img, .isolate_body, .arrange_media img, .arrange_fit img {
  display: block; }

.arrange {
  display: table; }

.arrange_fill, .arrange_fit, .arrange_media, .arrange_body {
  display: table-cell; }

th, .table_responsive thead + tbody td:before, .tab,
.list_nav a {
  font-weight: 700 ;
  -webkit-font-smoothing: antialiased; }

.tab,
.list_nav a {
  font-size: 12.8px;
  font-size: 0.8rem;
  line-height: 1.875; }

@media only screen and (max-width: 640px) {
  .table_scroll,
  .table_pin {
    font-size: 12.8px;
    font-size: 0.8rem;
    line-height: 1.875; } }

/* SG
# Buttons
Applying the `btn` class to anything will make it look like a button. Always declare `type="button"` on `<button>` elements for proper accessibility.

```html_example
<button type="button" class="btn">Button</button>

<a href="" class="btn">Faux Button</a>
```

*/
.btn {
  background: transparent;
  color: inherit;
  text-align: center;
  text-decoration: none;
  display: inline-block;
  border: 2px solid currentColor;
  -moz-border-radius: 4px;
       border-radius: 4px;
  font-weight: 700;
  padding: 0 .5em;
  padding-top: 12px;
  padding-top: 0.75rem;
  padding-bottom: 12px;
  padding-bottom: 0.75rem;
  -webkit-transition: background .1s ease-in-out, border-color .07s ease-out, color .1s ease-in-out;
          transition: background .1s ease-in-out, border-color .07s ease-out, color .1s ease-in-out; }
  .btn:focus {
    outline: none;
    background: #0d497b;
    color: #FFF;
    text-decoration: none;
    border-color: #0d497b; }
  .btn:hover {
    background: rgba(13, 73, 123, 0.6);
    color: #f3f6f8;
    text-decoration: none;
    border-color: #5894bd; }
  .btn:active {
    background: #0d497b;
    color: #fff;
    text-decoration: none;
    border-color: #0d497b;
    -webkit-box-shadow: 0 0 4px 1px rgba(88, 148, 189, 0.3);
       -moz-box-shadow: 0 0 4px 1px rgba(88, 148, 189, 0.3);
            box-shadow: 0 0 4px 1px rgba(88, 148, 189, 0.3);
    outline: none; }

/* SG
# Lists/Bordered Lists

Creates a list with borders above and below each list item. Appending `list_bordered` with `_short` will make reduce the padding between each item.

```html_example
<ul class="list_bordered">
    <li>List Item</li>
    <li>List Item</li>
    <li>List Item</li>
</ul>

<ul class="list_bordered_short">
    <li>List Item</li>
    <li>List Item</li>
    <li>List Item</li>
</ul>
```
*/
[class*="list_bordered"] > li {
  border-top: 1px solid #e4eaf3;
  padding-top: 24px;
  padding-top: 1.5rem;
  padding-bottom: 24px;
  padding-bottom: 1.5rem;
  margin-bottom: -1px; }

[class*="list_bordered"] > li:first-child {
  border-top-color: transparent; }

.list_bordered_short > li {
  padding-top: 12px;
  padding-top: 0.75rem;
  padding-bottom: 12px;
  padding-bottom: 0.75rem; }

/* SG
# Lists/Inline Lists

A list where each item is in a row, with spacing to the right of each item

```html_example
<ul class="list_inline">
    <li>List Item</li>
    <li>List Item</li>
    <li>List Item</li>
</ul>
```
*/
.list_inline > li {
  display: inline-block;
  padding-left: 0;
  width: auto;
  vertical-align: middle;
  padding-right: 16px;
  padding-right: 1rem; }
  .list_inline > li:last-child {
    padding-right: 0; }

/* SG
# Lists/Breadcrumbs

A list where each item is in a row, with a &#x25B8; between each item.

```html_example
<ul class="breadcrumbs">
    <li class="breadcrumb">List Item</li>
    <li class="breadcrumb">List Item</li>
    <li class="breadcrumb">List Item</li>
</ul>
```
*/
.breadcrumbs > li,
.breadcrumb {
  display: inline-block;
  white-space: nowrap;
  margin-left: 0; }
  .breadcrumbs > li a,
  .breadcrumb a {
    display: block; }
  .breadcrumbs > li:after,
  .breadcrumb:after {
    content: "\25B8";
    display: inline-block; }

/* SG
# Lists/Navigation List

List where anchor tags fill the space of their containers. Useful as a modifier class. Can be used on any item with multiple child anchors (doesn't have to be an `ol` or `ul`).

```html_example
<ul class="list_nav">
    <li>
        <a href="#">List Item</a>
    </li>
    <li>
        <a href="#">List Item</a>
    </li>
    <li>
        <a href="#">List Item</a>
    </li>
</ul>
```
*/
.list_nav {
  list-style: none; }
  .list_nav > li {
    list-style-image: none;
    list-style-type: none;
    margin-left: 0; }
  .list_nav a {
    padding: 12px;
    padding: 0.75rem; }

/* SG
# Tabs/

A way to show groups of content, with buttons to toggle between them (like tabs in a folder or browser window).

###### Set Up

Tabs start out as simple anchor + element pairings (with the anchor's href referring to an element's ID).

Using `.tab_button` on the anchor, and `.tab_content` on the element, javascript will group the tabs together until an element breaks the pattern. It will then attach the navigation and event handlers.

```html_example
<a href="#tab1" class="tab_button">Tab 1</a>
<div id="tab1" class="tab_content">
	Content Here
</div>
<a href="#tab2" class="tab_button">Tab 2</a>
<div id="tab2" class="tab_content">
	Secondary Content Here
</div>
```
*/
.tab_button, .tab, .tab:hover {
  color: #fff; }

.tab_button, .tab {
  background-color: #5894bd; }

.tab_button.active, .tab_content, .tab {
  border-color: #0d497b; }

.tab_button.active, .tab_content {
  background-color: #fff; }

.tabbed {
  margin-bottom: 24px;
  margin-bottom: 1.5rem;
  min-height: 72px;
  min-height: 4.5rem; }

.tab_button {
  border-style: solid;
  width: 100%;
  cursor: pointer;
  display: none;
  line-height: 3;
  text-decoration: none;
  margin-bottom: 0;
  padding-left: 16px;
  padding-left: 1rem;
  padding-right: 16px;
  padding-right: 1rem;
  border-width: 1px;
  border-color: #1e568c;
  position: relative;
  z-index: 1;
  border-bottom-width: 0; }
  .tab_button.active {
    margin-bottom: -24px;
    margin-bottom: -1.5rem; }
  .tab_button.active {
    color: #0d497b;
    border-bottom-color: transparent;
    z-index: 2; }
    .tab_button.active:hover {
      cursor: default; }

.tab_content {
  border-width: 1px;
  border-style: solid;
  -moz-border-radius: 0 2px 2px 2px;
       border-radius: 0 2px 2px 2px;
  position: relative;
  z-index: 1;
  padding: 24px;
  padding: 1.5rem; }
  .tab_content > :last-child {
    margin-bottom: 0; }

.tab_hidden {
  display: none; }

.tabs + .tab_button {
  -moz-border-radius: 2px 2px 0 0;
       border-radius: 2px 2px 0 0; }

.tab_accordion > .tabs {
  display: none; }

.tabs {
  position: relative; }

.tab {
  position: relative;
  display: inline-block;
  vertical-align: bottom;
  padding: 12px;
  padding: 0.75rem;
  margin-bottom: 0;
  margin-right: 2px;
  top: 2px;
  text-align: center;
  text-decoration: none;
  border-bottom-color: transparent;
  -moz-border-radius: 2px 2px 0 0;
       border-radius: 2px 2px 0 0;
  cursor: pointer;
  -webkit-transition: background-color 100ms ease-out, border-color 200ms ease-in-out;
          transition: background-color 100ms ease-out, border-color 200ms ease-in-out;
  border-style: solid;
  z-index: 0;
  border-width: 1px; }
  .tab:hover {
    background-color: #235495; }

.tab.active {
  outline: none;
  background-color: #fff;
  z-index: 2;
  top: 1px;
  color: #0d497b;
  border-bottom-width: 0; }

.table_fixed {
  table-layout: fixed; }

.table_responsive thead + tbody td:before {
  content: attr(data-th) " ";
  padding-right: .25em;
  display: none; }

.table_striped th, .table_striped td {
  border-color: #ced2d5;
  border-style: solid; }

.table_striped tr:nth-child(odd) td {
  background-color: #e4eaf3;
  background-color: rgba(228, 234, 243, 0.75); }

@media only screen and (max-width: 640px) {
  .table_wrapper, .table_responsive td,
  .table_responsive th {
    overflow: hidden; }
  .table_wrapper, .table_responsive td,
  .table_responsive th {
    position: relative; }
  .table_responsive td,
  .table_responsive th, .table_pin th,
  .table_pin td {
    white-space: nowrap; }
  .table_wrapper {
    margin-bottom: 24px;
    margin-bottom: 1.5rem;
    border: 1px solid #ced2d5;
    -moz-border-radius: 2px;
         border-radius: 2px; }
  .table_responsive {
    margin-bottom: 0; }
    .table_responsive td,
    .table_responsive th {
      padding-left: 8px;
      padding-left: 0.5rem; }
    .table_responsive th:first-child,
    .table_responsive td:first-child,
    .table_responsive td:first-child,
    .table_responsive.table_pin td {
      display: none; }
  .table_pin {
    position: absolute;
    left: 0;
    top: 0;
    width: 25%;
    background: #f6f8fb;
    -webkit-box-shadow: 3px 0 2px rgba(85, 103, 118, 0.2);
       -moz-box-shadow: 3px 0 2px rgba(85, 103, 118, 0.2);
            box-shadow: 3px 0 2px rgba(85, 103, 118, 0.2); }
    .table_pin table {
      table-layout: auto;
      border-right: none;
      border-left: none;
      width: 100%; }
    .table_pin th,
    .table_pin td {
      padding-left: 4.8px;
      padding-left: 0.3rem; }
    .table_pin td:last-child {
      border-bottom: 0; }
  .table_scroll,
  .table_pin {
    overflow: scroll;
    overflow-y: hidden; }
  .table_scroll table {
    margin-left: 25%; } }

.box > :last-child {
  margin-bottom: 0; }

.box_open {
  border-width: 1px;
  border-style: solid;
  border-top-color: #e4eaf3;
  border-bottom-color: #e4eaf3;
  border-left-color: transparent;
  border-right-color: transparent; }

.box_closed {
  border: 1px solid #e4eaf3; }

.box_square {
  position: relative;
  overflow: hidden;
  word-break: break-word; }
  @media only screen and (max-width: 640px) {
    .box_square {
      max-height: 120px;
      max-height: 7.5rem; } }
  .box_square .body {
    padding: 12px 12px 0;
    padding:  0.75rem 0.75rem 0;
    display: block;
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    text-align: left; }
  .box_square:before {
    content: " ";
    margin-top: 100%;
    display: block;
    font-size: 0;
    color: transparent; }

.pano:before {
  margin-top: 75%; }

.wide:before {
  margin-top: 50%; }

/* SG
# Typography/Heading sizes

Heading sizes should be used in a hierarchical manner, and not used simply for their size. To override a heading size, use a class with the cooresponding heading name.

```html_example
<h1>Heading 1</h1>
<h2>Heading 2</h2>
<h3>Heading 3</h3>
<h4>Heading 4</h4>
<h5>Heading 5</h5>
<h6>Heading 6</h6>

<h1 class="h4">Heading 1 with an h4 class</h1>

```
*/
.h1, .h2, .h3, .h4, .h5, .h6 {
  margin-bottom: 24px;
  margin-bottom: 1.5rem; }

.h1 {
  font-size: 77px;
  font-size: 4.8125rem;
  line-height: 1; }

.h2 {
  font-size: 49px;
  font-size: 3.0625rem;
  line-height: 1.22449; }

.h3 {
  font-size: 40px;
  font-size: 2.5rem;
  line-height: 1.2; }

.h4 {
  font-size: 32px;
  font-size: 2rem;
  line-height: 1.125; }

.h5 {
  font-size: 25px;
  font-size: 1.5625rem;
  line-height: 1.44; }

.h6 {
  font-size: 20px;
  font-size: 1.25rem;
  line-height: 1.8; }

.h1 + p, .h2 + p, .h3 + p, .h4 + p, .h5 + p, .h6 + p, .h1 + .p, .h2 + .p, .h3 + .p, .h4 + .p, .h5 + .p, .h6 + .p {
  margin-top: -24px;
  margin-top: -1.5rem; }

/* SG

# Layout/Isolation object

Isolates an image from text wrapping underneath. Useful for creating an association between an image and text. Often used with an icon or avatar. Adding other classes to the `isolate_body` can create a more stylized version.

```html_example
<img class="isolate_media" src="http://placehold.it/300x50" alt="placeholder image">
<p class="isolate_body">
	Content that sits to the right of the image but will never wrap underneath the image to the left. Etiam porta sem malesuada magna mollis euismod. Cras justo odio, dapibus ac facilisis in, egestas eget quam.
</p>

```
*/
.isolate_media, .isolate_body {
  overflow: hidden;
  _overflow: visible;
  zoom: 1; }

.isolate_media {
  float: left; }

/* SG

# Layout/Arrangement object

Creates an image-content block that vertically aligns images and text (centered, bottom, or top).
Children can be named four things:
* `arrange_fit` or `arrange_media` will create a block that fits the width of its content (useful for images).
* `arrange_fill` will fill the remaining space.
* `arrange_body` are similar but have some default styling.

You may also combine this with grid items like `row` and `column` if you wish to add gutters between elements.

_NOTE: Do not mistake this for true grid items. This should only be used for the arrangement of a few items. It is "squishy", but not technically responsive._

```html_example
<div class="arrange">
	<div class="arrange_media">
		<img src="http://placehold.it/60x50" alt="placeholder image">
	</div>
	<div class="arrange_body">
		Content that is vertically (middle) aligned with the image.
	</div>
</div>

<!-- Bottom Arrangement -->
<div class="arrange arrange_bottom">
	<div class="arrange_media">
		<img src="http://placehold.it/60x50" alt="placeholder image">
	</div>
	<div class="arrange_body">
		Content that is bottom aligned to the image.
	</div>
</div>

<!-- Equal width arrangement-->
<div class="arrange arrange_equal">
	<div class="arrange_fill">
		Equal width columns.
	</div>
	<div class="arrange_fill">
		<img class="show" src="http://placehold.it/120x80" alt="placeholder image" style="margin: auto;">
	</div>
	<div class="arrange_fill">
		Can be as many columns as you want.
	</div>
</div>

```
*/
.arrange {
  table-layout: auto;
  min-width: 100%; }
  .arrange_media img, .arrange_fit img {
    max-width: none; }
  .arrange_media, .arrange_body, .arrange_fill, .arrange_fit {
    vertical-align: middle; }
    .arrange_top > .arrange_media, .arrange_top > .arrange_body, .arrange_top > .arrange_fill, .arrange_top > .arrange_fit {
      vertical-align: top; }
    .arrange_bottom > .arrange_media, .arrange_bottom > .arrange_body, .arrange_bottom > .arrange_fill, .arrange_bottom > .arrange_fit {
      vertical-align: bottom; }

.arrange_equal {
  table-layout: fixed; }
  .arrange_equal > .arrange_fill,
  .arrange_equal > .arrange_fit {
    width: 1%; }

/* SG
# Color Blocks
A good way to look over your color pallete.

Include a bunch of elements with `class="color-blocks"`, and the css will do the rest. Requires `@color-palette-output()` to generate. Uses `$$colors` map.

```html_example
<div class="color-block"></div><div class="color-block"></div><div class="color-block"></div><div class="color-block"></div><div class="color-block"></div><div class="color-block"></div><div class="color-block"></div>
<div class="color-block"></div><div class="color-block"></div><div class="color-block"></div><div class="color-block"></div><div class="color-block"></div><div class="color-block"></div><div class="color-block"></div>
<div class="color-block"></div><div class="color-block"></div><div class="color-block"></div><div class="color-block"></div><div class="color-block"></div><div class="color-block"></div><div class="color-block"></div>
<div class="color-block"></div><div class="color-block"></div><div class="color-block"></div><div class="color-block"></div><div class="color-block"></div><div class="color-block"></div><div class="color-block"></div>
<div class="color-block"></div><div class="color-block"></div><div class="color-block"></div><div class="color-block"></div><div class="color-block"></div><div class="color-block"></div><div class="color-block"></div>
<div class="color-block"></div><div class="color-block"></div><div class="color-block"></div><div class="color-block"></div><div class="color-block"></div><div class="color-block"></div><div class="color-block"></div>
<div class="color-block"></div><div class="color-block"></div><div class="color-block"></div><div class="color-block"></div><div class="color-block"></div><div class="color-block"></div><div class="color-block"></div>
```
*/
.color-block:nth-child(1) {
  background-color: #0a1c2b;
  color: #FFF;
  padding: 2% 1% 2.5%; }
  .color-block:nth-child(1):before {
    content: "type"; }
  .color-block:nth-child(1):after {
    content: "#0a1c2b"; }

.color-block:nth-child(2) {
  background-color: #0d497b;
  color: #FFF;
  padding: 2% 1% 2.5%; }
  .color-block:nth-child(2):before {
    content: "links"; }
  .color-block:nth-child(2):after {
    content: "#0d497b"; }

.color-block:nth-child(3) {
  background-color: #f6f8fb;
  color: #000;
  padding: 2% 1% 2.5%; }
  .color-block:nth-child(3):before {
    content: "bg"; }
  .color-block:nth-child(3):after {
    content: "#f6f8fb"; }

.color-block:nth-child(4) {
  background-color: #0c639a;
  color: #FFF;
  padding: 2% 1% 2.5%; }
  .color-block:nth-child(4):before {
    content: "primary"; }
  .color-block:nth-child(4):after {
    content: "#0c639a"; }

.color-block:nth-child(5) {
  background-color: #bf0516;
  color: #FFF;
  padding: 2% 1% 2.5%; }
  .color-block:nth-child(5):before {
    content: "accent"; }
  .color-block:nth-child(5):after {
    content: "#bf0516"; }

.color-block:nth-child(6) {
  background-color: #d7dde5;
  color: #000;
  padding: 2% 1% 2.5%; }
  .color-block:nth-child(6):before {
    content: "function"; }
  .color-block:nth-child(6):after {
    content: "#d7dde5"; }

.color-block:nth-child(7) {
  background-color: #bada55;
  color: #000;
  padding: 2% 1% 2.5%; }
  .color-block:nth-child(7):before {
    content: "success"; }
  .color-block:nth-child(7):after {
    content: "#bada55"; }

.color-block:nth-child(8) {
  background-color: #556776;
  color: #FFF; }
  .color-block:nth-child(8):before {
    content: "type light"; }
  .color-block:nth-child(8):after {
    content: "#556776"; }

.color-block:nth-child(9) {
  background-color: #5894bd;
  color: #FFF; }
  .color-block:nth-child(9):before {
    content: "links light"; }
  .color-block:nth-child(9):after {
    content: "#5894bd"; }

.color-block:nth-child(10) {
  background-color: #fbfcfd;
  color: #000; }
  .color-block:nth-child(10):before {
    content: "bg light"; }
  .color-block:nth-child(10):after {
    content: "#fbfcfd"; }

.color-block:nth-child(11) {
  background-color: #0cadcd;
  color: #FFF; }
  .color-block:nth-child(11):before {
    content: "primary light"; }
  .color-block:nth-child(11):after {
    content: "#0cadcd"; }

.color-block:nth-child(12) {
  background-color: #df5061;
  color: #FFF; }
  .color-block:nth-child(12):before {
    content: "accent light"; }
  .color-block:nth-child(12):after {
    content: "#df5061"; }

.color-block:nth-child(13) {
  background-color: #ebeef2;
  color: #000; }
  .color-block:nth-child(13):before {
    content: "function light"; }
  .color-block:nth-child(13):after {
    content: "#ebeef2"; }

.color-block:nth-child(14) {
  background-color: #ddeda0;
  color: #000; }
  .color-block:nth-child(14):before {
    content: "success light"; }
  .color-block:nth-child(14):after {
    content: "#ddeda0"; }

.color-block:nth-child(15) {
  background-color: #99a4aa;
  color: #FFF; }
  .color-block:nth-child(15):before {
    content: "type lighter"; }
  .color-block:nth-child(15):after {
    content: "#99a4aa"; }

.color-block:nth-child(16) {
  background-color: #9cb6ca;
  color: #FFF; }
  .color-block:nth-child(16):before {
    content: "links lighter"; }
  .color-block:nth-child(16):after {
    content: "#9cb6ca"; }

.color-block:nth-child(17) {
  background-color: #fbfcfd;
  color: #000; }
  .color-block:nth-child(17):before {
    content: "bg lighter"; }
  .color-block:nth-child(17):after {
    content: "#fbfcfd"; }

.color-block:nth-child(18) {
  background-color: #9bc1d7;
  color: #000; }
  .color-block:nth-child(18):before {
    content: "primary lighter"; }
  .color-block:nth-child(18):after {
    content: "#9bc1d7"; }

.color-block:nth-child(19) {
  background-color: #e594a2;
  color: #FFF; }
  .color-block:nth-child(19):before {
    content: "accent lighter"; }
  .color-block:nth-child(19):after {
    content: "#e594a2"; }

.color-block:nth-child(20) {
  background-color: #eff1f5;
  color: #000; }
  .color-block:nth-child(20):before {
    content: "function lighter"; }
  .color-block:nth-child(20):after {
    content: "#eff1f5"; }

.color-block:nth-child(21) {
  background-color: #e3f0bb;
  color: #000; }
  .color-block:nth-child(21):before {
    content: "success lighter"; }
  .color-block:nth-child(21):after {
    content: "#e3f0bb"; }

.color-block:nth-child(22) {
  background-color: #ced2d5;
  color: #000; }
  .color-block:nth-child(22):before {
    content: "type lightest"; }
  .color-block:nth-child(22):after {
    content: "#ced2d5"; }

.color-block:nth-child(23) {
  background-color: #cfdbe5;
  color: #000; }
  .color-block:nth-child(23):before {
    content: "links lightest"; }
  .color-block:nth-child(23):after {
    content: "#cfdbe5"; }

.color-block:nth-child(24) {
  background-color: #fdfefe;
  color: #000; }
  .color-block:nth-child(24):before {
    content: "bg lightest"; }
  .color-block:nth-child(24):after {
    content: "#fdfefe"; }

.color-block:nth-child(25) {
  background-color: #cee0eb;
  color: #000; }
  .color-block:nth-child(25):before {
    content: "primary lightest"; }
  .color-block:nth-child(25):after {
    content: "#cee0eb"; }

.color-block:nth-child(26) {
  background-color: #f2cdd0;
  color: #000; }
  .color-block:nth-child(26):before {
    content: "accent lightest"; }
  .color-block:nth-child(26):after {
    content: "#f2cdd0"; }

.color-block:nth-child(27) {
  background-color: #f7f8fa;
  color: #000; }
  .color-block:nth-child(27):before {
    content: "function lightest"; }
  .color-block:nth-child(27):after {
    content: "#f7f8fa"; }

.color-block:nth-child(28) {
  background-color: #f1f8dd;
  color: #000; }
  .color-block:nth-child(28):before {
    content: "success lightest"; }
  .color-block:nth-child(28):after {
    content: "#f1f8dd"; }

.color-block:nth-child(29) {
  background-color: #050f16;
  color: #FFF; }
  .color-block:nth-child(29):before {
    content: "type dark"; }
  .color-block:nth-child(29):after {
    content: "#050f16"; }

.color-block:nth-child(30) {
  background-color: #0b3b64;
  color: #FFF; }
  .color-block:nth-child(30):before {
    content: "links dark"; }
  .color-block:nth-child(30):after {
    content: "#0b3b64"; }

.color-block:nth-child(31) {
  background-color: #e4eaf3;
  color: #000; }
  .color-block:nth-child(31):before {
    content: "bg dark"; }
  .color-block:nth-child(31):after {
    content: "#e4eaf3"; }

.color-block:nth-child(32) {
  background-color: #0a5482;
  color: #FFF; }
  .color-block:nth-child(32):before {
    content: "primary dark"; }
  .color-block:nth-child(32):after {
    content: "#0a5482"; }

.color-block:nth-child(33) {
  background-color: #a60413;
  color: #FFF; }
  .color-block:nth-child(33):before {
    content: "accent dark"; }
  .color-block:nth-child(33):after {
    content: "#a60413"; }

.color-block:nth-child(34) {
  background-color: #c8d0db;
  color: #000; }
  .color-block:nth-child(34):before {
    content: "function dark"; }
  .color-block:nth-child(34):after {
    content: "#c8d0db"; }

.color-block:nth-child(35) {
  background-color: #b2d540;
  color: #000; }
  .color-block:nth-child(35):before {
    content: "success dark"; }
  .color-block:nth-child(35):after {
    content: "#b2d540"; }

.color-block:nth-child(36) {
  background-color: #06111a;
  color: #FFF; }
  .color-block:nth-child(36):before {
    content: "type darker"; }
  .color-block:nth-child(36):after {
    content: "#06111a"; }

.color-block:nth-child(37) {
  background-color: #082c4a;
  color: #FFF; }
  .color-block:nth-child(37):before {
    content: "links darker"; }
  .color-block:nth-child(37):after {
    content: "#082c4a"; }

.color-block:nth-child(38) {
  background-color: #aeb6be;
  color: #000; }
  .color-block:nth-child(38):before {
    content: "bg darker"; }
  .color-block:nth-child(38):after {
    content: "#aeb6be"; }

.color-block:nth-child(39) {
  background-color: #073b5d;
  color: #FFF; }
  .color-block:nth-child(39):before {
    content: "primary darker"; }
  .color-block:nth-child(39):after {
    content: "#073b5d"; }

.color-block:nth-child(40) {
  background-color: #77030d;
  color: #FFF; }
  .color-block:nth-child(40):before {
    content: "accent darker"; }
  .color-block:nth-child(40):after {
    content: "#77030d"; }

.color-block:nth-child(41) {
  background-color: #8f9ba8;
  color: #FFF; }
  .color-block:nth-child(41):before {
    content: "function darker"; }
  .color-block:nth-child(41):after {
    content: "#8f9ba8"; }

.color-block:nth-child(42) {
  background-color: #729833;
  color: #FFF; }
  .color-block:nth-child(42):before {
    content: "success darker"; }
  .color-block:nth-child(42):after {
    content: "#729833"; }

.color-block:nth-child(43) {
  background-color: #03080d;
  color: #FFF; }
  .color-block:nth-child(43):before {
    content: "type darkest"; }
  .color-block:nth-child(43):after {
    content: "#03080d"; }

.color-block:nth-child(44) {
  background-color: #041625;
  color: #FFF; }
  .color-block:nth-child(44):before {
    content: "links darkest"; }
  .color-block:nth-child(44):after {
    content: "#041625"; }

.color-block:nth-child(45) {
  background-color: #677077;
  color: #FFF; }
  .color-block:nth-child(45):before {
    content: "bg darkest"; }
  .color-block:nth-child(45):after {
    content: "#677077"; }

.color-block:nth-child(46) {
  background-color: #041e2e;
  color: #FFF; }
  .color-block:nth-child(46):before {
    content: "primary darkest"; }
  .color-block:nth-child(46):after {
    content: "#041e2e"; }

.color-block:nth-child(47) {
  background-color: #390207;
  color: #FFF; }
  .color-block:nth-child(47):before {
    content: "accent darkest"; }
  .color-block:nth-child(47):after {
    content: "#390207"; }

.color-block:nth-child(48) {
  background-color: #485561;
  color: #FFF; }
  .color-block:nth-child(48):before {
    content: "function darkest"; }
  .color-block:nth-child(48):after {
    content: "#485561"; }

.color-block:nth-child(49) {
  background-color: #38521a;
  color: #FFF; }
  .color-block:nth-child(49):before {
    content: "success darkest"; }
  .color-block:nth-child(49):after {
    content: "#38521a"; }

.color-block {
  width: 13.28571%;
  padding: 1%;
  margin-right: .95%;
  float: left;
  overflow: hidden; }
  .color-block:before {
    font-size: 12.8px;
    font-size: 0.8rem;
    display: block;
    white-space: nowrap; }
  .color-block:after {
    font-size: 10.24px;
    font-size: 0.64rem;
    display: block; }

.color-block:before {
  text-transform: capitalize; }

.color-block:after {
  letter-spacing: 0.1em; }

.icon {
  width: 1.2em;
  margin-right: .5em;
  display: inline-block;
  margin-top: -.25em; }

.box_open {
  border-width: 2px 0; }

[class*="list_bordered"] > li {
  border-top-width: 2px;
  margin-top: -2px; }
  [class*="list_bordered"] > li:first-child {
    border-top-color: #e4eaf3; }
  [class*="list_bordered"] > li:last-child {
    border-bottom: 2px solid #e4eaf3;
    margin-bottom: 4px; }

.tab,
.list_nav a {
  text-transform: uppercase;
  letter-spacing: .5px;
  text-decoration: none; }

.toggles {
  position: fixed;
  top: -1px;
  right: -1px;
  z-index: 501;
  background-color: #fff;
  border: 1px solid #ddd;
  padding: 5px 10px;
  -moz-border-radius: 0px 0px 0px 3px;
       border-radius: 0px 0px 0px 3px; }

.editor_content ul {
  list-style: bulleted;
  margin-left: 32px;
  margin-left: 2rem; }

.list_naked {
  list-style: none;
  margin: 0; }
  .list_naked > li {
    list-style-image: none;
    list-style-type: none;
    margin-left: 0; }

.link_naked {
  color: inherit;
  text-decoration: none; }
  .link_naked:hover, .link_naked:focus {
    color: inherit;
    text-decoration: none; }

.invisible {
  visibility: hidden !important; }

.visually_hidden.focusable:active,
.visually_hidden.focusable:focus {
  clip: auto;
  height: auto;
  margin: 0;
  overflow: visible;
  position: static;
  width: auto; }

.hidden {
  display: none !important;
  visibility: hidden !important; }

.contain {
  position: relative !important; }

.wrap, .tabbed, .tab_content, .box, .isolate, .clearfix {
  *zoom: 1; }
  .wrap:before, .tabbed:before, .tab_content:before, .box:before, .isolate:before, .clearfix:before, .wrap:after, .tabbed:after, .tab_content:after, .box:after, .isolate:after, .clearfix:after {
    display: table;
    content: " "; }
  .wrap:after, .tabbed:after, .tab_content:after, .box:after, .isolate:after, .clearfix:after {
    clear: both;
    height: 0;
    width: 0; }

.align_left {
  float: left !important;
  margin-right: 32px;
  margin-right: 2rem; }

.align_right {
  float: right !important;
  margin-left: 32px;
  margin-left: 2rem; }

.align_center {
  float: none !important;
  margin: 0 auto !important;
  display: block !important; }

.align_none {
  float: none !important;
  margin: 0 !important; }

.float_left {
  float: left !important; }

.float_right {
  float: right !important; }

.float_none {
  float: none !important; }

@media only screen and (max-width: 640px) {
  .smalls_align_left {
    float: left !important;
    margin-right: 32px;
    margin-right: 2rem; }
  .smalls_align_right {
    float: right !important;
    margin-left: 32px;
    margin-left: 2rem; }
  .smalls_align_center {
    float: none !important;
    margin: 0 auto !important;
    display: block !important; }
  .smalls_align_none {
    float: none !important;
    margin: 0 !important; }
  .smalls_float_left {
    float: left !important; }
  .smalls_float_right {
    float: right !important; }
  .smalls_float_none {
    float: none !important; } }

@media only screen and (min-width: 641px) {
  .bigs_align_left {
    float: left !important;
    margin-right: 32px;
    margin-right: 2rem; }
  .bigs_align_right {
    float: right !important;
    margin-left: 32px;
    margin-left: 2rem; }
  .bigs_align_center {
    float: none !important;
    margin: 0 auto !important;
    display: block !important; }
  .bigs_align_none {
    float: none !important;
    margin: 0 !important; }
  .bigs_float_left {
    float: left !important; }
  .bigs_float_right {
    float: right !important; }
  .bigs_float_none {
    float: none !important; } }

@media only screen and (min-width: 941px) {
  .desk_align_left {
    float: left !important;
    margin-right: 32px;
    margin-right: 2rem; }
  .desk_align_right {
    float: right !important;
    margin-left: 32px;
    margin-left: 2rem; }
  .desk_align_center {
    float: none !important;
    margin: 0 auto !important;
    display: block !important; }
  .desk_align_none {
    float: none !important;
    margin: 0 !important; }
  .desk_float_left {
    float: left !important; }
  .desk_float_right {
    float: right !important; }
  .desk_float_none {
    float: none !important; } }

.space_0 {
  margin: 0 !important; }

.space_t_0, .space_v_0 {
  margin-top: 0 !important; }

.space_l_0, .space_h_0 {
  margin-left: 0 !important; }

.space_b_0, .space_v_0 {
  margin-bottom: 0 !important; }

.space_r_0, .space_h_0 {
  margin-right: 0 !important; }

.space {
  margin: 24px !important;
  margin: 1.5rem !important; }

.space_t, .space_v {
  margin-top: 24px !important;
  margin-top: 1.5rem !important; }

.space_l, .space_h {
  margin-left: 32px !important;
  margin-left: 2rem !important; }

.space_b, .space_v {
  margin-bottom: 24px !important;
  margin-bottom: 1.5rem !important; }

.space_r, .space_h {
  margin-right: 32px !important;
  margin-right: 2rem !important; }

.space_half {
  margin: 12px !important;
  margin: 0.75rem !important; }

.space_t_half, .space_v_half {
  margin-top: 12px !important;
  margin-top: 0.75rem !important; }

.space_l_half, .space_h_half {
  margin-left: 16px !important;
  margin-left: 1rem !important; }

.space_b_half, .space_v_half {
  margin-bottom: 12px !important;
  margin-bottom: 0.75rem !important; }

.space_r_half, .space_h_half {
  margin-right: 16px !important;
  margin-right: 1rem !important; }

.space_neg {
  margin: -24px !important;
  margin: -1.5rem !important; }

.space_t_neg, .space_v_neg {
  margin-top: -24px !important;
  margin-top: -1.5rem !important; }

.space_l_neg, .space_h_neg {
  margin-left: -32px !important;
  margin-left: -2rem !important; }

.space_b_neg, .space_v_neg {
  margin-bottom: -24px !important;
  margin-bottom: -1.5rem !important; }

.space_r_neg, .space_h_neg {
  margin-right: -32px !important;
  margin-right: -2rem !important; }

.space_2 {
  margin: 48px !important;
  margin: 3rem !important; }

.space_t_2, .space_v_2 {
  margin-top: 48px !important;
  margin-top: 3rem !important; }

.space_l_2, .space_h_2 {
  margin-left: 64px !important;
  margin-left: 4rem !important; }

.space_b_2, .space_v_2 {
  margin-bottom: 48px !important;
  margin-bottom: 3rem !important; }

.space_r_2, .space_h_2 {
  margin-right: 64px !important;
  margin-right: 4rem !important; }

.pad_0 {
  padding: 0 !important; }

.pad_t_0, .pad_v_0 {
  padding-top: 0 !important; }

.pad_l_0, .pad_h_0 {
  padding-left: 0 !important; }

.pad_b_0, .pad_v_0 {
  padding-bottom: 0 !important; }

.pad_r_0, .pad_h_0 {
  padding-right: 0 !important; }

.pad {
  padding: 24px !important;
  padding: 1.5rem !important; }

.pad_t, .pad_v {
  padding-top: 24px !important;
  padding-top: 1.5rem !important; }

.pad_l, .pad_h {
  padding-left: 32px !important;
  padding-left: 2rem !important; }

.pad_b, .pad_v {
  padding-bottom: 24px !important;
  padding-bottom: 1.5rem !important; }

.pad_r, .pad_h {
  padding-right: 32px !important;
  padding-right: 2rem !important; }

.pad_half {
  padding: 12px !important;
  padding: 0.75rem !important; }

.pad_t_half, .pad_v_half {
  padding-top: 12px !important;
  padding-top: 0.75rem !important; }

.pad_l_half, .pad_h_half {
  padding-left: 16px !important;
  padding-left: 1rem !important; }

.pad_b_half, .pad_v_half {
  padding-bottom: 12px !important;
  padding-bottom: 0.75rem !important; }

.pad_r_half, .pad_h_half {
  padding-right: 16px !important;
  padding-right: 1rem !important; }

.pad_2 {
  padding: 48px !important;
  padding: 3rem !important; }

.pad_t_2, .pad_v_2 {
  padding-top: 48px !important;
  padding-top: 3rem !important; }

.pad_l_2, .pad_h_2 {
  padding-left: 64px !important;
  padding-left: 4rem !important; }

.pad_b_2, .pad_v_2 {
  padding-bottom: 48px !important;
  padding-bottom: 3rem !important; }

.pad_r_2, .pad_h_2 {
  padding-right: 64px !important;
  padding-right: 4rem !important; }

@media only screen and (max-width: 640px) {
  .smalls_space_0 {
    margin: 0 !important; }
  .smalls_space_t_0, .smalls_space_v_0 {
    margin-top: 0 !important; }
  .smalls_space_l_0, .smalls_space_h_0 {
    margin-left: 0 !important; }
  .smalls_space_b_0, .smalls_space_v_0 {
    margin-bottom: 0 !important; }
  .smalls_space_r_0, .smalls_space_h_0 {
    margin-right: 0 !important; }
  .smalls_space {
    margin: 24px !important;
    margin: 1.5rem !important; }
  .smalls_space_t, .smalls_space_v {
    margin-top: 24px !important;
    margin-top: 1.5rem !important; }
  .smalls_space_l, .smalls_space_h {
    margin-left: 32px !important;
    margin-left: 2rem !important; }
  .smalls_space_b, .smalls_space_v {
    margin-bottom: 24px !important;
    margin-bottom: 1.5rem !important; }
  .smalls_space_r, .smalls_space_h {
    margin-right: 32px !important;
    margin-right: 2rem !important; }
  .smalls_space_half {
    margin: 12px !important;
    margin: 0.75rem !important; }
  .smalls_space_t_half, .smalls_space_v_half {
    margin-top: 12px !important;
    margin-top: 0.75rem !important; }
  .smalls_space_l_half, .smalls_space_h_half {
    margin-left: 16px !important;
    margin-left: 1rem !important; }
  .smalls_space_b_half, .smalls_space_v_half {
    margin-bottom: 12px !important;
    margin-bottom: 0.75rem !important; }
  .smalls_space_r_half, .smalls_space_h_half {
    margin-right: 16px !important;
    margin-right: 1rem !important; }
  .smalls_space_neg {
    margin: -24px !important;
    margin: -1.5rem !important; }
  .smalls_space_t_neg, .smalls_space_v_neg {
    margin-top: -24px !important;
    margin-top: -1.5rem !important; }
  .smalls_space_l_neg, .smalls_space_h_neg {
    margin-left: -32px !important;
    margin-left: -2rem !important; }
  .smalls_space_b_neg, .smalls_space_v_neg {
    margin-bottom: -24px !important;
    margin-bottom: -1.5rem !important; }
  .smalls_space_r_neg, .smalls_space_h_neg {
    margin-right: -32px !important;
    margin-right: -2rem !important; }
  .smalls_space_2 {
    margin: 48px !important;
    margin: 3rem !important; }
  .smalls_space_t_2, .smalls_space_v_2 {
    margin-top: 48px !important;
    margin-top: 3rem !important; }
  .smalls_space_l_2, .smalls_space_h_2 {
    margin-left: 64px !important;
    margin-left: 4rem !important; }
  .smalls_space_b_2, .smalls_space_v_2 {
    margin-bottom: 48px !important;
    margin-bottom: 3rem !important; }
  .smalls_space_r_2, .smalls_space_h_2 {
    margin-right: 64px !important;
    margin-right: 4rem !important; }
  .smalls_pad_0 {
    padding: 0 !important; }
  .smalls_pad_t_0, .smalls_pad_v_0 {
    padding-top: 0 !important; }
  .smalls_pad_l_0, .smalls_pad_h_0 {
    padding-left: 0 !important; }
  .smalls_pad_b_0, .smalls_pad_v_0 {
    padding-bottom: 0 !important; }
  .smalls_pad_r_0, .smalls_pad_h_0 {
    padding-right: 0 !important; }
  .smalls_pad {
    padding: 24px !important;
    padding: 1.5rem !important; }
  .smalls_pad_t, .smalls_pad_v {
    padding-top: 24px !important;
    padding-top: 1.5rem !important; }
  .smalls_pad_l, .smalls_pad_h {
    padding-left: 32px !important;
    padding-left: 2rem !important; }
  .smalls_pad_b, .smalls_pad_v {
    padding-bottom: 24px !important;
    padding-bottom: 1.5rem !important; }
  .smalls_pad_r, .smalls_pad_h {
    padding-right: 32px !important;
    padding-right: 2rem !important; }
  .smalls_pad_half {
    padding: 12px !important;
    padding: 0.75rem !important; }
  .smalls_pad_t_half, .smalls_pad_v_half {
    padding-top: 12px !important;
    padding-top: 0.75rem !important; }
  .smalls_pad_l_half, .smalls_pad_h_half {
    padding-left: 16px !important;
    padding-left: 1rem !important; }
  .smalls_pad_b_half, .smalls_pad_v_half {
    padding-bottom: 12px !important;
    padding-bottom: 0.75rem !important; }
  .smalls_pad_r_half, .smalls_pad_h_half {
    padding-right: 16px !important;
    padding-right: 1rem !important; }
  .smalls_pad_2 {
    padding: 48px !important;
    padding: 3rem !important; }
  .smalls_pad_t_2, .smalls_pad_v_2 {
    padding-top: 48px !important;
    padding-top: 3rem !important; }
  .smalls_pad_l_2, .smalls_pad_h_2 {
    padding-left: 64px !important;
    padding-left: 4rem !important; }
  .smalls_pad_b_2, .smalls_pad_v_2 {
    padding-bottom: 48px !important;
    padding-bottom: 3rem !important; }
  .smalls_pad_r_2, .smalls_pad_h_2 {
    padding-right: 64px !important;
    padding-right: 4rem !important; } }

@media only screen and (min-width: 641px) {
  .bigs_space_0 {
    margin: 0 !important; }
  .bigs_space_t_0, .bigs_space_v_0 {
    margin-top: 0 !important; }
  .bigs_space_l_0, .bigs_space_h_0 {
    margin-left: 0 !important; }
  .bigs_space_b_0, .bigs_space_v_0 {
    margin-bottom: 0 !important; }
  .bigs_space_r_0, .bigs_space_h_0 {
    margin-right: 0 !important; }
  .bigs_space {
    margin: 24px !important;
    margin: 1.5rem !important; }
  .bigs_space_t, .bigs_space_v {
    margin-top: 24px !important;
    margin-top: 1.5rem !important; }
  .bigs_space_l, .bigs_space_h {
    margin-left: 32px !important;
    margin-left: 2rem !important; }
  .bigs_space_b, .bigs_space_v {
    margin-bottom: 24px !important;
    margin-bottom: 1.5rem !important; }
  .bigs_space_r, .bigs_space_h {
    margin-right: 32px !important;
    margin-right: 2rem !important; }
  .bigs_space_half {
    margin: 12px !important;
    margin: 0.75rem !important; }
  .bigs_space_t_half, .bigs_space_v_half {
    margin-top: 12px !important;
    margin-top: 0.75rem !important; }
  .bigs_space_l_half, .bigs_space_h_half {
    margin-left: 16px !important;
    margin-left: 1rem !important; }
  .bigs_space_b_half, .bigs_space_v_half {
    margin-bottom: 12px !important;
    margin-bottom: 0.75rem !important; }
  .bigs_space_r_half, .bigs_space_h_half {
    margin-right: 16px !important;
    margin-right: 1rem !important; }
  .bigs_space_neg {
    margin: -24px !important;
    margin: -1.5rem !important; }
  .bigs_space_t_neg, .bigs_space_v_neg {
    margin-top: -24px !important;
    margin-top: -1.5rem !important; }
  .bigs_space_l_neg, .bigs_space_h_neg {
    margin-left: -32px !important;
    margin-left: -2rem !important; }
  .bigs_space_b_neg, .bigs_space_v_neg {
    margin-bottom: -24px !important;
    margin-bottom: -1.5rem !important; }
  .bigs_space_r_neg, .bigs_space_h_neg {
    margin-right: -32px !important;
    margin-right: -2rem !important; }
  .bigs_space_2 {
    margin: 48px !important;
    margin: 3rem !important; }
  .bigs_space_t_2, .bigs_space_v_2 {
    margin-top: 48px !important;
    margin-top: 3rem !important; }
  .bigs_space_l_2, .bigs_space_h_2 {
    margin-left: 64px !important;
    margin-left: 4rem !important; }
  .bigs_space_b_2, .bigs_space_v_2 {
    margin-bottom: 48px !important;
    margin-bottom: 3rem !important; }
  .bigs_space_r_2, .bigs_space_h_2 {
    margin-right: 64px !important;
    margin-right: 4rem !important; }
  .bigs_pad_0 {
    padding: 0 !important; }
  .bigs_pad_t_0, .bigs_pad_v_0 {
    padding-top: 0 !important; }
  .bigs_pad_l_0, .bigs_pad_h_0 {
    padding-left: 0 !important; }
  .bigs_pad_b_0, .bigs_pad_v_0 {
    padding-bottom: 0 !important; }
  .bigs_pad_r_0, .bigs_pad_h_0 {
    padding-right: 0 !important; }
  .bigs_pad {
    padding: 24px !important;
    padding: 1.5rem !important; }
  .bigs_pad_t, .bigs_pad_v {
    padding-top: 24px !important;
    padding-top: 1.5rem !important; }
  .bigs_pad_l, .bigs_pad_h {
    padding-left: 32px !important;
    padding-left: 2rem !important; }
  .bigs_pad_b, .bigs_pad_v {
    padding-bottom: 24px !important;
    padding-bottom: 1.5rem !important; }
  .bigs_pad_r, .bigs_pad_h {
    padding-right: 32px !important;
    padding-right: 2rem !important; }
  .bigs_pad_half {
    padding: 12px !important;
    padding: 0.75rem !important; }
  .bigs_pad_t_half, .bigs_pad_v_half {
    padding-top: 12px !important;
    padding-top: 0.75rem !important; }
  .bigs_pad_l_half, .bigs_pad_h_half {
    padding-left: 16px !important;
    padding-left: 1rem !important; }
  .bigs_pad_b_half, .bigs_pad_v_half {
    padding-bottom: 12px !important;
    padding-bottom: 0.75rem !important; }
  .bigs_pad_r_half, .bigs_pad_h_half {
    padding-right: 16px !important;
    padding-right: 1rem !important; }
  .bigs_pad_2 {
    padding: 48px !important;
    padding: 3rem !important; }
  .bigs_pad_t_2, .bigs_pad_v_2 {
    padding-top: 48px !important;
    padding-top: 3rem !important; }
  .bigs_pad_l_2, .bigs_pad_h_2 {
    padding-left: 64px !important;
    padding-left: 4rem !important; }
  .bigs_pad_b_2, .bigs_pad_v_2 {
    padding-bottom: 48px !important;
    padding-bottom: 3rem !important; }
  .bigs_pad_r_2, .bigs_pad_h_2 {
    padding-right: 64px !important;
    padding-right: 4rem !important; } }

@media only screen and (min-width: 941px) {
  .desk_space_0 {
    margin: 0 !important; }
  .desk_space_t_0, .desk_space_v_0 {
    margin-top: 0 !important; }
  .desk_space_l_0, .desk_space_h_0 {
    margin-left: 0 !important; }
  .desk_space_b_0, .desk_space_v_0 {
    margin-bottom: 0 !important; }
  .desk_space_r_0, .desk_space_h_0 {
    margin-right: 0 !important; }
  .desk_space {
    margin: 24px !important;
    margin: 1.5rem !important; }
  .desk_space_t, .desk_space_v {
    margin-top: 24px !important;
    margin-top: 1.5rem !important; }
  .desk_space_l, .desk_space_h {
    margin-left: 32px !important;
    margin-left: 2rem !important; }
  .desk_space_b, .desk_space_v {
    margin-bottom: 24px !important;
    margin-bottom: 1.5rem !important; }
  .desk_space_r, .desk_space_h {
    margin-right: 32px !important;
    margin-right: 2rem !important; }
  .desk_space_half {
    margin: 12px !important;
    margin: 0.75rem !important; }
  .desk_space_t_half, .desk_space_v_half {
    margin-top: 12px !important;
    margin-top: 0.75rem !important; }
  .desk_space_l_half, .desk_space_h_half {
    margin-left: 16px !important;
    margin-left: 1rem !important; }
  .desk_space_b_half, .desk_space_v_half {
    margin-bottom: 12px !important;
    margin-bottom: 0.75rem !important; }
  .desk_space_r_half, .desk_space_h_half {
    margin-right: 16px !important;
    margin-right: 1rem !important; }
  .desk_space_neg {
    margin: -24px !important;
    margin: -1.5rem !important; }
  .desk_space_t_neg, .desk_space_v_neg {
    margin-top: -24px !important;
    margin-top: -1.5rem !important; }
  .desk_space_l_neg, .desk_space_h_neg {
    margin-left: -32px !important;
    margin-left: -2rem !important; }
  .desk_space_b_neg, .desk_space_v_neg {
    margin-bottom: -24px !important;
    margin-bottom: -1.5rem !important; }
  .desk_space_r_neg, .desk_space_h_neg {
    margin-right: -32px !important;
    margin-right: -2rem !important; }
  .desk_space_2 {
    margin: 48px !important;
    margin: 3rem !important; }
  .desk_space_t_2, .desk_space_v_2 {
    margin-top: 48px !important;
    margin-top: 3rem !important; }
  .desk_space_l_2, .desk_space_h_2 {
    margin-left: 64px !important;
    margin-left: 4rem !important; }
  .desk_space_b_2, .desk_space_v_2 {
    margin-bottom: 48px !important;
    margin-bottom: 3rem !important; }
  .desk_space_r_2, .desk_space_h_2 {
    margin-right: 64px !important;
    margin-right: 4rem !important; }
  .desk_pad_0 {
    padding: 0 !important; }
  .desk_pad_t_0, .desk_pad_v_0 {
    padding-top: 0 !important; }
  .desk_pad_l_0, .desk_pad_h_0 {
    padding-left: 0 !important; }
  .desk_pad_b_0, .desk_pad_v_0 {
    padding-bottom: 0 !important; }
  .desk_pad_r_0, .desk_pad_h_0 {
    padding-right: 0 !important; }
  .desk_pad {
    padding: 24px !important;
    padding: 1.5rem !important; }
  .desk_pad_t, .desk_pad_v {
    padding-top: 24px !important;
    padding-top: 1.5rem !important; }
  .desk_pad_l, .desk_pad_h {
    padding-left: 32px !important;
    padding-left: 2rem !important; }
  .desk_pad_b, .desk_pad_v {
    padding-bottom: 24px !important;
    padding-bottom: 1.5rem !important; }
  .desk_pad_r, .desk_pad_h {
    padding-right: 32px !important;
    padding-right: 2rem !important; }
  .desk_pad_half {
    padding: 12px !important;
    padding: 0.75rem !important; }
  .desk_pad_t_half, .desk_pad_v_half {
    padding-top: 12px !important;
    padding-top: 0.75rem !important; }
  .desk_pad_l_half, .desk_pad_h_half {
    padding-left: 16px !important;
    padding-left: 1rem !important; }
  .desk_pad_b_half, .desk_pad_v_half {
    padding-bottom: 12px !important;
    padding-bottom: 0.75rem !important; }
  .desk_pad_r_half, .desk_pad_h_half {
    padding-right: 16px !important;
    padding-right: 1rem !important; }
  .desk_pad_2 {
    padding: 48px !important;
    padding: 3rem !important; }
  .desk_pad_t_2, .desk_pad_v_2 {
    padding-top: 48px !important;
    padding-top: 3rem !important; }
  .desk_pad_l_2, .desk_pad_h_2 {
    padding-left: 64px !important;
    padding-left: 4rem !important; }
  .desk_pad_b_2, .desk_pad_v_2 {
    padding-bottom: 48px !important;
    padding-bottom: 3rem !important; }
  .desk_pad_r_2, .desk_pad_h_2 {
    padding-right: 64px !important;
    padding-right: 4rem !important; } }

.show {
  display: block !important; }

.il {
  display: inline !important; }

.ibl {
  display: inline-block !important; }

.hide {
  display: none !important; }

@media only screen and (max-width: 640px) {
  .smalls_show {
    display: block !important; }
  .smalls_il {
    display: inline !important; }
  .smalls_ibl {
    display: inline-block !important; }
  .smalls_hide {
    display: none !important; } }

@media only screen and (min-width: 641px) {
  .bigs_show {
    display: block !important; }
  .bigs_il {
    display: inline !important; }
  .bigs_ibl {
    display: inline-block !important; }
  .bigs_hide {
    display: none !important; } }

.txt_normal {
  font-weight: 400  !important; }

.txt_italic {
  font-style: italic  !important; }

.txt_bold {
  font-weight: 700  !important;
  -webkit-font-smoothing: antialiased; }

.txt_upper {
  text-transform: uppercase  !important;
  letter-spacing: 0.1em  !important; }

.txt_capital {
  text-transform: capitalize  !important; }

.txt_lower {
  text-transform: none  !important;
  letter-spacing: 0  !important; }

.txt_small {
  font-size: 12.8px;
  font-size: 0.8rem;
  line-height: 1.875; }

.txt_space_reset {
  letter-spacing: normal  !important;
  word-spacing: normal  !important; }

.txt_primary {
  font-family: "opensans", "Helvetica Neue", "Helvetica", "Arial", sans-serif; }

.txt_secondary {
  font-family: "Asap", "Garamond", "Baskerville", "Baskerville Old Face", "Hoefler Text", "Times New Roman", serif; }

@media only screen and (max-width: 640px) {
  .smalls_txt_normal {
    font-weight: 400  !important; }
  .smalls_txt_italic {
    font-style: italic  !important; }
  .smalls_txt_bold {
    font-weight: 700  !important;
    -webkit-font-smoothing: antialiased; }
  .smalls_txt_upper {
    text-transform: uppercase  !important;
    letter-spacing: 0.1em  !important; }
  .smalls_txt_capital {
    text-transform: capitalize  !important; }
  .smalls_txt_lower {
    text-transform: none  !important;
    letter-spacing: 0  !important; }
  .smalls_txt_small {
    font-size: 12.8px;
    font-size: 0.8rem;
    line-height: 1.875; }
  .smalls_txt_space_reset {
    letter-spacing: normal  !important;
    word-spacing: normal  !important; }
  .smalls_txt_primary {
    font-family: "opensans", "Helvetica Neue", "Helvetica", "Arial", sans-serif; }
  .smalls_txt_secondary {
    font-family: "Asap", "Garamond", "Baskerville", "Baskerville Old Face", "Hoefler Text", "Times New Roman", serif; } }

@media only screen and (min-width: 641px) {
  .bigs_txt_normal {
    font-weight: 400  !important; }
  .bigs_txt_italic {
    font-style: italic  !important; }
  .bigs_txt_bold {
    font-weight: 700  !important;
    -webkit-font-smoothing: antialiased; }
  .bigs_txt_upper {
    text-transform: uppercase  !important;
    letter-spacing: 0.1em  !important; }
  .bigs_txt_capital {
    text-transform: capitalize  !important; }
  .bigs_txt_lower {
    text-transform: none  !important;
    letter-spacing: 0  !important; }
  .bigs_txt_small {
    font-size: 12.8px;
    font-size: 0.8rem;
    line-height: 1.875; }
  .bigs_txt_space_reset {
    letter-spacing: normal  !important;
    word-spacing: normal  !important; }
  .bigs_txt_primary {
    font-family: "opensans", "Helvetica Neue", "Helvetica", "Arial", sans-serif; }
  .bigs_txt_secondary {
    font-family: "Asap", "Garamond", "Baskerville", "Baskerville Old Face", "Hoefler Text", "Times New Roman", serif; } }

.baseline-on {
  background-image: url(http://basehold.it/i/24);
  background: -webkit-linear-gradient(bottom, rgba(0, 0, 0, 0.15) 1px, transparent 1px) top left/auto 1.5em;
  background: linear-gradient(to top, rgba(0, 0, 0, 0.15) 1px, transparent 1px) top left/auto 1.5em; }

.baseline-off {
  background-image: none; }

/*# sourceMappingURL=maps/main.css.map */
