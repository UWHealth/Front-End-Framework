/* SG
# Functions/General [[dev]]

@file globals/_gl-functions.scss

##### `cache()`
###### function(`$function-name, $args...`)
Memoize (cache) a function's return values and arguments. Speeds up processing on intensive functions that get called many times (with the same arguments).

_NOTE: This can actually **increase** processing time if used too often or on simple functions as the lookup process isn't free. Every cached value is unique._

@returns function result

*/
/* SG
# Functions/Conversion [[dev]]

@file globals/_gl-functions.scss

##### `strip-units()`
###### function(`$value`)
Remove lengths (`px`, `em`, `rem`, etc.) from a value. Usually a variable. This is sometimes required because Sass cannot calculate incompatible units (`px * rem` for instance).
[Reference](http://stackoverflow.com/questions/12328259/how-do-you-strip-the-unit-from-any-number-in-sass)

##### `percentage-to-decimal()`
###### function(`$percentage`)
Changes percent value to decimal.
@returns number

##### `px-to-vw()`
###### function(`$pixels`)
Converts pixel dimensions to viewport width (vw) dimensions.
@returns number (vw)

##### `px-to-rems()`
###### function(`$pixels, $base-font:` `$$base-font-size`)
Function for calculating `rem` values. Used by `@px-to-rems()`. The `$base-size` is used to calculate the value (e.g. if the body's font-size is `16px`, then the rem value of `24px` would be `1.5rem`).
@returns number (rems)
@alias rems()

##### `px-to-ems()`
###### function(`$pixels, $context:` `$base-font-size`)
Function for calculating `em` values. The `$context` is used to calculate the final value. Different from `px-to-rems()` by generating a value with an `em`. `$context` is often necessary based on the situation.
@returns number(ems)
@alias ems()

##### `list-to-string()`
###### function(`$list, $separator:','`)
Converts a list to a string with an optional separator.
@returns string
@alias str-join()

##### `str-to-number()`
###### function(`$string, $unitless: false`)
Converts a number-like string to a number. Since Sass accepts quoted and non-quoted values like `"10px"` and `10px`, but can only do math on the unquoted (number) value, it is sometimes necessary to convert/cast a string to a number.
@returns number
*/
/* SG
# Functions/Strings & Lists [[dev]]

@file globals/_gl-functions.scss

[Reference](https://github.com/devatrox/Sunglass)

##### `contains()`
###### function(`$data, $value`)
Generic `contains` function(similar to javascript's `indexOf`). Parses a variable(`$data`) for a `$value`. Returns boolean.
@returns boolean
@requires `str-contains()`, `list-contains()`

##### `str-join()`
###### function(`$list, $separator:','`)
Converts a map or list to a string (`('this', 'and', 'this')` becomes `'this,and,this'`).
@returns string

##### `str-contains()`
###### function(`$string, $value, $pos: 0`)
Checks if a `$string` contains a `$value`. Optionally accepts a start positon.
@returns boolean

##### `str-append()`
###### function(`$data, $separator:','`)
Adds one string to another (e.g. `str-append('hello', 'world')` becomes `hello world`).
@returns string

##### `list-contains()`
###### function(`$list, $value`)
Checks whether a `$list` contains a `$value`.
@returns boolean

##### `list-print()`
###### function(`$list, $depth: 1`)
Used to turn a list into a flat string. For debug purposes.
@returns string

##### `to-list()`
###### function(`$string, $keep: 'both'`)
Convert a value to a list. `$keep` accepts `'keys'`, `'values'`, or `'both'` for map conversion.
@returns list

*/
/* SG
# Functions/Maps [[dev]]

@file globals/_gl-functions.scss

[Reference](http://www.sitepoint.com/extra-map-functions-sass/)

##### `map-deep-set()`
###### function(`$map, $keys... [, $value]`)
Add to a deeply nested map key. Accepts any number of keys, but the final value is the new key.
@returns map

##### `map-depth()`
###### function(`$map`)
Find depth of a `$map`.
@returns number

##### `map-has-keys()`
###### `[map], [key(s) to be checked ...]`
Determine whether a map contains certain keys.
@returns boolean
@alias map-contains-keys()

##### `map-has-nested-keys()`
###### function(`$map`, `$keys...`)
Check for the value of a nested key.
@returns boolean
@alias map-contains-nested-keys()

##### `map-get-nested()`
###### function(`$map`, `$keys...`)
Returns nested map values. A deep version of Sass' `map-get()`.
@returns string, boolean, list, or map

##### `map-extend()`
###### function(`$map`, `$maps...`(`$deep:true`))
Merges multiple maps. Similar to jQuery's .extend().
@returns map

##### `map-add-depth()`
###### function(`$map`, `$new-key:'base'`)
Adds one level to a map using the new key to a map. Used by `generate_color_varations()`. (e.g. `(key: value, key: value)` becomes `(key:(new-key: value), key:(new-key: value))` )
@returns map

##### `map-print()`
###### function(`$map`, `$level:1`)
Prints map into a string (in a JSON-esque format). Useful for debugging.
@returns string
@alias map-inspect()

*/
/* SG
# Functions/Typography [[dev]]

@file globals/_gl-functions.scss

##### `modular-scale()`
###### function(`$scale`, `$ratio:``$$scale-ratio`)
Generates a pixel value that is an exponent of a ratio (`$ratio` defaults to `$$scale-ratio` value).
@requires `pow()`, `cache()`, `strip-units()`
@returns number (pixels)

*/
/* SG
# Functions/Typography [[dev]]

##### `baseline()`
###### function(`$font-size`, `$baseline`, `$multiple:1`)

Aligns a font-size to a baseline (`$baseline`). Returns a unitless value relative to the font-size (equivilent to ems). An optional multiple can be used to make a variation on the given baseline (using decimals will divide the the baseline).
@returns number (unitless)

*/
/* SG

##### `baseline-curve()`
###### function(`$x` , `$accel`: `1`)

Calculates a where a number(`$x`) sits along a parabolic arc (curve). Change the curve's severity by changing its `$accel`.
An `$accel` of 1 is a smooth arc.
`$accel` accepts any number between -2 and 2.35. A negative will invert the curve.

The formula: `y = (sqrt((x^1)+x) - sqrt(x^1)) / .4142135623730951`
( [Visual](https://www.desmos.com/calculator/qswvc6q9kt) )

@returns number
@requires `sqrt()`, `pow()`

*/
/*SG

##### `baseline-calc()`
###### function(`$font-size: $base-font-size, $font-base: $base-font-size, $basline-slack: $font-looseness`)

Creates unitless line-heights that align to the baseline grid with consideration to the aesthetics of a given font size. Essentially makes sure larger font-sizes have smaller line-heights, while smaller font-sizes have larger ones.
Uses constraints based on upper and lower limits of pleasing line-heights, and finds where a given font-size should sit within those constraints. `$$font-looseness` increases the upper constraints, allowing for taller line heights on larger font sizes.
Depends on `baseline()` for calculation and `baseline-curve()` to determine the deviance from the upper and lower constraints.

@returns number (unitless)
@requires `baseline()`, `baseline-curve()`

*/
/* SG
# Functions/Typography [[dev]]

##### `get-type()`, `type()`
###### `[font-size],[font-size-value]`
function for finding the value of an indexed type-size. H1-H6, p, and small are all indexed values. px, rem, and line-height are available.

*/
/* SG
##### `define-type()`
###### `[font-size], [property], [new value]`
Registers new values to type map. [Property] accepts px, rem, and line-height.

*/
/* SG

# Functions/Math [[dev]]

Most functions taken from [Sassy Math](https://github.com/Team-Sass/Sassy-math/blob/master/sass/math.scss).

*/
/* SG

##### `pow()`
###### function(`$number`, `$exponent`, `$precision:12`)

A more robust exponent multiplication which allows for decimal-based exponents. This **fully** replaces Compass' pow() function (allows for float-based exponents).

[Reference](https://gist.github.com/nathancrank/7539155)

@returns number
@requires log()
@alias exponent()

*/
/* SG

##### `log()`
###### function(`$x`)
Returns the natural logarithm of a number.

```scss
$value:   log(2)  // 0.69315
$value2:  log(10) // 2.30259
```

@returns number

*/
/* SG

##### `frexp()`
###### function(`$x`)
Returns a two-element list containing the normalized fraction and exponent of number.

@returns list (fraction, exponent)

*/
/* SG

##### `ldexp()`
###### function(`$x, $exp`)

Returns $x * 2^$exp

*/
/* SG

##### `exp()`
###### function(`$x`)

Returns E^x, where x is the argument, and E is Euler's constant, the base of the natural logarithms.

```scss
$value: exp(1)  // 2.71828
$value2: exp(-1) // 0.36788
```

@returns Number

*/
/* SG

##### `fact()`
###### function(`$x`)

Returns the factorial of a non-negative integer.

```scss
$value:  fact(0) // 1
$value2: fact(8) // 40320
```
@return Number

*/
/* SG

##### `gcd()`
###### function(`$number-1`, `$number-2`)

Greatest Common Divisor calculation (useful for calculating grids and widths).
@returns number

*/
/* SG

##### `lcm()`
###### function(`$a`, `$b`)

Finds the least common multiple. Use with caution...if there is no LCM, then you compilation will error out.

@returns number

*/
/* SG

##### `nth_root()`
###### function(`$base`, `$n:2`, `$precision:12`)

Advanced calculation for square roots, cube roots, etc. of a value.
[Reference](http://rosettacode.org/wiki/Nth_root#JavaScript)

@returns number

*/
/* SG

##### `sqrt()`
###### function(`$base`, `$precision:12`)

Find the square root of a value.

@returns number
@alias `sqroot()`

*/
/* SG

##### `sin()`
###### function(`$angle`)

Determines the Sine of an angle.
[Reference](https://unindented.org/articles/trigonometry-in-sass/)

@returns number
*/
/* SG

##### `cos()`
###### function(`$angle`)

Determines the Cosine of an angle.
@returns number

*/
/* SG
##### `tan()`
###### function(`$angle`)

Determines the Tangent of an angle.
@returns number

*/
/* SG

##### `golden()`
###### function(`$base: 1`)

Get the golden ratio from `$base`.
@returns number
@alias `$$golden_ratio`

*/
/* SG
# Colors/Lookup [[dev]]

@file tools/_t-color-functions.scss

@priority 99

##### `colors()`
###### function(`$color-name, $tone: 'base', $opacity: 1`)
Get a color value from the global `$$base-colors` map. Darker and lighter tones are available by passing a second string.

```scss
.foo {
    background-color: colors(links, light));
}
```

Passing only a color name will default to the 'base' color.

@alias color()
@requires `$$base-colors`

[Reference](http://blog.12spokes.com/web-design-development/simple-css-color-management-with-sass/)
*/
/* SG
# Colors/Lookup [[dev]]

##### `combine-color-maps()`
###### function(`$map1 , $map2`)
Specialized function used by `generate-color-variations()` to merge two color maps.

@returns map

*/
/* SG
# Colors/Manipulation [[dev]]

##### `generate-color-varations()`
###### function( `$map: $colors, $functions: (tint, tint, tint, shade, shade, shade), $increments: (20%, 40%, 80%, 20%, 40%, 80%), $variations: (light, lighter, lightest, dark, darker, darkest), $blending-colors: null`)

Takes base color values and generates a full color palette. Used by the `$$base-colors` map to create a project's palette, accessible via `colors()`.

**Arguments:**
* `$map`: Color map you want to create variations of. Defaults to `$$base-colors`.
* `$functions`: color functions used to generate variations (e.g. lighten or darken). Can use any `blend` function, provided `$blending-colors` are provided.
* `$increments`: percentage amount to apply `$function` to each `$variations`.
* `$variations`: actual names for each color tone when `colors()` used.
* `$blending-colors`: used when a function is a `blend`. Can be a list or a single color.

@requires `combine-color-maps()`

*/
/* SG
# Colors/Manipulation [[dev]]


##### `black-or-white()`
###### function(`$color`)
Change text color based on background-color's darkness.

```scss
div {
    background-color: #f8cd12;
    color: set_text_color(#f8cd12);
}
// Your text color would be black because #f8cd12 and #00000 have more contrast.
```
@alias set-text-color()
@requires `color-luminance`

*/
/* SG
##### `pick-best-color()`
###### function(`$base, $colors, $tolerance: 0`)
Compares a set of colors against `$base` and returns the color with the most contrast. `$colors` should be a list.
[Taken from here](https://gist.github.com/voxpelli/6304812)

```scss
div {
    color: pick_best_color(#f8cd12, (#a0a0c0, #fff, #2c2c2c));
}
// The function would test the colors and find that #2c2c2c is the best.
```
@requires `color-contrast()`, `color-luminance()`
@returns color
*/
/* SG
##### `color-contrast()`
###### function(`$color1, $color2`)
Find contrast between two colors.
[Adapted from color.js](https://github.com/LeaVerou/contrast-ratio/blob/gh-pages/color.js)

@requires `color-luminance()`
@returns number(0 - 1)
*/
/* SG
##### `color-luminance()`
###### function(`$color1`)
Find the relative luminance of a color. Used by `color-contrast()`. [Adapted from color.js](https://github.com/LeaVerou/contrast-ratio/blob/gh-pages/color.js)
@alias luma()
@returns number(0 - 1)
*/
/* SG
# Colors/Debugging [[dev]]

@file tools/_t-color-functions.scss

##### `@color-palette-output()`
###### mixin(`$selector`, `$color-map:` `$$base-colors`)
Debugging tool that creates a pretty color palette (in columns) using psuedo selectors (nth-child required). Used for "color blocks" output, in style guide.

@requires `map-add-depth()`, `black-or-white()`

*/
/* SG

# Colors/Blending Modes [[dev]]

@file tools/_t-blend-modes.scss

@priority 2

[Taken from Sass Blend Modes](https://github.com/heygrady/scss-blend-modes/blob/master/stylesheets/_blend-modes.scss)

##### `blend-normal()`
###### function(`$forground, $background, $amount:0`)

##### `blend-multiply()`
###### function(`$forground, $background, $amount:0`)

##### `blend-lighten()`
###### function(`$forground, $background, $amount:0`)

##### `blend-darken()`
###### function(`$forground, $background, $amount:0`)

##### `blend-lineardodge()`
###### function(`$forground, $background, $amount:0`)

##### `blend-linearburn()`
###### function(`$forground, $background, $amount:0`)

##### `blend-difference`
###### function(`$forground, $background, $amount:0`)

##### `blend-screen()`
###### function(`$forground, $background, $amount:0`)

##### `blend-exclusion()`
###### function(`$forground, $background, $amount:0`)

##### `blend-multiply()`
###### function(`$forground, $background, $amount:0`)

*/
/* SG
# Variables/Easing [[dev]]

@file globals/tools/_t-easings.scss

Each easing variable is a cubic-bezier value that specifies rate of change of an animation. [See easings for more](http://www.easings.net).

[Reference](https://github.com/matthewlein/Ceaser/blob/master/developer/)

*/
/* SG
# Config/Typography Settings [[dev]]

@file _config.scss

##### `$$base-font-size`
###### Pixel value
Font size all other values will use for calculation. Will be converted to `rems`.

##### `$$base-line-height`
###### Pixel value
Line-height for base font-size. Will be used to determine the vertical spacing values when `type-space()` is used.

##### `$$font-looseness`
###### Percentage
What to base the tightness/looseness of automatically-generated `line-heights`.

##### `$$auto-scale-type`
###### Boolean
Uses `$$scale-ratio` to create font sizes for headings starting from the `$$base-font-size`. Overwrites `$$type-[h#]-size`.

##### `$$scale-ratio`
###### Numeric (float)
Used for `$$auto-scale-type` and for `modular-scale()`.

##### `$$rem-px-fallback`
###### Boolean
Determines whether `rems()` conversion includes a pixel-value fallback for older browsers like IE8.

##### `$$indented-paragraphs`
###### Boolean
Determines whether to generate css for paragraphs with a text indent, rather than paragraphs with margins between them.

*/
/* SG
# Config/Typography Settings [[dev]]

@file _config.scss

##### `$$type-[h#]-size`
###### List (pixel value [, pixel or unitless value])
Variables used to generate heading (and small) font-sizes and line-heights. A secondary value will force the line-height to that base-value.

_NOTE: First value must be pixel values(or a function that generates a pixel value like `modular-scale()`), but the optional secondary value can be unitless._
*/
/* SG
# Config/Typography Settings [[dev]]

@file _config.scss

##### `$$primary-font-stack`, `$$secondary-font-stack`, `$$monospace-font-stack`, `$$icon-font-stack`
###### String
Used wherever font-families are declared. Use `null` if nothing exists.

##### `$$use-web-fonts`
###### Boolean
Whether to generate `@font-face` values based on `$$font-file-name` (and the other `$font-` variables).

##### `$$font-file-name`
###### List (string)
Uses for automatically generated `@font-face` declarations. Describes the filename as well as the font-family name reference. _File names and @font-face values must be the same (e.g. 'opensans' and 'opensans.ttf').**Casing matters**._

##### `$$font-weights`
###### List (nested)
Each parenthesis corresponds to each name in `$$font-file-name`. Determines how many `@font-face` weights are generated per font.

##### `$$font-italics`
###### List (nested) (boolean)
Corresponds to each value in `$$font-weights`. (e.g. if `$font-weights: (400,700),(200,400)` and `$font-italics: (true),(false,true)` then the first font will have italics in the 400 and 700 weights while second font will have italics in the 400 weight).

##### `$$font-include-woff2`
###### Boolean (list)
Determines whether woff2 formats be included in the `@font-face` generation. Can be a list if each font has different values (not recommended since woff2 is the most performant font-file format).

##### `$$font-include-eot`
###### Boolean (list)
Determines whether to generate `@font-face` values that point at an .eot file. Fallback for IE8.

*/
/* SG
# Config/Grid Settings [[dev]]

@file _config.scss

##### `$$max-site-width`
###### Pixel value
Maximum desktop width for the site wrapper.

##### `$$grid-columns`
###### Number
Base number of grid columns to be generated. Note that any column number will include all fractions of the fewer columns. For instance, a 12-column grid would also include all fractions of 1-12 (including things like three-sevenths).

##### `$$grid-gutter`
###### Pixel value
Space between grid items. Also used in `type-space()` for horizontal spacing units.

##### `$$grid-silent-classes`
###### Boolean
If set to false, actual grid classes will be output to CSS.

##### `$$grid-push`, `$$grid-pull`
###### Boolean
Determines whether to include extra grid classes for positional grid modifiers.

##### `$$grid-markup-fix`
###### Boolean
If set to `true`, html must have no white space (or comments) between grid items. Almost always set to `false`.

##### `$$grid-floats`
###### Boolean
If set to `true`, the grid uses floats instead of inline-block for layout.

##### `$$breakpoints-has-widths`, `$$breakpoints-has-push`, `$$breakpoints-has-pull`
###### List (string)
Determines what classes (widths, pushes, pulls) get generated at `$$breakpoints`. The list's order determines the output order. This is useful if you want one breakpoint to override another.

*/
/* SG
# Config/General Settings [[dev]]

@file _config.scss

##### `$$breakpoints`
###### Map (`breakpoint-name: 'breakpoint-value'`)
Sets up variables for media-queries. Used in `@media-query()`.

**Example**
```scss
$breakpoints: (
  'small':'(min-width: 320px)',
  'bigs':'(min-width: 850px)'
);
```
*/
/* SG
# Config/General Settings [[dev]]

@file _config.scss

##### `$$display-classes`
###### Map (string: string)
Variable used to generate display classes. Key value pairs determine the class name and the display value.

**Example**
```scss
//SCSS input
$display-classes: ('show':'block');

//CSS output
.show { display: block; }
```


##### `$$spacing-classes`
###### Map (`string: string`)
Variable used to generate spacing classes. Classes are created via `@spacing-utilities()`. Classes are named in the format of `.prefix_direction_amount`.

**Keys and Values**
* 'directions': Direction class suffixes
* 'amounts': Numeric value multiples (e.g. `2` or `-1`)
* 'names': Amount names
* 'prefixes': Prefixes for class names (for margins or padding)

**Example**
```scss
//SCSS Input
$display-classes: (
	'directions': ('t', 'r'),
	'amounts': (2, -1),
	'names': ('2', 'neg'),
	'prefixes': ('space','pad')
);

//CSS output
.space_t_2 { margin-top: 2rem; }
.space_r_2 { margin-right: 2rem; }
.space_t_neg { margin-top: -1rem; }
.space_r_neg { margin-right: -1rem; }
.pad_t_2 { padding-top: 2rem; }
.pad_r_2 { padding-right: 2rem; }
//No .pad_t/r_neg classes since negative padding is invalid

@media only screen and (min-width:300px){...}
//repeated for all media-queries defined by $breakpoints-has-spacing-classes...

```
*/
/* SG
# Config/General Settings [[dev]]

@file _config.scss

##### `$$breakpoints-has-alignment-classes`, `$$breakpoints-has-spacing-classes`, `$breakpoints-has-display-classes`, `$breakpoint-has-type-classes`
###### List (keys from `$$breakpoints`)
Determines what utility classes get generated at `$$breakpoints`. The list's order determines cascade The list's order determines the output order. This is useful if you want one breakpoint to override another.
A `false` value will output no classes of that type.

*/
/* SG
# Config/Color Settings [[dev]]

@file _config.scss

##### `$$base-colors`
###### Map (key : color value)
Sets up consistent color names to be used for color-palette. Dark and light values will be automatically generated. Key values should be accessed through `colors()`.
`type`, `links`, and `bg` key values are required for some starter styles. If you choose not to use them, just replace their references in the appropriate files.

Supports a nested map style like the following:
```scss
$base-colors: (
  'type':(
    'base':red,
    'light': pink,
    'dark':maroon
  ),
  'links':(
    'base':blue,
    'light': sky,
    'dark': navy
  ),
  'bg': (
    'base': #fff,
    'dark': #ddd
  )
);

```
*/
/* SG
# Config/Debug Settings [[dev]]

@file _config.scss

_NOTE: These settings, when set to `true`, will slow down compilation somewhat._

##### `$$debug-fonts`
###### Boolean
Whether to include debug statements about font sizes and line-heights as they're generated. Useful if you're getting weird values on auto-generated line-heights.

* %: Distance from the lowest font-size.
* ub: Line-height upperbounds
* lb: Line-height lowerbounds
* lh: Final line-height (in pixels and unit-less).
* loops: Number of times it took to process the line-height. High numbers can indicate font-sizes that are very difficult to process.

##### `$$debug-baseline`
###### Boolean
Adds style for a `baseline-on` class that will show a grid of the baseline on any element (most useful on the `body` or `html` tag). Makes vertical alignment easier.


##### `$$debug-silent-classes`
###### Boolean
Stores all auto-generated silent classes into a map that is then output as a comment at the end of the final css. Useful for getting an overview of values that are stored by the framework.

*/
/* SG
# Config/Slick Settings [[dev]]

##### `$$slick-[]-[]`
Configuration for slick carousel jQuery plugin.
[See Slick documentation for more](https://github.com/kenwheeler/slick/#sass-variables)

*/
/* SG
# Variables/Globals [[dev]]

The variables here are created based on the config variables passed by the user. These are generally abstracted to make them a little easier to parse, programmatically.

##### `$$type-[h1-6,p,small]-lh`
###### boolean/unitless/pixel value
Parses `$$type-h[#]-size` for an optional line-height value, if none exists, pass it along to `baseline-calc()`.
@alias `$$h[#]-lh`

##### `$$type-[h1-6,p,small]-size`
###### Number (pixel)
Font sizes, as defined by the user or `$$auto-scale-type`.

##### `$$type-base-unit`
###### Number
Abstraction of the base spacing unit used in any mixin or function that defines spacing units.

##### `$$type-base-ratio`
###### Number
Ratio used to calculate the difference between font sizes and spacing units.

##### `$$type-headings`
###### List (number)
Used for defining automatic headings functions.

##### `$$type-modular-scale`
###### Number
Abstracts the `$$scale-ratio` and makes sure it's a positive number.

##### `$$all-breakpoints`
###### List
Stores all the names defined in `$$breakpoints` for use in abstract framework components so that if names are chagned, boilerplate media queries won't fail.

##### `$$breakpoint-smallest`
###### String
Grabs the first `$$breakpoints` name.

##### `$$breakpoint-largest`
###### String
Grabs the last `$$breakpoints` name.


*/
/* SG
# Tools/Font Face Generator [[dev]]

@file globals/tools/_t-fontface.scss

##### `@fonts()`
###### mixin(`$name`: `$$font-file-name`, `$path: $$font-file-location`, `$weights`: `$$font-weights`, `$italics`: `$$font-italics`)
A wrapper function for `@font-face()`. Takes global configuration variables and passes them to `@font-face()`. Loops through each `$name` based on `$weights` and `$italics`. Uses `$path` and `$name` to point to font files. Formats these variables so they can be passed to `@font-face()`.

Font file names must be the same as their CSS font-family values. Example: arial font, 400 weight would be arial400.ttf and the CSS value would be font-family: 'arial'; font-weight: 400.

@requires `@font-face()`

##### `@font-face()`
###### mixin(`$name`, `$font-files`, `$weight:false`,` $style:false`, `$eot:false`)
Generates cross-browser font-face declarations when called.
$name is required, arbitrary, and what you will use in font stacks.
**Arguments:**
* $font-files is required using font-files('relative/location', 'format'). For best results use this order: woff, opentype/truetype, svg
* $eot is required by IE, and is a relative location of the eot file.
* $weight shows if the font is bold, defaults to normal
* $style defaults to normal, might be also italic

Based on [Compass' font-face mixin](http://compass-style.org/reference/compass/css3/font_face/).

*/
@font-face {
  font-family: "Asap";
  src: url("fonts/Asap-400.eot");
  src: url('fonts/Asap-400.eot?#iefix') format('embedded-opentype'), url("fonts/Asap-400.woff") format("woff"), url("fonts/Asap-400.ttf") format("truetype"), url("fonts/Asap-400.svg#Asap400") format("svg");
  font-weight: 400;
  font-style: normal;
}

@font-face {
  font-family: "Asap";
  src: url("fonts/Asap-400-italic.eot");
  src: url('fonts/Asap-400-italic.eot?#iefix') format('embedded-opentype'), url('fonts/Asap-400-italic.woff') format('woff'), url('fonts/Asap-400-italic.ttf') format('truetype'), url('fonts/Asap-400-italic.svg#Asap400italic') format('svg');
  font-weight: 400;
  font-style: italic;
}

@font-face {
  font-family: "Asap";
  src: url("fonts/Asap-700.eot");
  src: url('fonts/Asap-700.eot?#iefix') format('embedded-opentype'), url("fonts/Asap-700.woff") format("woff"), url("fonts/Asap-700.ttf") format("truetype"), url("fonts/Asap-700.svg#Asap700") format("svg");
  font-weight: 700;
  font-style: normal;
}

@font-face {
  font-family: "Asap";
  src: url("fonts/Asap-700-italic.eot");
  src: url('fonts/Asap-700-italic.eot?#iefix') format('embedded-opentype'), url('fonts/Asap-700-italic.woff') format('woff'), url('fonts/Asap-700-italic.ttf') format('truetype'), url('fonts/Asap-700-italic.svg#Asap700italic') format('svg');
  font-weight: 700;
  font-style: italic;
}

@font-face {
  font-family: "opensans";
  src: url("fonts/opensans-200.eot");
  src: url('fonts/opensans-200.eot?#iefix') format('embedded-opentype'), url("fonts/opensans-200.woff") format("woff"), url("fonts/opensans-200.ttf") format("truetype"), url("fonts/opensans-200.svg#opensans200") format("svg");
  font-weight: 200;
  font-style: normal;
}

@font-face {
  font-family: "opensans";
  src: url("fonts/opensans-200-italic.eot");
  src: url('fonts/opensans-200-italic.eot?#iefix') format('embedded-opentype'), url('fonts/opensans-200-italic.woff') format('woff'), url('fonts/opensans-200-italic.ttf') format('truetype'), url('fonts/opensans-200-italic.svg#opensans200italic') format('svg');
  font-weight: 200;
  font-style: italic;
}

@font-face {
  font-family: "opensans";
  src: url("fonts/opensans-400.eot");
  src: url('fonts/opensans-400.eot?#iefix') format('embedded-opentype'), url("fonts/opensans-400.woff") format("woff"), url("fonts/opensans-400.ttf") format("truetype"), url("fonts/opensans-400.svg#opensans400") format("svg");
  font-weight: 400;
  font-style: normal;
}

@font-face {
  font-family: "opensans";
  src: url("fonts/opensans-400-italic.eot");
  src: url('fonts/opensans-400-italic.eot?#iefix') format('embedded-opentype'), url('fonts/opensans-400-italic.woff') format('woff'), url('fonts/opensans-400-italic.ttf') format('truetype'), url('fonts/opensans-400-italic.svg#opensans400italic') format('svg');
  font-weight: 400;
  font-style: italic;
}

@font-face {
  font-family: "opensans";
  src: url("fonts/opensans-700.eot");
  src: url('fonts/opensans-700.eot?#iefix') format('embedded-opentype'), url("fonts/opensans-700.woff") format("woff"), url("fonts/opensans-700.ttf") format("truetype"), url("fonts/opensans-700.svg#opensans700") format("svg");
  font-weight: 700;
  font-style: normal;
}

@font-face {
  font-family: "opensans";
  src: url("fonts/opensans-700-italic.eot");
  src: url('fonts/opensans-700-italic.eot?#iefix') format('embedded-opentype'), url('fonts/opensans-700-italic.woff') format('woff'), url('fonts/opensans-700-italic.ttf') format('truetype'), url('fonts/opensans-700-italic.svg#opensans700italic') format('svg');
  font-weight: 700;
  font-style: italic;
}

/* SG
# Mixins/Media Queries [[dev]]

@file globals/tools/_t-media-queries.scss

##### `@media-query()`
###### mixin(`$media-queries...`)
Enclose a block of code with a media query as named in `$breakpoints`. To create more consolodated code, most (if not all) media queries should be called through this mixin. Multiple media-queries can be defined, separated by a comma. This will place your content into multiple separate media-queries at once (useful if you need the same css at different breakpoints).

**Alternative Uses:**

* Passing multiple media queries separated by an `'and'` (quoted) to combine them, compiles to something like `@media screen and (min-width: 500px) and (max-width: 900px){}`.

* Passing a value like `min-width 1200px` or `max-height 300px` allows for arbitrary breakpoints.

* Passing `max 1200px 'and' smalls` will create a combined media-query with a predefined one from `$$breakpoints`.

* Passing `height smalls` will replace `width` with `height` within the `smalls` breakpoint. Similarly, using `min smalls` would replace 'max' with 'min'.

@requires `mq-arglist-to-map()`, `$$breakpoints`
@alias @mq(), @breakpoint(), @bp()

*/
/* SG

# Mixins/CSS Helpers [[dev]]

##### `@specificity()`
###### mixin(`$specificity: 1`)
Specificity increaser. Useful for increasing specificity of a selector instead of using `!important`.
```scss
.class {
    @include specificity(2) {
        color: red;
    }
}

//css
.class.class {
    color: red;
}

```
[Reference](http://www.sitepoint.com/selector-specificity-css-preprocessors/)

*/
/* SG

##### `@opacity()`
###### mixin(`$opacity`)
Cross-browser (including IE8-) opacity.
[Reference](https://gist.github.com/jgv/745754)

*/
/* SG
##### `@border()`
###### mixin(`$border`)
Allows creating many border properties at once. Works like the standard border shorthand style but allows varied styles on different border directions.

```scss
	//scss
	.foo {
		@include border(2px 3px solid dashed dotted blue currentColor yellow);
	}

	//css
	.foo {
		border-width: 2px 3px;
		border-style: solid dashed dotted;
		border-color: blue currentColor yellow;
	}
```
*/
/* SG

# Mixins/Buttons [[dev]]

##### `@button()`
###### mixin(`$bg-color`: `color('links')`, `$text-color`: `null`, `$border`: `null`, `$radius`: `null`, `$text-radius`: `null`, `$style`: `null`, `$inset`: `false`)
Generates common button styles, allowing for simple creation of more complex gradient styles. Intelligently excludes unnecessary styles from states like hover, focus, and active. _Does not generate hover, focus, or active psuedo selectors on its own._

**Accepted arguments**
* `$bg-color`: Color values. This cannot accept null.
* `$text-color`: Color or null (null will let the mixin decide the best color based on contrast).
* `$border`: Any border properties (colors, styles, widths) or `null`. Uses the `@border()` mixin.
* `$radius`: `border-radius` values. `null` produces no border-radius property.
* `$style`: `null`, `shiny` or `reflective`.
   `shiny` creates a simple gradient backgroud based on the `$bg-color`.
   `reflective` creates a stacked gradient based on the `$bg-color`.
* `$inset`: Boolean. `True` adds a dark box-shadow inset.
   If combined with 'shiny' or 'reflective' `$style`, background gradients are inverted.

*/
/* SG
# Tools/Z-Index [[dev]]

@file globals/tools/_t-zindex.scss

##### `z()`
###### function(`$layer`, `$modifier: false`)
Returns a numeric value (used for z-index) from a named layer, stored in `$$z-index`. Changing the modifier to anything other than `false` will add 1 plus however many times the value has been called. So, if you've called `z(head, true)` 5 times, and `head`'s default value is 100, you would get a value of 105.

The `$modifier` is useful if you'd like to closely layer z-indexes within the same module. It is rarely necessary, though since z-indexes stack.

*/
/* SG
# Tools/Alignment Utilities [[dev]]

@file tools/_t-alignment.scss

##### `@alignment-utilities()`
###### mixin(`$namespace:''`, `$silent:true`, `$important:false`)
Generates namespaced alignment classes.


##### `@alignment-utilities-init()`
###### mixin(`$breakpoints:` `$$all-breakpoints`, `$namespace:''`, `$silent:true`, `$important:false`)
The responsive component to `@alignment-utilities()`. Invoke `@alignment-utilites()` with that loops through a set of media-queries defined in `$$breakpoints`. This is most useful for creating responsive alignment classes.

*/
/* SG
# Tools/Display Utilities [[dev]]

@file globals/tools/_t-display.scss

##### `@display-utilities()`
###### mixin(`$namespace:"", $silent:false, $important:true, $class-list:$display-classes`)
Generates classes with display properties defined in `$class-list`. Intelligently extends duplicated display properties.


##### `@display-utilities-init()`
###### mixin(`$breakpoints: $all-breakpoints, $namespace: '', $silent: true, $important: false`)
The responsive component to `@display-utilities()`. Invoke `@display-utilites()` with that loops through a set of media-queries defined in `$$breakpoints`. This is most useful for creating responsive display classes.

*/
/* SG
# Grid System/Variables [[dev]]

##### `$$human-readable-numerators`
###### List (string)
First words used to represent numbers in a fraction; Corresponds to grid interval names (one, two, three, etc.).


##### `$$human-readable-denominators`
###### List (string)
Second words used to represent numbers in a fraction; Corresponds to grid interval names (whole, half, third, etc.).
*/
/* SG
# Grid System/Functions [[dev]]

@file globals/tools/_t-grid-system.scss

##### `grid-size()`
###### function(`$size, $total:` `$$grid-columns`)
Creates a percentage based on the `$size / $total`.

*/
/* SG

# Grid System/Mixins [[dev]]

##### `@width()`
###### mixin(`$columns, $total:` `$$grid-columns`)
Creates a width property with a percentage based on the `$columns / $total`.
@requires `grid-size()`, `$$grid-columns`

*/
/* SG

##### `@width-setup()`
###### mixin(`$namespace:"", $silent:` `$$grid-silent-classes`, $type:"width")
 Uses `$$human-readable-numerators` and `$$human-readable-denominators` to create percentage widths based on `$$grid-columns`. `$type` accepts "width", "push" or "pull".

@requires `grid-size()`, `cache()`, `$$human-readable-numerators`, `$$human-readable-denominators`

*/
/* SG
# Grid System/Mixins [[dev]]

@file globals/tools/_t-grid-system.scss

##### `@silent-relative()`
###### mixin()
Allows for conditional `position: relative` for silent push or pull classes.

*/
/* SG
# Grid System/Mixins [[dev]]

##### `@grid-setup()`
###### mixin(`$silent:` `$$grid-silent-classes`)
Creates basic grid classes (listed below), called by `@grid-init()`.

_Note: `[% || .]` denotes a class that is either silent(`%`) or standard CSS(`.`). Based on the `$$grid-silent-classes` setting._

* ###### `%grid_reset`
 Useful for resetting the grid's effects without making full grid items.

* ###### `[% || .]grid`
 Wrapper class for grid widths. Puts a negative left margin of one unit. When not using floats, adds appropriate letter-spacing (for inline-block-based grid).

* ###### `[% || .]grid_item`
 Sets up a grid column. Uses column padding inherited from parent `%/.grid`.

* ###### `[% || .]grid_rev`
 Makes grid columns start from the right.

* ###### `[% || .]grid_right`
 Makes all grid columns align to the right.

* ###### `[% || .]grid_center`
 Makes all grid columns align to the center.

* ###### `[% || .]grid_middle`
 Makes all grid columns vertical align to the middle.

* ###### `[% || .]grid_bottom`
 Makes all grid columns vertical align to the bottom.

* ###### `[% || .]grid_full`
 Eliminates padding between grid columns.

* ###### `[% || .]grid_narrow`
 Reduces the padding between grid columns.

* ###### `[% || .]grid_wide`
 Increases the padding between grid columns.

*/
/* SG
# Grid System/Mixins [[dev]]

##### `@grid-init()`
###### mixin(`$silent:` `$$grid-silent-classes`, `$responsive`)
Creates responsive grid classes by running through all the grid-setup mixins. Uses the media-queries defined in the `$breakpoint-has-` variables to create media-query-scoped classes.
@requires `@media-query()`, `@grid-setup()`, `@width-setup()`, `$$breakpoints-has-push`, `$$breakpoint-has-pull`

*/
/* SG
# Tools/Spacing Utilities [[dev]]

@file tools/_t-spacing.scss

##### `layout-type()`
###### function(`$space-type:''`, `$space-direction:''`)
Parse strings to determine spacing types. Checks for certain characters within a string to determine whether to output padding or margin, followed by a direction. Private function used by `@spacing-utilities()`.


##### `@spacing-utilities()`
###### mixin(`$namespace:''`, `$config:()`)
Generates responsive spacing and padding classes. The `$namespace` argument is the media query's name, which will be appended to all generated classes. The `$config` argument is a map that allows JS-style arguments. Outputs class name as: `breakpoint_prefix_direction_amount`.

**`$config` Keys:**
* `silent:` boolean for outputting silent/non-silent classes.
* `important:` whether to output !important after each declaration.
* `directions:` names that get appended to class names.
* `amounts:` how much to multiply spacing unit by `$$base-line-height`.
* `names:` corresponding names for each `amounts` that gets appended to class names.
* `prefixes:` first word in the class name. Must contain the words 'pad' and 'space'. Used by `layout-type()` to determine padding or margin.


##### `@spacing-utilities-init()`
###### mixin(`$breakpoints:` `$$all-breakpoints`, `$namespace:''`, `$config:(silent:true)`)
The responsive component to `@spacing-utilities()`. Invoke `@spacing-utilites()` with that loops through a set of media-queries defined in `$$breakpoints`. This is most useful for creating responsive spacing classes.

*/
/* SG
# Tools/Type Utilities [[dev]]

@file tools/_t-type.scss

##### `@type-utilities()`
###### mixin(`$namespace:''`, `$silent: true`, `$important: false)`
A set of typography-based utility classes that can be generated within media-queries via the `$namespace` argument. Can output silent or real css classes. Can also make declarations `!important`.

##### `@type-utilities-init()`
###### mixin(`$breakpoints`:`$$all-breakpoints`, `$namespace:''`, `$silent: true`, `$important: false`)
The responsive component to `@type-utilities()`. Invoke `@type-utilites()` with that loops through a set of media-queries defined in `$$breakpoints`. This is most useful for creating responsive typography-based utility classes.

*/
/* SG
# Mixins/Typography [[dev]]

##### `@px-to-rems()`
###### mixin(`$property`, `$sizes`, `$important`: `false`, `$base-font`: `$$base-font-size`)
Takes a pixel value and creates a property with a `rem` value. If `$$rem-px-fallback` is `true`, a pixel fallback is also included. `$sizes` also accepts 'auto'.
@alias `@rems()`
@requires `px-to-rems()`

*/
/* SG

##### `@type-font-size()`
###### mixin(`$font-size, $line-height: auto, $font-base:``$$base-font-size`)
Quickly generate a font-size in rems, with a pixel fallback, based on the value we pass into the mixin. Optionally calculates line-height using `$$base-line-height`.

_`$line-height` also accepts a pixel value and will be converted to a unitless one._

@alias `@font-size()`
@requires `@px-to-rems()`, `cache()`, `baseline-calc()`

*/
/* SG

##### `@type-space()`
###### mixin(`$properties, $multipliers, $important: false`)
Output REM values using the typographic grid. This is the prefered method of adding padding and margins because it enforces consistent spacing around all elements.

**Arguments:**
* `$properties`: Can be any `CSS` property that accepts a length value (e.g. `rem`). Also accepts multiple properties as a nested list (e.g. `(padding-left, padding-right)`).
* `$multipliers`: Accepts unitless values that get converted to `rem` units which are a multiple of the typographic grid. Can be multiple values, **separated by spaces**, in the case of `margin` or `padding`.
* `$important`: Accepts `true` or `!important`.

**Example**
```scss
// SCSS input
.foo {
	@include type-space(padding, 1 .25 .5 auto, '!important');
}

// CSS output
.foo {
	padding: 24px 8px 12px auto !important;
	padding: 1.5rem .375rem .75rem auto !important;
}
```

@requires `@px-to-rems()`, `str-contains()`
@alias `@space()`

*/
/* SG
# Colors
A good way to look over your color pallete.

Include a bunch of elements with `class="color-blocks"`, and the css will do the rest. Requires `@color-palette-output()` to generate. Uses `$$colors` map.

```html_example
<div class="color-block"></div><div class="color-block"></div><div class="color-block"></div><div class="color-block"></div><div class="color-block"></div><div class="color-block"></div><div class="color-block"></div>
<div class="color-block"></div><div class="color-block"></div><div class="color-block"></div><div class="color-block"></div><div class="color-block"></div><div class="color-block"></div><div class="color-block"></div>
<div class="color-block"></div><div class="color-block"></div><div class="color-block"></div><div class="color-block"></div><div class="color-block"></div><div class="color-block"></div><div class="color-block"></div>
<div class="color-block"></div><div class="color-block"></div><div class="color-block"></div><div class="color-block"></div><div class="color-block"></div><div class="color-block"></div><div class="color-block"></div>
<div class="color-block"></div><div class="color-block"></div><div class="color-block"></div><div class="color-block"></div><div class="color-block"></div><div class="color-block"></div><div class="color-block"></div>
<div class="color-block"></div><div class="color-block"></div><div class="color-block"></div><div class="color-block"></div><div class="color-block"></div><div class="color-block"></div><div class="color-block"></div>
<div class="color-block"></div><div class="color-block"></div><div class="color-block"></div><div class="color-block"></div><div class="color-block"></div><div class="color-block"></div><div class="color-block"></div>
```
*/
.color-block:nth-child(1) {
  background-color: #0a1c2b;
  color: #fff;
  padding: 2% 1% 2.5%;
}

.color-block:nth-child(1):before {
  content: "type";
}

.color-block:nth-child(1):after {
  content: "#0a1c2b";
}

.color-block:nth-child(2) {
  background-color: #0d497b;
  color: #fff;
  padding: 2% 1% 2.5%;
}

.color-block:nth-child(2):before {
  content: "links";
}

.color-block:nth-child(2):after {
  content: "#0d497b";
}

.color-block:nth-child(3) {
  background-color: #f6f8fb;
  color: #000;
  padding: 2% 1% 2.5%;
}

.color-block:nth-child(3):before {
  content: "bg";
}

.color-block:nth-child(3):after {
  content: "#f6f8fb";
}

.color-block:nth-child(4) {
  background-color: #5E839E;
  color: #fff;
  padding: 2% 1% 2.5%;
}

.color-block:nth-child(4):before {
  content: "styleguide";
}

.color-block:nth-child(4):after {
  content: "#5E839E";
}

.color-block:nth-child(5) {
  background-color: #bf0516;
  color: #fff;
  padding: 2% 1% 2.5%;
}

.color-block:nth-child(5):before {
  content: "accent";
}

.color-block:nth-child(5):after {
  content: "#bf0516";
}

.color-block:nth-child(6) {
  background-color: #bada55;
  color: #000;
  padding: 2% 1% 2.5%;
}

.color-block:nth-child(6):before {
  content: "success";
}

.color-block:nth-child(6):after {
  content: "#bada55";
}

.color-block:nth-child(7) {
  background-color: #556776;
  color: #fff;
}

.color-block:nth-child(7):before {
  content: "type light";
}

.color-block:nth-child(7):after {
  content: "#556776";
}

.color-block:nth-child(8) {
  background-color: #5894bd;
  color: #fff;
}

.color-block:nth-child(8):before {
  content: "links light";
}

.color-block:nth-child(8):after {
  content: "#5894bd";
}

.color-block:nth-child(9) {
  background-color: #fbfcfd;
  color: #000;
}

.color-block:nth-child(9):before {
  content: "bg light";
}

.color-block:nth-child(9):after {
  content: "#fbfcfd";
}

.color-block:nth-child(10) {
  background-color: #95C3CE;
  color: #000;
}

.color-block:nth-child(10):before {
  content: "styleguide light";
}

.color-block:nth-child(10):after {
  content: "#95C3CE";
}

.color-block:nth-child(11) {
  background-color: #df5061;
  color: #fff;
}

.color-block:nth-child(11):before {
  content: "accent light";
}

.color-block:nth-child(11):after {
  content: "#df5061";
}

.color-block:nth-child(12) {
  background-color: #ddeda0;
  color: #000;
}

.color-block:nth-child(12):before {
  content: "success light";
}

.color-block:nth-child(12):after {
  content: "#ddeda0";
}

.color-block:nth-child(13) {
  background-color: #99a4aa;
  color: #fff;
}

.color-block:nth-child(13):before {
  content: "type lighter";
}

.color-block:nth-child(13):after {
  content: "#99a4aa";
}

.color-block:nth-child(14) {
  background-color: #9cb6ca;
  color: #fff;
}

.color-block:nth-child(14):before {
  content: "links lighter";
}

.color-block:nth-child(14):after {
  content: "#9cb6ca";
}

.color-block:nth-child(15) {
  background-color: #fbfcfd;
  color: #000;
}

.color-block:nth-child(15):before {
  content: "bg lighter";
}

.color-block:nth-child(15):after {
  content: "#fbfcfd";
}

.color-block:nth-child(16) {
  background-color: #D1F5ED;
  color: #000;
}

.color-block:nth-child(16):before {
  content: "styleguide lighter";
}

.color-block:nth-child(16):after {
  content: "#D1F5ED";
}

.color-block:nth-child(17) {
  background-color: #e594a2;
  color: #fff;
}

.color-block:nth-child(17):before {
  content: "accent lighter";
}

.color-block:nth-child(17):after {
  content: "#e594a2";
}

.color-block:nth-child(18) {
  background-color: #e3f0bb;
  color: #000;
}

.color-block:nth-child(18):before {
  content: "success lighter";
}

.color-block:nth-child(18):after {
  content: "#e3f0bb";
}

.color-block:nth-child(19) {
  background-color: #ced2d5;
  color: #000;
}

.color-block:nth-child(19):before {
  content: "type lightest";
}

.color-block:nth-child(19):after {
  content: "#ced2d5";
}

.color-block:nth-child(20) {
  background-color: #cfdbe5;
  color: #000;
}

.color-block:nth-child(20):before {
  content: "links lightest";
}

.color-block:nth-child(20):after {
  content: "#cfdbe5";
}

.color-block:nth-child(21) {
  background-color: #fdfefe;
  color: #000;
}

.color-block:nth-child(21):before {
  content: "bg lightest";
}

.color-block:nth-child(21):after {
  content: "#fdfefe";
}

.color-block:nth-child(22) {
  background-color: #29DECE;
  color: #000;
}

.color-block:nth-child(22):before {
  content: "styleguide lightest";
}

.color-block:nth-child(22):after {
  content: "#29DECE";
}

.color-block:nth-child(23) {
  background-color: #f2cdd0;
  color: #000;
}

.color-block:nth-child(23):before {
  content: "accent lightest";
}

.color-block:nth-child(23):after {
  content: "#f2cdd0";
}

.color-block:nth-child(24) {
  background-color: #f1f8dd;
  color: #000;
}

.color-block:nth-child(24):before {
  content: "success lightest";
}

.color-block:nth-child(24):after {
  content: "#f1f8dd";
}

.color-block:nth-child(25) {
  background-color: #050f16;
  color: #fff;
}

.color-block:nth-child(25):before {
  content: "type dark";
}

.color-block:nth-child(25):after {
  content: "#050f16";
}

.color-block:nth-child(26) {
  background-color: #0b3b64;
  color: #fff;
}

.color-block:nth-child(26):before {
  content: "links dark";
}

.color-block:nth-child(26):after {
  content: "#0b3b64";
}

.color-block:nth-child(27) {
  background-color: #e4eaf3;
  color: #000;
}

.color-block:nth-child(27):before {
  content: "bg dark";
}

.color-block:nth-child(27):after {
  content: "#e4eaf3";
}

.color-block:nth-child(28) {
  background-color: #475665;
  color: #fff;
}

.color-block:nth-child(28):before {
  content: "styleguide dark";
}

.color-block:nth-child(28):after {
  content: "#475665";
}

.color-block:nth-child(29) {
  background-color: #a60413;
  color: #fff;
}

.color-block:nth-child(29):before {
  content: "accent dark";
}

.color-block:nth-child(29):after {
  content: "#a60413";
}

.color-block:nth-child(30) {
  background-color: #b2d540;
  color: #000;
}

.color-block:nth-child(30):before {
  content: "success dark";
}

.color-block:nth-child(30):after {
  content: "#b2d540";
}

.color-block:nth-child(31) {
  background-color: #06111a;
  color: #fff;
}

.color-block:nth-child(31):before {
  content: "type darker";
}

.color-block:nth-child(31):after {
  content: "#06111a";
}

.color-block:nth-child(32) {
  background-color: #082c4a;
  color: #fff;
}

.color-block:nth-child(32):before {
  content: "links darker";
}

.color-block:nth-child(32):after {
  content: "#082c4a";
}

.color-block:nth-child(33) {
  background-color: #aeb6be;
  color: #000;
}

.color-block:nth-child(33):before {
  content: "bg darker";
}

.color-block:nth-child(33):after {
  content: "#aeb6be";
}

.color-block:nth-child(34) {
  background-color: #314958;
  color: #fff;
}

.color-block:nth-child(34):before {
  content: "styleguide darker";
}

.color-block:nth-child(34):after {
  content: "#314958";
}

.color-block:nth-child(35) {
  background-color: #77030d;
  color: #fff;
}

.color-block:nth-child(35):before {
  content: "accent darker";
}

.color-block:nth-child(35):after {
  content: "#77030d";
}

.color-block:nth-child(36) {
  background-color: #729833;
  color: #fff;
}

.color-block:nth-child(36):before {
  content: "success darker";
}

.color-block:nth-child(36):after {
  content: "#729833";
}

.color-block:nth-child(37) {
  background-color: #03080d;
  color: #fff;
}

.color-block:nth-child(37):before {
  content: "type darkest";
}

.color-block:nth-child(37):after {
  content: "#03080d";
}

.color-block:nth-child(38) {
  background-color: #041625;
  color: #fff;
}

.color-block:nth-child(38):before {
  content: "links darkest";
}

.color-block:nth-child(38):after {
  content: "#041625";
}

.color-block:nth-child(39) {
  background-color: #677077;
  color: #fff;
}

.color-block:nth-child(39):before {
  content: "bg darkest";
}

.color-block:nth-child(39):after {
  content: "#677077";
}

.color-block:nth-child(40) {
  background-color: #12334A;
  color: #fff;
}

.color-block:nth-child(40):before {
  content: "styleguide darkest";
}

.color-block:nth-child(40):after {
  content: "#12334A";
}

.color-block:nth-child(41) {
  background-color: #390207;
  color: #fff;
}

.color-block:nth-child(41):before {
  content: "accent darkest";
}

.color-block:nth-child(41):after {
  content: "#390207";
}

.color-block:nth-child(42) {
  background-color: #38521a;
  color: #fff;
}

.color-block:nth-child(42):before {
  content: "success darkest";
}

.color-block:nth-child(42):after {
  content: "#38521a";
}

.color-block {
  width: 15.66667%;
  padding: 1%;
  margin-right: .95%;
  float: left;
  overflow: hidden;
}

.color-block:before {
  font-size: 11.85185px;
  font-size: 0.74074rem;
  display: block;
  white-space: nowrap;
}

.color-block:after {
  font-size: 8.77915px;
  font-size: 0.5487rem;
  display: block;
}

.color-block:before {
  text-transform: capitalize;
}

.color-block:after {
  letter-spacing: 0.1em;
}

/******Base Layout******/
.sg-body {
  margin: 0;
}

.sg-wrap {
  display: block;
  width: 100%;
  min-height: 100vh;
  margin: 0;
  overflow: auto;
}

.sg-menu {
  position: absolute;
  vertical-align: top;
  background-color: #12334A;
  width: 18rem;
  top: 0;
  left: 0;
  bottom: 0;
  font-size: .9em;
}

.sg-main {
  padding-left: 18rem;
  -webkit-transition: padding .15s ease-out;
          transition: padding .15s ease-out;
}

.sg-category {
  padding-left: 5%;
  padding-right: 5%;
  overflow: auto;
}

.sg-category_wrap {
  max-width: 58em;
  /* Should be wider for universal box-sizing: border-box */
  margin: auto;
}

.sg-example {
  width: 110%;
  margin-left: -5%;
}

@media only screen and (max-width: 1100px) {
  .sg-example {
    width: 115%;
    margin-left: -7.5%;
  }
  .sg-menu {
    width: 10em;
  }
  .sg-main {
    padding-left: 10em;
  }
}

@media only screen and (max-width: 700px) {
  .sg-menu {
    width: 0;
  }
  .sg-main {
    padding-left: 0;
  }
}

/******Menu******/
.sg-menu {
  -webkit-transition: all .2s ease-out;
          transition: all .2s ease-out;
  overflow: auto;
}

.sg_menu_list,
.sg-menu_item {
  padding: 0;
  margin: 0;
  position: relative;
}

.sg-menu_list {
  list-style: none;
  padding: 0;
  color: rgba(29, 234, 216, 0.15);
  /* Used for border colors */
}

.sg-menu_section {
  border-top: 1px solid;
}

.sg-menu_article > .sg-menu_link {
  color: rgba(172, 209, 218, 0.65);
}

.sg-category-active {
  background: rgba(142, 204, 210, 0.04);
}

/* Menu links */
.sg-menu_link {
  display: block;
  padding: .75rem 1.65rem .65rem;
  text-decoration: none;
  color: #95c3ce;
}

.sg-menu_link:hover,
.sg-menu_link:focus {
  background-color: rgba(134, 230, 240, 0.05);
  color: #acd1da;
}

.sg-toc-active > .sg-menu_link {
  background-color: rgba(134, 230, 240, 0.15);
}

.sg-menu_section > .sg-menu_link {
  color: #0ED2C0;
}

.sg-menu_article .sg-menu_link {
  padding-left: 2.5rem;
  padding-right: 2rem;
}

.sg-menu_article {
  display: none;
}

.sg-category-active .sg-menu_article,
.sg-menu_article.sg-toc-active {
  display: block;
}

.sg-category-active > .sg-menu_link {
  border-left: 2px solid #18d2c0;
  text-indent: -2px;
}

/******Project Logo******/
.sg-logo {
  font-weight: normal;
  background-color: #18d2c0;
  color: #fff;
  margin: 0;
  font-size: 1.5em;
}

.sg-logo:hover,
.sg-logo:focus {
  background-color: #14E9D5;
  color: #ECFCFB;
}

.sg-logo .sg-menu_link {
  color: inherit;
  padding-top: 1em;
  padding-bottom: .75em;
}

/******Headings******/
.sg-heading-section {
  color: #88a8b3;
  font-size: 2.8587rem;
  line-height: 1.57414;
  font-weight: normal;
}

.sg-heading-category {
  color: #18d2c0;
  font-weight: normal;
  font-size: 1.6em;
}

.sg-heading-article {
  color: #18d2c0;
  font-weight: normal;
}

.sg-heading .sg-code {
  color: #435270;
}

.sg-heading-6 {
  font-weight: normal;
}

.sg-heading-5 + .sg-heading-6 {
  margin-top: -1rem;
  padding-bottom: .25rem;
}

/******Section, Category & Article Layout******/
.sg-section:nth-child(even) {
  padding-bottom: 1.5em;
}

/* Article spacing */
.sg-section,
.sg-article_comment,
.sg-example {
  margin-bottom: 1.5em;
}

.sg-category:nth-child(even) {
  background-color: rgba(224, 229, 235, 0.3);
}

.sg-article {
  margin-bottom: 3em;
}

.sg-category,
.sg-article {
  padding-top: 3em;
}

.sg-article_comment {
  margin-top: -1.5rem;
}

.sg-article_head {
  padding-bottom: 1.5em;
}

.sg-example {
  background-color: rgba(255, 255, 255, 0.8);
  border-top: 1px solid #fff;
}

.sg-example:before {
  content: 'Example';
  background-color: #EDF0F2;
  color: #647582;
  display: inline-block;
  font-size: .9em;
  padding: .45em .5em;
  margin-bottom: .5em;
  margin-left: 1px;
  clear: both;
}

.sg-example_wrap {
  padding: .75em 1.25em;
  position: relative;
}

/* Clearfix */
.sg-example_wrap:after {
  content: " ";
  display: table;
  height: 0;
  width: 100%;
}

.sg-example_wrap:after {
  clear: both;
}

.sg-markup_wrap {
  margin: 0;
}

.sg-markup-block {
  border-top: 1px solid #EFF2F6;
}

.sg-codespan {
  color: #648D9C;
}

.sg-file {
  color: #88a8b3;
}

.sg-codeblock {
  margin-bottom: 2em;
}

.sg-code-meta + .sg-code-meta {
  margin-top: -1.5rem;
}

.sg-code-meta:before {
  content: attr(data-code-meta) ": ";
  text-transform: capitalize;
}

/* Highlight.js Code Blocks */
#styleguide .sg-markup_wrap,
#styleguide .sg-markup code {
  overflow: auto;
}

#styleguide .sg-markup_wrap {
  max-height: 30em;
}

#styleguide .sg-markup code {
  display: block;
  word-wrap: normal;
  white-space: pre;
  padding: 1em;
}

/* Custom background color to match nav. Overwrites highlight.js default */
#styleguide .hljs {
  background-color: #40546b;
  font-size: .9em;
}

#styleguide .hljs-comment {
  color: #8aaeb7;
}
