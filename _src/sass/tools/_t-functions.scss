/* SG
# Functions/General [[dev]]

##### `cache()`
###### function(`$function-name, $args...`)
Memoize (cache) a function's return values and arguments. Speeds up processing on intensive functions that get called many times (with the same arguments).

_NOTE: This can actually **increase** processing time if used too often or on simple functions as the lookup process isn't free. Every cached value is unique._

@returns function result

*/

//Caching(memoization) function
$c-i: 0;
$cached-values: ();

@function cache($function-name, $args...) {
    $cache-map: "#{$function-name}, #{$args}";
    $cached-value: map-get($cached-values, $cache-map);

    @if $cached-value != null and $cached-value != '' {
        //$c-i: 1 + $c-i !global;
        //@debug "(#{$c-i}):#{$cache-map}";
        @return $cached-value;
    } @else {
        $result: call(safe-get-function($function-name), $args...);
        $cached-values: map-merge($cached-values, ($cache-map: $result)) !global;
        @return $result;
    }
}

/* SG
# Functions/Conversion [[dev]]

##### `strip-units()`
###### function(`$value`)
Remove lengths (`px`, `em`, `rem`, etc.) from a value. Usually a variable. This is sometimes required because Sass cannot calculate incompatible units (`px * rem` for instance).
[Reference](http://stackoverflow.com/questions/12328259/how-do-you-strip-the-unit-from-any-number-in-sass)

##### `percentage-to-decimal()`
###### function(`$percentage`)
Changes percent value to decimal.
@returns number

##### `px-to-vw()`
###### function(`$pixels`)
Converts pixel dimensions to viewport width (vw) dimensions.
@returns number (vw)

##### `px-to-rems()`
###### function(`$pixels, $base-font:` `$$base-font-size`)
Function for calculating `rem` values. Used by `@px-to-rems()`. The `$base-size` is used to calculate the value (e.g. if the body's font-size is `16px`, then the rem value of `24px` would be `1.5rem`).
@returns number (rems)
@alias rems()

##### `px-to-ems()`
###### function(`$pixels, $context:` `$base-font-size`)
Function for calculating `em` values. The `$context` is used to calculate the final value. Different from `px-to-rems()` by generating a value with an `em`. `$context` is often necessary based on the situation.
@returns number(ems)
@alias ems()

##### `list-to-string()`
###### function(`$list, $separator:','`)
Converts a list to a string with an optional separator.
@returns string
@alias str-join()

##### `str-to-number()`
###### function(`$string, $unitless: false`)
Converts a number-like string to a number. Since Sass accepts quoted and non-quoted values like `"10px"` and `10px`, but can only do math on the unquoted (number) value, it is sometimes necessary to convert/cast a string to a number.
@returns number
*/

@function safe-get-function($name) {
    @if function-exists('get-function') {
        @return get-function($name);
    } @else {
        @return $name;
    }
}

@function strip-units($value) {
    @return $value / ($value * 0 + 1);
}

@function percentage-to-decimal($percentage) {
    @if unit($percentage) == '%' {
        $percentage: $percentage/100%;
    }
    @return $percentage;
}


@function px-to-vw($pixels) {
    $vw-context: ($max-site-width * .01) * 1px;
    @return ($pixels / $vw-context) * 1vw;
}

@function px-to-rems($pixels, $base-size: $base-font-size) {
    @if $pixels == 'auto' {
        @return $pixels;
    }

    @if (unitless($pixels)) {
        $pixels: $pixels * 1px;
    }

    //If 0, don't include units
    @if $pixels == 0px {
        @return 0;
    }

    $pixels: ($pixels / $base-size) * 1rem;

    @return $pixels;

}
//ALIAS: Same as above
@function rems($pixels, $base-size:$base-font-size){
    @return px-to-rems($pixels, $base-size);
}

//Pixels to em
@function px-to-ems($pixels, $context: $base-font-size) {
    @if (unitless($pixels)){
        $pixels: $pixels * 1px;
    }

    //If 0, don't include rems
    @if $pixels == 0px {
        @return 0;
    }

    $pixels: ($pixels / $context) * 1em;

    @return $pixels;
}
//ALIAS: same as above
@function ems($pixels, $context: $base-font-size) {@return px-to-ems($pixels, $context);}

//List Join
//Convert a list to a string
@function list-to-string($list, $separator: ",") {
    $string: "";

    @for $i from 1 through length($list) {
        $string: str-append($string, #{nth($list, $i)});

        @if $i != length($list) {
            $string: str-append($string, $separator);
        }
    }

    @return $string;
}

//String to number conversion
// Casts a number-like string to a true number
@function str-to-number($string, $unitless: false){
    //Maps to check against
    $str-numbers:('0':0,'1':1,'2':2,'3':3,'4':4,'5':5,'6':6,'7':7,'8':8,'9':9);
    //Leading 0 allows us to loop backwards without reaching null
    $string: 0 + $string;

    $total: 0;
    $decimal: 1;
    $negative: 1;
    $number-found: false;
    $unit: -1;

    //Loop backwards through string until a number is found
    @while not $number-found {

        //Break if loop is longer than string, or longer than any possible unit value
        @if (($unit * -1) >= str-length($string)) or $unit < -6 {
            $unit: -2;
            //set unitless to true regardless of user input.
            $unitless: true;
            $number-found: 1;
        }

        $slice: str-slice($string, $unit, $unit);
        $number-found: map-get($str-numbers, $slice);
        $unit:  $unit - 1;

    }
    //Compensate for Sass' non-zero
    $unit: $unit + 1;
    $value: str-slice($string, 1, $unit);
    $str-length: str-length($value);

    //Just return value if it's length is 2
    @if $str-length == 2 {
        @return map-get($str-numbers, str-slice($string, 2));
    }

    //Loop forward through string
    @for $i from 1 through $str-length {
        //Slice at each value
        $sub-string: str-slice($value, $i, $i);
        //Check for known number, convert to real number
        $number: map-get($str-numbers, $sub-string);

        @if $number {
            //multiply total by ten to give us proper number placement
            $total: $total * 10 + $number;

        }@else if $sub-string == '-' {
            //check for negative
            $negative: -1;

        }@else if $sub-string == '.' {
            //check for decimal
            $decimal-pos: $str-length - $i;
            //Create a number to multiply by to recreate decimal
            @for $j from 1 through $decimal-pos {
                $decimal: $decimal * 0.1;
            }
        }
    }

    @if $unitless or $unit == -1 {
        $unit: 1;
    }@else {
        $str-units: (
            'px':1px,'%':1%,'em':1em,'rem':1rem,'ex':1ex,
            'cm':1cm,'mm':1mm,'ch':1ch,'pica':1pica,'in':1in,'pt':1pt,'pc':1pc,
            'vw':1vw,'vh':1vh,'vmin':1vmin,'vmax':1vmax
        );
        $unit-str: str-slice($string, ($unit + 1), -1);
        $unit: map-get($str-units, $unit-str);

        @if not $unit {
            @warn "#{$unit-str} is not a valid CSS unit.";
            $unit: 1;
        }
    }
    //Take number and multiply it as necessary to achieve original.
    @return ($total * $decimal)* $negative * $unit;
}

/* SG
# Functions/Strings & Lists [[dev]]

[Reference](https://github.com/devatrox/Sunglass)

##### `contains()`
###### function(`$data, $value`)
Generic `contains` function(similar to javascript's `indexOf`). Parses a variable(`$data`) for a `$value`. Returns boolean.
@returns boolean
@requires `str-contains()`, `list-contains()`

##### `str-join()`
###### function(`$list, $separator:','`)
Converts a map or list to a string (`('this', 'and', 'this')` becomes `'this,and,this'`).
@returns string

##### `str-contains()`
###### function(`$string, $value, $pos: 0`)
Checks if a `$string` contains a `$value`. Optionally accepts a start positon.
@returns boolean

##### `str-append()`
###### function(`$data, $separator:','`)
Adds one string to another (e.g. `str-append('hello', 'world')` becomes `hello world`).
@returns string

##### `list-contains()`
###### function(`$list, $value`)
Checks whether a `$list` contains a `$value`.
@returns boolean

##### `list-print()`
###### function(`$list, $depth: 1`)
Used to turn a list into a flat string. For debug purposes.
@returns string

##### `to-list()`
###### function(`$string, $keep: 'both'`)
Convert a value to a list. `$keep` accepts `'keys'`, `'values'`, or `'both'` for map conversion.
@returns list

*/

//To list
@function to-list($value, $keep: "both") {
    $keep: if(index("keys" "values" "both", $keep), $keep, "both");

    @if type-of($value) == "map" {
        $keys: ();
        $values: ();

        @each $key, $val in $value {
            $keys: append($keys, $key);
            $values: append($values, $val);
        }

        @if $keep == "keys" {
            @return $keys;
        }
        @else if $keep == "values" {
            @return $values;
        }
        @else {
            @return zip($keys, $values);
        }
    }

    @return if(type-of($value) != list, ($value,), $value);
}

//General 'contains' checker
// Delegates methods to the appropriate function based on variable type
@function contains($data, $value){
    @if type-of($data == "map"){
        @return map-has-keys($data, $value);
    }@else if type-of($data == "list"){
        @return list-contains($data, $value);
    }@else if type-of($data == "string"){
        @return str-contains($data, $value);
    }
}

//String Join
// Converts list to a string with an optional separator
@function str-join($list, $separator: ",") {
    @return list-to-string($list, $separator);
}

// String contains check
// Outputs true/false based on inputs
@function str-contains($string, $value, $pos: 0) {

    $string: str-slice($string, $pos);

    @if str-index($string, $value) != null {
        @return true;
    }
    @else {
        @return false;
    }
}

//String Append
// Adds string to end of another string
@function str-append($string, $insert) {
    $string: if($string == null, '', $string);

    @return str-insert($string, $insert, str-length($string) + 1);
}

//String replace
// Replaces a value in a string with another
@function str-replace($string, $search, $replace: '') {
    $index: str-index($string, $search);

    @if $index {
        @return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
    }

    @return $string;
}

// List contains check
// Outputs true/false
@function list-contains($list, $value) {
    @return not not index($list, $value);
}

//Reverse a List
@function list-reverse($list, $recursive: false) {
    $result: ();

    @for $i from length($list)*-1 through -1 {
        @if type-of(nth($list, abs($i))) == list and $recursive {
            $result: append($result, reverse(nth($list, abs($i)), $recursive));
        }
        @else {
            $result: append($result, nth($list, abs($i)));
        }
    }

    @return $result;
}

//List print
@function list-print($list, $depth: 1) {
    $output: '';

    @if $depth > 0 {
        @for $i from 1 through $depth {
            $output: $output + $list;
        }
    }

    @return $output;
}

/* SG
# Functions/Maps [[dev]]

@file globals/_gl-functions.scss

[Reference](http://www.sitepoint.com/extra-map-functions-sass/)

##### `map-deep-set()`
###### function(`$map, $keys... [, $value]`)
Add to a deeply nested map key. Accepts any number of keys, but the final value is the new key.
@returns map

##### `map-depth()`
###### function(`$map`)
Find depth of a `$map`.
@returns number

##### `map-has-keys()`
###### `[map], [key(s) to be checked ...]`
Determine whether a map contains certain keys.
@returns boolean
@alias map-contains-keys()

##### `map-has-nested-keys()`
###### function(`$map`, `$keys...`)
Check for the value of a nested key.
@returns boolean
@alias map-contains-nested-keys()

##### `map-get-nested()`
###### function(`$map`, `$keys...`)
Returns nested map values. A deep version of Sass' `map-get()`.
@returns string, boolean, list, or map

##### `map-extend()`
###### function(`$map`, `$maps...`(`$deep:true`))
Merges multiple maps. Similar to jQuery's .extend().
@returns map

##### `map-add-depth()`
###### function(`$map`, `$new-key:'base'`)
Adds one level to a map using the new key to a map. Used by `generate_color_varations()`. (e.g. `(key: value, key: value)` becomes `(key:(new-key: value), key:(new-key: value))` )
@returns map

##### `map-print()`
###### function(`$map`, `$level:1`)
Prints map into a string (in a JSON-esque format). Useful for debugging.
@returns string
@alias map-inspect()

*/


//Deep Set
//Update a deeply nested map key.
@function map-deep-set($map, $keys... /*, $value */) {
    $map-list: ($map,);
    $result: null;

    @if length($keys) == 2 {
        @return map-merge($map, (nth($keys, 1): nth($keys, -1)));
    }

    @for $i from 1 through length($keys) - 2 {
        $map-list: append($map-list, map-get(nth($map-list, -1), nth($keys, $i)));
    }

    @for $i from length($map-list) through 1 {
        $result: map-merge(nth($map-list, $i), (nth($keys, $i): if($i == length($map-list), nth($keys, -1), $result)));
    }

    @return $result;
}

//Map depth finder
// Returns a map's depth. Useful for debugging maps.
@function map-depth($map) {
    $level: 1;

    @each $key, $value in $map {
        @if type-of($value) == "map" {
            $level: max(map-depth($value) + 1, $level);
        }
    }

    @return $level;
}

//Check multiple map keys
@function map-has-keys($map, $keys...) {
    @each $key in $keys {
        @if not map-has-key($map, $key) {
            @return false;
        }
    }

    @return true;
}

@function map-contains-keys($map, $keys...) {
    @return map-has-keys($map, $keys);
}

//Check for deep map keys
@function map-has-nested-keys($map, $keys...) {
    @each $key in $keys {
        @if not map-has-key($map, $key) {
            @return false;
        }

        $map: map-get($map, $key);
    }

    @return true;
}
//ALIAS
@function map-contains-nested-keys($map, $keys...) {@return map-has-nested-keys($map, $keys);}

//Get map value at nested or 'deep' key, per $keys list
@function map-get-nested($map, $keys...) {
    @each $key in $keys {
        @if type-of($map) != 'map' {
            @return $map;
        }
        $map: map-get($map, $key);
    }
    @return $map;
}

//Map Extend
// Similar to jQuery's extend function but for sass maps
// Takes two maps and merges their differences
@function map-extend($map, $maps... /*, $deep */) {
    $last: nth($maps, -1);
    $deep: $last == true;
    $max: if($deep, length($maps) - 1, length($maps));

    // Loop through all maps in $maps...
    @for $i from 1 through $max {
        // Store current map
        $current: nth($maps, $i);

        // If not in deep mode, simply merge current map with map
        @if not $deep {
            $map: map-merge($map, $current);
        } @else {
            // If in deep mode, loop through all tuples in current map
            @each $key, $value in $current {

                // If value is a nested map and same key from map is a nested map as well
                @if type-of($value) == "map" and type-of(map-get($map, $key)) == "map" {
                    // Recursive extend
                    $value: map-extend(map-get($map, $key), $value, true);
                }

                // Merge current tuple with map
                $map: map-merge($map, ($key: $value));
            }
        }
    }

    @return $map;
}


//Map depth-adder
//-------------------------
// Adds 'base'(or whatever initial key that's passed in) to a color map.
// Used by color map generator function (colors/_colorfunctions)
//--------------------------
// 1. Check if map is less than or equal to the depth tolerance (default: 1).
// 2. loops through all keys and values in the map.
// 3. Make sure value isn't alreayd a map
//   3a. If value is a map, then check to make sure $new-key is in the map
//     3b. Duplicate first value of map (in case there are multiple)
//     3c. Create new map with new-key and duplicated value
// 4. Reformats those key-value pairs into a (key: (new-key: value ))
// 5. Merges new depthy key-key-value back into the map.
// 6. Returns the new map.

@function map-add-depth($map, $new-key: 'base'){
    $formatted-key:();
    $new-map:'';

    @each $key, $value in $map {                 //[2]
        $formatted-key: ();
        @if type-of($value) != "map" {                      //[3]
            $formatted-key: ($key: ($new-key: $value));     //[4]

        }@else if not map-has-key($value, $new-key) {       //[3a]
            $duplicate-value: map-get($value, nth(map-keys($value), 1)); //[3b]
            $duplicate-map: ($new-key : $duplicate-value);               //[3c]

            $formatted-key: ($key: (map-merge($value, $duplicate-map))); //[4]
        }
        $map: map-merge($map, $formatted-key);        //[5]
    }

    @return $map;                                     //[6]
}

//Map printer
//Print maps into a string
// Useful for debugging maps.
// Taken from: https://github.com/lunelson/sass-maps-plus

@function map-inspect($map, $level: 1) {
    $tab: '    ';
    $cr: '
';

    @if type-of($map) != 'map' {
        @return '#{inspect($map)}';
    }

    $indent: list-print($tab, $level + 1);
    $output: '{' + $cr + $indent; $i: 1;

    @each $key, $value in $map {
        @if type-of($value) == 'map' {
            $output: $output + '#{$key}: #{map-inspect($value, $level+1)}';
        } @else {
            $output: $output + '#{$key}: #{$value}';
        }

        @if $i < length(map-keys($map)) {
            $output: $output + ',' + $cr + $indent;
        }

        $i: $i + 1;
    }

    $outdent: list-print($tab, $level);

    @return $output + $cr + $outdent + '}';
}
//ALIAS
@function map-print($map, $level: 1){
    @return map-inspect($map, $level);
}

/* SG
# Typography/Sizing [[dev]]

##### `modular-scale()`
###### function(`$scale`, `$ratio:``$$scale-ratio`)
Generates a pixel value that is an exponent of a ratio (`$ratio` defaults to `$$scale-ratio` value).
@requires `pow()`, `cache()`, `strip-units()`
@returns number (pixels)

*/

// Modular scale function to scale type up or down.
@function modular-scale($scale, $ratio: $scale-ratio){
    $modular-scale: $ratio;

    @if length($ratio) == 2 {
    // Making sure we don't have a ratio below 1.
        @if nth($ratio,1) < nth($ratio,2){
            $modular-scale:   nth($ratio, 2)/nth($ratio, 1);
        }@else{
            $modular-scale:   nth($ratio, 1)/nth($ratio, 2);
        }
    }

    $font-size:  strip-units($base-font-size);
    $pow: cache(pow, $modular-scale, $scale);
    @return $pow * ($font-size) * 1px;
}

/* SG
# Typography/Line-height [[dev]]

##### `baseline()`
###### function(`$font-size`, `$baseline`, `$multiple:1`)

Aligns a font-size to a baseline (`$baseline`). Returns a unitless value relative to the font-size (equivilent to ems). An optional multiple can be used to make a variation on the given baseline (using decimals will divide the the baseline).
@returns number (unitless)

*/

@function baseline($font-size, $baseline: $base-line-height, $multiple:1, $floor: false) {
    @if ($floor) {
        @return floor($font-size / ($baseline * $multiple)) * ($baseline * $multiple) / $font-size;
    }
    @return ceil($font-size / ($baseline * $multiple)) * ($baseline * $multiple) / $font-size;
}

/* SG

##### `baseline-curve()`
###### function(`$x` , `$accel`: `1`)

Calculates a where a number(`$x`) sits along a parabolic arc (curve). Change the curve's severity by changing its `$accel`.
An `$accel` of 1 is a smooth arc.
`$accel` accepts any number between -2 and 2.35. A negative will invert the curve.

The formula: `y = (sqrt((x^1)+x) - sqrt(x^1)) / .4142135623730951`
( [Visual](https://www.desmos.com/calculator/qswvc6q9kt) )

@returns number
@requires `sqrt()`, `pow()`

*/

@function baseline-curve($x, $accel:1) {
    //Cache this exponent since it uses a decimal and requires a lot of computation
    $x2: cache(pow, $x, $accel);
    $x3: $x2 + $x;
    $x3-root: sqrt($x3);
    $x2-root: sqrt($x2);
    $const: $SQRT2 - 1; // value used by logarithm (.4142135623730951)

    $curve: ($x3-root - $x2-root) / $const;

    @return min(1, $curve);
}


/*SG

##### `baseline-calc()`
###### function(`$font-size: $base-font-size, $font-base: $base-font-size, $basline-slack: $font-looseness`)

Creates unitless line-heights that align to the baseline grid with consideration to the aesthetics of a given font size. Essentially makes sure larger font-sizes have smaller line-heights, while smaller font-sizes have larger ones.
Uses constraints based on upper and lower limits of pleasing line-heights, and finds where a given font-size should sit within those constraints. `$$font-looseness` increases the upper constraints, allowing for taller line heights on larger font sizes.
Depends on `baseline()` for calculation and `baseline-curve()` to determine the deviance from the upper and lower constraints.

@returns number (unitless)
@requires `baseline()`, `baseline-curve()`

*/

$__font-index: ();
$__font-warn: false;

// Calculate the baseline of any particular font-size.
@function baseline-calc(
    $font-size: $base-font-size,
    $font-base: $base-font-size,
    $baseline-slack: $font-looseness
){
    $smallest-size: if(length($type-small-size) > 1, nth($type-small-size, 1), $type-small-size);
    $smallest-size: max(10px, $smallest-size);
    $largest-size: if(length($type-h1-size) > 1, nth($type-h1-size, 1), $type-h1-size);
    $i: 0;

    //Make sure baseline-slack is a percentage
    @if unit($baseline-slack) != "%" {
        @warn "Baseline-slack/font-looseness should be a percentage.";
        $basline-slack: strip-units($baseline-slack);
        $baseline-slack: percentage($baseline-slack);
    }

    $slack: ($baseline-slack / 100%);

    //Base Highest and lowest line-height multiples
    $base-lh-upper-bound: 1.9;
    $base-lh-lower-bound: 1.1;

    //smallest font-size's highest/lowest line-height multiple
    // Use global settings to help determine, where possible
    $sm-lh-upper-bound: 2 + ($slack / 2);
    $sm-lh-lower-bound: 1 + ($slack / 2);

    //Largest font-size's highest/lowest line-height multiple
    // Use baseline slack to determine constraints
    $lg-lh-upper-bound: 1.02 + ($slack / 2);
    $lg-lh-lower-bound: 0.91 + ($slack / 2);

    //Smallest/Largest font sizes to calculate against
    $sm-font-size: 9 + ($slack * 10);
    $lg-font-size: 95 + ($slack * 50);

    //Baseline-curve progress percentages
    $percent-along-current: 0;
    $percent-along-upper: 0;
    $percent-along-lower: 0;

    //Non-adjusted placement of the font-size between largest and smallest font sizes
    $true-percent-along: strip-units(($font-size - $sm-font-size) / ($lg-font-size - $sm-font-size));

    //Make sure handle fonts larger than our initial assumptions
    @if $font-size <= $sm-font-size {
        //Set progress to 0%
        $base-lh-lower-bound: 1;
        $base-lh-upper-bound: $sm-lh-upper-bound;

        @if $font-size > $smallest-size {
            $true-percent-along: ($slack / 10);
        }@else {
            $true-percent-along: .001;
        }
    }
    @else if $font-size >= $lg-font-size {
        //Set progress to 100%
        $percent-along-current: 1;
        $percent-along-lower: 1;
        $percent-along-upper: 1;
        $base-lh-lower-bound: $lg-lh-lower-bound;
        $base-lh-upper-bound: $lg-lh-upper-bound;
        $lg-font-size: $font-size + ($slack * 50);
    }
    // Determine where we're at on the curve
    @else {
        //Standard curve
        $percent-along-current:cache(baseline-curve, $true-percent-along, 1);
        //Upper boundary curve
        $percent-along-upper:  cache(baseline-curve, $true-percent-along, 1.3);
        //Lower boundary curve
        $percent-along-lower:  cache(baseline-curve, $true-percent-along, 1.9);
    }

    $upper-boundary: ($sm-lh-upper-bound - $lg-lh-upper-bound);
    $lower-boundary: ($sm-lh-lower-bound - $lg-lh-lower-bound);

    //Adjust percentages to line-height values
    $base-lh-upper-bound: $sm-lh-upper-bound - ($percent-along-upper * $upper-boundary);
    $base-lh-lower-bound: $sm-lh-lower-bound - ($percent-along-lower * $lower-boundary);

    @if $debug-fonts {
        @if index($__font-index, $font-size) == null {
            @debug "font-size: #{$font-size}";
            @debug "%: #{percentage($true-percent-along)}";
            @debug "%u: #{percentage($percent-along-upper)}, %l: #{percentage($percent-along-lower)}";
            @debug "ub: #{$base-lh-upper-bound} (#{$font-size * $base-lh-upper-bound}), lb: #{$base-lh-lower-bound} (#{$font-size * $base-lh-lower-bound})";
            @debug "sm-lh-ub: #{$sm-lh-upper-bound}, sm-lh-lb: #{$sm-lh-lower-bound}";
            @debug "lg-lh-ub: #{$lg-lh-upper-bound}, lg-lh-lb: #{$lg-lh-lower-bound}";
            @debug "slack: #{$slack}";
        }
    }

    //If the lower bound is somehow higher than the upper bound,
    // let's just reset the bounds to simple values
    @if $base-lh-lower-bound > $base-lh-upper-bound {
        $base-lh-lower-bound: 1;
        $base-lh-upper-bound: 2;
    }

    //First attempt
    $baseline: $base-line-height;
    $line-height: baseline($font-size, $baseline);

    //Second attempt
    @if ($line-height < $base-lh-lower-bound) or ($line-height > $base-lh-upper-bound) {

        //Attempt using a negative line-height for very large sizes
        @if ($true-percent-along > .9) {
            $line-height: baseline($font-size, $baseline, .5, $floor: true);
        }
        @else if $font-size < $base-font-size {
            $line-height: baseline($font-size, $baseline, 1.5);
        }
        @else {
            $line-height: baseline($font-size, $baseline, .5);
        }
    }

    //Set up while loop
    $quit: false;

    //Test baselines until we find a match
    @while(($line-height < $base-lh-lower-bound or $line-height > $base-lh-upper-bound)
        and not $quit //allows for infinite loop bailout
    ){
        $i: $i + .5;
        //Try baselines in half increments
        $line-height: baseline($font-size, $baseline, $i);

        //Bail-out function to prevent infinite loops
        // Set quit to true so we can escape this hellish loop
        @if $i > (($font-size / 1px) / 2)  {
            @if (not $__font-warn) and ($debug-fonts) {
                @warn "
                Your font-looseness might be too high or low, watch for weird baselines and slow compile times.
                FS: #{$font-size} / LH: #{$line-height}
                Tolerances: #{$base-lh-upper-bound} / #{$base-lh-lower-bound}
                loops: #{$i * 2}";
                $__font-warn: true !global; //Prevent seeing this warning multiple times
            }

            //default to normal calculated line-height
            $line-height: baseline($font-size, $baseline);
            $quit: true;
        }
    }

    @if $debug-fonts {
        @if index($__font-index, $font-size) == null {
            $__font-index: append($__font-index, $font-size) !global;
            @debug "lh: #{$line-height * $font-size} / #{$line-height} ";
            @debug "loops: #{$i * 2}";
            @debug "-----";
        }
    }

    @return $line-height;
}

//Add to silent classes registry
@function silents-register($map, $key){
    @if $debug-silent-classes {
        @if map-get($silent-class-registry, $key) == null {
            $silent-class-registry: map-merge($silent-class-registry, ($key:())) !global;
        }
        $map: map-merge(map-get($silent-class-registry, $key), $map);
        @return map-deep-set($silent-class-registry, $key, $map);
    }@else {
        @return null;
    }
}



// Global math constants
$pi:    3.1415926535897932384626433832795028841971693993751;
$π:     $pi;
$PI:    $pi;
$e:     2.71828182845904523536028747135266249775724709369995;
$E:     $e;
$LN2:   0.6931471805599453;
$SQRT2: 1.4142135623730951;


/* SG

# Functions/Math [[dev]]

Most functions taken from [Sassy Math](https://github.com/Team-Sass/Sassy-math/blob/master/sass/math.scss).

*/


/* SG

##### `pow()`
###### function(`$number`, `$exponent`, `$precision:12`)

A more robust exponent multiplication which allows for decimal-based exponents. This **fully** replaces Compass' pow() function (allows for float-based exponents).

[Reference](https://gist.github.com/nathancrank/7539155)

@returns number
@requires log()
@alias exponent()

*/

@function pow($base, $exp) {
    @if $exp == floor($exp) {
        $r: 1;
        $s: 0;
        @if $exp < 0 {
            $exp: $exp * -1;
            $s: 1;
        }
        @while $exp > 0 {
            @if $exp % 2 == 1 {
                $r: $r * $base;
            }
            $exp: floor($exp * 0.5);
            $base: $base * $base;
        }
        @return if($s != 0, 1 / $r, $r);
    } @else {
        $log: log($base);
        $exp: cache(exp, ($log * $exp));
        @return $exp;
    }
}

// ALIAS
@function exponent($base, $exponent) {
    @return pow($base, $exponent);
}


/* SG

##### `log()`
###### function(`$x`)
Returns the natural logarithm of a number.

```scss
$value:   log(2)  // 0.69315
$value2:  log(10) // 2.30259
```

@returns number

*/

@function log($x) {
    @if $x <= 0 {
        @return 0;
    }
    $k-frexp: frexp(($x / $SQRT2));
    $k: nth($k-frexp, 2);
    $x: $x / ldexp(1, $k);
    $x: ($x - 1) / ($x + 1);
    $x2: $x * $x;
    $i: 1;
    $s: $x;
    $sp: null;
    @while $sp != $s {
        $x: $x * $x2;
        $i: $i + 2;
        $sp: $s;
        $s: $s + $x / $i;
    }
    @return $LN2 * $k + 2 * $s;
}

/* SG

##### `frexp()`
###### function(`$x`)
Returns a two-element list containing the normalized fraction and exponent of number.

@returns list (fraction, exponent)

*/

@function frexp($x) {
    $exp: 0;
    @if $x < 0 {
        $x: $x * -1;
    }
    @if $x < 0.5 {
        @while $x < 0.5 {
            $x: $x * 2;
            $exp: $exp - 1;
        }
    } @else if $x >= 1 {
        @while $x >= 1 {
            $x: $x / 2;
            $exp: $exp + 1;
        }
    }
    @return $x, $exp;
}

/* SG

##### `ldexp()`
###### function(`$x, $exp`)

Returns $x * 2^$exp

*/

@function ldexp($x, $exp) {
    $b: if($exp >= 0, 2, 1 / 2);
    @if $exp < 0 {
        $exp: $exp * -1;
    }
    @while $exp > 0 {
        @if $exp % 2 == 1 {
            $x: $x * $b;
        }
        $b: $b * $b;
        $exp: floor($exp * 0.5);
    }
    @return $x;
}

/* SG

##### `exp()`
###### function(`$x`)

Returns E^x, where x is the argument, and E is Euler's constant, the base of the natural logarithms.

```scss
$value: exp(1)  // 2.71828
$value2: exp(-1) // 0.36788
```

@returns Number

*/

@function exp($x) {
    $ret: 0;
    @for $n from 0 to 24 {
        $ret: $ret + pow($x, $n) / fact($n);
    }
    @return $ret;
}

/* SG

##### `fact()`
###### function(`$x`)

Returns the factorial of a non-negative integer.

```scss
$value:  fact(0) // 1
$value2: fact(8) // 40320
```
@return Number

*/

@function fact($x) {
    @if $x < 0 or  $x != floor($x) {
        @warn "Argument for `fact()` must be a positive integer.";
        @return null;
    }

    $ret: 1;

    @while $x > 0 {
        $ret: $ret * $x;
        $x: $x - 1;
    }

    @return $ret;
}

/* SG

##### `gcd()`
###### function(`$number-1`, `$number-2`)

Greatest Common Divisor calculation (useful for calculating grids and widths).
@returns number

*/

@function gcd($number-1, $number-2) {
  // From: http://rosettacode.org/wiki/Greatest_common_divisor#JavaScript
    @if $number-2 != 0 {
        @return gcd($number-2, ($number-1 % $number-2));
    }@else {
        @return abs($number-1);
    }
}

/* SG

##### `lcm()`
###### function(`$a`, `$b`)

Finds the least common multiple. Use with caution...if there is no LCM, then you compilation will error out.

@returns number

*/

@function lcm($a, $b) {
    $a: round($a);
    $b: round($b);
    $gcd: gcd($a, $b);
    $result: ($a * $b) / $gcd;
    @return $result;
}


/* SG

##### `nth_root()`
###### function(`$base`, `$n:2`, `$precision:12`)

Advanced calculation for square roots, cube roots, etc. of a value.
[Reference](http://rosettacode.org/wiki/Nth_root#JavaScript)

@returns number

*/

@function nth_root($base, $n: 2, $precision: 12) {
    $prec: $precision;
    $x: 1;

    @for $i from 0 through $prec {
        $x: 1 / $n * (($n - 1) * $x + ($base / pow($x, $n - 1)));
    }

    @return $x;
}

/* SG

##### `sqrt()`
###### function(`$base`, `$precision:12`)

Find the square root of a value.

@returns number
@alias `sqroot()`

*/

@function sqrt($base, $precision: 12) {
    $guess: random(20);
    $root: $guess;

    @for $i from 1 through $precision {
        $root: $root - (pow($root, 2) - $base) / (2 * $root);
    }
    @return $root;
}

@function sqroot($r) {
  $x0: 1; // initial value
  $solution: false;

  @for $i from 1 through 10 {
    @if abs(2 * $x0) < 0,00000000000001 { // Don't want to divide by a number smaller than this
      $solution: false;
    }

    $x1: $x0 - ($x0 * $x0 - abs($r)) / (2 * $x0) !global;

    @if ( abs($x1 - $x0) / abs($x1)) < 0,0000001 { // 7 digit accuracy is desired
      $solution: true;
    }

    $x0: $x1;
  }

  @if $solution == true {
    // If $r is negative, then the output will be multiplied with <a href="http://en.wikipedia.org/wiki/Imaginary_number">i = √-1</a>
    // (√xy = √x√y) => √-$r = √-1√$r
    @if $r < 0 {
      @return $x1 #{i};
    }
    @else {
      @return $x1;
    }
  }
  @else {
    @return "No solution";
  }
}


/* SG

##### `sin()`
###### function(`$angle`)

Determines the Sine of an angle.
[Reference](https://unindented.org/articles/trigonometry-in-sass/)

@returns number
*/

@function sin($angle) {
    $sin: 0;
    $angle: rad($angle);
    // Iterate a bunch of times.
    @for $i from 0 through 10 {
        $sin: $sin + pow(-1, $i) * pow($angle, (2 * $i + 1)) / fact(2 * $i + 1);
    }
    @return $sin;
}

//Hyperbolic sine
@function sinh($number) {
    $top: exponent($e, (2 * $number)) - 1;
    $bottom: 2 * exponent($e, $number);
    @return  $top / $bottom;
}

/* SG

##### `cos()`
###### function(`$angle`)

Determines the Cosine of an angle.
@returns number

*/

@function cos($angle) {
    $cos: 0;
    $angle: rad($angle);
    // Iterate a bunch of times.
    @for $i from 0 through 10 {
        $cos: $cos + pow(-1, $i) * pow($angle, 2 * $i) / fact(2 * $i);
    }
    @return $cos;
}

/* SG
##### `tan()`
###### function(`$angle`)

Determines the Tangent of an angle.
@returns number

*/

@function tan($angle) {
    @return sin($angle) / cos($angle);
}

/* SG

##### `golden()`
###### function(`$base: 1`)

Get the golden ratio from `$base`.
@returns number
@alias `$$golden_ratio`

*/

@function golden($base: 1) {
    @return (1/2 + sqrt(5) / 2) * $base;
}

$golden_ratio: golden();


@function rad($angle) {
    $unit: unit($angle);
    $unitless: $angle / ($angle * 0 + 1);
    // If the angle has 'deg' as unit, convert to radians.
    @if $unit == deg {
        $unitless: $unitless / 180 * $pi;
    }
    @return $unitless;
}

//Alias
@function angle-to-rad($angle) {
    @return rad($angle);
}


// Math helpers
// From https://github.com/inuitcss/tools.functions/blob/master/_tools.functions.scss
//
// Halve and double numbers, returning rounded integers. E.g.:
//
// .foo {
//     padding: halve(3.2px);
// }
//
// Outputs:
// .foo{padding: 2px;}
//
@function quarter($number) {
    @return round($number / 4);
}

@function halve($number) {
    @return round($number / 2);
}

@function double($number) {
    @return round($number * 2);
}

@function quadruple($number) {
    @return round($number * 4);
}
