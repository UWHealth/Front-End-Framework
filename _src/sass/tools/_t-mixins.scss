/* SG

# Mixins/CSS Helpers [[dev]]

##### `@specificity()`
###### mixin(`$specificity: 1`)
Specificity increaser. Useful for increasing specificity of a selector instead of using `!important`.
```scss
.class {
    @include specificity(2) {
        color: red;
    }
}

//css
.class.class {
    color: red;
}

```
[Reference](http://www.sitepoint.com/selector-specificity-css-preprocessors/)

*/


@mixin specificity($specificity: 1) {
	$selector: unquote('&');

	@if $specificity > 1 {
		@for $i from 1 to $specificity {
			$selector: $selector + unquote('&');
		}
		@at-root #{$selector} {
			@content;
		}
	} @else {
		@content;
	}
}


/* SG
##### `@opacity()`
###### mixin(`$opacity`)
Cross-browser (including IE8-) opacity.
[Reference](https://gist.github.com/jgv/745754)

*/

@mixin opacity($opacity) {
	// filter: alpha(opactiy=($trans * 100));
	-ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=#{$opacity * 100})";
	opacity: $opacity;
}


/* SG
##### `@border()`
###### mixin(`$border`)
Allows creating many border properties at once. Works like the standard border shorthand style but allows varied styles on different border directions.

```scss
	//scss
	.foo {
		@include border(2px 3px solid dashed dotted blue currentColor yellow);
	}

	//css
	.foo {
		border-width: 2px 3px;
		border-style: solid dashed dotted;
		border-color: blue currentColor yellow;
	}
```
*/

@mixin border($border) {
	$border-width: ();
	$border-style: ();
	$border-color: ();

	//Make sure border isn't empty
	@if $border != null {
		@each $property in $border {
			//Grab first argument, take the key value in case we're given a map
			$property: nth($property, -1);
			$prop-type: type-of($property);

			//Check property types for types and store them into separate list values
			//Numbers (width), colors (color), or strings (style)
			@if ($prop-type == 'number') {
                $border-width: append($border-width, $property)
            }
			@elseif (($prop-type == 'color') or ($property == 'currentColor')) {
                $border-color: append($border-color, $property)
            }
			@elseif ($prop-type == 'string') {
                $border-style: append($border-style, $property)
            }

		}
	}

	//If this is just a the typical shorthand (width style color)
	// with all values in the correct place, just output the shorthand
	@if length($border-width) == 1
		and length($border-style) == 1
		and length($border-color) == 1
	{
		border: $border-width $border-style $border-color;
	}@else {
	//Else, put them into nested properties and let sass handle the rest
	    border: {
			width: $border-width;
			style: $border-style;
			color: $border-color;
		}
	}
}

/* SG

# Mixins/Buttons [[dev]]

##### `@button()`
###### mixin(`$bg-color`: `color('links')`, `$text-color`: `null`, `$border`: `null`, `$radius`: `null`, `$text-radius`: `null`, `$style`: `null`, `$inset`: `false`)
Generates common button styles, allowing for simple creation of more complex gradient styles. Intelligently excludes unnecessary styles from states like hover, focus, and active. _Does not generate hover, focus, or active psuedo selectors on its own._

**Accepted arguments**
* `$bg-color`: Color values. This cannot accept null.
* `$text-color`: Color or null (null will let the mixin decide the best color based on contrast).
* `$border`: Any border properties (colors, styles, widths) or `null`. Uses the `@border()` mixin.
* `$radius`: `border-radius` values. `null` produces no border-radius property.
* `$style`: `null`, `shiny` or `reflective`.
   `shiny` creates a simple gradient backgroud based on the `$bg-color`.
   `reflective` creates a stacked gradient based on the `$bg-color`.
* `$inset`: Boolean. `True` adds a dark box-shadow inset.
   If combined with 'shiny' or 'reflective' `$style`, background gradients are inverted.

*/

@mixin button(
    $bg-color: color('links'),
    $text-color: null,
    $border: null,
    $radius: null,
    $style: null,
    $inset: false
){
	//Make if-statements easier to read
	$shiny: ($style == 'shiny');
	//Make sure we don't duplicate styles in psuedo selectors (e.g. hover, active, focus)
	$stateless: (not str-contains('#{&}', ':'));

	//if text color is undefined, set it to type or white
	$text-color: if($text-color, $text-color, black-or-white($bg-color));

	background: $bg-color;
    color: $text-color;
	text-align: if($stateless, center, null);
    text-decoration: none;
	display: if($stateless, inline-block, null);
	@include border($border);
	border-radius: #{$radius};

	//Shiny and reflective button styles

    @if $shiny or $style == 'reflective' {
		//Tone the gradient blending amounts based on type
		$top-blend: if($shiny, 55%, 46%);
        $bottom-blend: if($shiny, 42%, 57%);
		$shadow-blend: 'tint';

		@if $inset {
			//Invert shiny gradients and darken box shadow if inset
			@if $shiny {
				$top-blend-temp: $top-blend;
				$top-blend: $bottom-blend - 2%;
				$bottom-blend: $top-blend-temp;
			}
			$shadow-blend: 'shade';
		}

		$mid-point: if($stateless, 55%, 75%);
		$mid-point: if((not $shiny), (100% - $mid-point), $mid-point);
		//Blend background color with shades of gray, using overlay for a more natural look
		$top-color: blend-overlay($bg-color, hsl(0, 0%, $top-blend));
        $bottom-color: blend-overlay($bg-color, hsl(0, 0%, $bottom-blend));
		$box-shadow: inset 0 .185em .175em call(get-function($shadow-blend), $top-color, 30%);


        background-image: linear-gradient(to bottom,
            $top-color 0%, $bg-color $mid-point, $bottom-color 100%);
        filter: progid:DXImageTransform.Microsoft.gradient(startColorStr='#{$top-color}', EndColorStr='#{$bottom-color}');
        box-shadow: $box-shadow;

        @if not $shiny {
			//reflective styles duplicate
            background-size: if($inset, 100% 90%, 100% 60%);
            background-position-y: if($inset, 40%, 110%);
            background-repeat-y: repeat;
        }

    }
}

//------------------------------------
//    $LISTS
//------------------------------------
// http://compass-style.org/reference/compass/typography/lists/
// Turn off the bullet for an element of a list

@mixin no-bullet() {
	list-style-image : none;
	list-style-type  : none;
	margin-left      : 0;
}

// turns off the bullets for an entire list
@mixin no-bullets() {
	list-style: none;
	> li { @include no-bullet; }
}
