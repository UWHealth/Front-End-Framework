<link rel="stylesheet" href="https://uconnect.wisc.edu/cosmos/uconnect/css/build.114.main.css">
<link rel="stylesheet" href="/public/css/temp/temp.css">
<div class="wrap">
    <div class="row">
        <div class="column third">
            <article class="box box_panel box_color_list">
                <header class="color_list_header">
                    <span class="txt_small">Updated {{update.date}} at {{update.time}}</span>
                </header>
                {{#each colorLists}}
                    <a class="color_list_container color_list_toggle">
                        <div class="color_list_title color_list_item color_circle color_list_{{color}}">
                            <div class="color_list_text color_list_circle_color_list_icon icon color_list_icon icon">
                                <span class="txt_small">{{{title}}}</span><span class="icon color_list_toggle_icon"></span>
                            </div>
                        </div>

                        <ul class="list_naked color_list is_not_initialized">
                            <div class="color_list_wrapper">
                                {{#each subtitles}}
                                <li class="color_list_item color_list_{{color}}">
                                    <span class="color_list_text color_list_icon icon">{{{subtitle}}}</span>
                                </li>
                                {{/each}}
                            </div>
                        </ul>
                    </a>
                {{/each}}

                <div class="color_list_footer">
                    <a class="whole txt_upper txt_small color_list_icon icon color_list_icon icon_after color_list_icon icon_right" data-color_list_icon icon="" href="" onclick="showModal()">View All Statuses</a>
                </div>
            </article>
        </div>
    </div>
</div>
<div id="modal" class="modal">
    <div class="modal_wrapper">
        <img src="/public/img/modal.png">
    </div>
</div>

<script>
    // forEach shim
    function forEach(array, callback, scope) {
        if (array !== 'undefined' && array.length >= 0) {
            for (let i = 0, arrLen = array.length; i < arrLen; i++) {
                callback.call(scope, array[i], i, array); // passes back stuff we need
            }
        }
    };

    // var showModal = function() {
    //     document.getElementsByID("modal");
    // }
    var main = document.querySelector('script[src="/public/js/main.bundle.js"]');

    var lists = document.getElementsByClassName("color_list");
    var toggles = document.getElementsByClassName("color_list_toggle");
    var initialized = false;

    main.onload = function() {
        if (window.uwhealth !== undefined && !initialized) { init(window.uwhealth); }
    }

    main.addEventListener('load', function(e) {
        if (!initialized) {
            init(window.uwhealth);
        }
    });

    var init = function(velocity) {
        initialized = true;
        // velocity.mock = 5; // Slow animations down for debugging

        var toggleList = function(list, durationMultiple) {
            if (list.__collapsed) {
                return openList(list, durationMultiple);
            }
            return closeList(list, durationMultiple);
        }

        var closeList = function(list, durationMultiple) {
            velocity(list, "finish");
            velocity(list.wrapper, "finish");
            list.__collapsed = true;

            list.classList.add('color_list_collapsed');
            list.__container.classList.add('color_list_collapsed');

            forEach(lists, function(list) {
                velocity(list.__container, {
                    opacity: [1, "easeOutSine"],
                    maxHeight: [500, "easeOutQuint"],
                    paddingTop: [".125rem", "0rem"]
                }, {
                    duration: durationMultiple * 3
                })
            });

            velocity(list,
                {
                    height: '.375rem',
                    translateY: '80%'
                }, {
                    easing: "easeOut",
                    queue: false,
                    duration: durationMultiple * 3
                });

            velocity(list.wrapper,
                {
                    height: list.offsetWidth
                },{
                    duration: durationMultiple * .5,
                    easing: "easeOut"
                });

            velocity(list.wrapper,
                {
                    rotateZ: -90,
                    translateX: "0",
                    translateY: "50%",
                    scaleX: [2, [100, 20], 1]
                }, {
                    duration: durationMultiple * 1.2,
                    easing: "easeOutQuart"
                });
        };

        var openList = function(list, durationMultiple) {
            velocity(list, "finish");
            velocity(list.wrapper, "finish");

            list.__collapsed = false;
            var curH = list.offsetHeight + 'px';
            list.style.height = 'auto';
            var autoH = list.offsetHeight;
            list.style.height = curH;

            forEach(lists, function(thisList) {
                if (thisList !== list) {
                    velocity(thisList.__container, {
                        opacity: [0, "easeOutSine"],
                        maxHeight: [0, "easeOutQuart"],
                        paddingTop: 0
                    }, {
                        duration: durationMultiple * 2.375
                    })
                }
            });

            velocity(list,
                {
                    translateY: '100%'
                }, {
                    queue: false,
                    easing: "easeOut",
                    duration: durationMultiple * 1.25,
                    complete: function() {
                        list.classList.remove('color_list_collapsed');
                        list.__container.classList.remove('color_list_collapsed');
                    }
                }
            );
            velocity(list,
                {
                    translateY: "0%"
                }, {
                    queue: false,
                    easing: "easeIn",
                    delay: durationMultiple * 1.25,
                    duration: durationMultiple * 1.25
                }
            );

            velocity(list,
                {
                    height: [autoH, curH]
                },
                {
                    queue: false,
                    easing: "easeInOutSine",
                    delay: durationMultiple * 1.25,
                    duration: durationMultiple * 2
                }
            );

            velocity(list.wrapper,
                {
                    height: [autoH, autoH * 2],
                    width: ["100%", "190%"]
                },{
                    easing: "easeInOut",
                    delay: durationMultiple * 2,
                    duration: durationMultiple * 1.75,
                    queue: false
                }
            )

            velocity(list.wrapper,
                {
                    rotateZ: 0,
                    translateY: ["0%", (autoH/1.5)]
                }, {
                    queue: false,
                    easing: "easeInOut",
                    delay: durationMultiple * 1.75,
                    duration: durationMultiple * .75
                }
            );

            velocity(list.wrapper, {
                // translateX: ["0", "-50%"],

                scaleX: [1, [100, 15], 4],
                //scaleY: [1, [100, 15], 4],
            },{
                easing: "easeIn",
                queue: false,
                //delay: durationMultiple * 1,
                duration: durationMultiple * 2
            })
        };

        forEach(toggles, function(toggle, i) {
            let list = lists[i];
            list.__collapsed = list.classList.contains('color_list_collapsed');
            list.__container = toggle;
            list.wrapper = list.querySelector(".color_list_wrapper");
            list.wrapper.style.height = list.offsetWidth + 'px';
            list.classList.remove('is_not_initialized');

            toggle.addEventListener('click', function(e) {
                toggleList(list, 75);
            });

            closeList(list, 0);
        })
    }

    if (window.uwhealth !== undefined && !initialized) { init(window.uwhealth); }

</script>
