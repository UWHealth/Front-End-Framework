<style>{{> theme}}{{> highlight}}</style>

<script>{{> jquery}}</script>
<script src="../js/plugins.min.js"></script>

<div class="sg-body" id="styleguide">{{!-- Required ID --}}

{{!--Menu--}}
<nav id="sg-menu" class="sg-menu">
    <h1 class="sg-logo">
        <a href="#styleguide" class="sg-menu_link js-menu_showall">Frontend Framework</a>
    </h1>
    <div id="sg-menu_wrap" class="txt-small"></div>
</nav>

<main id="sg-main" class="sg-main">
{{~#each sections}}
    <section id="{{sanitize @key}}" class="sg-section sg-section-{{sanitize @key}}" data-sg-section="{{@key}}">
        <div class="sg-section_head sg-category">
            <div class="sg-category_wrap">
                <h1 class="sg-heading sg-heading-section">{{titleize @key}}</h1>
            </div>
        </div>

        {{#each this}} {{!--Looping through Categories --}}
            <div class="sg-category">
            <div class="sg-category_wrap">
            {{#unless articles.[0].section.gettingStarted}}{{#if category}}
                <header class="sg-category_head" data-sg-section="{{sanitize category}}" {{#unless articles.[1]}}id="{{sanitize articles.[0].id}}"{{/unless}}>
                    <h2 class="sg-heading-category{{#unless articles.[1]}}sg-heading sg-heading-article{{/unless}}">
                        {{~category~}}
                    </h2>
                </header>
            {{~/if}}{{/unless}}

            {{~#each articles}}
                <article class="sg-article" {{#if ../articles.[1]}}id="{{sanitize id}}"{{/if}} data-sg-section="{{category}}" data-sg-heading="{{heading}}">
                {{#if heading}}
                    <header class="sg-article_head {{#unless heading}}sg-category_head{{/unless}}">
                        <h3 class="sg-heading sg-heading-article">
                            {{~heading~}}
                        </h3>
                        {{~#if section.development}}{{#if filelocation}}
                        <p><code class="sg-codespan sg-file">
                            {{~filelocation~}}
                        </code></p><hr>
                        {{~/if}}{{/if~}}
                    </header>
                {{/if}}
                    <div class="sg-article_comment">
                        {{{comment}}}
                    </div>
                {{#if code}}
                    <div class="sg-example">
                        <div class="sg-example_wrap">
                            {{#each code}}{{{this}}}{{/each}}
                        </div>
                        <div class="sg-example_markup">
                        {{#each markup}}
                            <div class="sg-markup sg-markup-block">
                                <pre class="sg-markup_wrap"><code class="hljs">
                                    {{~{this}~}}
                                </code></pre>
                            </div>
                        {{/each}}
                        </div>
                    </div>
                {{/if}}
                </article>
            {{~/each}}
        </div>
        </div>
        {{~/each}}
    </section>
{{~/each}}
</main>

<script>
{{> toc}};


    $('#sg-menu_wrap').toc({
        'selectors': '.sg-heading-section,.sg-heading-category,.sg-heading-article', //elements to use as headings
        'container': '#sg-main', //element to find all selectors in
        'smoothScrolling': function(target, options, callback) { //enable or disable smooth scrolling on click
            $(target).smoothScroller({
              offset: 50,
              speed: 10
            }).on('smoothScrollerComplete', function() {
              callback();
            });
        },
        'listType': '<ul class="sg-menu_list"></ul>',
        'prefix': 'sg', //prefix for anchor tags and class names
        'onHighlight': function(el) { //called when a new section is highlighted
            var $el = $(el);
            $el.closest('.sg-menu_category').addClass('sg-category-active')
            $('.sg-category-active').not($el.closest('.sg-menu_category')).removeClass('sg-category-active');
            expandCategory($el);
        },
        'activeClass': 'sg-toc-active',
        'highlightOnScroll': true, //add class to heading that is currently in focus
        'highlightOffset': 50, //offset to trigger the next headline
        'headerText': function(i, heading, $heading) { //custom function building the header-item text
            return $heading.text();
        },
        'itemClass': function(i, heading, $heading, prefix) { // custom function for item class
            //List items class="sg-menu_[section,category,article] sg-menu_item"
            return $heading.attr('class').replace('sg-heading-', 'sg-menu_').replace('sg-heading ', ' ') + ' sg-menu_item';
        }
    });

    function expandCategory($el) {
        if($el.hasClass('sg-menu_category')){
            $('.sg-category-active').removeClass('sg-category-active');
            $el.addClass('sg-category-active');
        }
    }

    $("#sg-menu_wrap").find('a').addClass('sg-menu_link').on('click', function(el){
        expandCategory($(el));
    });

    $('.sg-menu_article').each(function(i, el){
        var category = $(el).prevAll('.sg-menu_category')[0];
        $(el).appendTo(category);
    });

    $('.sg-menu_category').each(function(i, el){
        var section = $(el).prevAll('.sg-menu_section')[0];
        $(el).appendTo(section);
    }).each(function(i, el){
        $(this).find('.sg-menu_article').wrapAll('<ul class="sg-menu_list"></ul>');
    });

    (function(window,undefined){

      // Since jQuery really isn't required for this plugin, use `jQuery` as the
      // namespace only if it already exists, otherwise use the `Cowboy` namespace,
      // creating it if necessary.
      var $ = window.jQuery || window.Cowboy || ( window.Cowboy = {} ),

        // Internal method reference.
        jq_throttle;

      $.throttle = jq_throttle = function( delay, no_trailing, callback, debounce_mode ) {
        // After wrapper has stopped being called, this timeout ensures that
        // `callback` is executed at the proper times in `throttle` and `end`
        // debounce modes.
        var timeout_id,

          // Keep track of the last time `callback` was executed.
          last_exec = 0;

        // `no_trailing` defaults to falsy.
        if ( typeof no_trailing !== 'boolean' ) {
          debounce_mode = callback;
          callback = no_trailing;
          no_trailing = undefined;
        }

        // The `wrapper` function encapsulates all of the throttling / debouncing
        // functionality and when executed will limit the rate at which `callback`
        // is executed.
        function wrapper() {
          var that = this,
            elapsed = +new Date() - last_exec,
            args = arguments;

          // Execute `callback` and update the `last_exec` timestamp.
          function exec() {
            last_exec = +new Date();
            callback.apply( that, args );
          };

          // If `debounce_mode` is true (at_begin) this is used to clear the flag
          // to allow future `callback` executions.
          function clear() {
            timeout_id = undefined;
          };

          if ( debounce_mode && !timeout_id ) {
            // Since `wrapper` is being called for the first time and
            // `debounce_mode` is true (at_begin), execute `callback`.
            exec();
          }

          // Clear any existing timeout.
          timeout_id && clearTimeout( timeout_id );

          if ( debounce_mode === undefined && elapsed > delay ) {
            // In throttle mode, if `delay` time has been exceeded, execute
            // `callback`.
            exec();

          } else if ( no_trailing !== true ) {
            // In trailing throttle mode, since `delay` time has not been
            // exceeded, schedule `callback` to execute `delay` ms after most
            // recent execution.
            //
            // If `debounce_mode` is true (at_begin), schedule `clear` to execute
            // after `delay` ms.
            //
            // If `debounce_mode` is false (at end), schedule `callback` to
            // execute after `delay` ms.
            timeout_id = setTimeout( debounce_mode ? clear : exec, debounce_mode === undefined ? delay - elapsed : delay );
          }
        };

        // Set the guid of `wrapper` function to the same of original callback, so
        // it can be removed in jQuery 1.4+ .unbind or .die by using the original
        // callback as a reference.
        if ( $.guid ) {
          wrapper.guid = callback.guid = callback.guid || $.guid++;
        }

        // Return the wrapper function.
        return wrapper;
      };


      $.debounce = function( delay, at_begin, callback ) {
        return callback === undefined
          ? jq_throttle( delay, at_begin, false )
          : jq_throttle( delay, callback, at_begin !== false );
      };

    })(this);

    function checkMenuOffset($window){
        var targetOffset = $("#sg-main").offset().top;

        if ( $window.scrollTop() > targetOffset ) {
            $('#sg-menu').css({'position':'fixed'});
        } else {
            $('#sg-menu').css({'position':'absolute'});
        }
    }


    var $w = $(window).scroll($.debounce(5, false, function(){
        checkMenuOffset($w);
    }));

    $(function(){
        checkMenuOffset($w);
    });

</script>

</div>
